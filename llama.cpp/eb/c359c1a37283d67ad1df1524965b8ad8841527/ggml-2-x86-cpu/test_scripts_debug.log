+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.628 I build: 3793 (ebc359c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.771 I main: load the model and apply lora adapter, if any
0.00.024.814 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.010 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.100 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.112 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.113 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.117 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.121 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.122 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.123 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.123 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.124 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.133 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.134 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.135 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.136 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.137 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.377 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.353 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.531 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.540 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.541 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.542 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.542 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.543 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.544 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.547 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.548 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.549 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.550 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.552 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.560 I llama_model_loader: - type  f32:   37 tensors
0.00.197.564 I llama_model_loader: - type q8_0:  127 tensors
0.00.477.895 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.478.915 I llm_load_vocab: special tokens cache size = 5
0.00.537.075 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.537.132 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.537.133 I llm_load_print_meta: arch             = gemma
0.00.537.134 I llm_load_print_meta: vocab type       = SPM
0.00.537.135 I llm_load_print_meta: n_vocab          = 256000
0.00.537.137 I llm_load_print_meta: n_merges         = 0
0.00.537.137 I llm_load_print_meta: vocab_only       = 0
0.00.537.138 I llm_load_print_meta: n_ctx_train      = 8192
0.00.537.138 I llm_load_print_meta: n_embd           = 2048
0.00.537.139 I llm_load_print_meta: n_layer          = 18
0.00.537.172 I llm_load_print_meta: n_head           = 8
0.00.537.179 I llm_load_print_meta: n_head_kv        = 1
0.00.537.179 I llm_load_print_meta: n_rot            = 256
0.00.537.180 I llm_load_print_meta: n_swa            = 0
0.00.537.180 I llm_load_print_meta: n_embd_head_k    = 256
0.00.537.180 I llm_load_print_meta: n_embd_head_v    = 256
0.00.537.185 I llm_load_print_meta: n_gqa            = 8
0.00.537.189 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.537.194 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.537.195 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.537.196 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.537.197 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.537.197 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.537.198 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.537.203 I llm_load_print_meta: n_ff             = 16384
0.00.537.203 I llm_load_print_meta: n_expert         = 0
0.00.537.204 I llm_load_print_meta: n_expert_used    = 0
0.00.537.204 I llm_load_print_meta: causal attn      = 1
0.00.537.204 I llm_load_print_meta: pooling type     = 0
0.00.537.205 I llm_load_print_meta: rope type        = 2
0.00.537.205 I llm_load_print_meta: rope scaling     = linear
0.00.537.206 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.537.207 I llm_load_print_meta: freq_scale_train = 1
0.00.537.207 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.537.207 I llm_load_print_meta: rope_finetuned   = unknown
0.00.537.207 I llm_load_print_meta: ssm_d_conv       = 0
0.00.537.208 I llm_load_print_meta: ssm_d_inner      = 0
0.00.537.208 I llm_load_print_meta: ssm_d_state      = 0
0.00.537.208 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.537.209 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.537.210 I llm_load_print_meta: model type       = 2B
0.00.537.210 I llm_load_print_meta: model ftype      = Q8_0
0.00.537.211 I llm_load_print_meta: model params     = 2.51 B
0.00.537.212 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.537.212 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.537.213 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.537.214 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.537.214 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.537.214 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.537.215 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.537.215 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.537.216 I llm_load_print_meta: max token length = 93
0.00.537.385 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.638.245 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.638.257 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.638.258 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.638.259 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.638.259 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.638.260 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.643.969 I llama_new_context_with_model: n_ctx      = 8192
0.00.643.976 I llama_new_context_with_model: n_batch    = 2048
0.00.643.977 I llama_new_context_with_model: n_ubatch   = 512
0.00.643.977 I llama_new_context_with_model: flash_attn = 0
0.00.643.980 I llama_new_context_with_model: freq_base  = 10000.0
0.00.643.981 I llama_new_context_with_model: freq_scale = 1
0.00.673.500 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.673.542 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.673.661 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.675.092 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.675.098 I llama_new_context_with_model: graph nodes  = 601
0.00.675.098 I llama_new_context_with_model: graph splits = 1
0.00.675.115 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.288.095 I main: llama threadpool init, n_threads = 4
0.01.288.107 I 
0.01.288.204 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.288.208 I 
0.01.288.379 I sampler seed: 3847570358
0.01.288.391 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.288.395 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.288.396 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

I understand that the provided context does not contain information regarding the specific function or purpose of the text, which makes it challenging to determine the intended

0.14.819.877 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.25 tokens per second)
0.14.819.881 I llama_perf_context_print:        load time =    1285.24 ms
0.14.819.905 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.819.907 I llama_perf_context_print:        eval time =   13449.00 ms /    32 runs   (  420.28 ms per token,     2.38 tokens per second)
0.14.819.907 I llama_perf_context_print:       total time =   13531.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.661 I build: 3793 (ebc359c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.002.824 I main: load the model and apply lora adapter, if any
0.00.027.278 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.027.382 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.400 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.404 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.409 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.410 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.412 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.430 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.434 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.435 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.443 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.444 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.445 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.446 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.447 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.097.816 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.190.586 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.202.733 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.202.744 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.202.745 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.202.746 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.202.747 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.202.748 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.202.749 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.202.753 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.202.754 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.202.755 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.202.755 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.202.757 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.202.765 I llama_model_loader: - type  f32:   37 tensors
0.00.202.769 I llama_model_loader: - type q8_0:  127 tensors
0.00.500.829 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.867 I llm_load_vocab: special tokens cache size = 5
0.00.559.782 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.559.847 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.559.848 I llm_load_print_meta: arch             = gemma
0.00.559.849 I llm_load_print_meta: vocab type       = SPM
0.00.559.850 I llm_load_print_meta: n_vocab          = 256000
0.00.559.852 I llm_load_print_meta: n_merges         = 0
0.00.559.853 I llm_load_print_meta: vocab_only       = 0
0.00.559.854 I llm_load_print_meta: n_ctx_train      = 8192
0.00.559.854 I llm_load_print_meta: n_embd           = 2048
0.00.559.855 I llm_load_print_meta: n_layer          = 18
0.00.559.892 I llm_load_print_meta: n_head           = 8
0.00.559.900 I llm_load_print_meta: n_head_kv        = 1
0.00.559.902 I llm_load_print_meta: n_rot            = 256
0.00.559.902 I llm_load_print_meta: n_swa            = 0
0.00.559.915 I llm_load_print_meta: n_embd_head_k    = 256
0.00.559.918 I llm_load_print_meta: n_embd_head_v    = 256
0.00.559.925 I llm_load_print_meta: n_gqa            = 8
0.00.559.929 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.559.934 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.559.935 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.559.948 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.559.951 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.559.951 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.559.952 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.559.957 I llm_load_print_meta: n_ff             = 16384
0.00.559.958 I llm_load_print_meta: n_expert         = 0
0.00.559.958 I llm_load_print_meta: n_expert_used    = 0
0.00.559.958 I llm_load_print_meta: causal attn      = 1
0.00.559.959 I llm_load_print_meta: pooling type     = 0
0.00.559.959 I llm_load_print_meta: rope type        = 2
0.00.559.959 I llm_load_print_meta: rope scaling     = linear
0.00.559.960 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.559.961 I llm_load_print_meta: freq_scale_train = 1
0.00.559.961 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.559.962 I llm_load_print_meta: rope_finetuned   = unknown
0.00.559.962 I llm_load_print_meta: ssm_d_conv       = 0
0.00.559.962 I llm_load_print_meta: ssm_d_inner      = 0
0.00.559.972 I llm_load_print_meta: ssm_d_state      = 0
0.00.559.973 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.559.973 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.559.974 I llm_load_print_meta: model type       = 2B
0.00.559.975 I llm_load_print_meta: model ftype      = Q8_0
0.00.559.976 I llm_load_print_meta: model params     = 2.51 B
0.00.559.977 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.559.978 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.559.981 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.559.981 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.559.981 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.559.982 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.559.982 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.559.983 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.559.983 I llm_load_print_meta: max token length = 93
0.00.560.159 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.654.133 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.660.058 I llama_new_context_with_model: n_ctx      = 8192
0.00.660.066 I llama_new_context_with_model: n_batch    = 2048
0.00.660.067 I llama_new_context_with_model: n_ubatch   = 512
0.00.660.067 I llama_new_context_with_model: flash_attn = 0
0.00.660.071 I llama_new_context_with_model: freq_base  = 10000.0
0.00.660.072 I llama_new_context_with_model: freq_scale = 1
0.00.691.499 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.691.543 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.691.656 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.693.017 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.693.024 I llama_new_context_with_model: graph nodes  = 601
0.00.693.024 I llama_new_context_with_model: graph splits = 1
0.00.693.039 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.305.066 I main: llama threadpool init, n_threads = 4
0.01.305.077 I 
0.01.305.172 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.305.176 I 
0.01.305.342 I sampler seed: 1262991465
0.01.305.352 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.305.357 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.305.358 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities with a focus on the following aspects:

**1. Context and setting:**
- Historical context of the events
- Geographic location and landscape


0.14.893.471 I llama_perf_sampler_print:    sampling time =      49.64 ms /    33 runs   (    1.50 ms per token,   664.77 tokens per second)
0.14.893.474 I llama_perf_context_print:        load time =    1302.14 ms
0.14.893.499 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.893.501 I llama_perf_context_print:        eval time =   13504.25 ms /    32 runs   (  422.01 ms per token,     2.37 tokens per second)
0.14.893.502 I llama_perf_context_print:       total time =   13588.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.676 I build: 3793 (ebc359c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.883 I main: llama backend init
0.00.002.813 I main: load the model and apply lora adapter, if any
0.00.024.851 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.042 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.131 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.142 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.143 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.148 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.152 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.153 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.153 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.154 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.155 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.162 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.163 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.166 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.167 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.168 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.495 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.852 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.175 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.183 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.184 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.185 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.185 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.187 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.187 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.190 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.191 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.193 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.193 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.198.194 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.203 I llama_model_loader: - type  f32:   37 tensors
0.00.198.207 I llama_model_loader: - type q8_0:  127 tensors
0.00.494.014 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.074 I llm_load_vocab: special tokens cache size = 5
0.00.553.521 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.553.578 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.553.580 I llm_load_print_meta: arch             = gemma
0.00.553.581 I llm_load_print_meta: vocab type       = SPM
0.00.553.582 I llm_load_print_meta: n_vocab          = 256000
0.00.553.584 I llm_load_print_meta: n_merges         = 0
0.00.553.585 I llm_load_print_meta: vocab_only       = 0
0.00.553.585 I llm_load_print_meta: n_ctx_train      = 8192
0.00.553.586 I llm_load_print_meta: n_embd           = 2048
0.00.553.587 I llm_load_print_meta: n_layer          = 18
0.00.553.621 I llm_load_print_meta: n_head           = 8
0.00.553.630 I llm_load_print_meta: n_head_kv        = 1
0.00.553.632 I llm_load_print_meta: n_rot            = 256
0.00.553.632 I llm_load_print_meta: n_swa            = 0
0.00.553.633 I llm_load_print_meta: n_embd_head_k    = 256
0.00.553.633 I llm_load_print_meta: n_embd_head_v    = 256
0.00.553.638 I llm_load_print_meta: n_gqa            = 8
0.00.553.645 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.553.650 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.553.651 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.553.652 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.553.653 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.553.654 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.553.654 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.553.659 I llm_load_print_meta: n_ff             = 16384
0.00.553.660 I llm_load_print_meta: n_expert         = 0
0.00.553.660 I llm_load_print_meta: n_expert_used    = 0
0.00.553.661 I llm_load_print_meta: causal attn      = 1
0.00.553.661 I llm_load_print_meta: pooling type     = 0
0.00.553.661 I llm_load_print_meta: rope type        = 2
0.00.553.662 I llm_load_print_meta: rope scaling     = linear
0.00.553.664 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.553.665 I llm_load_print_meta: freq_scale_train = 1
0.00.553.665 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.553.665 I llm_load_print_meta: rope_finetuned   = unknown
0.00.553.666 I llm_load_print_meta: ssm_d_conv       = 0
0.00.553.666 I llm_load_print_meta: ssm_d_inner      = 0
0.00.553.667 I llm_load_print_meta: ssm_d_state      = 0
0.00.553.667 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.553.667 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.553.669 I llm_load_print_meta: model type       = 2B
0.00.553.670 I llm_load_print_meta: model ftype      = Q8_0
0.00.553.670 I llm_load_print_meta: model params     = 2.51 B
0.00.553.672 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.553.672 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.553.673 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.553.674 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.553.676 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.553.677 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.553.678 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.553.678 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.553.679 I llm_load_print_meta: max token length = 93
0.00.553.851 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.630.584 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.630.597 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.630.597 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.630.598 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.630.599 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.630.599 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.636.309 I llama_new_context_with_model: n_ctx      = 8192
0.00.636.317 I llama_new_context_with_model: n_batch    = 2048
0.00.636.318 I llama_new_context_with_model: n_ubatch   = 512
0.00.636.318 I llama_new_context_with_model: flash_attn = 0
0.00.636.322 I llama_new_context_with_model: freq_base  = 10000.0
0.00.636.322 I llama_new_context_with_model: freq_scale = 1
0.00.665.888 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.665.930 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.666.046 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.667.465 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.667.471 I llama_new_context_with_model: graph nodes  = 601
0.00.667.472 I llama_new_context_with_model: graph splits = 1
0.00.667.488 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.283.076 I main: llama threadpool init, n_threads = 4
0.01.283.089 I 
0.01.283.185 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.283.188 I 
0.01.283.347 I sampler seed: 836219757
0.01.283.357 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.283.361 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.283.362 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically, as if the speaker is experiencing a rapid and uncontrolled descent into madness.

I am a madman, a creature of chaos and anarchy. I see

0.14.877.380 I llama_perf_sampler_print:    sampling time =      49.39 ms /    33 runs   (    1.50 ms per token,   668.12 tokens per second)
0.14.877.384 I llama_perf_context_print:        load time =    1280.18 ms
0.14.877.386 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.877.398 I llama_perf_context_print:        eval time =   13511.91 ms /    32 runs   (  422.25 ms per token,     2.37 tokens per second)
0.14.877.400 I llama_perf_context_print:       total time =   13594.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.642 I build: 3793 (ebc359c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.002.776 I main: load the model and apply lora adapter, if any
0.00.024.805 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.998 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.088 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.099 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.101 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.105 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.109 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.110 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.110 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.111 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.113 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.120 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.121 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.122 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.123 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.124 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.436 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.899 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.095 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.103 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.104 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.105 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.106 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.107 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.107 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.110 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.111 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.112 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.112 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.198.114 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.121 I llama_model_loader: - type  f32:   37 tensors
0.00.198.125 I llama_model_loader: - type q8_0:  127 tensors
0.00.486.450 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.487.480 I llm_load_vocab: special tokens cache size = 5
0.00.545.459 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.545.514 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.545.515 I llm_load_print_meta: arch             = gemma
0.00.545.516 I llm_load_print_meta: vocab type       = SPM
0.00.545.517 I llm_load_print_meta: n_vocab          = 256000
0.00.545.519 I llm_load_print_meta: n_merges         = 0
0.00.545.519 I llm_load_print_meta: vocab_only       = 0
0.00.545.520 I llm_load_print_meta: n_ctx_train      = 8192
0.00.545.520 I llm_load_print_meta: n_embd           = 2048
0.00.545.520 I llm_load_print_meta: n_layer          = 18
0.00.545.554 I llm_load_print_meta: n_head           = 8
0.00.545.561 I llm_load_print_meta: n_head_kv        = 1
0.00.545.561 I llm_load_print_meta: n_rot            = 256
0.00.545.562 I llm_load_print_meta: n_swa            = 0
0.00.545.562 I llm_load_print_meta: n_embd_head_k    = 256
0.00.545.562 I llm_load_print_meta: n_embd_head_v    = 256
0.00.545.567 I llm_load_print_meta: n_gqa            = 8
0.00.545.571 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.545.576 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.545.577 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.545.578 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.545.579 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.545.579 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.545.579 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.545.584 I llm_load_print_meta: n_ff             = 16384
0.00.545.584 I llm_load_print_meta: n_expert         = 0
0.00.545.585 I llm_load_print_meta: n_expert_used    = 0
0.00.545.585 I llm_load_print_meta: causal attn      = 1
0.00.545.585 I llm_load_print_meta: pooling type     = 0
0.00.545.586 I llm_load_print_meta: rope type        = 2
0.00.545.586 I llm_load_print_meta: rope scaling     = linear
0.00.545.588 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.545.588 I llm_load_print_meta: freq_scale_train = 1
0.00.545.589 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.545.589 I llm_load_print_meta: rope_finetuned   = unknown
0.00.545.589 I llm_load_print_meta: ssm_d_conv       = 0
0.00.545.589 I llm_load_print_meta: ssm_d_inner      = 0
0.00.545.590 I llm_load_print_meta: ssm_d_state      = 0
0.00.545.590 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.545.590 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.545.591 I llm_load_print_meta: model type       = 2B
0.00.545.592 I llm_load_print_meta: model ftype      = Q8_0
0.00.545.593 I llm_load_print_meta: model params     = 2.51 B
0.00.545.593 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.545.594 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.545.594 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.545.595 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.545.595 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.545.596 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.545.596 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.545.596 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.545.597 I llm_load_print_meta: max token length = 93
0.00.545.766 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.616.642 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.616.653 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.622.403 I llama_new_context_with_model: n_ctx      = 8192
0.00.622.412 I llama_new_context_with_model: n_batch    = 2048
0.00.622.413 I llama_new_context_with_model: n_ubatch   = 512
0.00.622.413 I llama_new_context_with_model: flash_attn = 0
0.00.622.417 I llama_new_context_with_model: freq_base  = 10000.0
0.00.622.418 I llama_new_context_with_model: freq_scale = 1
0.00.652.954 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.652.997 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.653.115 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.654.488 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.654.495 I llama_new_context_with_model: graph nodes  = 601
0.00.654.495 I llama_new_context_with_model: graph splits = 1
0.00.654.512 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.274.009 I main: llama threadpool init, n_threads = 4
0.01.274.021 I 
0.01.274.112 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.274.116 I 
0.01.274.274 I sampler seed: 3335791839
0.01.274.284 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.274.289 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.274.290 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically, highlighting the increasing urgency of the climate crisis.

The Earth is groaning. Its voice is a symphony of distress, echoing through the vast plains and

0.14.820.611 I llama_perf_sampler_print:    sampling time =      49.32 ms /    33 runs   (    1.49 ms per token,   669.05 tokens per second)
0.14.820.614 I llama_perf_context_print:        load time =    1271.15 ms
0.14.820.616 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.820.617 I llama_perf_context_print:        eval time =   13463.93 ms /    32 runs   (  420.75 ms per token,     2.38 tokens per second)
0.14.820.618 I llama_perf_context_print:       total time =   13546.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m10.020s
user	3m49.516s
sys	0m9.583s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3793 (ebc359c1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199095.04 ms
main:    total time = 199095.04 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.635 I build: 3793 (ebc359c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.818 I main: llama backend init
0.00.002.743 I main: load the model and apply lora adapter, if any
0.00.024.761 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.950 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.040 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.052 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.053 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.057 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.058 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.059 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.060 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.061 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.062 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.070 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.074 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.075 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.076 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.076 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.273 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.159 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.364 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.373 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.374 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.375 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.376 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.377 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.378 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.381 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.382 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.383 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.384 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.385 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.396 I llama_model_loader: - type  f32:   37 tensors
0.00.197.400 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.401 I llama_model_loader: - type q6_K:   19 tensors
0.00.482.078 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.483.131 I llm_load_vocab: special tokens cache size = 5
0.00.541.169 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.541.229 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.541.231 I llm_load_print_meta: arch             = gemma
0.00.541.232 I llm_load_print_meta: vocab type       = SPM
0.00.541.243 I llm_load_print_meta: n_vocab          = 256000
0.00.541.248 I llm_load_print_meta: n_merges         = 0
0.00.541.249 I llm_load_print_meta: vocab_only       = 0
0.00.541.249 I llm_load_print_meta: n_ctx_train      = 8192
0.00.541.250 I llm_load_print_meta: n_embd           = 2048
0.00.541.250 I llm_load_print_meta: n_layer          = 18
0.00.541.286 I llm_load_print_meta: n_head           = 8
0.00.541.296 I llm_load_print_meta: n_head_kv        = 1
0.00.541.296 I llm_load_print_meta: n_rot            = 256
0.00.541.297 I llm_load_print_meta: n_swa            = 0
0.00.541.298 I llm_load_print_meta: n_embd_head_k    = 256
0.00.541.298 I llm_load_print_meta: n_embd_head_v    = 256
0.00.541.303 I llm_load_print_meta: n_gqa            = 8
0.00.541.308 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.541.313 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.541.317 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.541.319 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.541.319 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.541.319 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.541.320 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.541.325 I llm_load_print_meta: n_ff             = 16384
0.00.541.325 I llm_load_print_meta: n_expert         = 0
0.00.541.326 I llm_load_print_meta: n_expert_used    = 0
0.00.541.327 I llm_load_print_meta: causal attn      = 1
0.00.541.327 I llm_load_print_meta: pooling type     = 0
0.00.541.328 I llm_load_print_meta: rope type        = 2
0.00.541.328 I llm_load_print_meta: rope scaling     = linear
0.00.541.330 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.541.330 I llm_load_print_meta: freq_scale_train = 1
0.00.541.344 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.541.345 I llm_load_print_meta: rope_finetuned   = unknown
0.00.541.345 I llm_load_print_meta: ssm_d_conv       = 0
0.00.541.354 I llm_load_print_meta: ssm_d_inner      = 0
0.00.541.355 I llm_load_print_meta: ssm_d_state      = 0
0.00.541.356 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.541.357 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.541.358 I llm_load_print_meta: model type       = 2B
0.00.541.359 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.541.361 I llm_load_print_meta: model params     = 2.51 B
0.00.541.361 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.541.362 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.541.362 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.541.363 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.541.363 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.541.364 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.541.364 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.541.365 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.541.365 I llm_load_print_meta: max token length = 93
0.00.541.542 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.601.149 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.601.158 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.601.159 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.601.159 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.601.160 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.601.161 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.606.817 I llama_new_context_with_model: n_ctx      = 8192
0.00.606.825 I llama_new_context_with_model: n_batch    = 2048
0.00.606.825 I llama_new_context_with_model: n_ubatch   = 512
0.00.606.826 I llama_new_context_with_model: flash_attn = 0
0.00.606.828 I llama_new_context_with_model: freq_base  = 10000.0
0.00.606.829 I llama_new_context_with_model: freq_scale = 1
0.00.636.724 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.636.763 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.636.873 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.638.209 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.638.216 I llama_new_context_with_model: graph nodes  = 601
0.00.638.216 I llama_new_context_with_model: graph splits = 1
0.00.638.232 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.222.365 I main: llama threadpool init, n_threads = 4
0.01.222.376 I 
0.01.222.468 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.222.472 I 
0.01.222.631 I sampler seed: 2304910163
0.01.222.642 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.222.646 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.222.647 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically. [end of text]


0.02.605.182 I llama_perf_sampler_print:    sampling time =       6.25 ms /     5 runs   (    1.25 ms per token,   799.74 tokens per second)
0.02.605.198 I llama_perf_context_print:        load time =    1219.55 ms
0.02.605.200 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.605.201 I llama_perf_context_print:        eval time =    1370.71 ms /     4 runs   (  342.68 ms per token,     2.92 tokens per second)
0.02.605.202 I llama_perf_context_print:       total time =    1382.83 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3793 (ebc359c1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199056.34 ms
main:    total time = 199056.34 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.618 I build: 3793 (ebc359c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.821 I main: llama backend init
0.00.002.778 I main: load the model and apply lora adapter, if any
0.00.024.811 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.904 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.919 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.923 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.927 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.928 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.930 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.930 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.932 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.933 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.939 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.941 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.942 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.943 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.943 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.107 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.355 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.543 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.551 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.552 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.553 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.553 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.555 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.555 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.560 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.561 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.571 I llama_model_loader: - type  f32:   37 tensors
0.00.197.576 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.577 I llama_model_loader: - type q6_K:   19 tensors
0.00.495.082 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.079 I llm_load_vocab: special tokens cache size = 5
0.00.554.165 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.554.225 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.554.226 I llm_load_print_meta: arch             = gemma
0.00.554.228 I llm_load_print_meta: vocab type       = SPM
0.00.554.228 I llm_load_print_meta: n_vocab          = 256000
0.00.554.231 I llm_load_print_meta: n_merges         = 0
0.00.554.231 I llm_load_print_meta: vocab_only       = 0
0.00.554.232 I llm_load_print_meta: n_ctx_train      = 8192
0.00.554.232 I llm_load_print_meta: n_embd           = 2048
0.00.554.233 I llm_load_print_meta: n_layer          = 18
0.00.554.271 I llm_load_print_meta: n_head           = 8
0.00.554.278 I llm_load_print_meta: n_head_kv        = 1
0.00.554.278 I llm_load_print_meta: n_rot            = 256
0.00.554.279 I llm_load_print_meta: n_swa            = 0
0.00.554.279 I llm_load_print_meta: n_embd_head_k    = 256
0.00.554.279 I llm_load_print_meta: n_embd_head_v    = 256
0.00.554.284 I llm_load_print_meta: n_gqa            = 8
0.00.554.288 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.554.293 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.554.294 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.554.295 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.554.296 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.554.296 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.554.296 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.554.301 I llm_load_print_meta: n_ff             = 16384
0.00.554.301 I llm_load_print_meta: n_expert         = 0
0.00.554.302 I llm_load_print_meta: n_expert_used    = 0
0.00.554.302 I llm_load_print_meta: causal attn      = 1
0.00.554.303 I llm_load_print_meta: pooling type     = 0
0.00.554.303 I llm_load_print_meta: rope type        = 2
0.00.554.303 I llm_load_print_meta: rope scaling     = linear
0.00.554.304 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.554.305 I llm_load_print_meta: freq_scale_train = 1
0.00.554.305 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.554.306 I llm_load_print_meta: rope_finetuned   = unknown
0.00.554.306 I llm_load_print_meta: ssm_d_conv       = 0
0.00.554.307 I llm_load_print_meta: ssm_d_inner      = 0
0.00.554.307 I llm_load_print_meta: ssm_d_state      = 0
0.00.554.307 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.554.308 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.554.326 I llm_load_print_meta: model type       = 2B
0.00.554.327 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.554.328 I llm_load_print_meta: model params     = 2.51 B
0.00.554.330 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.554.330 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.554.331 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.554.331 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.554.332 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.554.332 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.554.332 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.554.333 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.554.333 I llm_load_print_meta: max token length = 93
0.00.554.515 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.611.701 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.617.274 I llama_new_context_with_model: n_ctx      = 8192
0.00.617.282 I llama_new_context_with_model: n_batch    = 2048
0.00.617.282 I llama_new_context_with_model: n_ubatch   = 512
0.00.617.283 I llama_new_context_with_model: flash_attn = 0
0.00.617.287 I llama_new_context_with_model: freq_base  = 10000.0
0.00.617.288 I llama_new_context_with_model: freq_scale = 1
0.00.647.247 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.647.291 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.647.415 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.648.778 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.648.784 I llama_new_context_with_model: graph nodes  = 601
0.00.648.784 I llama_new_context_with_model: graph splits = 1
0.00.648.801 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.229.976 I main: llama threadpool init, n_threads = 4
0.01.229.987 I 
0.01.230.083 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.230.086 I 
0.01.230.253 I sampler seed: 4062674576
0.01.230.263 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.230.268 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.230.268 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally.

I am unable to generate a response because the prompt contains a misspelling. The correct spelling is "asynchronous". [end of text]


0.10.871.726 I llama_perf_sampler_print:    sampling time =      43.08 ms /    29 runs   (    1.49 ms per token,   673.12 tokens per second)
0.10.871.730 I llama_perf_context_print:        load time =    1227.12 ms
0.10.871.742 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.871.744 I llama_perf_context_print:        eval time =    9569.18 ms /    28 runs   (  341.76 ms per token,     2.93 tokens per second)
0.10.871.745 I llama_perf_context_print:       total time =    9641.76 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m54.621s
user	49m36.475s
sys	0m6.535s
