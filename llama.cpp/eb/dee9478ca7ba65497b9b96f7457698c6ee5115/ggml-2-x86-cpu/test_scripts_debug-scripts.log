+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 4375 (ebdee947) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.892 I main: llama backend init
0.00.000.900 I main: load the model and apply lora adapter, if any
0.00.023.761 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.773 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.863 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.875 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.878 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.884 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.888 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.890 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.891 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.892 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.894 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.900 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.902 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.903 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.905 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.907 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.243.553 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.346.463 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.371.180 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.371.196 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.371.197 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.371.198 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.371.199 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.371.201 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.371.202 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.371.207 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.371.209 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.371.210 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.371.211 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.371.213 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.371.223 I llama_model_loader: - type  f32:   37 tensors
0.00.371.225 I llama_model_loader: - type q8_0:  127 tensors
0.00.598.638 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.659.491 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.660.409 I llm_load_vocab: special tokens cache size = 5
0.00.872.058 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.872.135 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.872.137 I llm_load_print_meta: arch             = gemma
0.00.872.137 I llm_load_print_meta: vocab type       = SPM
0.00.872.139 I llm_load_print_meta: n_vocab          = 256000
0.00.872.141 I llm_load_print_meta: n_merges         = 0
0.00.872.142 I llm_load_print_meta: vocab_only       = 0
0.00.872.142 I llm_load_print_meta: n_ctx_train      = 8192
0.00.872.142 I llm_load_print_meta: n_embd           = 2048
0.00.872.143 I llm_load_print_meta: n_layer          = 18
0.00.872.207 I llm_load_print_meta: n_head           = 8
0.00.872.215 I llm_load_print_meta: n_head_kv        = 1
0.00.872.216 I llm_load_print_meta: n_rot            = 256
0.00.872.217 I llm_load_print_meta: n_swa            = 0
0.00.872.217 I llm_load_print_meta: n_embd_head_k    = 256
0.00.872.218 I llm_load_print_meta: n_embd_head_v    = 256
0.00.872.223 I llm_load_print_meta: n_gqa            = 8
0.00.872.229 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.872.234 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.872.236 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.872.237 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.872.237 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.872.238 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.872.239 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.872.255 I llm_load_print_meta: n_ff             = 16384
0.00.872.257 I llm_load_print_meta: n_expert         = 0
0.00.872.257 I llm_load_print_meta: n_expert_used    = 0
0.00.872.257 I llm_load_print_meta: causal attn      = 1
0.00.872.258 I llm_load_print_meta: pooling type     = 0
0.00.872.258 I llm_load_print_meta: rope type        = 2
0.00.872.259 I llm_load_print_meta: rope scaling     = linear
0.00.872.260 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.872.261 I llm_load_print_meta: freq_scale_train = 1
0.00.872.272 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.872.273 I llm_load_print_meta: rope_finetuned   = unknown
0.00.872.274 I llm_load_print_meta: ssm_d_conv       = 0
0.00.872.274 I llm_load_print_meta: ssm_d_inner      = 0
0.00.872.275 I llm_load_print_meta: ssm_d_state      = 0
0.00.872.275 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.872.276 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.872.277 I llm_load_print_meta: model type       = 2B
0.00.872.279 I llm_load_print_meta: model ftype      = Q8_0
0.00.872.280 I llm_load_print_meta: model params     = 2.51 B
0.00.872.281 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.872.282 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.872.283 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.872.283 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.872.284 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.872.285 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.872.285 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.872.286 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.872.292 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.872.293 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.872.294 I llm_load_print_meta: max token length = 93
0.00.975.005 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.975.013 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.975.014 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.975.015 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.975.016 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.975.016 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.980.902 I llama_new_context_with_model: n_seq_max     = 1
0.00.980.909 I llama_new_context_with_model: n_ctx         = 4096
0.00.980.910 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.980.910 I llama_new_context_with_model: n_batch       = 2048
0.00.980.911 I llama_new_context_with_model: n_ubatch      = 512
0.00.980.911 I llama_new_context_with_model: flash_attn    = 0
0.00.980.913 I llama_new_context_with_model: freq_base     = 10000.0
0.00.980.914 I llama_new_context_with_model: freq_scale    = 1
0.00.980.915 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.980.996 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.995.686 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.995.724 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.995.846 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.998.457 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.998.462 I llama_new_context_with_model: graph nodes  = 601
0.00.998.462 I llama_new_context_with_model: graph splits = 1
0.00.998.486 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.998.489 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.609.126 I main: llama threadpool init, n_threads = 4
0.01.609.141 I 
0.01.609.270 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.609.274 I 
0.01.609.513 I sampler seed: 3149631330
0.01.609.529 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.609.539 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.609.540 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.609.540 I 
 increasities, and the occasional outburst of frustration.

She's got a fiery spirit, a quick wit, and a knack for turning everyday moments into something

0.15.069.007 I llama_perf_sampler_print:    sampling time =      49.76 ms /    33 runs   (    1.51 ms per token,   663.21 tokens per second)
0.15.069.010 I llama_perf_context_print:        load time =    1608.13 ms
0.15.069.022 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.069.024 I llama_perf_context_print:        eval time =   13370.17 ms /    32 runs   (  417.82 ms per token,     2.39 tokens per second)
0.15.069.025 I llama_perf_context_print:       total time =   13459.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 4375 (ebdee947) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.000.867 I main: load the model and apply lora adapter, if any
0.00.023.290 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.384 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.398 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.400 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.405 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.409 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.411 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.412 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.413 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.415 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.420 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.422 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.423 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.424 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.434 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.233.830 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.336.460 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.361.065 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.361.075 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.361.077 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.361.078 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.361.079 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.361.081 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.361.082 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.361.087 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.361.089 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.361.090 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.361.091 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.361.093 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.361.102 I llama_model_loader: - type  f32:   37 tensors
0.00.361.104 I llama_model_loader: - type q8_0:  127 tensors
0.00.579.872 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.635.961 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.636.849 I llm_load_vocab: special tokens cache size = 5
0.00.826.451 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.826.528 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.826.529 I llm_load_print_meta: arch             = gemma
0.00.826.530 I llm_load_print_meta: vocab type       = SPM
0.00.826.531 I llm_load_print_meta: n_vocab          = 256000
0.00.826.533 I llm_load_print_meta: n_merges         = 0
0.00.826.534 I llm_load_print_meta: vocab_only       = 0
0.00.826.534 I llm_load_print_meta: n_ctx_train      = 8192
0.00.826.535 I llm_load_print_meta: n_embd           = 2048
0.00.826.535 I llm_load_print_meta: n_layer          = 18
0.00.826.601 I llm_load_print_meta: n_head           = 8
0.00.826.609 I llm_load_print_meta: n_head_kv        = 1
0.00.826.609 I llm_load_print_meta: n_rot            = 256
0.00.826.610 I llm_load_print_meta: n_swa            = 0
0.00.826.610 I llm_load_print_meta: n_embd_head_k    = 256
0.00.826.611 I llm_load_print_meta: n_embd_head_v    = 256
0.00.826.616 I llm_load_print_meta: n_gqa            = 8
0.00.826.621 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.826.625 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.826.627 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.826.628 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.826.628 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.826.629 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.826.629 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.826.634 I llm_load_print_meta: n_ff             = 16384
0.00.826.635 I llm_load_print_meta: n_expert         = 0
0.00.826.635 I llm_load_print_meta: n_expert_used    = 0
0.00.826.636 I llm_load_print_meta: causal attn      = 1
0.00.826.637 I llm_load_print_meta: pooling type     = 0
0.00.826.638 I llm_load_print_meta: rope type        = 2
0.00.826.639 I llm_load_print_meta: rope scaling     = linear
0.00.826.640 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.826.641 I llm_load_print_meta: freq_scale_train = 1
0.00.826.641 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.826.641 I llm_load_print_meta: rope_finetuned   = unknown
0.00.826.642 I llm_load_print_meta: ssm_d_conv       = 0
0.00.826.642 I llm_load_print_meta: ssm_d_inner      = 0
0.00.826.643 I llm_load_print_meta: ssm_d_state      = 0
0.00.826.648 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.826.648 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.826.649 I llm_load_print_meta: model type       = 2B
0.00.826.650 I llm_load_print_meta: model ftype      = Q8_0
0.00.826.659 I llm_load_print_meta: model params     = 2.51 B
0.00.826.660 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.826.661 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.826.661 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.826.674 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.826.675 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.826.676 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.826.679 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.826.680 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.826.686 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.826.688 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.826.688 I llm_load_print_meta: max token length = 93
0.00.923.707 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.929.857 I llama_new_context_with_model: n_seq_max     = 1
0.00.929.865 I llama_new_context_with_model: n_ctx         = 4096
0.00.929.865 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.929.866 I llama_new_context_with_model: n_batch       = 2048
0.00.929.866 I llama_new_context_with_model: n_ubatch      = 512
0.00.929.867 I llama_new_context_with_model: flash_attn    = 0
0.00.929.869 I llama_new_context_with_model: freq_base     = 10000.0
0.00.929.870 I llama_new_context_with_model: freq_scale    = 1
0.00.929.871 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.929.959 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.944.646 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.944.688 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.944.810 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.947.383 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.947.387 I llama_new_context_with_model: graph nodes  = 601
0.00.947.388 I llama_new_context_with_model: graph splits = 1
0.00.947.410 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.947.413 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.559.578 I main: llama threadpool init, n_threads = 4
0.01.559.595 I 
0.01.559.720 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.559.724 I 
0.01.559.955 I sampler seed: 2229673498
0.01.559.968 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.559.978 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.559.979 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.559.979 I 
 increably.

I cannot answer this question as it contains offensive language that is inappropriate. [end of text]


0.09.693.089 I llama_perf_sampler_print:    sampling time =      29.49 ms /    20 runs   (    1.47 ms per token,   678.26 tokens per second)
0.09.693.102 I llama_perf_context_print:        load time =    1558.62 ms
0.09.693.105 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.693.107 I llama_perf_context_print:        eval time =    8079.17 ms /    19 runs   (  425.22 ms per token,     2.35 tokens per second)
0.09.693.108 I llama_perf_context_print:       total time =    8133.52 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4375 (ebdee947) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.000.846 I main: load the model and apply lora adapter, if any
0.00.023.101 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.110 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.199 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.211 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.213 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.219 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.221 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.223 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.227 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.228 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.229 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.235 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.236 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.237 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.239 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.240 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.249.634 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.352.134 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.376.740 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.376.750 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.376.752 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.376.753 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.376.755 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.376.756 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.376.757 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.376.761 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.376.762 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.376.764 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.376.765 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.376.767 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.376.776 I llama_model_loader: - type  f32:   37 tensors
0.00.376.779 I llama_model_loader: - type q8_0:  127 tensors
0.00.617.970 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.686.200 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.687.188 I llm_load_vocab: special tokens cache size = 5
0.00.893.126 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.893.200 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.893.201 I llm_load_print_meta: arch             = gemma
0.00.893.202 I llm_load_print_meta: vocab type       = SPM
0.00.893.203 I llm_load_print_meta: n_vocab          = 256000
0.00.893.205 I llm_load_print_meta: n_merges         = 0
0.00.893.205 I llm_load_print_meta: vocab_only       = 0
0.00.893.206 I llm_load_print_meta: n_ctx_train      = 8192
0.00.893.206 I llm_load_print_meta: n_embd           = 2048
0.00.893.207 I llm_load_print_meta: n_layer          = 18
0.00.893.271 I llm_load_print_meta: n_head           = 8
0.00.893.279 I llm_load_print_meta: n_head_kv        = 1
0.00.893.280 I llm_load_print_meta: n_rot            = 256
0.00.893.280 I llm_load_print_meta: n_swa            = 0
0.00.893.280 I llm_load_print_meta: n_embd_head_k    = 256
0.00.893.281 I llm_load_print_meta: n_embd_head_v    = 256
0.00.893.285 I llm_load_print_meta: n_gqa            = 8
0.00.893.290 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.893.295 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.893.296 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.893.297 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.893.298 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.893.298 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.893.298 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.893.304 I llm_load_print_meta: n_ff             = 16384
0.00.893.305 I llm_load_print_meta: n_expert         = 0
0.00.893.306 I llm_load_print_meta: n_expert_used    = 0
0.00.893.306 I llm_load_print_meta: causal attn      = 1
0.00.893.307 I llm_load_print_meta: pooling type     = 0
0.00.893.307 I llm_load_print_meta: rope type        = 2
0.00.893.308 I llm_load_print_meta: rope scaling     = linear
0.00.893.309 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.893.310 I llm_load_print_meta: freq_scale_train = 1
0.00.893.310 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.893.311 I llm_load_print_meta: rope_finetuned   = unknown
0.00.893.311 I llm_load_print_meta: ssm_d_conv       = 0
0.00.893.313 I llm_load_print_meta: ssm_d_inner      = 0
0.00.893.313 I llm_load_print_meta: ssm_d_state      = 0
0.00.893.314 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.893.314 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.893.315 I llm_load_print_meta: model type       = 2B
0.00.893.316 I llm_load_print_meta: model ftype      = Q8_0
0.00.893.316 I llm_load_print_meta: model params     = 2.51 B
0.00.893.318 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.893.318 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.893.319 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.893.320 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.893.320 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.893.321 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.893.321 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.893.321 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.893.327 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.893.328 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.893.329 I llm_load_print_meta: max token length = 93
0.00.971.784 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.971.795 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.971.796 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.971.797 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.971.798 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.971.798 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.977.616 I llama_new_context_with_model: n_seq_max     = 1
0.00.977.623 I llama_new_context_with_model: n_ctx         = 4096
0.00.977.624 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.977.624 I llama_new_context_with_model: n_batch       = 2048
0.00.977.624 I llama_new_context_with_model: n_ubatch      = 512
0.00.977.625 I llama_new_context_with_model: flash_attn    = 0
0.00.977.628 I llama_new_context_with_model: freq_base     = 10000.0
0.00.977.628 I llama_new_context_with_model: freq_scale    = 1
0.00.977.629 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.977.717 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.992.455 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.992.491 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.992.639 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.995.279 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.995.283 I llama_new_context_with_model: graph nodes  = 601
0.00.995.283 I llama_new_context_with_model: graph splits = 1
0.00.995.306 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.995.309 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.606.265 I main: llama threadpool init, n_threads = 4
0.01.606.282 I 
0.01.606.402 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.606.406 I 
0.01.606.640 I sampler seed: 3080584532
0.01.606.655 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.606.664 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.606.668 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.606.668 I 
 increably, and with the grace and elegance of a ballerina. [end of text]


0.07.509.664 I llama_perf_sampler_print:    sampling time =      21.83 ms /    15 runs   (    1.46 ms per token,   687.25 tokens per second)
0.07.509.667 I llama_perf_context_print:        load time =    1605.33 ms
0.07.509.669 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.509.670 I llama_perf_context_print:        eval time =    5863.36 ms /    14 runs   (  418.81 ms per token,     2.39 tokens per second)
0.07.509.671 I llama_perf_context_print:       total time =    5903.41 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.690 I build: 4375 (ebdee947) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.893 I main: llama backend init
0.00.000.901 I main: load the model and apply lora adapter, if any
0.00.023.579 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.594 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.690 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.704 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.706 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.713 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.718 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.719 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.720 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.723 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.725 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.733 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.734 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.736 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.738 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.739 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.476 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.717 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.288 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.299 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.300 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.302 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.303 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.305 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.306 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.310 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.311 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.313 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.314 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.354.316 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.324 I llama_model_loader: - type  f32:   37 tensors
0.00.354.327 I llama_model_loader: - type q8_0:  127 tensors
0.00.573.055 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.634.963 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.635.872 I llm_load_vocab: special tokens cache size = 5
0.00.822.820 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.822.892 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.822.896 I llm_load_print_meta: arch             = gemma
0.00.822.897 I llm_load_print_meta: vocab type       = SPM
0.00.822.898 I llm_load_print_meta: n_vocab          = 256000
0.00.822.900 I llm_load_print_meta: n_merges         = 0
0.00.822.901 I llm_load_print_meta: vocab_only       = 0
0.00.822.901 I llm_load_print_meta: n_ctx_train      = 8192
0.00.822.901 I llm_load_print_meta: n_embd           = 2048
0.00.822.902 I llm_load_print_meta: n_layer          = 18
0.00.822.966 I llm_load_print_meta: n_head           = 8
0.00.822.976 I llm_load_print_meta: n_head_kv        = 1
0.00.822.976 I llm_load_print_meta: n_rot            = 256
0.00.822.977 I llm_load_print_meta: n_swa            = 0
0.00.822.977 I llm_load_print_meta: n_embd_head_k    = 256
0.00.822.978 I llm_load_print_meta: n_embd_head_v    = 256
0.00.822.984 I llm_load_print_meta: n_gqa            = 8
0.00.822.988 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.822.996 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.822.997 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.822.998 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.823.000 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.823.000 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.823.001 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.823.006 I llm_load_print_meta: n_ff             = 16384
0.00.823.007 I llm_load_print_meta: n_expert         = 0
0.00.823.008 I llm_load_print_meta: n_expert_used    = 0
0.00.823.008 I llm_load_print_meta: causal attn      = 1
0.00.823.009 I llm_load_print_meta: pooling type     = 0
0.00.823.009 I llm_load_print_meta: rope type        = 2
0.00.823.010 I llm_load_print_meta: rope scaling     = linear
0.00.823.012 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.823.012 I llm_load_print_meta: freq_scale_train = 1
0.00.823.013 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.823.013 I llm_load_print_meta: rope_finetuned   = unknown
0.00.823.014 I llm_load_print_meta: ssm_d_conv       = 0
0.00.823.014 I llm_load_print_meta: ssm_d_inner      = 0
0.00.823.015 I llm_load_print_meta: ssm_d_state      = 0
0.00.823.015 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.823.016 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.823.017 I llm_load_print_meta: model type       = 2B
0.00.823.018 I llm_load_print_meta: model ftype      = Q8_0
0.00.823.019 I llm_load_print_meta: model params     = 2.51 B
0.00.823.020 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.823.020 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.823.021 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.823.022 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.823.022 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.823.023 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.823.023 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.823.024 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.823.030 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.823.031 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.823.032 I llm_load_print_meta: max token length = 93
0.00.896.039 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.896.049 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.901.959 I llama_new_context_with_model: n_seq_max     = 1
0.00.901.965 I llama_new_context_with_model: n_ctx         = 4096
0.00.901.965 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.901.966 I llama_new_context_with_model: n_batch       = 2048
0.00.901.966 I llama_new_context_with_model: n_ubatch      = 512
0.00.901.967 I llama_new_context_with_model: flash_attn    = 0
0.00.901.970 I llama_new_context_with_model: freq_base     = 10000.0
0.00.901.971 I llama_new_context_with_model: freq_scale    = 1
0.00.901.972 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.902.059 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.916.625 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.916.665 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.916.784 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.919.522 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.919.526 I llama_new_context_with_model: graph nodes  = 601
0.00.919.526 I llama_new_context_with_model: graph splits = 1
0.00.919.548 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.919.551 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.532.320 I main: llama threadpool init, n_threads = 4
0.01.532.335 I 
0.01.532.463 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.532.467 I 
0.01.532.705 I sampler seed: 1733415559
0.01.532.720 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.532.730 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.532.732 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.532.732 I 
 seconary clauses. [end of text]


0.03.648.619 I llama_perf_sampler_print:    sampling time =       7.87 ms /     6 runs   (    1.31 ms per token,   762.39 tokens per second)
0.03.648.635 I llama_perf_context_print:        load time =    1531.31 ms
0.03.648.636 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.648.638 I llama_perf_context_print:        eval time =    2099.65 ms /     5 runs   (  419.93 ms per token,     2.38 tokens per second)
0.03.648.638 I llama_perf_context_print:       total time =    2116.31 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m45.678s
user	2m12.179s
sys	0m9.350s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4375 (ebdee947)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185933.35 ms
main:    total time = 185933.35 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4375 (ebdee947) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.000.856 I main: load the model and apply lora adapter, if any
0.00.023.569 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.580 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.673 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.685 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.687 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.693 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.695 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.696 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.698 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.699 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.701 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.708 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.710 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.711 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.713 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.715 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.931 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.491 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.077 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.089 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.090 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.092 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.093 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.095 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.096 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.101 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.102 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.104 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.355.105 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.355.107 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.355.117 I llama_model_loader: - type  f32:   37 tensors
0.00.355.120 I llama_model_loader: - type q4_K:  108 tensors
0.00.355.120 I llama_model_loader: - type q6_K:   19 tensors
0.00.586.260 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.650.576 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.651.533 I llm_load_vocab: special tokens cache size = 5
0.00.843.030 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.843.102 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.843.103 I llm_load_print_meta: arch             = gemma
0.00.843.103 I llm_load_print_meta: vocab type       = SPM
0.00.843.104 I llm_load_print_meta: n_vocab          = 256000
0.00.843.107 I llm_load_print_meta: n_merges         = 0
0.00.843.107 I llm_load_print_meta: vocab_only       = 0
0.00.843.107 I llm_load_print_meta: n_ctx_train      = 8192
0.00.843.108 I llm_load_print_meta: n_embd           = 2048
0.00.843.108 I llm_load_print_meta: n_layer          = 18
0.00.843.174 I llm_load_print_meta: n_head           = 8
0.00.843.182 I llm_load_print_meta: n_head_kv        = 1
0.00.843.183 I llm_load_print_meta: n_rot            = 256
0.00.843.184 I llm_load_print_meta: n_swa            = 0
0.00.843.184 I llm_load_print_meta: n_embd_head_k    = 256
0.00.843.191 I llm_load_print_meta: n_embd_head_v    = 256
0.00.843.196 I llm_load_print_meta: n_gqa            = 8
0.00.843.201 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.843.207 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.843.208 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.843.209 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.843.212 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.843.213 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.843.213 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.843.218 I llm_load_print_meta: n_ff             = 16384
0.00.843.219 I llm_load_print_meta: n_expert         = 0
0.00.843.220 I llm_load_print_meta: n_expert_used    = 0
0.00.843.221 I llm_load_print_meta: causal attn      = 1
0.00.843.221 I llm_load_print_meta: pooling type     = 0
0.00.843.222 I llm_load_print_meta: rope type        = 2
0.00.843.225 I llm_load_print_meta: rope scaling     = linear
0.00.843.226 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.843.227 I llm_load_print_meta: freq_scale_train = 1
0.00.843.227 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.843.227 I llm_load_print_meta: rope_finetuned   = unknown
0.00.843.228 I llm_load_print_meta: ssm_d_conv       = 0
0.00.843.228 I llm_load_print_meta: ssm_d_inner      = 0
0.00.843.228 I llm_load_print_meta: ssm_d_state      = 0
0.00.843.229 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.843.229 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.843.230 I llm_load_print_meta: model type       = 2B
0.00.843.231 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.843.232 I llm_load_print_meta: model params     = 2.51 B
0.00.843.233 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.843.233 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.843.234 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.843.235 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.843.235 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.843.236 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.843.237 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.843.237 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.843.243 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.843.244 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.843.245 I llm_load_print_meta: max token length = 93
0.00.906.486 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.906.496 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.906.496 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.906.497 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.906.498 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.906.498 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.912.343 I llama_new_context_with_model: n_seq_max     = 1
0.00.912.348 I llama_new_context_with_model: n_ctx         = 4096
0.00.912.349 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.912.349 I llama_new_context_with_model: n_batch       = 2048
0.00.912.350 I llama_new_context_with_model: n_ubatch      = 512
0.00.912.350 I llama_new_context_with_model: flash_attn    = 0
0.00.912.353 I llama_new_context_with_model: freq_base     = 10000.0
0.00.912.354 I llama_new_context_with_model: freq_scale    = 1
0.00.912.355 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.912.442 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.926.550 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.926.588 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.926.711 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.929.350 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.929.354 I llama_new_context_with_model: graph nodes  = 601
0.00.929.354 I llama_new_context_with_model: graph splits = 1
0.00.929.378 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.929.381 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.509.943 I main: llama threadpool init, n_threads = 4
0.01.509.961 I 
0.01.510.086 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.510.090 I 
0.01.510.325 I sampler seed: 43159184
0.01.510.340 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.510.350 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.510.353 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.510.353 I 
 increasively. [end of text]


0.02.898.281 I llama_perf_sampler_print:    sampling time =       6.34 ms /     5 runs   (    1.27 ms per token,   788.02 tokens per second)
0.02.898.284 I llama_perf_context_print:        load time =    1509.00 ms
0.02.898.285 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.898.287 I llama_perf_context_print:        eval time =    1375.48 ms /     4 runs   (  343.87 ms per token,     2.91 tokens per second)
0.02.898.288 I llama_perf_context_print:       total time =    1388.35 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4375 (ebdee947)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185778.42 ms
main:    total time = 185778.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 4375 (ebdee947) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.000.835 I main: load the model and apply lora adapter, if any
0.00.023.769 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.870 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.885 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.887 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.893 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.896 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.898 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.899 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.901 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.902 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.908 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.910 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.911 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.913 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.914 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.255.735 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.358.206 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.382.902 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.382.914 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.382.916 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.382.917 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.382.918 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.382.920 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.382.921 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.382.926 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.382.927 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.382.937 I llama_model_loader: - type  f32:   37 tensors
0.00.382.940 I llama_model_loader: - type q4_K:  108 tensors
0.00.382.940 I llama_model_loader: - type q6_K:   19 tensors
0.00.604.692 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.665.223 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.666.121 I llm_load_vocab: special tokens cache size = 5
0.00.873.174 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.873.247 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.873.248 I llm_load_print_meta: arch             = gemma
0.00.873.249 I llm_load_print_meta: vocab type       = SPM
0.00.873.250 I llm_load_print_meta: n_vocab          = 256000
0.00.873.253 I llm_load_print_meta: n_merges         = 0
0.00.873.253 I llm_load_print_meta: vocab_only       = 0
0.00.873.253 I llm_load_print_meta: n_ctx_train      = 8192
0.00.873.254 I llm_load_print_meta: n_embd           = 2048
0.00.873.254 I llm_load_print_meta: n_layer          = 18
0.00.873.321 I llm_load_print_meta: n_head           = 8
0.00.873.328 I llm_load_print_meta: n_head_kv        = 1
0.00.873.329 I llm_load_print_meta: n_rot            = 256
0.00.873.330 I llm_load_print_meta: n_swa            = 0
0.00.873.330 I llm_load_print_meta: n_embd_head_k    = 256
0.00.873.331 I llm_load_print_meta: n_embd_head_v    = 256
0.00.873.337 I llm_load_print_meta: n_gqa            = 8
0.00.873.342 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.873.358 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.873.360 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.873.362 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.873.362 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.873.363 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.873.364 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.873.369 I llm_load_print_meta: n_ff             = 16384
0.00.873.371 I llm_load_print_meta: n_expert         = 0
0.00.873.371 I llm_load_print_meta: n_expert_used    = 0
0.00.873.372 I llm_load_print_meta: causal attn      = 1
0.00.873.372 I llm_load_print_meta: pooling type     = 0
0.00.873.373 I llm_load_print_meta: rope type        = 2
0.00.873.373 I llm_load_print_meta: rope scaling     = linear
0.00.873.375 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.873.376 I llm_load_print_meta: freq_scale_train = 1
0.00.873.376 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.873.376 I llm_load_print_meta: rope_finetuned   = unknown
0.00.873.377 I llm_load_print_meta: ssm_d_conv       = 0
0.00.873.378 I llm_load_print_meta: ssm_d_inner      = 0
0.00.873.378 I llm_load_print_meta: ssm_d_state      = 0
0.00.873.379 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.873.393 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.873.394 I llm_load_print_meta: model type       = 2B
0.00.873.403 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.873.407 I llm_load_print_meta: model params     = 2.51 B
0.00.873.408 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.873.408 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.873.409 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.873.409 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.873.410 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.873.410 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.873.411 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.873.411 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.873.418 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.873.419 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.873.419 I llm_load_print_meta: max token length = 93
0.00.933.709 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.939.640 I llama_new_context_with_model: n_seq_max     = 1
0.00.939.647 I llama_new_context_with_model: n_ctx         = 4096
0.00.939.648 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.939.648 I llama_new_context_with_model: n_batch       = 2048
0.00.939.648 I llama_new_context_with_model: n_ubatch      = 512
0.00.939.649 I llama_new_context_with_model: flash_attn    = 0
0.00.939.651 I llama_new_context_with_model: freq_base     = 10000.0
0.00.939.652 I llama_new_context_with_model: freq_scale    = 1
0.00.939.653 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.939.742 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.955.588 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.955.630 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.955.769 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.958.459 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.958.463 I llama_new_context_with_model: graph nodes  = 601
0.00.958.464 I llama_new_context_with_model: graph splits = 1
0.00.958.487 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.958.490 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.536.466 I main: llama threadpool init, n_threads = 4
0.01.536.485 I 
0.01.536.607 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.536.611 I 
0.01.536.851 I sampler seed: 387315370
0.01.536.866 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.536.875 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.536.879 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.536.879 I 
 seconded with a powerful woman.

The woman was not your typical damsel in distress type. She was strong, independent, and had a sharp intellect.

0.12.684.913 I llama_perf_sampler_print:    sampling time =      49.75 ms /    33 runs   (    1.51 ms per token,   663.32 tokens per second)
0.12.684.916 I llama_perf_context_print:        load time =    1535.55 ms
0.12.684.930 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.684.932 I llama_perf_context_print:        eval time =   11058.77 ms /    32 runs   (  345.59 ms per token,     2.89 tokens per second)
0.12.684.934 I llama_perf_context_print:       total time =   11148.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m30.154s
user	46m5.046s
sys	0m6.286s
