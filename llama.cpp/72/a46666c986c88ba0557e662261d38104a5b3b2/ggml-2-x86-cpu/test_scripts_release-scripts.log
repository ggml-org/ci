+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.584 I build: 4834 (72a46666) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.784 I main: llama backend init
0.00.000.791 I main: load the model and apply lora adapter, if any
0.00.030.970 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.030.982 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.030.990 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.996 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.997 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.000 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.000 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.001 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.002 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.002 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.003 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.013 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.014 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.014 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.015 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.015 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.057.461 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.132.389 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.638 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.645 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.647 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.647 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.648 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.649 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.650 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.652 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.652 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.653 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.655 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.138.655 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.138.659 I llama_model_loader: - type  f32:   37 tensors
0.00.138.659 I llama_model_loader: - type q8_0:  127 tensors
0.00.138.662 I print_info: file format = GGUF V3 (latest)
0.00.138.662 I print_info: file type   = Q8_0
0.00.138.664 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.211.882 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.195 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.920 I load: special tokens cache size = 5
0.00.282.108 I load: token to piece cache size = 1.6014 MB
0.00.282.126 I print_info: arch             = gemma
0.00.282.127 I print_info: vocab_only       = 0
0.00.282.127 I print_info: n_ctx_train      = 8192
0.00.282.128 I print_info: n_embd           = 2048
0.00.282.128 I print_info: n_layer          = 18
0.00.282.141 I print_info: n_head           = 8
0.00.282.143 I print_info: n_head_kv        = 1
0.00.282.143 I print_info: n_rot            = 256
0.00.282.144 I print_info: n_swa            = 0
0.00.282.144 I print_info: n_embd_head_k    = 256
0.00.282.144 I print_info: n_embd_head_v    = 256
0.00.282.146 I print_info: n_gqa            = 8
0.00.282.148 I print_info: n_embd_k_gqa     = 256
0.00.282.150 I print_info: n_embd_v_gqa     = 256
0.00.282.150 I print_info: f_norm_eps       = 0.0e+00
0.00.282.152 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.282.152 I print_info: f_clamp_kqv      = 0.0e+00
0.00.282.153 I print_info: f_max_alibi_bias = 0.0e+00
0.00.282.153 I print_info: f_logit_scale    = 0.0e+00
0.00.282.155 I print_info: n_ff             = 16384
0.00.282.155 I print_info: n_expert         = 0
0.00.282.155 I print_info: n_expert_used    = 0
0.00.282.156 I print_info: causal attn      = 1
0.00.282.156 I print_info: pooling type     = 0
0.00.282.156 I print_info: rope type        = 2
0.00.282.157 I print_info: rope scaling     = linear
0.00.282.158 I print_info: freq_base_train  = 10000.0
0.00.282.159 I print_info: freq_scale_train = 1
0.00.282.159 I print_info: n_ctx_orig_yarn  = 8192
0.00.282.159 I print_info: rope_finetuned   = unknown
0.00.282.159 I print_info: ssm_d_conv       = 0
0.00.282.160 I print_info: ssm_d_inner      = 0
0.00.282.160 I print_info: ssm_d_state      = 0
0.00.282.160 I print_info: ssm_dt_rank      = 0
0.00.282.160 I print_info: ssm_dt_b_c_rms   = 0
0.00.282.161 I print_info: model type       = 2B
0.00.282.162 I print_info: model params     = 2.51 B
0.00.282.162 I print_info: general.name     = gemma-1.1-2b-it
0.00.282.165 I print_info: vocab type       = SPM
0.00.282.166 I print_info: n_vocab          = 256000
0.00.282.166 I print_info: n_merges         = 0
0.00.282.166 I print_info: BOS token        = 2 '<bos>'
0.00.282.167 I print_info: EOS token        = 1 '<eos>'
0.00.282.167 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.282.167 I print_info: UNK token        = 3 '<unk>'
0.00.282.168 I print_info: PAD token        = 0 '<pad>'
0.00.282.168 I print_info: LF token         = 227 '<0x0A>'
0.00.282.169 I print_info: EOG token        = 1 '<eos>'
0.00.282.169 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.282.169 I print_info: max token length = 93
0.00.282.170 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.372.483 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.372.491 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.372.492 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.372.492 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.372.493 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.372.494 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.373.857 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.373.861 I llama_context_base: n_seq_max     = 1
0.00.373.862 I llama_context_base: n_ctx         = 4096
0.00.373.862 I llama_context_base: n_ctx_per_seq = 4096
0.00.373.863 I llama_context_base: n_batch       = 2048
0.00.373.863 I llama_context_base: n_ubatch      = 512
0.00.373.863 I llama_context_base: causal_attn   = 1
0.00.373.864 I llama_context_base: flash_attn    = 0
0.00.373.866 I llama_context_base: freq_base     = 10000.0
0.00.373.867 I llama_context_base: freq_scale    = 1
0.00.373.867 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.979 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.373.983 I llama_context_kv_self: constructing llama_context_kv_self
0.00.373.990 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.387.954 I init:        CPU KV buffer size =    72.00 MiB
0.00.387.969 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.898 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.389.902 I reserve: graph nodes  = 619
0.00.389.902 I reserve: graph splits = 1
0.00.389.906 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.389.906 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.554 I main: llama threadpool init, n_threads = 4
0.00.476.568 I 
0.00.476.623 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.476.626 I 
0.00.476.667 I sampler seed: 1629426449
0.00.476.677 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.680 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.681 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.681 I 
 increasities, and their potential consequences.

**Introduction:**

The exploration of extraterrestrial life has ignited excitement and curiosity among scientists, policymakers, and the general

0.02.661.442 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6742.95 tokens per second)
0.02.661.445 I llama_perf_context_print:        load time =     473.09 ms
0.02.661.446 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.661.448 I llama_perf_context_print:        eval time =    2166.03 ms /    32 runs   (   67.69 ms per token,    14.77 tokens per second)
0.02.661.448 I llama_perf_context_print:       total time =    2187.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.548 I build: 4834 (72a46666) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.778 I main: llama backend init
0.00.000.785 I main: load the model and apply lora adapter, if any
0.00.030.173 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.030.188 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.196 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.197 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.200 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.200 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.201 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.202 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.202 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.203 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.213 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.214 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.214 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.215 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.215 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.144 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.499 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.962 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.970 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.971 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.972 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.973 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.974 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.974 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.977 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.978 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.978 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.979 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.137.980 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.137.985 I llama_model_loader: - type  f32:   37 tensors
0.00.137.986 I llama_model_loader: - type q8_0:  127 tensors
0.00.137.989 I print_info: file format = GGUF V3 (latest)
0.00.137.990 I print_info: file type   = Q8_0
0.00.137.992 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.218.227 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.108 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.532 I load: special tokens cache size = 5
0.00.288.754 I load: token to piece cache size = 1.6014 MB
0.00.288.781 I print_info: arch             = gemma
0.00.288.782 I print_info: vocab_only       = 0
0.00.288.782 I print_info: n_ctx_train      = 8192
0.00.288.783 I print_info: n_embd           = 2048
0.00.288.783 I print_info: n_layer          = 18
0.00.288.795 I print_info: n_head           = 8
0.00.288.797 I print_info: n_head_kv        = 1
0.00.288.798 I print_info: n_rot            = 256
0.00.288.799 I print_info: n_swa            = 0
0.00.288.800 I print_info: n_embd_head_k    = 256
0.00.288.800 I print_info: n_embd_head_v    = 256
0.00.288.803 I print_info: n_gqa            = 8
0.00.288.805 I print_info: n_embd_k_gqa     = 256
0.00.288.807 I print_info: n_embd_v_gqa     = 256
0.00.288.808 I print_info: f_norm_eps       = 0.0e+00
0.00.288.810 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.288.810 I print_info: f_clamp_kqv      = 0.0e+00
0.00.288.810 I print_info: f_max_alibi_bias = 0.0e+00
0.00.288.811 I print_info: f_logit_scale    = 0.0e+00
0.00.288.813 I print_info: n_ff             = 16384
0.00.288.814 I print_info: n_expert         = 0
0.00.288.815 I print_info: n_expert_used    = 0
0.00.288.815 I print_info: causal attn      = 1
0.00.288.815 I print_info: pooling type     = 0
0.00.288.816 I print_info: rope type        = 2
0.00.288.817 I print_info: rope scaling     = linear
0.00.288.819 I print_info: freq_base_train  = 10000.0
0.00.288.820 I print_info: freq_scale_train = 1
0.00.288.820 I print_info: n_ctx_orig_yarn  = 8192
0.00.288.820 I print_info: rope_finetuned   = unknown
0.00.288.820 I print_info: ssm_d_conv       = 0
0.00.288.821 I print_info: ssm_d_inner      = 0
0.00.288.821 I print_info: ssm_d_state      = 0
0.00.288.821 I print_info: ssm_dt_rank      = 0
0.00.288.822 I print_info: ssm_dt_b_c_rms   = 0
0.00.288.822 I print_info: model type       = 2B
0.00.288.823 I print_info: model params     = 2.51 B
0.00.288.824 I print_info: general.name     = gemma-1.1-2b-it
0.00.288.827 I print_info: vocab type       = SPM
0.00.288.828 I print_info: n_vocab          = 256000
0.00.288.829 I print_info: n_merges         = 0
0.00.288.829 I print_info: BOS token        = 2 '<bos>'
0.00.288.830 I print_info: EOS token        = 1 '<eos>'
0.00.288.830 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.288.831 I print_info: UNK token        = 3 '<unk>'
0.00.288.831 I print_info: PAD token        = 0 '<pad>'
0.00.288.831 I print_info: LF token         = 227 '<0x0A>'
0.00.288.832 I print_info: EOG token        = 1 '<eos>'
0.00.288.832 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.288.833 I print_info: max token length = 93
0.00.288.834 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.361.616 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.362.807 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.362.811 I llama_context_base: n_seq_max     = 1
0.00.362.811 I llama_context_base: n_ctx         = 4096
0.00.362.811 I llama_context_base: n_ctx_per_seq = 4096
0.00.362.812 I llama_context_base: n_batch       = 2048
0.00.362.812 I llama_context_base: n_ubatch      = 512
0.00.362.813 I llama_context_base: causal_attn   = 1
0.00.362.814 I llama_context_base: flash_attn    = 0
0.00.362.816 I llama_context_base: freq_base     = 10000.0
0.00.362.816 I llama_context_base: freq_scale    = 1
0.00.362.818 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.942 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.362.945 I llama_context_kv_self: constructing llama_context_kv_self
0.00.362.952 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.377.768 I init:        CPU KV buffer size =    72.00 MiB
0.00.377.785 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.764 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.379.769 I reserve: graph nodes  = 619
0.00.379.769 I reserve: graph splits = 1
0.00.379.773 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.379.773 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.220 I main: llama threadpool init, n_threads = 4
0.00.464.232 I 
0.00.464.290 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.464.295 I 
0.00.464.329 I sampler seed: 319823835
0.00.464.337 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.342 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.343 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.343 I 
 increably.

I am unable to access the internet to retrieve the necessary data to answer your question. Please provide me with the information I need to access the

0.02.592.095 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6913.89 tokens per second)
0.02.592.097 I llama_perf_context_print:        load time =     460.76 ms
0.02.592.098 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.592.100 I llama_perf_context_print:        eval time =    2109.89 ms /    32 runs   (   65.93 ms per token,    15.17 tokens per second)
0.02.592.100 I llama_perf_context_print:       total time =    2130.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.557 I build: 4834 (72a46666) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.000.762 I main: load the model and apply lora adapter, if any
0.00.030.511 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.030.523 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.030.531 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.538 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.539 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.542 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.543 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.543 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.544 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.545 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.545 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.550 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.550 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.551 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.552 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.552 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.914 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.132.326 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.646 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.654 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.655 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.655 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.656 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.657 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.658 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.660 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.660 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.661 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.662 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.138.663 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.138.667 I llama_model_loader: - type  f32:   37 tensors
0.00.138.668 I llama_model_loader: - type q8_0:  127 tensors
0.00.138.672 I print_info: file format = GGUF V3 (latest)
0.00.138.672 I print_info: file type   = Q8_0
0.00.138.674 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.210.248 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.631 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.178 I load: special tokens cache size = 5
0.00.274.212 I load: token to piece cache size = 1.6014 MB
0.00.274.230 I print_info: arch             = gemma
0.00.274.230 I print_info: vocab_only       = 0
0.00.274.231 I print_info: n_ctx_train      = 8192
0.00.274.231 I print_info: n_embd           = 2048
0.00.274.232 I print_info: n_layer          = 18
0.00.274.243 I print_info: n_head           = 8
0.00.274.245 I print_info: n_head_kv        = 1
0.00.274.246 I print_info: n_rot            = 256
0.00.274.246 I print_info: n_swa            = 0
0.00.274.246 I print_info: n_embd_head_k    = 256
0.00.274.247 I print_info: n_embd_head_v    = 256
0.00.274.248 I print_info: n_gqa            = 8
0.00.274.250 I print_info: n_embd_k_gqa     = 256
0.00.274.252 I print_info: n_embd_v_gqa     = 256
0.00.274.253 I print_info: f_norm_eps       = 0.0e+00
0.00.274.254 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.274.255 I print_info: f_clamp_kqv      = 0.0e+00
0.00.274.255 I print_info: f_max_alibi_bias = 0.0e+00
0.00.274.255 I print_info: f_logit_scale    = 0.0e+00
0.00.274.257 I print_info: n_ff             = 16384
0.00.274.258 I print_info: n_expert         = 0
0.00.274.258 I print_info: n_expert_used    = 0
0.00.274.258 I print_info: causal attn      = 1
0.00.274.259 I print_info: pooling type     = 0
0.00.274.259 I print_info: rope type        = 2
0.00.274.259 I print_info: rope scaling     = linear
0.00.274.261 I print_info: freq_base_train  = 10000.0
0.00.274.261 I print_info: freq_scale_train = 1
0.00.274.262 I print_info: n_ctx_orig_yarn  = 8192
0.00.274.262 I print_info: rope_finetuned   = unknown
0.00.274.262 I print_info: ssm_d_conv       = 0
0.00.274.263 I print_info: ssm_d_inner      = 0
0.00.274.263 I print_info: ssm_d_state      = 0
0.00.274.263 I print_info: ssm_dt_rank      = 0
0.00.274.264 I print_info: ssm_dt_b_c_rms   = 0
0.00.274.264 I print_info: model type       = 2B
0.00.274.265 I print_info: model params     = 2.51 B
0.00.274.266 I print_info: general.name     = gemma-1.1-2b-it
0.00.274.268 I print_info: vocab type       = SPM
0.00.274.270 I print_info: n_vocab          = 256000
0.00.274.270 I print_info: n_merges         = 0
0.00.274.271 I print_info: BOS token        = 2 '<bos>'
0.00.274.271 I print_info: EOS token        = 1 '<eos>'
0.00.274.271 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.274.272 I print_info: UNK token        = 3 '<unk>'
0.00.274.272 I print_info: PAD token        = 0 '<pad>'
0.00.274.272 I print_info: LF token         = 227 '<0x0A>'
0.00.274.273 I print_info: EOG token        = 1 '<eos>'
0.00.274.273 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.274.274 I print_info: max token length = 93
0.00.274.275 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.346.639 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.346.645 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.346.646 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.346.646 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.346.647 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.346.648 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.347.977 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.347.982 I llama_context_base: n_seq_max     = 1
0.00.347.983 I llama_context_base: n_ctx         = 4096
0.00.347.983 I llama_context_base: n_ctx_per_seq = 4096
0.00.347.983 I llama_context_base: n_batch       = 2048
0.00.347.984 I llama_context_base: n_ubatch      = 512
0.00.347.984 I llama_context_base: causal_attn   = 1
0.00.347.984 I llama_context_base: flash_attn    = 0
0.00.347.987 I llama_context_base: freq_base     = 10000.0
0.00.347.987 I llama_context_base: freq_scale    = 1
0.00.347.988 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.098 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.348.102 I llama_context_kv_self: constructing llama_context_kv_self
0.00.348.109 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.362.830 I init:        CPU KV buffer size =    72.00 MiB
0.00.362.846 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.738 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.364.743 I reserve: graph nodes  = 619
0.00.364.744 I reserve: graph splits = 1
0.00.364.748 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.364.748 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.150 I main: llama threadpool init, n_threads = 4
0.00.453.161 I 
0.00.453.216 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.453.219 I 
0.00.453.252 I sampler seed: 2488168296
0.00.453.261 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.264 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.264 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.264 I 
 increasities into a single, coherent narrative.

In the year 2042, the world had adapted to a future fraught with ecological devastation, resource

0.02.849.235 I llama_perf_sampler_print:    sampling time =       5.15 ms /    33 runs   (    0.16 ms per token,  6409.01 tokens per second)
0.02.849.238 I llama_perf_context_print:        load time =     449.72 ms
0.02.849.239 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.849.241 I llama_perf_context_print:        eval time =    2376.64 ms /    32 runs   (   74.27 ms per token,    13.46 tokens per second)
0.02.849.242 I llama_perf_context_print:       total time =    2398.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.541 I build: 4834 (72a46666) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.744 I main: load the model and apply lora adapter, if any
0.00.035.340 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.035.351 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.035.359 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.035.364 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.035.365 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.035.368 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.035.370 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.035.371 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.035.372 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.035.373 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.035.374 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.035.384 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.035.385 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.035.385 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.035.386 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.035.387 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.061.916 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.143.009 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.149.338 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.149.345 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.149.346 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.149.347 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.149.347 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.149.349 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.149.350 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.149.352 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.149.353 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.149.354 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.149.355 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.149.355 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.149.359 I llama_model_loader: - type  f32:   37 tensors
0.00.149.360 I llama_model_loader: - type q8_0:  127 tensors
0.00.149.364 I print_info: file format = GGUF V3 (latest)
0.00.149.364 I print_info: file type   = Q8_0
0.00.149.365 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.220.171 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.267.798 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.356 I load: special tokens cache size = 5
0.00.290.405 I load: token to piece cache size = 1.6014 MB
0.00.290.425 I print_info: arch             = gemma
0.00.290.426 I print_info: vocab_only       = 0
0.00.290.427 I print_info: n_ctx_train      = 8192
0.00.290.427 I print_info: n_embd           = 2048
0.00.290.427 I print_info: n_layer          = 18
0.00.290.441 I print_info: n_head           = 8
0.00.290.442 I print_info: n_head_kv        = 1
0.00.290.443 I print_info: n_rot            = 256
0.00.290.444 I print_info: n_swa            = 0
0.00.290.444 I print_info: n_embd_head_k    = 256
0.00.290.444 I print_info: n_embd_head_v    = 256
0.00.290.446 I print_info: n_gqa            = 8
0.00.290.448 I print_info: n_embd_k_gqa     = 256
0.00.290.450 I print_info: n_embd_v_gqa     = 256
0.00.290.451 I print_info: f_norm_eps       = 0.0e+00
0.00.290.452 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.290.452 I print_info: f_clamp_kqv      = 0.0e+00
0.00.290.453 I print_info: f_max_alibi_bias = 0.0e+00
0.00.290.453 I print_info: f_logit_scale    = 0.0e+00
0.00.290.455 I print_info: n_ff             = 16384
0.00.290.455 I print_info: n_expert         = 0
0.00.290.455 I print_info: n_expert_used    = 0
0.00.290.456 I print_info: causal attn      = 1
0.00.290.456 I print_info: pooling type     = 0
0.00.290.456 I print_info: rope type        = 2
0.00.290.457 I print_info: rope scaling     = linear
0.00.290.458 I print_info: freq_base_train  = 10000.0
0.00.290.458 I print_info: freq_scale_train = 1
0.00.290.459 I print_info: n_ctx_orig_yarn  = 8192
0.00.290.459 I print_info: rope_finetuned   = unknown
0.00.290.459 I print_info: ssm_d_conv       = 0
0.00.290.459 I print_info: ssm_d_inner      = 0
0.00.290.460 I print_info: ssm_d_state      = 0
0.00.290.460 I print_info: ssm_dt_rank      = 0
0.00.290.460 I print_info: ssm_dt_b_c_rms   = 0
0.00.290.461 I print_info: model type       = 2B
0.00.290.462 I print_info: model params     = 2.51 B
0.00.290.462 I print_info: general.name     = gemma-1.1-2b-it
0.00.290.465 I print_info: vocab type       = SPM
0.00.290.466 I print_info: n_vocab          = 256000
0.00.290.466 I print_info: n_merges         = 0
0.00.290.467 I print_info: BOS token        = 2 '<bos>'
0.00.290.467 I print_info: EOS token        = 1 '<eos>'
0.00.290.467 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.290.468 I print_info: UNK token        = 3 '<unk>'
0.00.290.468 I print_info: PAD token        = 0 '<pad>'
0.00.290.468 I print_info: LF token         = 227 '<0x0A>'
0.00.290.469 I print_info: EOG token        = 1 '<eos>'
0.00.290.470 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.290.470 I print_info: max token length = 93
0.00.290.471 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.366.879 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.366.886 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.368.139 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.368.144 I llama_context_base: n_seq_max     = 1
0.00.368.144 I llama_context_base: n_ctx         = 4096
0.00.368.145 I llama_context_base: n_ctx_per_seq = 4096
0.00.368.145 I llama_context_base: n_batch       = 2048
0.00.368.146 I llama_context_base: n_ubatch      = 512
0.00.368.146 I llama_context_base: causal_attn   = 1
0.00.368.147 I llama_context_base: flash_attn    = 0
0.00.368.149 I llama_context_base: freq_base     = 10000.0
0.00.368.150 I llama_context_base: freq_scale    = 1
0.00.368.150 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.262 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.368.266 I llama_context_kv_self: constructing llama_context_kv_self
0.00.368.274 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.382.731 I init:        CPU KV buffer size =    72.00 MiB
0.00.382.748 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.002 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.385.007 I reserve: graph nodes  = 619
0.00.385.007 I reserve: graph splits = 1
0.00.385.011 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.385.012 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.849 I main: llama threadpool init, n_threads = 4
0.00.476.865 I 
0.00.476.922 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.476.926 I 
0.00.476.965 I sampler seed: 1841791454
0.00.476.975 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.978 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.979 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.979 I 
 increabling. 

**Instructions:**

1. Write a function to determine the factorial of a given number.
2. Use the function to calculate and

0.02.910.922 I llama_perf_sampler_print:    sampling time =       5.13 ms /    33 runs   (    0.16 ms per token,  6434.00 tokens per second)
0.02.910.925 I llama_perf_context_print:        load time =     473.49 ms
0.02.910.926 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.910.927 I llama_perf_context_print:        eval time =    2414.52 ms /    32 runs   (   75.45 ms per token,    13.25 tokens per second)
0.02.910.928 I llama_perf_context_print:       total time =    2436.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.488s
user	0m39.600s
sys	0m9.198s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4834 (72a46666)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40203.04 ms
main:    total time = 40203.04 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.536 I build: 4834 (72a46666) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.760 I main: load the model and apply lora adapter, if any
0.00.030.121 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.030.132 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.030.141 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.146 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.147 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.150 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.155 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.155 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.156 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.156 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.157 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.161 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.162 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.163 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.164 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.056.468 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.600 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.973 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.981 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.981 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.982 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.983 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.984 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.985 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.988 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.989 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.137.991 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.137.992 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.994 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.137.995 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.999 I llama_model_loader: - type  f32:   37 tensors
0.00.138.000 I llama_model_loader: - type q4_K:  108 tensors
0.00.138.000 I llama_model_loader: - type q6_K:   19 tensors
0.00.138.004 I print_info: file format = GGUF V3 (latest)
0.00.138.004 I print_info: file type   = Q4_K - Medium
0.00.138.006 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.207.949 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.394 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.896 I load: special tokens cache size = 5
0.00.269.922 I load: token to piece cache size = 1.6014 MB
0.00.269.938 I print_info: arch             = gemma
0.00.269.939 I print_info: vocab_only       = 0
0.00.269.939 I print_info: n_ctx_train      = 8192
0.00.269.940 I print_info: n_embd           = 2048
0.00.269.941 I print_info: n_layer          = 18
0.00.269.953 I print_info: n_head           = 8
0.00.269.955 I print_info: n_head_kv        = 1
0.00.269.955 I print_info: n_rot            = 256
0.00.269.956 I print_info: n_swa            = 0
0.00.269.956 I print_info: n_embd_head_k    = 256
0.00.269.957 I print_info: n_embd_head_v    = 256
0.00.269.959 I print_info: n_gqa            = 8
0.00.269.961 I print_info: n_embd_k_gqa     = 256
0.00.269.962 I print_info: n_embd_v_gqa     = 256
0.00.269.963 I print_info: f_norm_eps       = 0.0e+00
0.00.269.965 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.269.965 I print_info: f_clamp_kqv      = 0.0e+00
0.00.269.966 I print_info: f_max_alibi_bias = 0.0e+00
0.00.269.966 I print_info: f_logit_scale    = 0.0e+00
0.00.269.968 I print_info: n_ff             = 16384
0.00.269.969 I print_info: n_expert         = 0
0.00.269.970 I print_info: n_expert_used    = 0
0.00.269.970 I print_info: causal attn      = 1
0.00.269.970 I print_info: pooling type     = 0
0.00.269.970 I print_info: rope type        = 2
0.00.269.971 I print_info: rope scaling     = linear
0.00.269.973 I print_info: freq_base_train  = 10000.0
0.00.269.974 I print_info: freq_scale_train = 1
0.00.269.974 I print_info: n_ctx_orig_yarn  = 8192
0.00.269.975 I print_info: rope_finetuned   = unknown
0.00.269.975 I print_info: ssm_d_conv       = 0
0.00.269.976 I print_info: ssm_d_inner      = 0
0.00.269.976 I print_info: ssm_d_state      = 0
0.00.269.976 I print_info: ssm_dt_rank      = 0
0.00.269.977 I print_info: ssm_dt_b_c_rms   = 0
0.00.269.981 I print_info: model type       = 2B
0.00.269.982 I print_info: model params     = 2.51 B
0.00.269.982 I print_info: general.name     = gemma-1.1-2b-it
0.00.269.985 I print_info: vocab type       = SPM
0.00.269.986 I print_info: n_vocab          = 256000
0.00.269.987 I print_info: n_merges         = 0
0.00.269.987 I print_info: BOS token        = 2 '<bos>'
0.00.269.988 I print_info: EOS token        = 1 '<eos>'
0.00.269.988 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.269.988 I print_info: UNK token        = 3 '<unk>'
0.00.269.989 I print_info: PAD token        = 0 '<pad>'
0.00.269.989 I print_info: LF token         = 227 '<0x0A>'
0.00.269.990 I print_info: EOG token        = 1 '<eos>'
0.00.269.991 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.269.992 I print_info: max token length = 93
0.00.269.993 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.316.640 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.316.648 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.316.649 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.316.649 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.316.650 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.316.651 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.317.814 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.317.818 I llama_context_base: n_seq_max     = 1
0.00.317.819 I llama_context_base: n_ctx         = 4096
0.00.317.819 I llama_context_base: n_ctx_per_seq = 4096
0.00.317.819 I llama_context_base: n_batch       = 2048
0.00.317.820 I llama_context_base: n_ubatch      = 512
0.00.317.820 I llama_context_base: causal_attn   = 1
0.00.317.821 I llama_context_base: flash_attn    = 0
0.00.317.823 I llama_context_base: freq_base     = 10000.0
0.00.317.824 I llama_context_base: freq_scale    = 1
0.00.317.824 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.317.935 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.317.940 I llama_context_kv_self: constructing llama_context_kv_self
0.00.317.947 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.332.355 I init:        CPU KV buffer size =    72.00 MiB
0.00.332.369 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.334.321 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.334.325 I reserve: graph nodes  = 619
0.00.334.326 I reserve: graph splits = 1
0.00.334.329 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.334.329 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.409.587 I main: llama threadpool init, n_threads = 4
0.00.409.599 I 
0.00.409.659 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.409.662 I 
0.00.409.700 I sampler seed: 1759004681
0.00.409.709 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.409.713 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.409.714 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.409.715 I 
 encomported the entire sequence of events as they unfolded, using proper context and transitions to ensure coherence.

**Sequence of Events:**

**1. The Company

0.01.923.420 I llama_perf_sampler_print:    sampling time =       5.13 ms /    33 runs   (    0.16 ms per token,  6428.99 tokens per second)
0.01.923.422 I llama_perf_context_print:        load time =     406.18 ms
0.01.923.423 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.923.425 I llama_perf_context_print:        eval time =    1494.68 ms /    32 runs   (   46.71 ms per token,    21.41 tokens per second)
0.01.923.425 I llama_perf_context_print:       total time =    1516.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4834 (72a46666)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40167.41 ms
main:    total time = 40167.41 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.531 I build: 4834 (72a46666) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.716 I main: llama backend init
0.00.000.723 I main: load the model and apply lora adapter, if any
0.00.030.351 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.030.368 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.377 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.378 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.381 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.381 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.382 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.382 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.383 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.383 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.388 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.388 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.389 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.389 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.056.691 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.851 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.192 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.198 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.199 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.199 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.200 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.201 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.201 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.203 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.204 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.138.205 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.138.208 I llama_model_loader: - type  f32:   37 tensors
0.00.138.209 I llama_model_loader: - type q4_K:  108 tensors
0.00.138.209 I llama_model_loader: - type q6_K:   19 tensors
0.00.138.213 I print_info: file format = GGUF V3 (latest)
0.00.138.214 I print_info: file type   = Q4_K - Medium
0.00.138.215 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.208.025 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.997 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.577 I load: special tokens cache size = 5
0.00.274.709 I load: token to piece cache size = 1.6014 MB
0.00.274.728 I print_info: arch             = gemma
0.00.274.729 I print_info: vocab_only       = 0
0.00.274.729 I print_info: n_ctx_train      = 8192
0.00.274.729 I print_info: n_embd           = 2048
0.00.274.730 I print_info: n_layer          = 18
0.00.274.749 I print_info: n_head           = 8
0.00.274.751 I print_info: n_head_kv        = 1
0.00.274.751 I print_info: n_rot            = 256
0.00.274.752 I print_info: n_swa            = 0
0.00.274.752 I print_info: n_embd_head_k    = 256
0.00.274.752 I print_info: n_embd_head_v    = 256
0.00.274.754 I print_info: n_gqa            = 8
0.00.274.756 I print_info: n_embd_k_gqa     = 256
0.00.274.758 I print_info: n_embd_v_gqa     = 256
0.00.274.758 I print_info: f_norm_eps       = 0.0e+00
0.00.274.760 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.274.760 I print_info: f_clamp_kqv      = 0.0e+00
0.00.274.760 I print_info: f_max_alibi_bias = 0.0e+00
0.00.274.761 I print_info: f_logit_scale    = 0.0e+00
0.00.274.763 I print_info: n_ff             = 16384
0.00.274.763 I print_info: n_expert         = 0
0.00.274.763 I print_info: n_expert_used    = 0
0.00.274.764 I print_info: causal attn      = 1
0.00.274.764 I print_info: pooling type     = 0
0.00.274.764 I print_info: rope type        = 2
0.00.274.764 I print_info: rope scaling     = linear
0.00.274.766 I print_info: freq_base_train  = 10000.0
0.00.274.766 I print_info: freq_scale_train = 1
0.00.274.767 I print_info: n_ctx_orig_yarn  = 8192
0.00.274.767 I print_info: rope_finetuned   = unknown
0.00.274.767 I print_info: ssm_d_conv       = 0
0.00.274.768 I print_info: ssm_d_inner      = 0
0.00.274.768 I print_info: ssm_d_state      = 0
0.00.274.768 I print_info: ssm_dt_rank      = 0
0.00.274.768 I print_info: ssm_dt_b_c_rms   = 0
0.00.274.769 I print_info: model type       = 2B
0.00.274.770 I print_info: model params     = 2.51 B
0.00.274.770 I print_info: general.name     = gemma-1.1-2b-it
0.00.274.773 I print_info: vocab type       = SPM
0.00.274.774 I print_info: n_vocab          = 256000
0.00.274.775 I print_info: n_merges         = 0
0.00.274.775 I print_info: BOS token        = 2 '<bos>'
0.00.274.776 I print_info: EOS token        = 1 '<eos>'
0.00.274.776 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.274.776 I print_info: UNK token        = 3 '<unk>'
0.00.274.777 I print_info: PAD token        = 0 '<pad>'
0.00.274.777 I print_info: LF token         = 227 '<0x0A>'
0.00.274.777 I print_info: EOG token        = 1 '<eos>'
0.00.274.778 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.274.778 I print_info: max token length = 93
0.00.274.780 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.318.542 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.319.718 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.319.722 I llama_context_base: n_seq_max     = 1
0.00.319.722 I llama_context_base: n_ctx         = 4096
0.00.319.723 I llama_context_base: n_ctx_per_seq = 4096
0.00.319.723 I llama_context_base: n_batch       = 2048
0.00.319.724 I llama_context_base: n_ubatch      = 512
0.00.319.724 I llama_context_base: causal_attn   = 1
0.00.319.725 I llama_context_base: flash_attn    = 0
0.00.319.727 I llama_context_base: freq_base     = 10000.0
0.00.319.728 I llama_context_base: freq_scale    = 1
0.00.319.728 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.319.842 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.319.846 I llama_context_kv_self: constructing llama_context_kv_self
0.00.319.853 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.334.692 I init:        CPU KV buffer size =    72.00 MiB
0.00.334.709 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.336.590 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.336.594 I reserve: graph nodes  = 619
0.00.336.594 I reserve: graph splits = 1
0.00.336.598 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.336.598 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.414.138 I main: llama threadpool init, n_threads = 4
0.00.414.149 I 
0.00.414.206 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.414.210 I 
0.00.414.243 I sampler seed: 2516089458
0.00.414.253 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.414.256 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.414.256 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.414.256 I 
 squaRE, the ancient Egyptian goddess of the harvest and fertility.

**Name:** Square
* Meaning: "One who gives life."

**Myth

0.02.026.031 I llama_perf_sampler_print:    sampling time =       5.17 ms /    33 runs   (    0.16 ms per token,  6380.51 tokens per second)
0.02.026.033 I llama_perf_context_print:        load time =     410.76 ms
0.02.026.034 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.026.035 I llama_perf_context_print:        eval time =    1592.48 ms /    32 runs   (   49.76 ms per token,    20.09 tokens per second)
0.02.026.036 I llama_perf_context_print:       total time =    1614.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.135s
user	10m23.619s
sys	0m6.961s
