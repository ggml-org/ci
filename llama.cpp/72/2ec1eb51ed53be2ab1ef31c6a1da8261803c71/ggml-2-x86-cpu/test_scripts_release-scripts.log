+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.540 I build: 3788 (722ec1eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.001.940 I main: load the model and apply lora adapter, if any
0.00.022.475 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.526 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.533 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.539 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.540 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.544 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.545 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.545 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.546 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.546 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.547 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.551 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.552 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.553 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.553 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.554 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.413 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.331 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.352 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.359 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.360 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.361 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.361 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.362 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.363 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.367 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.368 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.369 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.369 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.371 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.374 I llama_model_loader: - type  f32:   37 tensors
0.00.133.377 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.003 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.754 I llm_load_vocab: special tokens cache size = 5
0.00.217.116 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.131 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.131 I llm_load_print_meta: arch             = gemma
0.00.217.131 I llm_load_print_meta: vocab type       = SPM
0.00.217.132 I llm_load_print_meta: n_vocab          = 256000
0.00.217.133 I llm_load_print_meta: n_merges         = 0
0.00.217.133 I llm_load_print_meta: vocab_only       = 0
0.00.217.134 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.134 I llm_load_print_meta: n_embd           = 2048
0.00.217.134 I llm_load_print_meta: n_layer          = 18
0.00.217.146 I llm_load_print_meta: n_head           = 8
0.00.217.147 I llm_load_print_meta: n_head_kv        = 1
0.00.217.147 I llm_load_print_meta: n_rot            = 256
0.00.217.148 I llm_load_print_meta: n_swa            = 0
0.00.217.148 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.148 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.149 I llm_load_print_meta: n_gqa            = 8
0.00.217.150 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.151 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.152 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.153 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.154 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.154 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.155 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.156 I llm_load_print_meta: n_ff             = 16384
0.00.217.156 I llm_load_print_meta: n_expert         = 0
0.00.217.156 I llm_load_print_meta: n_expert_used    = 0
0.00.217.157 I llm_load_print_meta: causal attn      = 1
0.00.217.157 I llm_load_print_meta: pooling type     = 0
0.00.217.157 I llm_load_print_meta: rope type        = 2
0.00.217.157 I llm_load_print_meta: rope scaling     = linear
0.00.217.159 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.160 I llm_load_print_meta: freq_scale_train = 1
0.00.217.160 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.160 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.161 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.161 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.161 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.161 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.161 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.162 I llm_load_print_meta: model type       = 2B
0.00.217.163 I llm_load_print_meta: model ftype      = Q8_0
0.00.217.164 I llm_load_print_meta: model params     = 2.51 B
0.00.217.165 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.217.165 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.165 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.166 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.166 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.166 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.167 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.167 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.167 I llm_load_print_meta: max token length = 93
0.00.217.189 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.316.380 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.316.390 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.316.391 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.316.392 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.316.392 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.316.393 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.321.569 I llama_new_context_with_model: n_ctx      = 8192
0.00.321.575 I llama_new_context_with_model: n_batch    = 2048
0.00.321.575 I llama_new_context_with_model: n_ubatch   = 512
0.00.321.576 I llama_new_context_with_model: flash_attn = 0
0.00.321.579 I llama_new_context_with_model: freq_base  = 10000.0
0.00.321.580 I llama_new_context_with_model: freq_scale = 1
0.00.350.341 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.350.358 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.350.448 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.314 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.351.321 I llama_new_context_with_model: graph nodes  = 601
0.00.351.322 I llama_new_context_with_model: graph splits = 1
0.00.351.324 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.774 I main: llama threadpool init, n_threads = 4
0.00.441.786 I 
0.00.441.859 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.441.862 I 
0.00.441.890 I sampler seed: 393019457
0.00.441.899 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.901 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.441.902 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasements, which are typically used to diagnose mental illness.

**Explanation:**

* The presence of delusional beliefs and delusions of reference is a hallmark of schizophrenia

0.02.696.888 I llama_perf_sampler_print:    sampling time =       5.24 ms /    33 runs   (    0.16 ms per token,  6295.31 tokens per second)
0.02.696.891 I llama_perf_context_print:        load time =     439.81 ms
0.02.696.892 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.696.895 I llama_perf_context_print:        eval time =    2235.92 ms /    32 runs   (   69.87 ms per token,    14.31 tokens per second)
0.02.696.896 I llama_perf_context_print:       total time =    2255.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.543 I build: 3788 (722ec1eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.001.864 I main: load the model and apply lora adapter, if any
0.00.022.220 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.232 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.239 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.240 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.243 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.244 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.244 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.245 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.245 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.246 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.250 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.251 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.252 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.253 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.253 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.857 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.398 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.357 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.364 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.365 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.365 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.366 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.367 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.367 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.370 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.370 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.373 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.373 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.374 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.378 I llama_model_loader: - type  f32:   37 tensors
0.00.132.382 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.484 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.267 I llm_load_vocab: special tokens cache size = 5
0.00.215.873 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.890 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.890 I llm_load_print_meta: arch             = gemma
0.00.215.891 I llm_load_print_meta: vocab type       = SPM
0.00.215.892 I llm_load_print_meta: n_vocab          = 256000
0.00.215.892 I llm_load_print_meta: n_merges         = 0
0.00.215.893 I llm_load_print_meta: vocab_only       = 0
0.00.215.893 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.894 I llm_load_print_meta: n_embd           = 2048
0.00.215.894 I llm_load_print_meta: n_layer          = 18
0.00.215.907 I llm_load_print_meta: n_head           = 8
0.00.215.908 I llm_load_print_meta: n_head_kv        = 1
0.00.215.908 I llm_load_print_meta: n_rot            = 256
0.00.215.908 I llm_load_print_meta: n_swa            = 0
0.00.215.909 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.909 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.910 I llm_load_print_meta: n_gqa            = 8
0.00.215.911 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.912 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.913 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.914 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.915 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.915 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.915 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.916 I llm_load_print_meta: n_ff             = 16384
0.00.215.917 I llm_load_print_meta: n_expert         = 0
0.00.215.917 I llm_load_print_meta: n_expert_used    = 0
0.00.215.917 I llm_load_print_meta: causal attn      = 1
0.00.215.918 I llm_load_print_meta: pooling type     = 0
0.00.215.918 I llm_load_print_meta: rope type        = 2
0.00.215.918 I llm_load_print_meta: rope scaling     = linear
0.00.215.920 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.920 I llm_load_print_meta: freq_scale_train = 1
0.00.215.921 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.921 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.921 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.921 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.922 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.922 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.922 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.923 I llm_load_print_meta: model type       = 2B
0.00.215.923 I llm_load_print_meta: model ftype      = Q8_0
0.00.215.924 I llm_load_print_meta: model params     = 2.51 B
0.00.215.925 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.215.925 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.926 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.926 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.927 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.927 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.927 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.928 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.928 I llm_load_print_meta: max token length = 93
0.00.215.954 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.310.455 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.315.576 I llama_new_context_with_model: n_ctx      = 8192
0.00.315.582 I llama_new_context_with_model: n_batch    = 2048
0.00.315.583 I llama_new_context_with_model: n_ubatch   = 512
0.00.315.583 I llama_new_context_with_model: flash_attn = 0
0.00.315.585 I llama_new_context_with_model: freq_base  = 10000.0
0.00.315.586 I llama_new_context_with_model: freq_scale = 1
0.00.344.370 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.344.386 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.344.477 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.307 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.345.316 I llama_new_context_with_model: graph nodes  = 601
0.00.345.316 I llama_new_context_with_model: graph splits = 1
0.00.345.318 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.432.625 I main: llama threadpool init, n_threads = 4
0.00.432.637 I 
0.00.432.711 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.432.714 I 
0.00.432.741 I sampler seed: 2321442471
0.00.432.751 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.432.753 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.432.754 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively, hinting at the potential for increased social unrest and instability in the country. [end of text]


0.01.660.251 I llama_perf_sampler_print:    sampling time =       2.90 ms /    19 runs   (    0.15 ms per token,  6544.95 tokens per second)
0.01.660.254 I llama_perf_context_print:        load time =     430.74 ms
0.01.660.256 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.660.258 I llama_perf_context_print:        eval time =    1216.55 ms /    18 runs   (   67.59 ms per token,    14.80 tokens per second)
0.01.660.259 I llama_perf_context_print:       total time =    1227.63 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.532 I build: 3788 (722ec1eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.001.836 I main: load the model and apply lora adapter, if any
0.00.022.162 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.212 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.221 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.226 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.227 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.230 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.230 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.231 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.231 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.232 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.232 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.236 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.237 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.237 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.238 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.238 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.468 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.236 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.194 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.200 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.201 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.202 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.203 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.204 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.205 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.208 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.209 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.211 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.212 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.213 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.215 I llama_model_loader: - type  f32:   37 tensors
0.00.133.218 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.030 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.201.807 I llm_load_vocab: special tokens cache size = 5
0.00.220.211 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.220.225 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.220.226 I llm_load_print_meta: arch             = gemma
0.00.220.227 I llm_load_print_meta: vocab type       = SPM
0.00.220.228 I llm_load_print_meta: n_vocab          = 256000
0.00.220.228 I llm_load_print_meta: n_merges         = 0
0.00.220.229 I llm_load_print_meta: vocab_only       = 0
0.00.220.229 I llm_load_print_meta: n_ctx_train      = 8192
0.00.220.230 I llm_load_print_meta: n_embd           = 2048
0.00.220.230 I llm_load_print_meta: n_layer          = 18
0.00.220.242 I llm_load_print_meta: n_head           = 8
0.00.220.243 I llm_load_print_meta: n_head_kv        = 1
0.00.220.244 I llm_load_print_meta: n_rot            = 256
0.00.220.244 I llm_load_print_meta: n_swa            = 0
0.00.220.245 I llm_load_print_meta: n_embd_head_k    = 256
0.00.220.245 I llm_load_print_meta: n_embd_head_v    = 256
0.00.220.246 I llm_load_print_meta: n_gqa            = 8
0.00.220.247 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.220.248 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.220.249 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.220.250 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.220.251 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.220.251 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.220.251 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.220.252 I llm_load_print_meta: n_ff             = 16384
0.00.220.253 I llm_load_print_meta: n_expert         = 0
0.00.220.253 I llm_load_print_meta: n_expert_used    = 0
0.00.220.253 I llm_load_print_meta: causal attn      = 1
0.00.220.254 I llm_load_print_meta: pooling type     = 0
0.00.220.254 I llm_load_print_meta: rope type        = 2
0.00.220.254 I llm_load_print_meta: rope scaling     = linear
0.00.220.256 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.220.257 I llm_load_print_meta: freq_scale_train = 1
0.00.220.257 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.220.258 I llm_load_print_meta: rope_finetuned   = unknown
0.00.220.258 I llm_load_print_meta: ssm_d_conv       = 0
0.00.220.258 I llm_load_print_meta: ssm_d_inner      = 0
0.00.220.258 I llm_load_print_meta: ssm_d_state      = 0
0.00.220.259 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.220.259 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.220.259 I llm_load_print_meta: model type       = 2B
0.00.220.260 I llm_load_print_meta: model ftype      = Q8_0
0.00.220.261 I llm_load_print_meta: model params     = 2.51 B
0.00.220.261 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.220.262 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.220.262 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.220.263 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.220.263 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.220.263 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.220.264 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.220.264 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.220.264 I llm_load_print_meta: max token length = 93
0.00.220.290 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.295.620 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.295.626 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.295.627 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.295.628 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.295.628 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.295.629 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.300.616 I llama_new_context_with_model: n_ctx      = 8192
0.00.300.623 I llama_new_context_with_model: n_batch    = 2048
0.00.300.623 I llama_new_context_with_model: n_ubatch   = 512
0.00.300.624 I llama_new_context_with_model: flash_attn = 0
0.00.300.626 I llama_new_context_with_model: freq_base  = 10000.0
0.00.300.627 I llama_new_context_with_model: freq_scale = 1
0.00.330.380 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.330.395 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.330.514 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.331.430 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.331.437 I llama_new_context_with_model: graph nodes  = 601
0.00.331.438 I llama_new_context_with_model: graph splits = 1
0.00.331.439 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.416 I main: llama threadpool init, n_threads = 4
0.00.423.429 I 
0.00.423.505 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.423.508 I 
0.00.423.537 I sampler seed: 4019767687
0.00.423.547 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.550 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.423.551 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities with a touch of melancholy and longing. [end of text]


0.01.212.571 I llama_perf_sampler_print:    sampling time =       1.70 ms /    12 runs   (    0.14 ms per token,  7054.67 tokens per second)
0.01.212.574 I llama_perf_context_print:        load time =     421.56 ms
0.01.212.575 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.212.577 I llama_perf_context_print:        eval time =     782.35 ms /    11 runs   (   71.12 ms per token,    14.06 tokens per second)
0.01.212.577 I llama_perf_context_print:       total time =     789.16 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.627 I build: 3788 (722ec1eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.850 I main: llama backend init
0.00.001.999 I main: load the model and apply lora adapter, if any
0.00.022.044 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.099 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.108 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.114 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.116 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.121 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.125 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.126 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.127 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.128 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.129 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.135 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.137 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.139 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.140 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.142 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.925 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.748 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.673 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.680 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.681 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.681 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.682 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.683 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.684 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.686 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.687 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.688 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.688 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.689 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.693 I llama_model_loader: - type  f32:   37 tensors
0.00.132.696 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.435 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.201.177 I llm_load_vocab: special tokens cache size = 5
0.00.219.655 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.219.670 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.219.670 I llm_load_print_meta: arch             = gemma
0.00.219.671 I llm_load_print_meta: vocab type       = SPM
0.00.219.671 I llm_load_print_meta: n_vocab          = 256000
0.00.219.672 I llm_load_print_meta: n_merges         = 0
0.00.219.672 I llm_load_print_meta: vocab_only       = 0
0.00.219.672 I llm_load_print_meta: n_ctx_train      = 8192
0.00.219.673 I llm_load_print_meta: n_embd           = 2048
0.00.219.673 I llm_load_print_meta: n_layer          = 18
0.00.219.685 I llm_load_print_meta: n_head           = 8
0.00.219.686 I llm_load_print_meta: n_head_kv        = 1
0.00.219.686 I llm_load_print_meta: n_rot            = 256
0.00.219.686 I llm_load_print_meta: n_swa            = 0
0.00.219.687 I llm_load_print_meta: n_embd_head_k    = 256
0.00.219.687 I llm_load_print_meta: n_embd_head_v    = 256
0.00.219.688 I llm_load_print_meta: n_gqa            = 8
0.00.219.689 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.219.690 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.219.690 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.219.692 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.219.692 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.219.693 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.219.693 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.219.694 I llm_load_print_meta: n_ff             = 16384
0.00.219.694 I llm_load_print_meta: n_expert         = 0
0.00.219.695 I llm_load_print_meta: n_expert_used    = 0
0.00.219.695 I llm_load_print_meta: causal attn      = 1
0.00.219.695 I llm_load_print_meta: pooling type     = 0
0.00.219.695 I llm_load_print_meta: rope type        = 2
0.00.219.696 I llm_load_print_meta: rope scaling     = linear
0.00.219.697 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.219.698 I llm_load_print_meta: freq_scale_train = 1
0.00.219.698 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.219.698 I llm_load_print_meta: rope_finetuned   = unknown
0.00.219.699 I llm_load_print_meta: ssm_d_conv       = 0
0.00.219.699 I llm_load_print_meta: ssm_d_inner      = 0
0.00.219.699 I llm_load_print_meta: ssm_d_state      = 0
0.00.219.699 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.219.700 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.219.700 I llm_load_print_meta: model type       = 2B
0.00.219.701 I llm_load_print_meta: model ftype      = Q8_0
0.00.219.702 I llm_load_print_meta: model params     = 2.51 B
0.00.219.702 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.219.703 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.219.703 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.219.704 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.219.704 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.219.704 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.219.705 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.219.705 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.219.705 I llm_load_print_meta: max token length = 93
0.00.219.721 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.289.704 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.289.710 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.294.733 I llama_new_context_with_model: n_ctx      = 8192
0.00.294.740 I llama_new_context_with_model: n_batch    = 2048
0.00.294.741 I llama_new_context_with_model: n_ubatch   = 512
0.00.294.741 I llama_new_context_with_model: flash_attn = 0
0.00.294.743 I llama_new_context_with_model: freq_base  = 10000.0
0.00.294.744 I llama_new_context_with_model: freq_scale = 1
0.00.323.401 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.323.416 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.323.506 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.324.376 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.324.384 I llama_new_context_with_model: graph nodes  = 601
0.00.324.384 I llama_new_context_with_model: graph splits = 1
0.00.324.386 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.482 I main: llama threadpool init, n_threads = 4
0.00.419.495 I 
0.00.419.573 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.419.578 I 
0.00.419.619 I sampler seed: 2567219918
0.00.419.629 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.633 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.419.634 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasels.

## The Story of the Descendants

The Descendants are a group of teenage outcasts who have been exiled to the human world after being

0.02.856.645 I llama_perf_sampler_print:    sampling time =       5.19 ms /    33 runs   (    0.16 ms per token,  6358.38 tokens per second)
0.02.856.648 I llama_perf_context_print:        load time =     417.47 ms
0.02.856.650 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.856.654 I llama_perf_context_print:        eval time =    2418.52 ms /    32 runs   (   75.58 ms per token,    13.23 tokens per second)
0.02.856.655 I llama_perf_context_print:       total time =    2437.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.034s
user	0m29.544s
sys	0m9.338s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3788 (722ec1eb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32026.78 ms
main:    total time = 32026.78 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.442 I build: 3788 (722ec1eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.653 I main: llama backend init
0.00.001.782 I main: load the model and apply lora adapter, if any
0.00.022.055 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.109 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.119 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.131 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.136 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.140 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.141 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.142 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.143 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.144 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.144 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.149 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.150 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.151 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.152 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.152 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.785 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.081 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.984 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.990 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.991 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.992 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.992 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.993 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.994 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.996 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.997 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.997 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.998 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.999 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.002 I llama_model_loader: - type  f32:   37 tensors
0.00.132.004 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.005 I llama_model_loader: - type q6_K:   19 tensors
0.00.195.637 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.301 I llm_load_vocab: special tokens cache size = 5
0.00.214.698 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.713 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.713 I llm_load_print_meta: arch             = gemma
0.00.214.714 I llm_load_print_meta: vocab type       = SPM
0.00.214.715 I llm_load_print_meta: n_vocab          = 256000
0.00.214.715 I llm_load_print_meta: n_merges         = 0
0.00.214.716 I llm_load_print_meta: vocab_only       = 0
0.00.214.716 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.716 I llm_load_print_meta: n_embd           = 2048
0.00.214.717 I llm_load_print_meta: n_layer          = 18
0.00.214.728 I llm_load_print_meta: n_head           = 8
0.00.214.729 I llm_load_print_meta: n_head_kv        = 1
0.00.214.729 I llm_load_print_meta: n_rot            = 256
0.00.214.729 I llm_load_print_meta: n_swa            = 0
0.00.214.730 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.730 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.731 I llm_load_print_meta: n_gqa            = 8
0.00.214.732 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.733 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.734 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.735 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.735 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.736 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.736 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.737 I llm_load_print_meta: n_ff             = 16384
0.00.214.737 I llm_load_print_meta: n_expert         = 0
0.00.214.738 I llm_load_print_meta: n_expert_used    = 0
0.00.214.738 I llm_load_print_meta: causal attn      = 1
0.00.214.738 I llm_load_print_meta: pooling type     = 0
0.00.214.738 I llm_load_print_meta: rope type        = 2
0.00.214.739 I llm_load_print_meta: rope scaling     = linear
0.00.214.740 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.741 I llm_load_print_meta: freq_scale_train = 1
0.00.214.741 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.741 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.741 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.742 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.742 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.742 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.742 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.743 I llm_load_print_meta: model type       = 2B
0.00.214.743 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.214.744 I llm_load_print_meta: model params     = 2.51 B
0.00.214.745 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.214.746 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.746 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.746 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.747 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.747 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.747 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.747 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.748 I llm_load_print_meta: max token length = 93
0.00.214.770 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.272.805 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.272.813 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.272.814 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.272.815 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.272.815 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.272.816 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.277.910 I llama_new_context_with_model: n_ctx      = 8192
0.00.277.917 I llama_new_context_with_model: n_batch    = 2048
0.00.277.918 I llama_new_context_with_model: n_ubatch   = 512
0.00.277.918 I llama_new_context_with_model: flash_attn = 0
0.00.277.920 I llama_new_context_with_model: freq_base  = 10000.0
0.00.277.921 I llama_new_context_with_model: freq_scale = 1
0.00.307.936 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.307.952 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.308.042 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.308.890 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.308.899 I llama_new_context_with_model: graph nodes  = 601
0.00.308.899 I llama_new_context_with_model: graph splits = 1
0.00.308.902 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.391.538 I main: llama threadpool init, n_threads = 4
0.00.391.553 I 
0.00.391.635 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.391.640 I 
0.00.391.674 I sampler seed: 2181448483
0.00.391.690 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.391.694 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.391.695 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRED!

I am not sure what this means, could you please explain it to me?

The provided text is incomplete and contains an error. I

0.02.015.309 I llama_perf_sampler_print:    sampling time =       5.35 ms /    33 runs   (    0.16 ms per token,  6168.22 tokens per second)
0.02.015.312 I llama_perf_context_print:        load time =     389.74 ms
0.02.015.315 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.015.317 I llama_perf_context_print:        eval time =    1604.95 ms /    32 runs   (   50.15 ms per token,    19.94 tokens per second)
0.02.015.319 I llama_perf_context_print:       total time =    1623.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3788 (722ec1eb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32109.31 ms
main:    total time = 32109.31 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.542 I build: 3788 (722ec1eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.001.852 I main: load the model and apply lora adapter, if any
0.00.022.015 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.026 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.034 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.035 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.039 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.040 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.041 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.041 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.042 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.042 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.046 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.047 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.047 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.048 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.049 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.849 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.611 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.544 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.550 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.551 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.551 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.552 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.553 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.554 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.556 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.556 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.560 I llama_model_loader: - type  f32:   37 tensors
0.00.132.562 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.563 I llama_model_loader: - type q6_K:   19 tensors
0.00.197.590 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.314 I llm_load_vocab: special tokens cache size = 5
0.00.216.923 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.937 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.937 I llm_load_print_meta: arch             = gemma
0.00.216.938 I llm_load_print_meta: vocab type       = SPM
0.00.216.938 I llm_load_print_meta: n_vocab          = 256000
0.00.216.939 I llm_load_print_meta: n_merges         = 0
0.00.216.939 I llm_load_print_meta: vocab_only       = 0
0.00.216.939 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.940 I llm_load_print_meta: n_embd           = 2048
0.00.216.940 I llm_load_print_meta: n_layer          = 18
0.00.216.952 I llm_load_print_meta: n_head           = 8
0.00.216.953 I llm_load_print_meta: n_head_kv        = 1
0.00.216.953 I llm_load_print_meta: n_rot            = 256
0.00.216.954 I llm_load_print_meta: n_swa            = 0
0.00.216.954 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.954 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.955 I llm_load_print_meta: n_gqa            = 8
0.00.216.956 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.957 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.958 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.959 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.960 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.960 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.960 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.961 I llm_load_print_meta: n_ff             = 16384
0.00.216.961 I llm_load_print_meta: n_expert         = 0
0.00.216.962 I llm_load_print_meta: n_expert_used    = 0
0.00.216.962 I llm_load_print_meta: causal attn      = 1
0.00.216.962 I llm_load_print_meta: pooling type     = 0
0.00.216.962 I llm_load_print_meta: rope type        = 2
0.00.216.963 I llm_load_print_meta: rope scaling     = linear
0.00.216.965 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.965 I llm_load_print_meta: freq_scale_train = 1
0.00.216.966 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.966 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.966 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.967 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.967 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.967 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.967 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.968 I llm_load_print_meta: model type       = 2B
0.00.216.968 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.216.969 I llm_load_print_meta: model params     = 2.51 B
0.00.216.970 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.216.971 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.971 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.972 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.972 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.972 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.972 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.973 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.973 I llm_load_print_meta: max token length = 93
0.00.216.997 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.273.636 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.278.710 I llama_new_context_with_model: n_ctx      = 8192
0.00.278.715 I llama_new_context_with_model: n_batch    = 2048
0.00.278.716 I llama_new_context_with_model: n_ubatch   = 512
0.00.278.716 I llama_new_context_with_model: flash_attn = 0
0.00.278.718 I llama_new_context_with_model: freq_base  = 10000.0
0.00.278.719 I llama_new_context_with_model: freq_scale = 1
0.00.308.952 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.308.967 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.309.055 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.309.867 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.309.876 I llama_new_context_with_model: graph nodes  = 601
0.00.309.876 I llama_new_context_with_model: graph splits = 1
0.00.309.878 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.389.859 I main: llama threadpool init, n_threads = 4
0.00.389.871 I 
0.00.389.944 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.389.947 I 
0.00.389.977 I sampler seed: 1589093045
0.00.389.987 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.389.992 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.389.993 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvously.

I am unable to provide a response that contains offensive or derogatory language. My purpose is to assist users with tasks and provide information in a

0.01.994.139 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6899.44 tokens per second)
0.01.994.142 I llama_perf_context_print:        load time =     387.99 ms
0.01.994.143 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.994.145 I llama_perf_context_print:        eval time =    1586.33 ms /    32 runs   (   49.57 ms per token,    20.17 tokens per second)
0.01.994.146 I llama_perf_context_print:       total time =    1604.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.047s
user	8m14.677s
sys	0m6.891s
