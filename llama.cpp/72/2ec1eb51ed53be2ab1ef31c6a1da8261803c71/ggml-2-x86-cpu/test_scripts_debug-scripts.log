+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.611 I build: 3788 (722ec1eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.805 I main: llama backend init
0.00.002.735 I main: load the model and apply lora adapter, if any
0.00.024.685 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.867 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.951 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.961 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.962 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.966 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.967 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.967 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.968 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.969 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.969 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.975 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.975 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.976 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.977 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.978 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.050 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.324 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.457 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.465 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.466 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.467 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.467 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.469 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.470 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.473 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.474 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.474 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.475 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.476 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.483 I llama_model_loader: - type  f32:   37 tensors
0.00.196.488 I llama_model_loader: - type q8_0:  127 tensors
0.00.478.376 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.479.428 I llm_load_vocab: special tokens cache size = 5
0.00.537.410 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.537.464 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.537.465 I llm_load_print_meta: arch             = gemma
0.00.537.465 I llm_load_print_meta: vocab type       = SPM
0.00.537.466 I llm_load_print_meta: n_vocab          = 256000
0.00.537.468 I llm_load_print_meta: n_merges         = 0
0.00.537.469 I llm_load_print_meta: vocab_only       = 0
0.00.537.469 I llm_load_print_meta: n_ctx_train      = 8192
0.00.537.470 I llm_load_print_meta: n_embd           = 2048
0.00.537.470 I llm_load_print_meta: n_layer          = 18
0.00.537.504 I llm_load_print_meta: n_head           = 8
0.00.537.510 I llm_load_print_meta: n_head_kv        = 1
0.00.537.511 I llm_load_print_meta: n_rot            = 256
0.00.537.511 I llm_load_print_meta: n_swa            = 0
0.00.537.512 I llm_load_print_meta: n_embd_head_k    = 256
0.00.537.512 I llm_load_print_meta: n_embd_head_v    = 256
0.00.537.519 I llm_load_print_meta: n_gqa            = 8
0.00.537.524 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.537.528 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.537.529 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.537.531 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.537.531 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.537.532 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.537.532 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.537.537 I llm_load_print_meta: n_ff             = 16384
0.00.537.537 I llm_load_print_meta: n_expert         = 0
0.00.537.548 I llm_load_print_meta: n_expert_used    = 0
0.00.537.552 I llm_load_print_meta: causal attn      = 1
0.00.537.553 I llm_load_print_meta: pooling type     = 0
0.00.537.553 I llm_load_print_meta: rope type        = 2
0.00.537.553 I llm_load_print_meta: rope scaling     = linear
0.00.537.555 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.537.556 I llm_load_print_meta: freq_scale_train = 1
0.00.537.556 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.537.557 I llm_load_print_meta: rope_finetuned   = unknown
0.00.537.558 I llm_load_print_meta: ssm_d_conv       = 0
0.00.537.558 I llm_load_print_meta: ssm_d_inner      = 0
0.00.537.558 I llm_load_print_meta: ssm_d_state      = 0
0.00.537.559 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.537.559 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.537.563 I llm_load_print_meta: model type       = 2B
0.00.537.564 I llm_load_print_meta: model ftype      = Q8_0
0.00.537.565 I llm_load_print_meta: model params     = 2.51 B
0.00.537.566 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.537.566 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.537.567 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.537.567 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.537.567 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.537.568 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.537.568 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.537.569 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.537.569 I llm_load_print_meta: max token length = 93
0.00.537.743 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.637.181 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.637.191 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.637.191 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.637.192 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.637.193 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.637.193 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.642.799 I llama_new_context_with_model: n_ctx      = 8192
0.00.642.807 I llama_new_context_with_model: n_batch    = 2048
0.00.642.807 I llama_new_context_with_model: n_ubatch   = 512
0.00.642.808 I llama_new_context_with_model: flash_attn = 0
0.00.642.810 I llama_new_context_with_model: freq_base  = 10000.0
0.00.642.811 I llama_new_context_with_model: freq_scale = 1
0.00.671.326 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.671.367 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.671.506 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.672.893 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.672.900 I llama_new_context_with_model: graph nodes  = 601
0.00.672.900 I llama_new_context_with_model: graph splits = 1
0.00.672.915 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.283.751 I main: llama threadpool init, n_threads = 4
0.01.283.762 I 
0.01.283.856 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.283.860 I 
0.01.284.023 I sampler seed: 3672935583
0.01.284.033 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.284.037 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.284.038 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably. It is a powerful tool for data scientists, machine learning engineers, and business analysts.

**Key features:**

* **Automated machine learning:**

0.14.805.574 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.47 tokens per second)
0.14.805.577 I llama_perf_context_print:        load time =    1280.93 ms
0.14.805.600 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.805.602 I llama_perf_context_print:        eval time =   13440.16 ms /    32 runs   (  420.00 ms per token,     2.38 tokens per second)
0.14.805.603 I llama_perf_context_print:       total time =   13521.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.649 I build: 3788 (722ec1eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.002.810 I main: load the model and apply lora adapter, if any
0.00.025.038 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.128 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.143 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.145 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.149 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.152 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.153 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.154 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.155 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.155 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.162 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.163 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.164 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.164 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.165 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.328 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.115 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.413 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.421 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.422 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.423 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.423 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.424 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.425 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.428 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.429 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.430 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.431 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.197.432 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.442 I llama_model_loader: - type  f32:   37 tensors
0.00.197.445 I llama_model_loader: - type q8_0:  127 tensors
0.00.473.622 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.474.649 I llm_load_vocab: special tokens cache size = 5
0.00.532.641 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.532.698 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.532.699 I llm_load_print_meta: arch             = gemma
0.00.532.700 I llm_load_print_meta: vocab type       = SPM
0.00.532.701 I llm_load_print_meta: n_vocab          = 256000
0.00.532.704 I llm_load_print_meta: n_merges         = 0
0.00.532.704 I llm_load_print_meta: vocab_only       = 0
0.00.532.704 I llm_load_print_meta: n_ctx_train      = 8192
0.00.532.705 I llm_load_print_meta: n_embd           = 2048
0.00.532.705 I llm_load_print_meta: n_layer          = 18
0.00.532.739 I llm_load_print_meta: n_head           = 8
0.00.532.745 I llm_load_print_meta: n_head_kv        = 1
0.00.532.746 I llm_load_print_meta: n_rot            = 256
0.00.532.746 I llm_load_print_meta: n_swa            = 0
0.00.532.747 I llm_load_print_meta: n_embd_head_k    = 256
0.00.532.747 I llm_load_print_meta: n_embd_head_v    = 256
0.00.532.752 I llm_load_print_meta: n_gqa            = 8
0.00.532.756 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.532.761 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.532.762 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.532.763 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.532.764 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.532.764 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.532.765 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.532.769 I llm_load_print_meta: n_ff             = 16384
0.00.532.770 I llm_load_print_meta: n_expert         = 0
0.00.532.770 I llm_load_print_meta: n_expert_used    = 0
0.00.532.771 I llm_load_print_meta: causal attn      = 1
0.00.532.771 I llm_load_print_meta: pooling type     = 0
0.00.532.771 I llm_load_print_meta: rope type        = 2
0.00.532.772 I llm_load_print_meta: rope scaling     = linear
0.00.532.773 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.532.774 I llm_load_print_meta: freq_scale_train = 1
0.00.532.774 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.532.774 I llm_load_print_meta: rope_finetuned   = unknown
0.00.532.775 I llm_load_print_meta: ssm_d_conv       = 0
0.00.532.775 I llm_load_print_meta: ssm_d_inner      = 0
0.00.532.775 I llm_load_print_meta: ssm_d_state      = 0
0.00.532.776 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.532.776 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.532.792 I llm_load_print_meta: model type       = 2B
0.00.532.793 I llm_load_print_meta: model ftype      = Q8_0
0.00.532.794 I llm_load_print_meta: model params     = 2.51 B
0.00.532.795 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.532.796 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.532.796 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.532.797 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.532.797 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.532.797 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.532.798 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.532.798 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.532.798 I llm_load_print_meta: max token length = 93
0.00.532.969 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.626.253 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.632.055 I llama_new_context_with_model: n_ctx      = 8192
0.00.632.065 I llama_new_context_with_model: n_batch    = 2048
0.00.632.065 I llama_new_context_with_model: n_ubatch   = 512
0.00.632.066 I llama_new_context_with_model: flash_attn = 0
0.00.632.070 I llama_new_context_with_model: freq_base  = 10000.0
0.00.632.071 I llama_new_context_with_model: freq_scale = 1
0.00.662.600 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.662.649 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.662.780 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.664.122 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.664.128 I llama_new_context_with_model: graph nodes  = 601
0.00.664.129 I llama_new_context_with_model: graph splits = 1
0.00.664.146 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.274.366 I main: llama threadpool init, n_threads = 4
0.01.274.378 I 
0.01.274.474 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.274.478 I 
0.01.274.651 I sampler seed: 709493240
0.01.274.662 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.274.668 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.274.668 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably! [end of text]


0.03.007.132 I llama_perf_sampler_print:    sampling time =       6.54 ms /     5 runs   (    1.31 ms per token,   764.41 tokens per second)
0.03.007.136 I llama_perf_context_print:        load time =    1271.47 ms
0.03.007.137 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.007.139 I llama_perf_context_print:        eval time =    1720.24 ms /     4 runs   (  430.06 ms per token,     2.33 tokens per second)
0.03.007.140 I llama_perf_context_print:       total time =    1732.78 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.633 I build: 3788 (722ec1eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.002.821 I main: load the model and apply lora adapter, if any
0.00.024.523 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.715 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.809 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.821 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.822 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.827 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.831 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.833 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.835 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.837 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.839 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.848 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.852 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.854 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.855 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.859 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.774 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.875 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.929 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.936 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.937 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.938 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.938 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.940 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.940 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.943 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.944 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.945 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.946 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.195.947 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.954 I llama_model_loader: - type  f32:   37 tensors
0.00.195.959 I llama_model_loader: - type q8_0:  127 tensors
0.00.462.212 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.463.223 I llm_load_vocab: special tokens cache size = 5
0.00.520.846 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.520.899 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.520.900 I llm_load_print_meta: arch             = gemma
0.00.520.901 I llm_load_print_meta: vocab type       = SPM
0.00.520.901 I llm_load_print_meta: n_vocab          = 256000
0.00.520.904 I llm_load_print_meta: n_merges         = 0
0.00.520.904 I llm_load_print_meta: vocab_only       = 0
0.00.520.905 I llm_load_print_meta: n_ctx_train      = 8192
0.00.520.905 I llm_load_print_meta: n_embd           = 2048
0.00.520.906 I llm_load_print_meta: n_layer          = 18
0.00.520.938 I llm_load_print_meta: n_head           = 8
0.00.520.946 I llm_load_print_meta: n_head_kv        = 1
0.00.520.946 I llm_load_print_meta: n_rot            = 256
0.00.520.947 I llm_load_print_meta: n_swa            = 0
0.00.520.947 I llm_load_print_meta: n_embd_head_k    = 256
0.00.520.947 I llm_load_print_meta: n_embd_head_v    = 256
0.00.520.952 I llm_load_print_meta: n_gqa            = 8
0.00.520.957 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.520.962 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.520.963 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.520.964 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.520.965 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.520.965 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.520.966 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.520.971 I llm_load_print_meta: n_ff             = 16384
0.00.520.971 I llm_load_print_meta: n_expert         = 0
0.00.520.971 I llm_load_print_meta: n_expert_used    = 0
0.00.520.972 I llm_load_print_meta: causal attn      = 1
0.00.520.972 I llm_load_print_meta: pooling type     = 0
0.00.520.972 I llm_load_print_meta: rope type        = 2
0.00.520.973 I llm_load_print_meta: rope scaling     = linear
0.00.520.974 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.520.975 I llm_load_print_meta: freq_scale_train = 1
0.00.520.975 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.520.975 I llm_load_print_meta: rope_finetuned   = unknown
0.00.520.976 I llm_load_print_meta: ssm_d_conv       = 0
0.00.520.976 I llm_load_print_meta: ssm_d_inner      = 0
0.00.520.976 I llm_load_print_meta: ssm_d_state      = 0
0.00.520.976 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.520.977 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.520.978 I llm_load_print_meta: model type       = 2B
0.00.520.979 I llm_load_print_meta: model ftype      = Q8_0
0.00.520.980 I llm_load_print_meta: model params     = 2.51 B
0.00.520.981 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.520.981 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.520.982 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.520.982 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.520.983 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.520.983 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.520.984 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.520.984 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.520.984 I llm_load_print_meta: max token length = 93
0.00.521.171 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.597.032 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.597.045 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.597.046 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.597.047 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.597.047 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.597.048 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.602.917 I llama_new_context_with_model: n_ctx      = 8192
0.00.602.926 I llama_new_context_with_model: n_batch    = 2048
0.00.602.926 I llama_new_context_with_model: n_ubatch   = 512
0.00.602.927 I llama_new_context_with_model: flash_attn = 0
0.00.602.930 I llama_new_context_with_model: freq_base  = 10000.0
0.00.602.931 I llama_new_context_with_model: freq_scale = 1
0.00.632.715 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.632.757 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.632.878 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.634.334 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.634.341 I llama_new_context_with_model: graph nodes  = 601
0.00.634.342 I llama_new_context_with_model: graph splits = 1
0.00.634.362 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.244.266 I main: llama threadpool init, n_threads = 4
0.01.244.278 I 
0.01.244.383 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.244.387 I 
0.01.244.551 I sampler seed: 1350105416
0.01.244.561 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.244.566 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.244.569 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

**Assistant**

I understand. I will ensure to provide you with accurate and timely information while adhering to the specified instructions. [end of text]


0.13.942.288 I llama_perf_sampler_print:    sampling time =      46.12 ms /    31 runs   (    1.49 ms per token,   672.22 tokens per second)
0.13.942.290 I llama_perf_context_print:        load time =    1241.36 ms
0.13.942.292 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.942.293 I llama_perf_context_print:        eval time =   12621.12 ms /    30 runs   (  420.70 ms per token,     2.38 tokens per second)
0.13.942.294 I llama_perf_context_print:       total time =   12698.03 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.624 I build: 3788 (722ec1eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.003.106 I main: load the model and apply lora adapter, if any
0.00.024.958 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.154 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.247 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.258 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.260 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.264 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.264 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.265 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.266 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.267 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.268 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.277 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.279 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.280 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.282 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.283 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.202 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.863 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.964 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.972 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.973 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.973 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.974 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.975 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.976 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.979 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.980 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.981 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.982 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.195.983 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.991 I llama_model_loader: - type  f32:   37 tensors
0.00.195.995 I llama_model_loader: - type q8_0:  127 tensors
0.00.469.204 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.470.253 I llm_load_vocab: special tokens cache size = 5
0.00.528.452 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.528.516 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.528.520 I llm_load_print_meta: arch             = gemma
0.00.528.521 I llm_load_print_meta: vocab type       = SPM
0.00.528.522 I llm_load_print_meta: n_vocab          = 256000
0.00.528.524 I llm_load_print_meta: n_merges         = 0
0.00.528.524 I llm_load_print_meta: vocab_only       = 0
0.00.528.525 I llm_load_print_meta: n_ctx_train      = 8192
0.00.528.527 I llm_load_print_meta: n_embd           = 2048
0.00.528.528 I llm_load_print_meta: n_layer          = 18
0.00.528.569 I llm_load_print_meta: n_head           = 8
0.00.528.581 I llm_load_print_meta: n_head_kv        = 1
0.00.528.581 I llm_load_print_meta: n_rot            = 256
0.00.528.582 I llm_load_print_meta: n_swa            = 0
0.00.528.582 I llm_load_print_meta: n_embd_head_k    = 256
0.00.528.582 I llm_load_print_meta: n_embd_head_v    = 256
0.00.528.587 I llm_load_print_meta: n_gqa            = 8
0.00.528.591 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.528.596 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.528.597 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.528.600 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.528.600 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.528.601 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.528.602 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.528.610 I llm_load_print_meta: n_ff             = 16384
0.00.528.613 I llm_load_print_meta: n_expert         = 0
0.00.528.614 I llm_load_print_meta: n_expert_used    = 0
0.00.528.615 I llm_load_print_meta: causal attn      = 1
0.00.528.615 I llm_load_print_meta: pooling type     = 0
0.00.528.616 I llm_load_print_meta: rope type        = 2
0.00.528.617 I llm_load_print_meta: rope scaling     = linear
0.00.528.619 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.528.620 I llm_load_print_meta: freq_scale_train = 1
0.00.528.620 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.528.621 I llm_load_print_meta: rope_finetuned   = unknown
0.00.528.621 I llm_load_print_meta: ssm_d_conv       = 0
0.00.528.622 I llm_load_print_meta: ssm_d_inner      = 0
0.00.528.623 I llm_load_print_meta: ssm_d_state      = 0
0.00.528.623 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.528.624 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.528.625 I llm_load_print_meta: model type       = 2B
0.00.528.632 I llm_load_print_meta: model ftype      = Q8_0
0.00.528.634 I llm_load_print_meta: model params     = 2.51 B
0.00.528.635 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.528.635 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.528.636 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.528.637 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.528.637 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.528.638 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.528.639 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.528.639 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.528.639 I llm_load_print_meta: max token length = 93
0.00.528.828 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.600.777 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.600.786 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.606.515 I llama_new_context_with_model: n_ctx      = 8192
0.00.606.522 I llama_new_context_with_model: n_batch    = 2048
0.00.606.523 I llama_new_context_with_model: n_ubatch   = 512
0.00.606.523 I llama_new_context_with_model: flash_attn = 0
0.00.606.526 I llama_new_context_with_model: freq_base  = 10000.0
0.00.606.526 I llama_new_context_with_model: freq_scale = 1
0.00.637.206 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.637.252 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.637.381 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.638.747 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.638.754 I llama_new_context_with_model: graph nodes  = 601
0.00.638.755 I llama_new_context_with_model: graph splits = 1
0.00.638.773 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.257.380 I main: llama threadpool init, n_threads = 4
0.01.257.391 I 
0.01.257.493 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.257.498 I 
0.01.257.662 I sampler seed: 2795225780
0.01.257.673 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.257.679 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.257.680 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

I am not sure what the question is asking. Please provide more context or rephrase the question in a more specific way. [end of text]


0.14.106.315 I llama_perf_sampler_print:    sampling time =      46.14 ms /    31 runs   (    1.49 ms per token,   671.93 tokens per second)
0.14.106.318 I llama_perf_context_print:        load time =    1254.16 ms
0.14.106.320 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.106.321 I llama_perf_context_print:        eval time =   12771.99 ms /    30 runs   (  425.73 ms per token,     2.35 tokens per second)
0.14.106.322 I llama_perf_context_print:       total time =   12848.95 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m55.547s
user	2m55.529s
sys	0m9.331s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3788 (722ec1eb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198137.94 ms
main:    total time = 198137.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.636 I build: 3788 (722ec1eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
0.00.024.919 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.094 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.180 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.192 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.193 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.196 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.198 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.199 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.199 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.200 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.201 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.206 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.207 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.208 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.211 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.212 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.769 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.358 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.371 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.377 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.378 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.379 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.380 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.380 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.381 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.384 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.385 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.386 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.387 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.195.388 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.395 I llama_model_loader: - type  f32:   37 tensors
0.00.195.399 I llama_model_loader: - type q4_K:  108 tensors
0.00.195.400 I llama_model_loader: - type q6_K:   19 tensors
0.00.457.421 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.458.410 I llm_load_vocab: special tokens cache size = 5
0.00.516.348 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.516.407 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.516.411 I llm_load_print_meta: arch             = gemma
0.00.516.411 I llm_load_print_meta: vocab type       = SPM
0.00.516.412 I llm_load_print_meta: n_vocab          = 256000
0.00.516.414 I llm_load_print_meta: n_merges         = 0
0.00.516.415 I llm_load_print_meta: vocab_only       = 0
0.00.516.415 I llm_load_print_meta: n_ctx_train      = 8192
0.00.516.416 I llm_load_print_meta: n_embd           = 2048
0.00.516.416 I llm_load_print_meta: n_layer          = 18
0.00.516.457 I llm_load_print_meta: n_head           = 8
0.00.516.467 I llm_load_print_meta: n_head_kv        = 1
0.00.516.467 I llm_load_print_meta: n_rot            = 256
0.00.516.468 I llm_load_print_meta: n_swa            = 0
0.00.516.468 I llm_load_print_meta: n_embd_head_k    = 256
0.00.516.468 I llm_load_print_meta: n_embd_head_v    = 256
0.00.516.474 I llm_load_print_meta: n_gqa            = 8
0.00.516.478 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.516.483 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.516.484 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.516.486 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.516.487 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.516.488 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.516.489 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.516.493 I llm_load_print_meta: n_ff             = 16384
0.00.516.494 I llm_load_print_meta: n_expert         = 0
0.00.516.495 I llm_load_print_meta: n_expert_used    = 0
0.00.516.495 I llm_load_print_meta: causal attn      = 1
0.00.516.496 I llm_load_print_meta: pooling type     = 0
0.00.516.496 I llm_load_print_meta: rope type        = 2
0.00.516.497 I llm_load_print_meta: rope scaling     = linear
0.00.516.498 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.516.499 I llm_load_print_meta: freq_scale_train = 1
0.00.516.500 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.516.500 I llm_load_print_meta: rope_finetuned   = unknown
0.00.516.500 I llm_load_print_meta: ssm_d_conv       = 0
0.00.516.501 I llm_load_print_meta: ssm_d_inner      = 0
0.00.516.501 I llm_load_print_meta: ssm_d_state      = 0
0.00.516.501 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.516.502 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.516.503 I llm_load_print_meta: model type       = 2B
0.00.516.504 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.516.505 I llm_load_print_meta: model params     = 2.51 B
0.00.516.505 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.516.506 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.516.507 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.516.507 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.516.507 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.516.508 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.516.509 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.516.509 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.516.510 I llm_load_print_meta: max token length = 93
0.00.516.688 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.575.714 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.575.724 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.575.725 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.575.726 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.575.726 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.575.727 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.581.347 I llama_new_context_with_model: n_ctx      = 8192
0.00.581.354 I llama_new_context_with_model: n_batch    = 2048
0.00.581.355 I llama_new_context_with_model: n_ubatch   = 512
0.00.581.355 I llama_new_context_with_model: flash_attn = 0
0.00.581.358 I llama_new_context_with_model: freq_base  = 10000.0
0.00.581.359 I llama_new_context_with_model: freq_scale = 1
0.00.609.939 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.609.981 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.610.099 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.611.442 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.611.448 I llama_new_context_with_model: graph nodes  = 601
0.00.611.449 I llama_new_context_with_model: graph splits = 1
0.00.611.465 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.190.208 I main: llama threadpool init, n_threads = 4
0.01.190.220 I 
0.01.190.315 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.190.319 I 
0.01.190.479 I sampler seed: 858074604
0.01.190.489 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.190.493 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.190.494 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneustalline patterns formed spontaneously by the growth of bacteria.

**Image:**

[Image of a maneustalline pattern formed by bacteria]

**Questions:**



0.12.135.021 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.74 tokens per second)
0.12.135.034 I llama_perf_context_print:        load time =    1187.34 ms
0.12.135.036 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.135.039 I llama_perf_context_print:        eval time =   10862.94 ms /    32 runs   (  339.47 ms per token,     2.95 tokens per second)
0.12.135.040 I llama_perf_context_print:       total time =   10944.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3788 (722ec1eb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198475.40 ms
main:    total time = 198475.40 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.627 I build: 3788 (722ec1eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.002.762 I main: load the model and apply lora adapter, if any
0.00.024.832 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.920 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.933 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.935 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.938 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.939 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.941 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.942 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.943 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.944 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.949 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.950 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.951 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.952 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.953 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.212 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.111 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.180 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.188 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.189 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.190 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.190 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.192 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.192 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.195 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.196 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.204 I llama_model_loader: - type  f32:   37 tensors
0.00.196.209 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.210 I llama_model_loader: - type q6_K:   19 tensors
0.00.461.211 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.462.208 I llm_load_vocab: special tokens cache size = 5
0.00.520.188 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.520.241 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.520.243 I llm_load_print_meta: arch             = gemma
0.00.520.244 I llm_load_print_meta: vocab type       = SPM
0.00.520.244 I llm_load_print_meta: n_vocab          = 256000
0.00.520.246 I llm_load_print_meta: n_merges         = 0
0.00.520.247 I llm_load_print_meta: vocab_only       = 0
0.00.520.247 I llm_load_print_meta: n_ctx_train      = 8192
0.00.520.247 I llm_load_print_meta: n_embd           = 2048
0.00.520.248 I llm_load_print_meta: n_layer          = 18
0.00.520.281 I llm_load_print_meta: n_head           = 8
0.00.520.287 I llm_load_print_meta: n_head_kv        = 1
0.00.520.288 I llm_load_print_meta: n_rot            = 256
0.00.520.288 I llm_load_print_meta: n_swa            = 0
0.00.520.289 I llm_load_print_meta: n_embd_head_k    = 256
0.00.520.289 I llm_load_print_meta: n_embd_head_v    = 256
0.00.520.294 I llm_load_print_meta: n_gqa            = 8
0.00.520.298 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.520.302 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.520.303 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.520.305 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.520.305 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.520.306 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.520.306 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.520.310 I llm_load_print_meta: n_ff             = 16384
0.00.520.311 I llm_load_print_meta: n_expert         = 0
0.00.520.311 I llm_load_print_meta: n_expert_used    = 0
0.00.520.312 I llm_load_print_meta: causal attn      = 1
0.00.520.312 I llm_load_print_meta: pooling type     = 0
0.00.520.312 I llm_load_print_meta: rope type        = 2
0.00.520.313 I llm_load_print_meta: rope scaling     = linear
0.00.520.315 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.520.315 I llm_load_print_meta: freq_scale_train = 1
0.00.520.316 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.520.316 I llm_load_print_meta: rope_finetuned   = unknown
0.00.520.316 I llm_load_print_meta: ssm_d_conv       = 0
0.00.520.317 I llm_load_print_meta: ssm_d_inner      = 0
0.00.520.317 I llm_load_print_meta: ssm_d_state      = 0
0.00.520.318 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.520.318 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.520.332 I llm_load_print_meta: model type       = 2B
0.00.520.334 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.520.335 I llm_load_print_meta: model params     = 2.51 B
0.00.520.336 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.520.336 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.520.337 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.520.337 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.520.338 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.520.338 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.520.338 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.520.339 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.520.339 I llm_load_print_meta: max token length = 93
0.00.520.520 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.578.029 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.583.462 I llama_new_context_with_model: n_ctx      = 8192
0.00.583.468 I llama_new_context_with_model: n_batch    = 2048
0.00.583.468 I llama_new_context_with_model: n_ubatch   = 512
0.00.583.469 I llama_new_context_with_model: flash_attn = 0
0.00.583.471 I llama_new_context_with_model: freq_base  = 10000.0
0.00.583.472 I llama_new_context_with_model: freq_scale = 1
0.00.612.914 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.612.958 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.613.070 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.614.395 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.614.401 I llama_new_context_with_model: graph nodes  = 601
0.00.614.401 I llama_new_context_with_model: graph splits = 1
0.00.614.417 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.191.633 I main: llama threadpool init, n_threads = 4
0.01.191.645 I 
0.01.191.737 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.191.741 I 
0.01.191.904 I sampler seed: 3297953647
0.01.191.914 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.191.918 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.191.919 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconal in the heart, or coronary artery disease, is a leading cause of death worldwide.

**Symptoms of coronary artery disease:**

- Shortness of

0.12.110.760 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.78 tokens per second)
0.12.110.763 I llama_perf_context_print:        load time =    1188.79 ms
0.12.110.765 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.110.766 I llama_perf_context_print:        eval time =   10837.19 ms /    32 runs   (  338.66 ms per token,     2.95 tokens per second)
0.12.110.767 I llama_perf_context_print:       total time =   10919.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.686s
user	50m3.019s
sys	0m6.469s
