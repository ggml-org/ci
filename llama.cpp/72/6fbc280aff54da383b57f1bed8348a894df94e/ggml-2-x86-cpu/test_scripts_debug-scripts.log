+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4017 (726fbc28) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.001.098 I main: load the model and apply lora adapter, if any
0.00.023.605 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.613 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.703 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.714 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.716 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.721 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.725 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.726 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.727 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.728 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.729 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.735 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.736 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.737 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.738 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.740 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.572 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.823 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.371 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.381 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.383 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.384 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.385 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.386 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.387 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.391 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.392 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.393 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.394 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.396 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.403 I llama_model_loader: - type  f32:   37 tensors
0.00.266.405 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.895 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.966 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.937 I llm_load_vocab: special tokens cache size = 5
0.00.607.520 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.588 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.588 I llm_load_print_meta: arch             = gemma
0.00.607.589 I llm_load_print_meta: vocab type       = SPM
0.00.607.591 I llm_load_print_meta: n_vocab          = 256000
0.00.607.593 I llm_load_print_meta: n_merges         = 0
0.00.607.594 I llm_load_print_meta: vocab_only       = 0
0.00.607.594 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.594 I llm_load_print_meta: n_embd           = 2048
0.00.607.595 I llm_load_print_meta: n_layer          = 18
0.00.607.661 I llm_load_print_meta: n_head           = 8
0.00.607.670 I llm_load_print_meta: n_head_kv        = 1
0.00.607.671 I llm_load_print_meta: n_rot            = 256
0.00.607.672 I llm_load_print_meta: n_swa            = 0
0.00.607.672 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.673 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.678 I llm_load_print_meta: n_gqa            = 8
0.00.607.682 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.687 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.694 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.695 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.695 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.696 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.696 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.701 I llm_load_print_meta: n_ff             = 16384
0.00.607.702 I llm_load_print_meta: n_expert         = 0
0.00.607.702 I llm_load_print_meta: n_expert_used    = 0
0.00.607.703 I llm_load_print_meta: causal attn      = 1
0.00.607.703 I llm_load_print_meta: pooling type     = 0
0.00.607.704 I llm_load_print_meta: rope type        = 2
0.00.607.704 I llm_load_print_meta: rope scaling     = linear
0.00.607.706 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.706 I llm_load_print_meta: freq_scale_train = 1
0.00.607.707 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.708 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.709 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.709 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.709 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.709 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.710 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.711 I llm_load_print_meta: model type       = 2B
0.00.607.712 I llm_load_print_meta: model ftype      = Q8_0
0.00.607.713 I llm_load_print_meta: model params     = 2.51 B
0.00.607.722 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.607.723 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.723 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.724 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.724 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.725 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.725 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.726 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.732 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.734 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.734 I llm_load_print_meta: max token length = 93
0.00.713.080 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.713.089 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.713.090 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.713.091 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.713.091 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.713.092 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.718.927 I llama_new_context_with_model: n_seq_max     = 1
0.00.718.934 I llama_new_context_with_model: n_ctx         = 4096
0.00.718.935 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.718.935 I llama_new_context_with_model: n_batch       = 2048
0.00.718.935 I llama_new_context_with_model: n_ubatch      = 512
0.00.718.936 I llama_new_context_with_model: flash_attn    = 0
0.00.718.938 I llama_new_context_with_model: freq_base     = 10000.0
0.00.718.939 I llama_new_context_with_model: freq_scale    = 1
0.00.718.939 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.735.351 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.735.388 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.735.513 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.053 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.738.057 I llama_new_context_with_model: graph nodes  = 601
0.00.738.057 I llama_new_context_with_model: graph splits = 1
0.00.738.081 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.001 I main: llama threadpool init, n_threads = 4
0.01.345.013 I 
0.01.345.120 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.124 I 
0.01.345.352 I sampler seed: 1048298756
0.01.345.365 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.372 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.345.375 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.375 I 
 increably, a mischievous grin spreading across his face.

"Alright, alright, settle down. Let's talk about the game."

The players,

0.14.772.861 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   671.91 tokens per second)
0.14.772.874 I llama_perf_context_print:        load time =    1343.81 ms
0.14.772.876 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.772.879 I llama_perf_context_print:        eval time =   13337.24 ms /    32 runs   (  416.79 ms per token,     2.40 tokens per second)
0.14.772.880 I llama_perf_context_print:       total time =   13427.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.621 I build: 4017 (726fbc28) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.824 I main: llama backend init
0.00.001.077 I main: load the model and apply lora adapter, if any
0.00.023.403 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.493 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.506 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.508 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.512 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.515 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.517 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.518 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.520 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.521 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.527 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.528 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.529 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.531 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.534 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.120 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.676 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.065 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.074 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.075 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.076 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.077 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.078 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.080 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.083 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.084 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.085 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.086 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.264.087 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.095 I llama_model_loader: - type  f32:   37 tensors
0.00.264.097 I llama_model_loader: - type q8_0:  127 tensors
0.00.434.193 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.876 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.493.764 I llm_load_vocab: special tokens cache size = 5
0.00.587.465 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.587.539 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.587.540 I llm_load_print_meta: arch             = gemma
0.00.587.540 I llm_load_print_meta: vocab type       = SPM
0.00.587.542 I llm_load_print_meta: n_vocab          = 256000
0.00.587.544 I llm_load_print_meta: n_merges         = 0
0.00.587.544 I llm_load_print_meta: vocab_only       = 0
0.00.587.545 I llm_load_print_meta: n_ctx_train      = 8192
0.00.587.545 I llm_load_print_meta: n_embd           = 2048
0.00.587.545 I llm_load_print_meta: n_layer          = 18
0.00.587.611 I llm_load_print_meta: n_head           = 8
0.00.587.620 I llm_load_print_meta: n_head_kv        = 1
0.00.587.621 I llm_load_print_meta: n_rot            = 256
0.00.587.623 I llm_load_print_meta: n_swa            = 0
0.00.587.623 I llm_load_print_meta: n_embd_head_k    = 256
0.00.587.624 I llm_load_print_meta: n_embd_head_v    = 256
0.00.587.629 I llm_load_print_meta: n_gqa            = 8
0.00.587.651 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.587.658 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.587.663 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.587.664 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.587.665 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.587.665 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.587.665 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.587.670 I llm_load_print_meta: n_ff             = 16384
0.00.587.671 I llm_load_print_meta: n_expert         = 0
0.00.587.671 I llm_load_print_meta: n_expert_used    = 0
0.00.587.672 I llm_load_print_meta: causal attn      = 1
0.00.587.673 I llm_load_print_meta: pooling type     = 0
0.00.587.673 I llm_load_print_meta: rope type        = 2
0.00.587.674 I llm_load_print_meta: rope scaling     = linear
0.00.587.675 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.587.676 I llm_load_print_meta: freq_scale_train = 1
0.00.587.677 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.587.677 I llm_load_print_meta: rope_finetuned   = unknown
0.00.587.678 I llm_load_print_meta: ssm_d_conv       = 0
0.00.587.678 I llm_load_print_meta: ssm_d_inner      = 0
0.00.587.679 I llm_load_print_meta: ssm_d_state      = 0
0.00.587.679 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.587.679 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.587.680 I llm_load_print_meta: model type       = 2B
0.00.587.681 I llm_load_print_meta: model ftype      = Q8_0
0.00.587.682 I llm_load_print_meta: model params     = 2.51 B
0.00.587.692 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.587.693 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.587.694 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.587.694 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.587.695 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.587.695 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.587.696 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.587.696 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.587.702 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.587.704 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.587.704 I llm_load_print_meta: max token length = 93
0.00.684.798 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.690.776 I llama_new_context_with_model: n_seq_max     = 1
0.00.690.783 I llama_new_context_with_model: n_ctx         = 4096
0.00.690.783 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.690.783 I llama_new_context_with_model: n_batch       = 2048
0.00.690.784 I llama_new_context_with_model: n_ubatch      = 512
0.00.690.784 I llama_new_context_with_model: flash_attn    = 0
0.00.690.786 I llama_new_context_with_model: freq_base     = 10000.0
0.00.690.787 I llama_new_context_with_model: freq_scale    = 1
0.00.690.788 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.707.873 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.707.913 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.708.037 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.710.567 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.710.571 I llama_new_context_with_model: graph nodes  = 601
0.00.710.572 I llama_new_context_with_model: graph splits = 1
0.00.710.595 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.316.670 I main: llama threadpool init, n_threads = 4
0.01.316.683 I 
0.01.316.791 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.316.795 I 
0.01.317.021 I sampler seed: 3550091284
0.01.317.033 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.317.040 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.317.043 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.317.044 I 
 increably. It has been revealed that the average cost of a gallon of gasoline in the United States is $3.84. What is the percent increase

0.14.960.173 I llama_perf_sampler_print:    sampling time =      49.43 ms /    33 runs   (    1.50 ms per token,   667.66 tokens per second)
0.14.960.189 I llama_perf_context_print:        load time =    1315.50 ms
0.14.960.190 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.960.192 I llama_perf_context_print:        eval time =   13551.88 ms /    32 runs   (  423.50 ms per token,     2.36 tokens per second)
0.14.960.193 I llama_perf_context_print:       total time =   13643.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4017 (726fbc28) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.001.100 I main: load the model and apply lora adapter, if any
0.00.023.537 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.550 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.644 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.656 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.658 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.663 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.667 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.668 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.669 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.670 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.672 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.680 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.681 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.682 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.683 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.684 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.073 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.385 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.788 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.801 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.802 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.803 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.804 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.806 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.807 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.820 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.823 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.825 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.833 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.835 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.843 I llama_model_loader: - type  f32:   37 tensors
0.00.266.846 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.787 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.094 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.520.053 I llm_load_vocab: special tokens cache size = 5
0.00.613.876 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.950 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.951 I llm_load_print_meta: arch             = gemma
0.00.613.952 I llm_load_print_meta: vocab type       = SPM
0.00.613.953 I llm_load_print_meta: n_vocab          = 256000
0.00.613.956 I llm_load_print_meta: n_merges         = 0
0.00.613.957 I llm_load_print_meta: vocab_only       = 0
0.00.613.957 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.957 I llm_load_print_meta: n_embd           = 2048
0.00.613.958 I llm_load_print_meta: n_layer          = 18
0.00.614.039 I llm_load_print_meta: n_head           = 8
0.00.614.050 I llm_load_print_meta: n_head_kv        = 1
0.00.614.051 I llm_load_print_meta: n_rot            = 256
0.00.614.051 I llm_load_print_meta: n_swa            = 0
0.00.614.052 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.052 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.057 I llm_load_print_meta: n_gqa            = 8
0.00.614.062 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.068 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.080 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.085 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.085 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.085 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.086 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.091 I llm_load_print_meta: n_ff             = 16384
0.00.614.094 I llm_load_print_meta: n_expert         = 0
0.00.614.094 I llm_load_print_meta: n_expert_used    = 0
0.00.614.095 I llm_load_print_meta: causal attn      = 1
0.00.614.095 I llm_load_print_meta: pooling type     = 0
0.00.614.096 I llm_load_print_meta: rope type        = 2
0.00.614.096 I llm_load_print_meta: rope scaling     = linear
0.00.614.097 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.098 I llm_load_print_meta: freq_scale_train = 1
0.00.614.098 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.099 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.099 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.099 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.099 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.100 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.100 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.101 I llm_load_print_meta: model type       = 2B
0.00.614.102 I llm_load_print_meta: model ftype      = Q8_0
0.00.614.102 I llm_load_print_meta: model params     = 2.51 B
0.00.614.112 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.614.112 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.113 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.113 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.114 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.115 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.115 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.116 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.121 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.123 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.123 I llm_load_print_meta: max token length = 93
0.00.710.141 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.710.149 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.710.150 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.710.151 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.710.152 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.710.152 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.715.962 I llama_new_context_with_model: n_seq_max     = 1
0.00.715.970 I llama_new_context_with_model: n_ctx         = 4096
0.00.715.970 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.715.971 I llama_new_context_with_model: n_batch       = 2048
0.00.715.971 I llama_new_context_with_model: n_ubatch      = 512
0.00.715.971 I llama_new_context_with_model: flash_attn    = 0
0.00.715.974 I llama_new_context_with_model: freq_base     = 10000.0
0.00.715.975 I llama_new_context_with_model: freq_scale    = 1
0.00.715.976 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.732.645 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.732.688 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.732.814 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.735.351 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.735.355 I llama_new_context_with_model: graph nodes  = 601
0.00.735.355 I llama_new_context_with_model: graph splits = 1
0.00.735.379 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.342.267 I main: llama threadpool init, n_threads = 4
0.01.342.280 I 
0.01.342.384 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.342.388 I 
0.01.342.619 I sampler seed: 473356456
0.01.342.632 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.342.638 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.342.642 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.342.642 I 
 increasities with a playful and mischievous tone. [end of text]


0.05.561.983 I llama_perf_sampler_print:    sampling time =      15.46 ms /    11 runs   (    1.41 ms per token,   711.51 tokens per second)
0.05.561.987 I llama_perf_context_print:        load time =    1341.07 ms
0.05.561.988 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.561.990 I llama_perf_context_print:        eval time =    4190.36 ms /    10 runs   (  419.04 ms per token,     2.39 tokens per second)
0.05.561.994 I llama_perf_context_print:       total time =    4219.73 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 4017 (726fbc28) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.883 I main: llama backend init
0.00.001.146 I main: load the model and apply lora adapter, if any
0.00.023.849 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.863 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.958 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.971 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.973 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.977 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.981 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.982 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.983 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.984 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.985 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.993 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.994 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.996 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.998 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.999 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.911 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.805 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.214 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.222 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.223 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.224 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.225 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.227 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.228 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.231 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.232 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.233 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.234 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.235 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.243 I llama_model_loader: - type  f32:   37 tensors
0.00.265.246 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.220 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.187 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.125 I llm_load_vocab: special tokens cache size = 5
0.00.593.796 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.593.868 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.593.869 I llm_load_print_meta: arch             = gemma
0.00.593.870 I llm_load_print_meta: vocab type       = SPM
0.00.593.871 I llm_load_print_meta: n_vocab          = 256000
0.00.593.873 I llm_load_print_meta: n_merges         = 0
0.00.593.873 I llm_load_print_meta: vocab_only       = 0
0.00.593.874 I llm_load_print_meta: n_ctx_train      = 8192
0.00.593.874 I llm_load_print_meta: n_embd           = 2048
0.00.593.874 I llm_load_print_meta: n_layer          = 18
0.00.593.939 I llm_load_print_meta: n_head           = 8
0.00.593.946 I llm_load_print_meta: n_head_kv        = 1
0.00.593.948 I llm_load_print_meta: n_rot            = 256
0.00.593.948 I llm_load_print_meta: n_swa            = 0
0.00.593.949 I llm_load_print_meta: n_embd_head_k    = 256
0.00.593.949 I llm_load_print_meta: n_embd_head_v    = 256
0.00.593.954 I llm_load_print_meta: n_gqa            = 8
0.00.593.959 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.593.965 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.593.966 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.593.967 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.593.968 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.593.969 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.593.970 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.593.975 I llm_load_print_meta: n_ff             = 16384
0.00.593.975 I llm_load_print_meta: n_expert         = 0
0.00.593.976 I llm_load_print_meta: n_expert_used    = 0
0.00.593.983 I llm_load_print_meta: causal attn      = 1
0.00.593.983 I llm_load_print_meta: pooling type     = 0
0.00.593.983 I llm_load_print_meta: rope type        = 2
0.00.593.984 I llm_load_print_meta: rope scaling     = linear
0.00.593.986 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.593.986 I llm_load_print_meta: freq_scale_train = 1
0.00.593.987 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.593.987 I llm_load_print_meta: rope_finetuned   = unknown
0.00.593.988 I llm_load_print_meta: ssm_d_conv       = 0
0.00.593.988 I llm_load_print_meta: ssm_d_inner      = 0
0.00.593.988 I llm_load_print_meta: ssm_d_state      = 0
0.00.593.989 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.593.989 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.593.990 I llm_load_print_meta: model type       = 2B
0.00.593.991 I llm_load_print_meta: model ftype      = Q8_0
0.00.593.991 I llm_load_print_meta: model params     = 2.51 B
0.00.594.000 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.594.001 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.002 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.002 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.003 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.013 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.014 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.014 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.020 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.022 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.022 I llm_load_print_meta: max token length = 93
0.00.667.655 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.667.665 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.673.442 I llama_new_context_with_model: n_seq_max     = 1
0.00.673.449 I llama_new_context_with_model: n_ctx         = 4096
0.00.673.449 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.673.449 I llama_new_context_with_model: n_batch       = 2048
0.00.673.450 I llama_new_context_with_model: n_ubatch      = 512
0.00.673.450 I llama_new_context_with_model: flash_attn    = 0
0.00.673.452 I llama_new_context_with_model: freq_base     = 10000.0
0.00.673.453 I llama_new_context_with_model: freq_scale    = 1
0.00.673.454 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.690.204 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.690.241 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.690.366 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.692.851 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.692.855 I llama_new_context_with_model: graph nodes  = 601
0.00.692.855 I llama_new_context_with_model: graph splits = 1
0.00.692.879 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.300.695 I main: llama threadpool init, n_threads = 4
0.01.300.708 I 
0.01.300.814 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.300.818 I 
0.01.301.048 I sampler seed: 2562707108
0.01.301.060 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.301.079 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.301.081 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.301.081 I 
 increasities and controversies that arose from the adoption of the Constitution of the United States.

**Key Issues and Controversies:**

**1. Power Distribution:**

0.14.792.354 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   671.91 tokens per second)
0.14.792.369 I llama_perf_context_print:        load time =    1299.45 ms
0.14.792.371 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.792.373 I llama_perf_context_print:        eval time =   13401.29 ms /    32 runs   (  418.79 ms per token,     2.39 tokens per second)
0.14.792.374 I llama_perf_context_print:       total time =   13491.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m59.834s
user	3m11.794s
sys	0m9.450s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4017 (726fbc28)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198899.56 ms
main:    total time = 198899.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4017 (726fbc28) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.001.105 I main: load the model and apply lora adapter, if any
0.00.023.729 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.738 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.826 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.838 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.840 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.844 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.847 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.849 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.850 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.851 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.852 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.858 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.859 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.861 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.862 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.863 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.866 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.917 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.397 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.405 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.406 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.407 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.409 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.410 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.411 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.415 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.416 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.417 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.418 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.419 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.427 I llama_model_loader: - type  f32:   37 tensors
0.00.265.429 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.430 I llama_model_loader: - type q6_K:   19 tensors
0.00.449.501 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.160 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.117 I llm_load_vocab: special tokens cache size = 5
0.00.614.569 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.642 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.643 I llm_load_print_meta: arch             = gemma
0.00.614.644 I llm_load_print_meta: vocab type       = SPM
0.00.614.645 I llm_load_print_meta: n_vocab          = 256000
0.00.614.647 I llm_load_print_meta: n_merges         = 0
0.00.614.648 I llm_load_print_meta: vocab_only       = 0
0.00.614.648 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.649 I llm_load_print_meta: n_embd           = 2048
0.00.614.649 I llm_load_print_meta: n_layer          = 18
0.00.614.716 I llm_load_print_meta: n_head           = 8
0.00.614.724 I llm_load_print_meta: n_head_kv        = 1
0.00.614.725 I llm_load_print_meta: n_rot            = 256
0.00.614.725 I llm_load_print_meta: n_swa            = 0
0.00.614.726 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.726 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.731 I llm_load_print_meta: n_gqa            = 8
0.00.614.735 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.740 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.741 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.743 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.743 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.744 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.744 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.749 I llm_load_print_meta: n_ff             = 16384
0.00.614.749 I llm_load_print_meta: n_expert         = 0
0.00.614.750 I llm_load_print_meta: n_expert_used    = 0
0.00.614.750 I llm_load_print_meta: causal attn      = 1
0.00.614.751 I llm_load_print_meta: pooling type     = 0
0.00.614.751 I llm_load_print_meta: rope type        = 2
0.00.614.751 I llm_load_print_meta: rope scaling     = linear
0.00.614.753 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.754 I llm_load_print_meta: freq_scale_train = 1
0.00.614.755 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.755 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.756 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.757 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.757 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.757 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.758 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.778 I llm_load_print_meta: model type       = 2B
0.00.614.779 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.614.780 I llm_load_print_meta: model params     = 2.51 B
0.00.614.790 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.614.798 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.799 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.799 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.808 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.809 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.810 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.810 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.816 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.818 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.826 I llm_load_print_meta: max token length = 93
0.00.679.175 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.679.182 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.679.183 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.679.183 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.679.184 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.679.185 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.684.951 I llama_new_context_with_model: n_seq_max     = 1
0.00.684.958 I llama_new_context_with_model: n_ctx         = 4096
0.00.684.959 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.684.959 I llama_new_context_with_model: n_batch       = 2048
0.00.684.959 I llama_new_context_with_model: n_ubatch      = 512
0.00.684.960 I llama_new_context_with_model: flash_attn    = 0
0.00.684.962 I llama_new_context_with_model: freq_base     = 10000.0
0.00.684.963 I llama_new_context_with_model: freq_scale    = 1
0.00.684.963 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.701.635 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.701.670 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.701.796 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.704.323 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.704.327 I llama_new_context_with_model: graph nodes  = 601
0.00.704.328 I llama_new_context_with_model: graph splits = 1
0.00.704.352 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.274.245 I main: llama threadpool init, n_threads = 4
0.01.274.259 I 
0.01.274.366 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.274.370 I 
0.01.274.614 I sampler seed: 45248126
0.01.274.626 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.274.633 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.274.636 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.274.637 I 
 fufilling on the surface of a lake.

This scene is evocative of a haunting melody, a melancholic sigh, and the quiet contemplation of the deep.

0.12.094.393 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.66 tokens per second)
0.12.094.397 I llama_perf_context_print:        load time =    1273.05 ms
0.12.094.399 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.094.401 I llama_perf_context_print:        eval time =   10729.96 ms /    32 runs   (  335.31 ms per token,     2.98 tokens per second)
0.12.094.402 I llama_perf_context_print:       total time =   10820.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4017 (726fbc28)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198883.45 ms
main:    total time = 198883.45 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4017 (726fbc28) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.001.105 I main: load the model and apply lora adapter, if any
0.00.023.705 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.803 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.816 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.817 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.821 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.823 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.825 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.826 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.828 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.829 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.835 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.837 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.838 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.839 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.854 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.611 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.178 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.543 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.551 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.552 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.553 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.554 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.556 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.557 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.561 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.562 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.568 I llama_model_loader: - type  f32:   37 tensors
0.00.264.571 I llama_model_loader: - type q4_K:  108 tensors
0.00.264.571 I llama_model_loader: - type q6_K:   19 tensors
0.00.447.638 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.822 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.765 I llm_load_vocab: special tokens cache size = 5
0.00.609.773 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.845 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.849 I llm_load_print_meta: arch             = gemma
0.00.609.850 I llm_load_print_meta: vocab type       = SPM
0.00.609.851 I llm_load_print_meta: n_vocab          = 256000
0.00.609.853 I llm_load_print_meta: n_merges         = 0
0.00.609.854 I llm_load_print_meta: vocab_only       = 0
0.00.609.854 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.855 I llm_load_print_meta: n_embd           = 2048
0.00.609.859 I llm_load_print_meta: n_layer          = 18
0.00.609.923 I llm_load_print_meta: n_head           = 8
0.00.609.934 I llm_load_print_meta: n_head_kv        = 1
0.00.609.937 I llm_load_print_meta: n_rot            = 256
0.00.609.937 I llm_load_print_meta: n_swa            = 0
0.00.609.937 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.938 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.943 I llm_load_print_meta: n_gqa            = 8
0.00.609.950 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.955 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.956 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.958 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.959 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.959 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.960 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.965 I llm_load_print_meta: n_ff             = 16384
0.00.609.966 I llm_load_print_meta: n_expert         = 0
0.00.609.966 I llm_load_print_meta: n_expert_used    = 0
0.00.609.966 I llm_load_print_meta: causal attn      = 1
0.00.609.967 I llm_load_print_meta: pooling type     = 0
0.00.609.968 I llm_load_print_meta: rope type        = 2
0.00.609.969 I llm_load_print_meta: rope scaling     = linear
0.00.609.971 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.971 I llm_load_print_meta: freq_scale_train = 1
0.00.609.972 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.972 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.973 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.973 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.973 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.974 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.974 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.975 I llm_load_print_meta: model type       = 2B
0.00.609.976 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.609.977 I llm_load_print_meta: model params     = 2.51 B
0.00.609.986 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.609.986 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.987 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.988 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.989 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.999 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.000 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.000 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.007 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.009 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.009 I llm_load_print_meta: max token length = 93
0.00.669.532 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.675.495 I llama_new_context_with_model: n_seq_max     = 1
0.00.675.503 I llama_new_context_with_model: n_ctx         = 4096
0.00.675.504 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.675.504 I llama_new_context_with_model: n_batch       = 2048
0.00.675.505 I llama_new_context_with_model: n_ubatch      = 512
0.00.675.505 I llama_new_context_with_model: flash_attn    = 0
0.00.675.510 I llama_new_context_with_model: freq_base     = 10000.0
0.00.675.510 I llama_new_context_with_model: freq_scale    = 1
0.00.675.511 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.693.222 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.693.264 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.693.397 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.963 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.695.967 I llama_new_context_with_model: graph nodes  = 601
0.00.695.968 I llama_new_context_with_model: graph splits = 1
0.00.695.992 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.266.433 I main: llama threadpool init, n_threads = 4
0.01.266.445 I 
0.01.266.551 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.266.555 I 
0.01.266.784 I sampler seed: 2509508777
0.01.266.796 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.266.802 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.266.806 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.266.806 I 
 seconally, a man has an affair with a young woman. 

**Questions:**
1. What is the nature of the relationship between the man and

0.12.160.306 I llama_perf_sampler_print:    sampling time =      48.93 ms /    33 runs   (    1.48 ms per token,   674.45 tokens per second)
0.12.160.309 I llama_perf_context_print:        load time =    1265.22 ms
0.12.160.310 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.160.311 I llama_perf_context_print:        eval time =   10803.28 ms /    32 runs   (  337.60 ms per token,     2.96 tokens per second)
0.12.160.312 I llama_perf_context_print:       total time =   10893.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.920s
user	50m5.643s
sys	0m6.318s
