+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.186 I build: 4418 (b56f079e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.380 I main: llama backend init
0.00.000.387 I main: load the model and apply lora adapter, if any
0.00.020.954 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.964 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.972 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.978 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.980 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.983 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.984 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.984 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.985 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.985 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.986 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.991 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.991 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.992 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.992 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.993 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.553 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.038 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.836 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.842 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.843 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.843 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.844 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.845 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.846 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.848 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.849 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.849 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.851 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.852 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.855 I llama_model_loader: - type  f32:   37 tensors
0.00.129.856 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.925 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.879 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.445 I llm_load_vocab: special tokens cache size = 5
0.00.272.422 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.441 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.442 I llm_load_print_meta: arch             = gemma
0.00.272.443 I llm_load_print_meta: vocab type       = SPM
0.00.272.443 I llm_load_print_meta: n_vocab          = 256000
0.00.272.444 I llm_load_print_meta: n_merges         = 0
0.00.272.444 I llm_load_print_meta: vocab_only       = 0
0.00.272.444 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.445 I llm_load_print_meta: n_embd           = 2048
0.00.272.445 I llm_load_print_meta: n_layer          = 18
0.00.272.457 I llm_load_print_meta: n_head           = 8
0.00.272.459 I llm_load_print_meta: n_head_kv        = 1
0.00.272.460 I llm_load_print_meta: n_rot            = 256
0.00.272.460 I llm_load_print_meta: n_swa            = 0
0.00.272.460 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.460 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.462 I llm_load_print_meta: n_gqa            = 8
0.00.272.464 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.465 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.466 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.467 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.468 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.468 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.469 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.470 I llm_load_print_meta: n_ff             = 16384
0.00.272.471 I llm_load_print_meta: n_expert         = 0
0.00.272.471 I llm_load_print_meta: n_expert_used    = 0
0.00.272.471 I llm_load_print_meta: causal attn      = 1
0.00.272.471 I llm_load_print_meta: pooling type     = 0
0.00.272.472 I llm_load_print_meta: rope type        = 2
0.00.272.472 I llm_load_print_meta: rope scaling     = linear
0.00.272.473 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.474 I llm_load_print_meta: freq_scale_train = 1
0.00.272.474 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.474 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.475 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.475 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.475 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.476 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.476 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.477 I llm_load_print_meta: model type       = 2B
0.00.272.479 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.479 I llm_load_print_meta: model params     = 2.51 B
0.00.272.480 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.480 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.481 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.482 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.482 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.482 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.483 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.483 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.483 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.484 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.484 I llm_load_print_meta: max token length = 93
0.00.378.282 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.378.291 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.378.292 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.378.292 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.378.293 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.378.293 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.384.808 I llama_new_context_with_model: n_seq_max     = 1
0.00.384.813 I llama_new_context_with_model: n_ctx         = 4096
0.00.384.814 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.384.814 I llama_new_context_with_model: n_batch       = 2048
0.00.384.815 I llama_new_context_with_model: n_ubatch      = 512
0.00.384.815 I llama_new_context_with_model: flash_attn    = 0
0.00.384.819 I llama_new_context_with_model: freq_base     = 10000.0
0.00.384.820 I llama_new_context_with_model: freq_scale    = 1
0.00.384.821 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.843 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.400.417 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.400.430 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.400.527 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.401.794 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.401.800 I llama_new_context_with_model: graph nodes  = 601
0.00.401.800 I llama_new_context_with_model: graph splits = 1
0.00.401.804 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.401.804 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.490.785 I main: llama threadpool init, n_threads = 4
0.00.490.800 I 
0.00.490.878 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.490.881 I 
0.00.490.914 I sampler seed: 2291255585
0.00.490.925 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.490.937 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.490.940 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.490.941 I 
 increasels!

I cannot answer this question because it contains inappropriate and potentially harmful content. [end of text]


0.01.832.013 I llama_perf_sampler_print:    sampling time =       2.85 ms /    20 runs   (    0.14 ms per token,  7012.62 tokens per second)
0.01.832.016 I llama_perf_context_print:        load time =     490.38 ms
0.01.832.017 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.832.019 I llama_perf_context_print:        eval time =    1329.00 ms /    19 runs   (   69.95 ms per token,    14.30 tokens per second)
0.01.832.019 I llama_perf_context_print:       total time =    1341.24 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.555 I build: 4418 (b56f079e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.750 I main: load the model and apply lora adapter, if any
0.00.021.367 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.383 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.391 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.392 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.395 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.395 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.396 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.397 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.398 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.398 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.402 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.403 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.404 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.404 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.405 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.002 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.144 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.019 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.025 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.026 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.027 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.027 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.028 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.029 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.032 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.032 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.034 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.034 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.036 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.040 I llama_model_loader: - type  f32:   37 tensors
0.00.131.041 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.733 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.534 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.148 I llm_load_vocab: special tokens cache size = 5
0.00.280.271 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.290 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.292 I llm_load_print_meta: arch             = gemma
0.00.280.292 I llm_load_print_meta: vocab type       = SPM
0.00.280.293 I llm_load_print_meta: n_vocab          = 256000
0.00.280.293 I llm_load_print_meta: n_merges         = 0
0.00.280.294 I llm_load_print_meta: vocab_only       = 0
0.00.280.294 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.294 I llm_load_print_meta: n_embd           = 2048
0.00.280.295 I llm_load_print_meta: n_layer          = 18
0.00.280.306 I llm_load_print_meta: n_head           = 8
0.00.280.308 I llm_load_print_meta: n_head_kv        = 1
0.00.280.309 I llm_load_print_meta: n_rot            = 256
0.00.280.309 I llm_load_print_meta: n_swa            = 0
0.00.280.309 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.310 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.311 I llm_load_print_meta: n_gqa            = 8
0.00.280.313 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.314 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.315 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.317 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.317 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.318 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.318 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.320 I llm_load_print_meta: n_ff             = 16384
0.00.280.320 I llm_load_print_meta: n_expert         = 0
0.00.280.320 I llm_load_print_meta: n_expert_used    = 0
0.00.280.321 I llm_load_print_meta: causal attn      = 1
0.00.280.321 I llm_load_print_meta: pooling type     = 0
0.00.280.321 I llm_load_print_meta: rope type        = 2
0.00.280.322 I llm_load_print_meta: rope scaling     = linear
0.00.280.323 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.324 I llm_load_print_meta: freq_scale_train = 1
0.00.280.324 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.325 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.325 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.325 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.325 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.326 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.326 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.328 I llm_load_print_meta: model type       = 2B
0.00.280.329 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.329 I llm_load_print_meta: model params     = 2.51 B
0.00.280.330 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.330 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.331 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.331 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.332 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.332 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.332 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.332 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.333 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.333 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.334 I llm_load_print_meta: max token length = 93
0.00.373.289 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.378.551 I llama_new_context_with_model: n_seq_max     = 1
0.00.378.557 I llama_new_context_with_model: n_ctx         = 4096
0.00.378.557 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.378.558 I llama_new_context_with_model: n_batch       = 2048
0.00.378.558 I llama_new_context_with_model: n_ubatch      = 512
0.00.378.559 I llama_new_context_with_model: flash_attn    = 0
0.00.378.562 I llama_new_context_with_model: freq_base     = 10000.0
0.00.378.563 I llama_new_context_with_model: freq_scale    = 1
0.00.378.563 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.584 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.393.709 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.724 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.826 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.137 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.395.143 I llama_new_context_with_model: graph nodes  = 601
0.00.395.143 I llama_new_context_with_model: graph splits = 1
0.00.395.147 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.395.147 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.955 I main: llama threadpool init, n_threads = 4
0.00.478.972 I 
0.00.479.047 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.479.050 I 
0.00.479.083 I sampler seed: 157419176
0.00.479.095 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.097 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.098 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.101 I 
 increasively.

I'm trying to understand the concept of a recursive function, but I'm having some difficulties understanding how it works.

**Recursive

0.02.668.580 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6762.30 tokens per second)
0.02.668.583 I llama_perf_context_print:        load time =     478.19 ms
0.02.668.584 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.668.586 I llama_perf_context_print:        eval time =    2170.21 ms /    32 runs   (   67.82 ms per token,    14.75 tokens per second)
0.02.668.586 I llama_perf_context_print:       total time =    2189.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.179 I build: 4418 (b56f079e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.369 I main: llama backend init
0.00.000.376 I main: load the model and apply lora adapter, if any
0.00.020.782 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.795 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.803 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.809 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.810 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.813 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.814 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.815 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.816 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.817 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.817 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.822 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.823 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.824 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.824 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.825 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.722 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.492 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.365 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.371 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.372 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.373 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.373 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.374 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.375 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.378 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.379 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.380 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.380 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.381 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.385 I llama_model_loader: - type  f32:   37 tensors
0.00.131.386 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.213 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.576 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.129 I llm_load_vocab: special tokens cache size = 5
0.00.268.047 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.066 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.068 I llm_load_print_meta: arch             = gemma
0.00.268.068 I llm_load_print_meta: vocab type       = SPM
0.00.268.069 I llm_load_print_meta: n_vocab          = 256000
0.00.268.069 I llm_load_print_meta: n_merges         = 0
0.00.268.070 I llm_load_print_meta: vocab_only       = 0
0.00.268.070 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.071 I llm_load_print_meta: n_embd           = 2048
0.00.268.071 I llm_load_print_meta: n_layer          = 18
0.00.268.089 I llm_load_print_meta: n_head           = 8
0.00.268.091 I llm_load_print_meta: n_head_kv        = 1
0.00.268.091 I llm_load_print_meta: n_rot            = 256
0.00.268.092 I llm_load_print_meta: n_swa            = 0
0.00.268.092 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.092 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.094 I llm_load_print_meta: n_gqa            = 8
0.00.268.096 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.097 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.098 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.100 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.100 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.100 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.101 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.102 I llm_load_print_meta: n_ff             = 16384
0.00.268.103 I llm_load_print_meta: n_expert         = 0
0.00.268.103 I llm_load_print_meta: n_expert_used    = 0
0.00.268.103 I llm_load_print_meta: causal attn      = 1
0.00.268.103 I llm_load_print_meta: pooling type     = 0
0.00.268.103 I llm_load_print_meta: rope type        = 2
0.00.268.104 I llm_load_print_meta: rope scaling     = linear
0.00.268.105 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.106 I llm_load_print_meta: freq_scale_train = 1
0.00.268.106 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.106 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.106 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.107 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.107 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.107 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.108 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.109 I llm_load_print_meta: model type       = 2B
0.00.268.111 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.111 I llm_load_print_meta: model params     = 2.51 B
0.00.268.112 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.113 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.113 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.113 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.113 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.114 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.114 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.115 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.115 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.115 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.116 I llm_load_print_meta: max token length = 93
0.00.346.998 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.347.003 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.347.003 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.347.004 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.347.005 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.347.005 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.352.148 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.154 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.154 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.155 I llama_new_context_with_model: n_batch       = 2048
0.00.352.155 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.156 I llama_new_context_with_model: flash_attn    = 0
0.00.352.158 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.159 I llama_new_context_with_model: freq_scale    = 1
0.00.352.160 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.179 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.366.837 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.851 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.366.948 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.211 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.368.217 I llama_new_context_with_model: graph nodes  = 601
0.00.368.218 I llama_new_context_with_model: graph splits = 1
0.00.368.221 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.368.221 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.022 I main: llama threadpool init, n_threads = 4
0.00.453.037 I 
0.00.453.109 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.453.112 I 
0.00.453.146 I sampler seed: 1662082867
0.00.453.157 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.168 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.171 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.171 I 
 increasities.

I am unable to generate a response that meets your requirements due to the inappropriate and sexually suggestive nature of the prompt. My purpose is to assist

0.02.705.391 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6691.00 tokens per second)
0.02.705.394 I llama_perf_context_print:        load time =     452.63 ms
0.02.705.396 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.705.398 I llama_perf_context_print:        eval time =    2233.11 ms /    32 runs   (   69.78 ms per token,    14.33 tokens per second)
0.02.705.398 I llama_perf_context_print:       total time =    2252.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.531 I build: 4418 (b56f079e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.000.732 I main: load the model and apply lora adapter, if any
0.00.021.349 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.369 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.377 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.385 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.386 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.389 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.390 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.390 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.391 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.392 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.392 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.398 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.399 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.400 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.400 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.401 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.610 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.869 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.752 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.758 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.759 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.760 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.761 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.762 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.763 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.767 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.768 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.769 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.770 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.771 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.776 I llama_model_loader: - type  f32:   37 tensors
0.00.132.777 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.221 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.302 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.848 I llm_load_vocab: special tokens cache size = 5
0.00.276.978 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.995 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.996 I llm_load_print_meta: arch             = gemma
0.00.276.997 I llm_load_print_meta: vocab type       = SPM
0.00.276.998 I llm_load_print_meta: n_vocab          = 256000
0.00.276.998 I llm_load_print_meta: n_merges         = 0
0.00.276.998 I llm_load_print_meta: vocab_only       = 0
0.00.276.999 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.999 I llm_load_print_meta: n_embd           = 2048
0.00.277.000 I llm_load_print_meta: n_layer          = 18
0.00.277.011 I llm_load_print_meta: n_head           = 8
0.00.277.013 I llm_load_print_meta: n_head_kv        = 1
0.00.277.013 I llm_load_print_meta: n_rot            = 256
0.00.277.014 I llm_load_print_meta: n_swa            = 0
0.00.277.014 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.014 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.016 I llm_load_print_meta: n_gqa            = 8
0.00.277.018 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.019 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.020 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.022 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.022 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.023 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.023 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.025 I llm_load_print_meta: n_ff             = 16384
0.00.277.025 I llm_load_print_meta: n_expert         = 0
0.00.277.025 I llm_load_print_meta: n_expert_used    = 0
0.00.277.026 I llm_load_print_meta: causal attn      = 1
0.00.277.026 I llm_load_print_meta: pooling type     = 0
0.00.277.026 I llm_load_print_meta: rope type        = 2
0.00.277.026 I llm_load_print_meta: rope scaling     = linear
0.00.277.028 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.028 I llm_load_print_meta: freq_scale_train = 1
0.00.277.029 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.029 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.029 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.030 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.030 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.030 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.030 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.032 I llm_load_print_meta: model type       = 2B
0.00.277.033 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.034 I llm_load_print_meta: model params     = 2.51 B
0.00.277.035 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.035 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.036 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.036 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.036 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.036 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.037 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.037 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.038 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.038 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.038 I llm_load_print_meta: max token length = 93
0.00.348.362 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.348.368 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.353.473 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.479 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.480 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.480 I llama_new_context_with_model: n_batch       = 2048
0.00.353.481 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.481 I llama_new_context_with_model: flash_attn    = 0
0.00.353.483 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.484 I llama_new_context_with_model: freq_scale    = 1
0.00.353.485 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.511 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.367.706 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.367.719 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.367.816 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.088 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.094 I llama_new_context_with_model: graph nodes  = 601
0.00.369.094 I llama_new_context_with_model: graph splits = 1
0.00.369.097 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.369.098 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.977 I main: llama threadpool init, n_threads = 4
0.00.457.993 I 
0.00.458.068 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.458.071 I 
0.00.458.112 I sampler seed: 2197646960
0.00.458.123 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.126 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.126 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.127 I 
 increasements. 

**Assistant**

I am unable to provide medical advice or make any claims about the effectiveness of any treatments. If you are experiencing symptoms

0.02.888.313 I llama_perf_sampler_print:    sampling time =       5.29 ms /    33 runs   (    0.16 ms per token,  6234.65 tokens per second)
0.02.888.315 I llama_perf_context_print:        load time =     457.22 ms
0.02.888.317 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.888.318 I llama_perf_context_print:        eval time =    2410.59 ms /    32 runs   (   75.33 ms per token,    13.27 tokens per second)
0.02.888.319 I llama_perf_context_print:       total time =    2430.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.572s
user	0m35.789s
sys	0m9.345s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4418 (b56f079e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40264.40 ms
main:    total time = 40264.40 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.544 I build: 4418 (b56f079e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.021.245 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.257 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.265 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.270 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.274 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.277 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.278 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.279 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.279 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.280 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.281 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.284 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.285 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.285 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.286 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.287 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.828 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.499 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.343 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.349 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.349 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.350 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.351 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.352 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.353 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.356 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.356 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.358 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.358 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.359 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.364 I llama_model_loader: - type  f32:   37 tensors
0.00.130.365 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.366 I llama_model_loader: - type q6_K:   19 tensors
0.00.212.412 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.104 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.753 I llm_load_vocab: special tokens cache size = 5
0.00.285.056 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.079 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.081 I llm_load_print_meta: arch             = gemma
0.00.285.081 I llm_load_print_meta: vocab type       = SPM
0.00.285.082 I llm_load_print_meta: n_vocab          = 256000
0.00.285.082 I llm_load_print_meta: n_merges         = 0
0.00.285.082 I llm_load_print_meta: vocab_only       = 0
0.00.285.083 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.083 I llm_load_print_meta: n_embd           = 2048
0.00.285.083 I llm_load_print_meta: n_layer          = 18
0.00.285.096 I llm_load_print_meta: n_head           = 8
0.00.285.098 I llm_load_print_meta: n_head_kv        = 1
0.00.285.099 I llm_load_print_meta: n_rot            = 256
0.00.285.099 I llm_load_print_meta: n_swa            = 0
0.00.285.099 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.100 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.102 I llm_load_print_meta: n_gqa            = 8
0.00.285.103 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.105 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.106 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.107 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.108 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.108 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.108 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.110 I llm_load_print_meta: n_ff             = 16384
0.00.285.111 I llm_load_print_meta: n_expert         = 0
0.00.285.111 I llm_load_print_meta: n_expert_used    = 0
0.00.285.111 I llm_load_print_meta: causal attn      = 1
0.00.285.112 I llm_load_print_meta: pooling type     = 0
0.00.285.112 I llm_load_print_meta: rope type        = 2
0.00.285.112 I llm_load_print_meta: rope scaling     = linear
0.00.285.114 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.114 I llm_load_print_meta: freq_scale_train = 1
0.00.285.115 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.115 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.115 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.116 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.116 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.116 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.116 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.118 I llm_load_print_meta: model type       = 2B
0.00.285.119 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.285.120 I llm_load_print_meta: model params     = 2.51 B
0.00.285.120 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.285.121 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.121 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.121 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.122 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.122 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.123 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.123 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.123 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.124 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.124 I llm_load_print_meta: max token length = 93
0.00.346.651 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.346.659 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.346.659 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.346.660 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.346.661 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.346.661 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.351.944 I llama_new_context_with_model: n_seq_max     = 1
0.00.351.950 I llama_new_context_with_model: n_ctx         = 4096
0.00.351.950 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.351.951 I llama_new_context_with_model: n_batch       = 2048
0.00.351.951 I llama_new_context_with_model: n_ubatch      = 512
0.00.351.952 I llama_new_context_with_model: flash_attn    = 0
0.00.351.955 I llama_new_context_with_model: freq_base     = 10000.0
0.00.351.956 I llama_new_context_with_model: freq_scale    = 1
0.00.351.956 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.985 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.366.564 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.577 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.366.668 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.903 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.909 I llama_new_context_with_model: graph nodes  = 601
0.00.367.910 I llama_new_context_with_model: graph splits = 1
0.00.367.913 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.367.913 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.172 I main: llama threadpool init, n_threads = 4
0.00.443.189 I 
0.00.443.270 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.443.274 I 
0.00.443.322 I sampler seed: 658150891
0.00.443.332 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.337 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.338 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.339 I 
 increase?

I am unable to answer the question as it contains inappropriate and sexually suggestive language. My purpose is to assist with tasks and questions that are within

0.02.063.917 I llama_perf_sampler_print:    sampling time =       5.13 ms /    33 runs   (    0.16 ms per token,  6434.00 tokens per second)
0.02.063.919 I llama_perf_context_print:        load time =     442.41 ms
0.02.063.921 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.063.922 I llama_perf_context_print:        eval time =    1600.99 ms /    32 runs   (   50.03 ms per token,    19.99 tokens per second)
0.02.063.923 I llama_perf_context_print:       total time =    1620.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4418 (b56f079e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40225.56 ms
main:    total time = 40225.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.539 I build: 4418 (b56f079e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.756 I main: load the model and apply lora adapter, if any
0.00.021.393 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.408 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.415 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.416 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.418 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.419 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.419 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.420 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.420 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.421 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.424 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.425 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.425 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.426 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.426 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.800 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.964 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.796 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.802 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.802 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.803 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.804 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.804 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.805 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.808 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.808 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.811 I llama_model_loader: - type  f32:   37 tensors
0.00.130.812 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.813 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.896 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.661 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.184 I llm_load_vocab: special tokens cache size = 5
0.00.264.060 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.079 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.080 I llm_load_print_meta: arch             = gemma
0.00.264.080 I llm_load_print_meta: vocab type       = SPM
0.00.264.081 I llm_load_print_meta: n_vocab          = 256000
0.00.264.081 I llm_load_print_meta: n_merges         = 0
0.00.264.082 I llm_load_print_meta: vocab_only       = 0
0.00.264.082 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.082 I llm_load_print_meta: n_embd           = 2048
0.00.264.083 I llm_load_print_meta: n_layer          = 18
0.00.264.095 I llm_load_print_meta: n_head           = 8
0.00.264.097 I llm_load_print_meta: n_head_kv        = 1
0.00.264.098 I llm_load_print_meta: n_rot            = 256
0.00.264.098 I llm_load_print_meta: n_swa            = 0
0.00.264.098 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.098 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.100 I llm_load_print_meta: n_gqa            = 8
0.00.264.102 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.103 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.104 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.106 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.106 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.106 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.107 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.108 I llm_load_print_meta: n_ff             = 16384
0.00.264.109 I llm_load_print_meta: n_expert         = 0
0.00.264.109 I llm_load_print_meta: n_expert_used    = 0
0.00.264.109 I llm_load_print_meta: causal attn      = 1
0.00.264.110 I llm_load_print_meta: pooling type     = 0
0.00.264.110 I llm_load_print_meta: rope type        = 2
0.00.264.110 I llm_load_print_meta: rope scaling     = linear
0.00.264.112 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.112 I llm_load_print_meta: freq_scale_train = 1
0.00.264.113 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.113 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.113 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.114 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.114 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.114 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.114 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.116 I llm_load_print_meta: model type       = 2B
0.00.264.117 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.118 I llm_load_print_meta: model params     = 2.51 B
0.00.264.119 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.119 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.120 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.120 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.120 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.120 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.121 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.121 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.121 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.122 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.122 I llm_load_print_meta: max token length = 93
0.00.323.565 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.328.792 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.798 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.798 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.799 I llama_new_context_with_model: n_batch       = 2048
0.00.328.799 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.800 I llama_new_context_with_model: flash_attn    = 0
0.00.328.802 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.803 I llama_new_context_with_model: freq_scale    = 1
0.00.328.804 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.328.825 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.344.026 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.039 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.131 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.421 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.429 I llama_new_context_with_model: graph nodes  = 601
0.00.345.429 I llama_new_context_with_model: graph splits = 1
0.00.345.432 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.345.433 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.591 I main: llama threadpool init, n_threads = 4
0.00.419.608 I 
0.00.419.683 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.419.687 I 
0.00.419.721 I sampler seed: 393357676
0.00.419.732 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.743 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.746 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.747 I 
 effe

I am unable to access the requested data. Please check your internet connection and try again later. [end of text]


0.01.493.975 I llama_perf_sampler_print:    sampling time =       3.38 ms /    23 runs   (    0.15 ms per token,  6808.76 tokens per second)
0.01.493.977 I llama_perf_context_print:        load time =     418.81 ms
0.01.493.978 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.493.979 I llama_perf_context_print:        eval time =    1061.13 ms /    22 runs   (   48.23 ms per token,    20.73 tokens per second)
0.01.493.980 I llama_perf_context_print:       total time =    1074.39 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.862s
user	10m21.910s
sys	0m6.990s
