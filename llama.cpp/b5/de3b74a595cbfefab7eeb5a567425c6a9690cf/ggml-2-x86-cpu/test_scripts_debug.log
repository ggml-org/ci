+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.635 I build: 3830 (b5de3b74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.002.761 I main: load the model and apply lora adapter, if any
0.00.024.763 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.953 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.044 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.057 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.059 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.064 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.070 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.071 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.072 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.073 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.073 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.081 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.081 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.082 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.083 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.084 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.572 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.543 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.940 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.948 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.949 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.950 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.951 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.952 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.953 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.957 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.957 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.958 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.959 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.961 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.969 I llama_model_loader: - type  f32:   37 tensors
0.00.197.973 I llama_model_loader: - type q8_0:  127 tensors
0.00.491.627 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.976 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.976 I llm_load_vocab: special tokens cache size = 5
0.00.576.480 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.576.543 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.576.544 I llm_load_print_meta: arch             = gemma
0.00.576.545 I llm_load_print_meta: vocab type       = SPM
0.00.576.545 I llm_load_print_meta: n_vocab          = 256000
0.00.576.548 I llm_load_print_meta: n_merges         = 0
0.00.576.548 I llm_load_print_meta: vocab_only       = 0
0.00.576.549 I llm_load_print_meta: n_ctx_train      = 8192
0.00.576.549 I llm_load_print_meta: n_embd           = 2048
0.00.576.550 I llm_load_print_meta: n_layer          = 18
0.00.576.583 I llm_load_print_meta: n_head           = 8
0.00.576.590 I llm_load_print_meta: n_head_kv        = 1
0.00.576.591 I llm_load_print_meta: n_rot            = 256
0.00.576.591 I llm_load_print_meta: n_swa            = 0
0.00.576.592 I llm_load_print_meta: n_embd_head_k    = 256
0.00.576.592 I llm_load_print_meta: n_embd_head_v    = 256
0.00.576.596 I llm_load_print_meta: n_gqa            = 8
0.00.576.601 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.576.606 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.576.607 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.576.609 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.576.609 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.576.610 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.576.610 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.576.615 I llm_load_print_meta: n_ff             = 16384
0.00.576.615 I llm_load_print_meta: n_expert         = 0
0.00.576.615 I llm_load_print_meta: n_expert_used    = 0
0.00.576.616 I llm_load_print_meta: causal attn      = 1
0.00.576.616 I llm_load_print_meta: pooling type     = 0
0.00.576.617 I llm_load_print_meta: rope type        = 2
0.00.576.617 I llm_load_print_meta: rope scaling     = linear
0.00.576.619 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.576.619 I llm_load_print_meta: freq_scale_train = 1
0.00.576.620 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.576.620 I llm_load_print_meta: rope_finetuned   = unknown
0.00.576.620 I llm_load_print_meta: ssm_d_conv       = 0
0.00.576.621 I llm_load_print_meta: ssm_d_inner      = 0
0.00.576.621 I llm_load_print_meta: ssm_d_state      = 0
0.00.576.621 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.576.622 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.576.623 I llm_load_print_meta: model type       = 2B
0.00.576.624 I llm_load_print_meta: model ftype      = Q8_0
0.00.576.625 I llm_load_print_meta: model params     = 2.51 B
0.00.576.626 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.576.626 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.576.627 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.576.627 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.576.628 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.576.628 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.576.629 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.576.629 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.576.635 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.576.636 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.576.637 I llm_load_print_meta: max token length = 93
0.00.576.813 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.675.348 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.675.361 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.675.362 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.675.363 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.675.363 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.675.364 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.681.085 I llama_new_context_with_model: n_ctx      = 8192
0.00.681.093 I llama_new_context_with_model: n_batch    = 2048
0.00.681.093 I llama_new_context_with_model: n_ubatch   = 512
0.00.681.094 I llama_new_context_with_model: flash_attn = 0
0.00.681.098 I llama_new_context_with_model: freq_base  = 10000.0
0.00.681.099 I llama_new_context_with_model: freq_scale = 1
0.00.711.528 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.711.572 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.711.683 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.713.077 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.713.083 I llama_new_context_with_model: graph nodes  = 601
0.00.713.083 I llama_new_context_with_model: graph splits = 1
0.00.713.098 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.324.703 I main: llama threadpool init, n_threads = 4
0.01.324.714 I 
0.01.324.806 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.324.810 I 
0.01.324.968 I sampler seed: 3184684347
0.01.324.978 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.324.984 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.324.985 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.324.986 I 
 increably.

I'm not sure if I should trust this source. Can you help me evaluate the trustworthiness of the source?

The source is a

0.14.893.413 I llama_perf_sampler_print:    sampling time =      48.98 ms /    33 runs   (    1.48 ms per token,   673.79 tokens per second)
0.14.893.416 I llama_perf_context_print:        load time =    1321.86 ms
0.14.893.430 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.893.432 I llama_perf_context_print:        eval time =   13486.38 ms /    32 runs   (  421.45 ms per token,     2.37 tokens per second)
0.14.893.433 I llama_perf_context_print:       total time =   13568.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.692 I build: 3830 (b5de3b74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.900 I main: llama backend init
0.00.002.856 I main: load the model and apply lora adapter, if any
0.00.025.503 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.610 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.627 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.633 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.639 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.641 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.643 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.645 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.646 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.648 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.659 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.663 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.665 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.666 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.668 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.902 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.135 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.592 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.600 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.601 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.602 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.603 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.604 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.605 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.608 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.609 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.610 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.611 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.198.612 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.620 I llama_model_loader: - type  f32:   37 tensors
0.00.198.625 I llama_model_loader: - type q8_0:  127 tensors
0.00.503.420 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.531.584 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.532.687 I llm_load_vocab: special tokens cache size = 5
0.00.590.285 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.590.352 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.590.353 I llm_load_print_meta: arch             = gemma
0.00.590.354 I llm_load_print_meta: vocab type       = SPM
0.00.590.354 I llm_load_print_meta: n_vocab          = 256000
0.00.590.356 I llm_load_print_meta: n_merges         = 0
0.00.590.357 I llm_load_print_meta: vocab_only       = 0
0.00.590.358 I llm_load_print_meta: n_ctx_train      = 8192
0.00.590.358 I llm_load_print_meta: n_embd           = 2048
0.00.590.358 I llm_load_print_meta: n_layer          = 18
0.00.590.392 I llm_load_print_meta: n_head           = 8
0.00.590.399 I llm_load_print_meta: n_head_kv        = 1
0.00.590.400 I llm_load_print_meta: n_rot            = 256
0.00.590.400 I llm_load_print_meta: n_swa            = 0
0.00.590.400 I llm_load_print_meta: n_embd_head_k    = 256
0.00.590.401 I llm_load_print_meta: n_embd_head_v    = 256
0.00.590.406 I llm_load_print_meta: n_gqa            = 8
0.00.590.410 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.590.415 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.590.416 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.590.417 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.590.418 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.590.418 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.590.418 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.590.423 I llm_load_print_meta: n_ff             = 16384
0.00.590.424 I llm_load_print_meta: n_expert         = 0
0.00.590.424 I llm_load_print_meta: n_expert_used    = 0
0.00.590.424 I llm_load_print_meta: causal attn      = 1
0.00.590.425 I llm_load_print_meta: pooling type     = 0
0.00.590.426 I llm_load_print_meta: rope type        = 2
0.00.590.427 I llm_load_print_meta: rope scaling     = linear
0.00.590.428 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.590.429 I llm_load_print_meta: freq_scale_train = 1
0.00.590.429 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.590.429 I llm_load_print_meta: rope_finetuned   = unknown
0.00.590.429 I llm_load_print_meta: ssm_d_conv       = 0
0.00.590.430 I llm_load_print_meta: ssm_d_inner      = 0
0.00.590.430 I llm_load_print_meta: ssm_d_state      = 0
0.00.590.430 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.590.431 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.590.431 I llm_load_print_meta: model type       = 2B
0.00.590.432 I llm_load_print_meta: model ftype      = Q8_0
0.00.590.433 I llm_load_print_meta: model params     = 2.51 B
0.00.590.434 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.590.434 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.590.435 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.590.435 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.590.436 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.590.436 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.590.437 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.590.437 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.590.442 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.590.444 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.590.444 I llm_load_print_meta: max token length = 93
0.00.590.628 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.687.565 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.693.666 I llama_new_context_with_model: n_ctx      = 8192
0.00.693.676 I llama_new_context_with_model: n_batch    = 2048
0.00.693.677 I llama_new_context_with_model: n_ubatch   = 512
0.00.693.677 I llama_new_context_with_model: flash_attn = 0
0.00.693.682 I llama_new_context_with_model: freq_base  = 10000.0
0.00.693.683 I llama_new_context_with_model: freq_scale = 1
0.00.725.728 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.725.774 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.725.884 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.727.267 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.727.274 I llama_new_context_with_model: graph nodes  = 601
0.00.727.275 I llama_new_context_with_model: graph splits = 1
0.00.727.292 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.355.245 I main: llama threadpool init, n_threads = 4
0.01.355.257 I 
0.01.355.362 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.355.367 I 
0.01.355.536 I sampler seed: 100638276
0.01.355.546 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.355.553 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.355.564 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.355.567 I 
 increadibly, but with a sense of urgency.

The world is changing, and we need to adapt or perish. The choices we make today will determine our

0.14.990.026 I llama_perf_sampler_print:    sampling time =      49.77 ms /    33 runs   (    1.51 ms per token,   663.05 tokens per second)
0.14.990.029 I llama_perf_context_print:        load time =    1352.29 ms
0.14.990.030 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.990.044 I llama_perf_context_print:        eval time =   13550.55 ms /    32 runs   (  423.45 ms per token,     2.36 tokens per second)
0.14.990.045 I llama_perf_context_print:       total time =   13634.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.655 I build: 3830 (b5de3b74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.002.824 I main: load the model and apply lora adapter, if any
0.00.025.050 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.243 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.335 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.348 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.350 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.356 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.360 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.360 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.361 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.362 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.363 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.371 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.372 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.373 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.374 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.375 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.182 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.519 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.925 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.934 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.935 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.936 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.936 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.937 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.938 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.941 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.942 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.943 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.944 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.198.945 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.954 I llama_model_loader: - type  f32:   37 tensors
0.00.198.958 I llama_model_loader: - type q8_0:  127 tensors
0.00.534.667 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.567.671 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.568.730 I llm_load_vocab: special tokens cache size = 5
0.00.626.093 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.626.154 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.626.155 I llm_load_print_meta: arch             = gemma
0.00.626.156 I llm_load_print_meta: vocab type       = SPM
0.00.626.156 I llm_load_print_meta: n_vocab          = 256000
0.00.626.158 I llm_load_print_meta: n_merges         = 0
0.00.626.159 I llm_load_print_meta: vocab_only       = 0
0.00.626.159 I llm_load_print_meta: n_ctx_train      = 8192
0.00.626.160 I llm_load_print_meta: n_embd           = 2048
0.00.626.160 I llm_load_print_meta: n_layer          = 18
0.00.626.196 I llm_load_print_meta: n_head           = 8
0.00.626.202 I llm_load_print_meta: n_head_kv        = 1
0.00.626.203 I llm_load_print_meta: n_rot            = 256
0.00.626.203 I llm_load_print_meta: n_swa            = 0
0.00.626.204 I llm_load_print_meta: n_embd_head_k    = 256
0.00.626.204 I llm_load_print_meta: n_embd_head_v    = 256
0.00.626.209 I llm_load_print_meta: n_gqa            = 8
0.00.626.214 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.626.219 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.626.220 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.626.221 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.626.222 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.626.222 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.626.223 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.626.228 I llm_load_print_meta: n_ff             = 16384
0.00.626.229 I llm_load_print_meta: n_expert         = 0
0.00.626.229 I llm_load_print_meta: n_expert_used    = 0
0.00.626.230 I llm_load_print_meta: causal attn      = 1
0.00.626.230 I llm_load_print_meta: pooling type     = 0
0.00.626.230 I llm_load_print_meta: rope type        = 2
0.00.626.231 I llm_load_print_meta: rope scaling     = linear
0.00.626.233 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.626.234 I llm_load_print_meta: freq_scale_train = 1
0.00.626.234 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.626.234 I llm_load_print_meta: rope_finetuned   = unknown
0.00.626.235 I llm_load_print_meta: ssm_d_conv       = 0
0.00.626.235 I llm_load_print_meta: ssm_d_inner      = 0
0.00.626.235 I llm_load_print_meta: ssm_d_state      = 0
0.00.626.236 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.626.236 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.626.237 I llm_load_print_meta: model type       = 2B
0.00.626.238 I llm_load_print_meta: model ftype      = Q8_0
0.00.626.239 I llm_load_print_meta: model params     = 2.51 B
0.00.626.239 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.626.240 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.626.240 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.626.241 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.626.241 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.626.242 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.626.242 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.626.243 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.626.250 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.626.251 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.626.253 I llm_load_print_meta: max token length = 93
0.00.626.432 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.704.412 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.704.425 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.704.426 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.704.426 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.704.427 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.704.428 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.710.169 I llama_new_context_with_model: n_ctx      = 8192
0.00.710.176 I llama_new_context_with_model: n_batch    = 2048
0.00.710.176 I llama_new_context_with_model: n_ubatch   = 512
0.00.710.177 I llama_new_context_with_model: flash_attn = 0
0.00.710.181 I llama_new_context_with_model: freq_base  = 10000.0
0.00.710.182 I llama_new_context_with_model: freq_scale = 1
0.00.741.530 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.741.575 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.741.689 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.743.110 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.743.117 I llama_new_context_with_model: graph nodes  = 601
0.00.743.117 I llama_new_context_with_model: graph splits = 1
0.00.743.133 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.357.819 I main: llama threadpool init, n_threads = 4
0.01.357.832 I 
0.01.357.925 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.357.929 I 
0.01.358.099 I sampler seed: 2792441681
0.01.358.110 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.358.116 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.358.116 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.358.117 I 
 increasities. It is inappropriate and unacceptable. [end of text]


0.05.593.936 I llama_perf_sampler_print:    sampling time =      15.45 ms /    11 runs   (    1.40 ms per token,   711.97 tokens per second)
0.05.593.940 I llama_perf_context_print:        load time =    1354.90 ms
0.05.593.942 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.593.964 I llama_perf_context_print:        eval time =    4209.66 ms /    10 runs   (  420.97 ms per token,     2.38 tokens per second)
0.05.593.966 I llama_perf_context_print:       total time =    4236.13 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.625 I build: 3830 (b5de3b74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.818 I main: llama backend init
0.00.002.769 I main: load the model and apply lora adapter, if any
0.00.024.527 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.714 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.801 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.812 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.813 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.817 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.819 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.829 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.833 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.834 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.834 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.841 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.842 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.849 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.851 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.852 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.600 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.326 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.695 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.703 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.704 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.705 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.705 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.706 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.707 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.710 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.711 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.712 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.713 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.197.714 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.722 I llama_model_loader: - type  f32:   37 tensors
0.00.197.727 I llama_model_loader: - type q8_0:  127 tensors
0.00.497.906 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.252 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.260 I llm_load_vocab: special tokens cache size = 5
0.00.581.498 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.581.555 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.581.556 I llm_load_print_meta: arch             = gemma
0.00.581.557 I llm_load_print_meta: vocab type       = SPM
0.00.581.558 I llm_load_print_meta: n_vocab          = 256000
0.00.581.560 I llm_load_print_meta: n_merges         = 0
0.00.581.560 I llm_load_print_meta: vocab_only       = 0
0.00.581.561 I llm_load_print_meta: n_ctx_train      = 8192
0.00.581.561 I llm_load_print_meta: n_embd           = 2048
0.00.581.561 I llm_load_print_meta: n_layer          = 18
0.00.581.597 I llm_load_print_meta: n_head           = 8
0.00.581.604 I llm_load_print_meta: n_head_kv        = 1
0.00.581.605 I llm_load_print_meta: n_rot            = 256
0.00.581.605 I llm_load_print_meta: n_swa            = 0
0.00.581.605 I llm_load_print_meta: n_embd_head_k    = 256
0.00.581.606 I llm_load_print_meta: n_embd_head_v    = 256
0.00.581.610 I llm_load_print_meta: n_gqa            = 8
0.00.581.615 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.581.619 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.581.620 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.581.622 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.581.622 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.581.623 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.581.623 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.581.628 I llm_load_print_meta: n_ff             = 16384
0.00.581.628 I llm_load_print_meta: n_expert         = 0
0.00.581.629 I llm_load_print_meta: n_expert_used    = 0
0.00.581.629 I llm_load_print_meta: causal attn      = 1
0.00.581.629 I llm_load_print_meta: pooling type     = 0
0.00.581.630 I llm_load_print_meta: rope type        = 2
0.00.581.630 I llm_load_print_meta: rope scaling     = linear
0.00.581.632 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.581.632 I llm_load_print_meta: freq_scale_train = 1
0.00.581.632 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.581.633 I llm_load_print_meta: rope_finetuned   = unknown
0.00.581.633 I llm_load_print_meta: ssm_d_conv       = 0
0.00.581.633 I llm_load_print_meta: ssm_d_inner      = 0
0.00.581.634 I llm_load_print_meta: ssm_d_state      = 0
0.00.581.634 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.581.635 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.581.635 I llm_load_print_meta: model type       = 2B
0.00.581.636 I llm_load_print_meta: model ftype      = Q8_0
0.00.581.637 I llm_load_print_meta: model params     = 2.51 B
0.00.581.638 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.581.638 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.581.639 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.581.639 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.581.640 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.581.640 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.581.641 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.581.641 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.581.646 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.581.648 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.581.648 I llm_load_print_meta: max token length = 93
0.00.581.836 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.652.799 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.652.810 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.658.377 I llama_new_context_with_model: n_ctx      = 8192
0.00.658.383 I llama_new_context_with_model: n_batch    = 2048
0.00.658.384 I llama_new_context_with_model: n_ubatch   = 512
0.00.658.384 I llama_new_context_with_model: flash_attn = 0
0.00.658.387 I llama_new_context_with_model: freq_base  = 10000.0
0.00.658.387 I llama_new_context_with_model: freq_scale = 1
0.00.687.304 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.687.345 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.687.454 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.688.835 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.688.842 I llama_new_context_with_model: graph nodes  = 601
0.00.688.842 I llama_new_context_with_model: graph splits = 1
0.00.688.859 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.301.630 I main: llama threadpool init, n_threads = 4
0.01.301.643 I 
0.01.301.736 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.301.740 I 
0.01.301.914 I sampler seed: 264046022
0.01.301.924 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.301.929 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.301.939 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.301.940 I 
 increasities. [end of text]


0.02.989.982 I llama_perf_sampler_print:    sampling time =       6.22 ms /     5 runs   (    1.24 ms per token,   804.38 tokens per second)
0.02.989.985 I llama_perf_context_print:        load time =    1298.77 ms
0.02.989.997 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.989.999 I llama_perf_context_print:        eval time =    1676.26 ms /     4 runs   (  419.07 ms per token,     2.39 tokens per second)
0.02.990.000 I llama_perf_context_print:       total time =    1688.36 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m48.307s
user	2m25.188s
sys	0m9.628s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3830 (b5de3b74)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199194.85 ms
main:    total time = 199194.85 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.663 I build: 3830 (b5de3b74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.817 I main: load the model and apply lora adapter, if any
0.00.024.753 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.021 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.121 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.133 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.134 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.139 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.141 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.142 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.142 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.144 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.145 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.151 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.152 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.153 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.160 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.162 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.490 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.498 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.984 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.992 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.993 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.994 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.995 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.996 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.996 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.000 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.001 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.002 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.003 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.004 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.013 I llama_model_loader: - type  f32:   37 tensors
0.00.197.017 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.018 I llama_model_loader: - type q6_K:   19 tensors
0.00.497.356 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.548 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.632 I llm_load_vocab: special tokens cache size = 5
0.00.587.245 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.587.311 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.587.312 I llm_load_print_meta: arch             = gemma
0.00.587.313 I llm_load_print_meta: vocab type       = SPM
0.00.587.314 I llm_load_print_meta: n_vocab          = 256000
0.00.587.317 I llm_load_print_meta: n_merges         = 0
0.00.587.317 I llm_load_print_meta: vocab_only       = 0
0.00.587.317 I llm_load_print_meta: n_ctx_train      = 8192
0.00.587.318 I llm_load_print_meta: n_embd           = 2048
0.00.587.318 I llm_load_print_meta: n_layer          = 18
0.00.587.355 I llm_load_print_meta: n_head           = 8
0.00.587.362 I llm_load_print_meta: n_head_kv        = 1
0.00.587.362 I llm_load_print_meta: n_rot            = 256
0.00.587.363 I llm_load_print_meta: n_swa            = 0
0.00.587.363 I llm_load_print_meta: n_embd_head_k    = 256
0.00.587.364 I llm_load_print_meta: n_embd_head_v    = 256
0.00.587.368 I llm_load_print_meta: n_gqa            = 8
0.00.587.373 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.587.378 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.587.379 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.587.380 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.587.381 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.587.381 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.587.382 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.587.386 I llm_load_print_meta: n_ff             = 16384
0.00.587.387 I llm_load_print_meta: n_expert         = 0
0.00.587.387 I llm_load_print_meta: n_expert_used    = 0
0.00.587.388 I llm_load_print_meta: causal attn      = 1
0.00.587.388 I llm_load_print_meta: pooling type     = 0
0.00.587.388 I llm_load_print_meta: rope type        = 2
0.00.587.389 I llm_load_print_meta: rope scaling     = linear
0.00.587.390 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.587.391 I llm_load_print_meta: freq_scale_train = 1
0.00.587.391 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.587.392 I llm_load_print_meta: rope_finetuned   = unknown
0.00.587.392 I llm_load_print_meta: ssm_d_conv       = 0
0.00.587.392 I llm_load_print_meta: ssm_d_inner      = 0
0.00.587.393 I llm_load_print_meta: ssm_d_state      = 0
0.00.587.393 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.587.393 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.587.394 I llm_load_print_meta: model type       = 2B
0.00.587.395 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.587.395 I llm_load_print_meta: model params     = 2.51 B
0.00.587.396 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.587.396 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.587.397 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.587.397 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.587.398 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.587.398 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.587.398 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.587.399 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.587.406 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.587.408 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.587.408 I llm_load_print_meta: max token length = 93
0.00.587.594 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.647.030 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.647.043 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.647.043 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.647.044 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.647.045 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.647.045 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.652.595 I llama_new_context_with_model: n_ctx      = 8192
0.00.652.602 I llama_new_context_with_model: n_batch    = 2048
0.00.652.602 I llama_new_context_with_model: n_ubatch   = 512
0.00.652.603 I llama_new_context_with_model: flash_attn = 0
0.00.652.607 I llama_new_context_with_model: freq_base  = 10000.0
0.00.652.608 I llama_new_context_with_model: freq_scale = 1
0.00.683.745 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.683.786 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.683.897 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.685.262 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.685.267 I llama_new_context_with_model: graph nodes  = 601
0.00.685.268 I llama_new_context_with_model: graph splits = 1
0.00.685.284 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.268.988 I main: llama threadpool init, n_threads = 4
0.01.269.000 I 
0.01.269.091 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.269.095 I 
0.01.269.254 I sampler seed: 3565336021
0.01.269.265 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.269.270 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.269.270 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.269.271 I 
 increasities in the ancient world, such as the Trojan War, are often depicted in art and literature as tales of violence and destruction. However, it is important

0.12.344.929 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.18 tokens per second)
0.12.344.933 I llama_perf_context_print:        load time =    1266.07 ms
0.12.344.935 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.344.937 I llama_perf_context_print:        eval time =   10993.48 ms /    32 runs   (  343.55 ms per token,     2.91 tokens per second)
0.12.344.938 I llama_perf_context_print:       total time =   11075.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3830 (b5de3b74)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199138.18 ms
main:    total time = 199138.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.634 I build: 3830 (b5de3b74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.786 I main: load the model and apply lora adapter, if any
0.00.024.899 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.996 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.011 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.013 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.016 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.017 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.019 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.021 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.021 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.022 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.029 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.029 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.031 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.032 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.033 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.717 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.598 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.036 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.042 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.043 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.045 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.045 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.046 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.047 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.050 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.051 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.059 I llama_model_loader: - type  f32:   37 tensors
0.00.198.064 I llama_model_loader: - type q4_K:  108 tensors
0.00.198.064 I llama_model_loader: - type q6_K:   19 tensors
0.00.500.365 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.532.423 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.533.529 I llm_load_vocab: special tokens cache size = 5
0.00.591.063 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.121 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.123 I llm_load_print_meta: arch             = gemma
0.00.591.123 I llm_load_print_meta: vocab type       = SPM
0.00.591.124 I llm_load_print_meta: n_vocab          = 256000
0.00.591.126 I llm_load_print_meta: n_merges         = 0
0.00.591.127 I llm_load_print_meta: vocab_only       = 0
0.00.591.127 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.128 I llm_load_print_meta: n_embd           = 2048
0.00.591.128 I llm_load_print_meta: n_layer          = 18
0.00.591.163 I llm_load_print_meta: n_head           = 8
0.00.591.169 I llm_load_print_meta: n_head_kv        = 1
0.00.591.170 I llm_load_print_meta: n_rot            = 256
0.00.591.170 I llm_load_print_meta: n_swa            = 0
0.00.591.170 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.171 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.176 I llm_load_print_meta: n_gqa            = 8
0.00.591.180 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.185 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.186 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.187 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.188 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.188 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.189 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.194 I llm_load_print_meta: n_ff             = 16384
0.00.591.194 I llm_load_print_meta: n_expert         = 0
0.00.591.195 I llm_load_print_meta: n_expert_used    = 0
0.00.591.195 I llm_load_print_meta: causal attn      = 1
0.00.591.195 I llm_load_print_meta: pooling type     = 0
0.00.591.196 I llm_load_print_meta: rope type        = 2
0.00.591.196 I llm_load_print_meta: rope scaling     = linear
0.00.591.198 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.198 I llm_load_print_meta: freq_scale_train = 1
0.00.591.198 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.199 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.199 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.199 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.200 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.200 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.200 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.201 I llm_load_print_meta: model type       = 2B
0.00.591.202 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.591.202 I llm_load_print_meta: model params     = 2.51 B
0.00.591.203 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.591.204 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.204 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.204 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.228 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.229 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.229 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.230 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.591.245 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.591.247 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.591.247 I llm_load_print_meta: max token length = 93
0.00.591.423 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.649.194 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.654.739 I llama_new_context_with_model: n_ctx      = 8192
0.00.654.746 I llama_new_context_with_model: n_batch    = 2048
0.00.654.746 I llama_new_context_with_model: n_ubatch   = 512
0.00.654.747 I llama_new_context_with_model: flash_attn = 0
0.00.654.750 I llama_new_context_with_model: freq_base  = 10000.0
0.00.654.751 I llama_new_context_with_model: freq_scale = 1
0.00.685.036 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.685.080 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.685.190 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.686.583 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.686.589 I llama_new_context_with_model: graph nodes  = 601
0.00.686.590 I llama_new_context_with_model: graph splits = 1
0.00.686.605 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.264.695 I main: llama threadpool init, n_threads = 4
0.01.264.707 I 
0.01.264.803 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.264.807 I 
0.01.264.970 I sampler seed: 3155910910
0.01.264.981 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.264.986 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.264.986 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.264.987 I 
 fufilling music.

The melody danced across the air, a whimsical symphony of whimsical sounds.

The rhythm pulsed, a steady heartbeat in the midst of the

0.12.163.772 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.81 tokens per second)
0.12.163.775 I llama_perf_context_print:        load time =    1261.82 ms
0.12.163.788 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.163.790 I llama_perf_context_print:        eval time =   10817.22 ms /    32 runs   (  338.04 ms per token,     2.96 tokens per second)
0.12.163.792 I llama_perf_context_print:       total time =   10899.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.770s
user	50m19.128s
sys	0m6.546s
