+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4330 (b5ae1ddf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.845 I main: load the model and apply lora adapter, if any
0.00.023.406 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.417 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.509 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.522 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.524 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.530 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.534 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.536 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.537 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.539 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.540 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.549 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.551 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.552 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.553 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.557 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.296 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.779 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.805 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.814 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.816 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.817 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.818 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.820 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.821 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.825 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.826 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.827 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.828 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.830 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.839 I llama_model_loader: - type  f32:   37 tensors
0.00.350.841 I llama_model_loader: - type q8_0:  127 tensors
0.00.576.365 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.804 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.639.762 I llm_load_vocab: special tokens cache size = 5
0.00.834.605 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.834.678 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.834.682 I llm_load_print_meta: arch             = gemma
0.00.834.682 I llm_load_print_meta: vocab type       = SPM
0.00.834.683 I llm_load_print_meta: n_vocab          = 256000
0.00.834.686 I llm_load_print_meta: n_merges         = 0
0.00.834.686 I llm_load_print_meta: vocab_only       = 0
0.00.834.687 I llm_load_print_meta: n_ctx_train      = 8192
0.00.834.687 I llm_load_print_meta: n_embd           = 2048
0.00.834.687 I llm_load_print_meta: n_layer          = 18
0.00.834.750 I llm_load_print_meta: n_head           = 8
0.00.834.762 I llm_load_print_meta: n_head_kv        = 1
0.00.834.763 I llm_load_print_meta: n_rot            = 256
0.00.834.765 I llm_load_print_meta: n_swa            = 0
0.00.834.766 I llm_load_print_meta: n_embd_head_k    = 256
0.00.834.766 I llm_load_print_meta: n_embd_head_v    = 256
0.00.834.771 I llm_load_print_meta: n_gqa            = 8
0.00.834.776 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.834.781 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.834.782 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.834.784 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.834.784 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.834.785 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.834.786 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.834.791 I llm_load_print_meta: n_ff             = 16384
0.00.834.792 I llm_load_print_meta: n_expert         = 0
0.00.834.793 I llm_load_print_meta: n_expert_used    = 0
0.00.834.802 I llm_load_print_meta: causal attn      = 1
0.00.834.803 I llm_load_print_meta: pooling type     = 0
0.00.834.803 I llm_load_print_meta: rope type        = 2
0.00.834.803 I llm_load_print_meta: rope scaling     = linear
0.00.834.805 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.834.805 I llm_load_print_meta: freq_scale_train = 1
0.00.834.806 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.834.806 I llm_load_print_meta: rope_finetuned   = unknown
0.00.834.807 I llm_load_print_meta: ssm_d_conv       = 0
0.00.834.820 I llm_load_print_meta: ssm_d_inner      = 0
0.00.834.821 I llm_load_print_meta: ssm_d_state      = 0
0.00.834.824 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.834.824 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.834.825 I llm_load_print_meta: model type       = 2B
0.00.834.826 I llm_load_print_meta: model ftype      = Q8_0
0.00.834.827 I llm_load_print_meta: model params     = 2.51 B
0.00.834.828 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.834.829 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.834.829 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.834.829 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.834.838 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.834.846 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.834.846 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.834.847 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.834.853 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.834.855 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.834.855 I llm_load_print_meta: max token length = 93
0.00.934.413 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.934.424 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.934.425 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.934.426 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.934.426 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.934.427 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.940.566 I llama_new_context_with_model: n_seq_max     = 1
0.00.940.575 I llama_new_context_with_model: n_ctx         = 4096
0.00.940.575 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.940.576 I llama_new_context_with_model: n_batch       = 2048
0.00.940.576 I llama_new_context_with_model: n_ubatch      = 512
0.00.940.577 I llama_new_context_with_model: flash_attn    = 0
0.00.940.580 I llama_new_context_with_model: freq_base     = 10000.0
0.00.940.581 I llama_new_context_with_model: freq_scale    = 1
0.00.940.582 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.956.260 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.956.303 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.956.424 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.959.059 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.959.062 I llama_new_context_with_model: graph nodes  = 601
0.00.959.063 I llama_new_context_with_model: graph splits = 1
0.00.959.086 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.568.808 I main: llama threadpool init, n_threads = 4
0.01.568.824 I 
0.01.568.947 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.568.951 I 
0.01.569.185 I sampler seed: 7753087
0.01.569.198 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.569.211 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.569.212 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.569.212 I 
 increasels, a mischievous creature from Norse mythology.

The Norse goddess Freya, known for her enchanting beauty and playful nature, was intrigued by the creature's

0.15.051.917 I llama_perf_sampler_print:    sampling time =      49.30 ms /    33 runs   (    1.49 ms per token,   669.36 tokens per second)
0.15.051.920 I llama_perf_context_print:        load time =    1567.87 ms
0.15.051.922 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.051.923 I llama_perf_context_print:        eval time =   13393.82 ms /    32 runs   (  418.56 ms per token,     2.39 tokens per second)
0.15.051.924 I llama_perf_context_print:       total time =   13483.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.709 I build: 4330 (b5ae1ddf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.906 I main: llama backend init
0.00.000.914 I main: load the model and apply lora adapter, if any
0.00.023.549 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.647 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.661 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.662 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.668 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.670 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.671 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.672 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.673 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.675 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.681 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.682 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.683 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.684 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.685 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.565 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.441 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.483 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.493 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.495 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.496 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.497 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.499 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.500 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.504 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.506 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.507 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.508 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.353.510 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.518 I llama_model_loader: - type  f32:   37 tensors
0.00.353.520 I llama_model_loader: - type q8_0:  127 tensors
0.00.573.778 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.633.897 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.634.859 I llm_load_vocab: special tokens cache size = 5
0.00.830.502 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.830.579 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.830.580 I llm_load_print_meta: arch             = gemma
0.00.830.580 I llm_load_print_meta: vocab type       = SPM
0.00.830.581 I llm_load_print_meta: n_vocab          = 256000
0.00.830.584 I llm_load_print_meta: n_merges         = 0
0.00.830.585 I llm_load_print_meta: vocab_only       = 0
0.00.830.585 I llm_load_print_meta: n_ctx_train      = 8192
0.00.830.585 I llm_load_print_meta: n_embd           = 2048
0.00.830.586 I llm_load_print_meta: n_layer          = 18
0.00.830.649 I llm_load_print_meta: n_head           = 8
0.00.830.658 I llm_load_print_meta: n_head_kv        = 1
0.00.830.659 I llm_load_print_meta: n_rot            = 256
0.00.830.660 I llm_load_print_meta: n_swa            = 0
0.00.830.660 I llm_load_print_meta: n_embd_head_k    = 256
0.00.830.661 I llm_load_print_meta: n_embd_head_v    = 256
0.00.830.665 I llm_load_print_meta: n_gqa            = 8
0.00.830.670 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.830.674 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.830.676 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.830.677 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.830.678 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.830.679 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.830.680 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.830.689 I llm_load_print_meta: n_ff             = 16384
0.00.830.693 I llm_load_print_meta: n_expert         = 0
0.00.830.693 I llm_load_print_meta: n_expert_used    = 0
0.00.830.693 I llm_load_print_meta: causal attn      = 1
0.00.830.694 I llm_load_print_meta: pooling type     = 0
0.00.830.694 I llm_load_print_meta: rope type        = 2
0.00.830.695 I llm_load_print_meta: rope scaling     = linear
0.00.830.696 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.830.696 I llm_load_print_meta: freq_scale_train = 1
0.00.830.697 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.830.697 I llm_load_print_meta: rope_finetuned   = unknown
0.00.830.697 I llm_load_print_meta: ssm_d_conv       = 0
0.00.830.697 I llm_load_print_meta: ssm_d_inner      = 0
0.00.830.698 I llm_load_print_meta: ssm_d_state      = 0
0.00.830.698 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.830.698 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.830.699 I llm_load_print_meta: model type       = 2B
0.00.830.700 I llm_load_print_meta: model ftype      = Q8_0
0.00.830.701 I llm_load_print_meta: model params     = 2.51 B
0.00.830.703 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.830.703 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.830.704 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.830.704 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.830.705 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.830.705 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.830.705 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.830.706 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.830.713 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.830.714 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.830.715 I llm_load_print_meta: max token length = 93
0.00.927.453 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.933.356 I llama_new_context_with_model: n_seq_max     = 1
0.00.933.364 I llama_new_context_with_model: n_ctx         = 4096
0.00.933.364 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.933.365 I llama_new_context_with_model: n_batch       = 2048
0.00.933.365 I llama_new_context_with_model: n_ubatch      = 512
0.00.933.366 I llama_new_context_with_model: flash_attn    = 0
0.00.933.368 I llama_new_context_with_model: freq_base     = 10000.0
0.00.933.369 I llama_new_context_with_model: freq_scale    = 1
0.00.933.370 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.948.355 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.948.409 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.948.533 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.951.206 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.951.211 I llama_new_context_with_model: graph nodes  = 601
0.00.951.211 I llama_new_context_with_model: graph splits = 1
0.00.951.234 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.638.201 I main: llama threadpool init, n_threads = 4
0.01.638.217 I 
0.01.638.337 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.638.341 I 
0.01.638.572 I sampler seed: 948203749
0.01.638.586 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.638.595 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.638.598 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.638.599 I 
 increably, and with the fury of a tempest, the storm ripped through the landscape, leaving devastation in its wake.

This is just a brief excerpt from

0.15.130.793 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.83 tokens per second)
0.15.130.796 I llama_perf_context_print:        load time =    1637.19 ms
0.15.130.810 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.130.812 I llama_perf_context_print:        eval time =   13403.76 ms /    32 runs   (  418.87 ms per token,     2.39 tokens per second)
0.15.130.814 I llama_perf_context_print:       total time =   13492.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 4330 (b5ae1ddf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.000.873 I main: load the model and apply lora adapter, if any
0.00.023.367 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.379 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.467 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.478 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.480 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.486 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.490 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.491 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.493 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.494 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.495 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.501 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.503 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.504 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.505 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.507 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.926 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.976 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.994 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.003 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.005 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.006 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.007 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.009 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.010 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.014 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.015 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.016 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.018 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.350.019 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.027 I llama_model_loader: - type  f32:   37 tensors
0.00.350.029 I llama_model_loader: - type q8_0:  127 tensors
0.00.577.483 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.636.824 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.637.837 I llm_load_vocab: special tokens cache size = 5
0.00.836.869 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.836.946 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.836.950 I llm_load_print_meta: arch             = gemma
0.00.836.950 I llm_load_print_meta: vocab type       = SPM
0.00.836.951 I llm_load_print_meta: n_vocab          = 256000
0.00.836.954 I llm_load_print_meta: n_merges         = 0
0.00.836.954 I llm_load_print_meta: vocab_only       = 0
0.00.836.954 I llm_load_print_meta: n_ctx_train      = 8192
0.00.836.955 I llm_load_print_meta: n_embd           = 2048
0.00.836.955 I llm_load_print_meta: n_layer          = 18
0.00.837.022 I llm_load_print_meta: n_head           = 8
0.00.837.033 I llm_load_print_meta: n_head_kv        = 1
0.00.837.034 I llm_load_print_meta: n_rot            = 256
0.00.837.035 I llm_load_print_meta: n_swa            = 0
0.00.837.036 I llm_load_print_meta: n_embd_head_k    = 256
0.00.837.036 I llm_load_print_meta: n_embd_head_v    = 256
0.00.837.041 I llm_load_print_meta: n_gqa            = 8
0.00.837.046 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.837.052 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.837.055 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.837.057 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.837.057 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.837.058 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.837.058 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.837.063 I llm_load_print_meta: n_ff             = 16384
0.00.837.064 I llm_load_print_meta: n_expert         = 0
0.00.837.064 I llm_load_print_meta: n_expert_used    = 0
0.00.837.067 I llm_load_print_meta: causal attn      = 1
0.00.837.067 I llm_load_print_meta: pooling type     = 0
0.00.837.068 I llm_load_print_meta: rope type        = 2
0.00.837.068 I llm_load_print_meta: rope scaling     = linear
0.00.837.069 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.837.070 I llm_load_print_meta: freq_scale_train = 1
0.00.837.070 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.837.070 I llm_load_print_meta: rope_finetuned   = unknown
0.00.837.071 I llm_load_print_meta: ssm_d_conv       = 0
0.00.837.071 I llm_load_print_meta: ssm_d_inner      = 0
0.00.837.072 I llm_load_print_meta: ssm_d_state      = 0
0.00.837.072 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.837.097 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.837.100 I llm_load_print_meta: model type       = 2B
0.00.837.102 I llm_load_print_meta: model ftype      = Q8_0
0.00.837.102 I llm_load_print_meta: model params     = 2.51 B
0.00.837.103 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.837.104 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.837.105 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.837.105 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.837.106 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.837.107 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.837.107 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.837.109 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.837.114 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.837.116 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.837.117 I llm_load_print_meta: max token length = 93
0.00.915.643 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.915.655 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.915.656 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.915.656 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.915.657 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.915.658 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.921.738 I llama_new_context_with_model: n_seq_max     = 1
0.00.921.746 I llama_new_context_with_model: n_ctx         = 4096
0.00.921.746 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.921.747 I llama_new_context_with_model: n_batch       = 2048
0.00.921.747 I llama_new_context_with_model: n_ubatch      = 512
0.00.921.748 I llama_new_context_with_model: flash_attn    = 0
0.00.921.751 I llama_new_context_with_model: freq_base     = 10000.0
0.00.921.752 I llama_new_context_with_model: freq_scale    = 1
0.00.921.753 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.936.917 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.936.958 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.937.075 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.939.749 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.939.753 I llama_new_context_with_model: graph nodes  = 601
0.00.939.754 I llama_new_context_with_model: graph splits = 1
0.00.939.776 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.549.530 I main: llama threadpool init, n_threads = 4
0.01.549.546 I 
0.01.549.666 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.549.670 I 
0.01.549.920 I sampler seed: 1289068677
0.01.549.933 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.549.945 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.549.947 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.549.947 I 
 increasities with a touch of spooky elegance.

The fragrance opens with a haunting blend of smoky incense and ethereal rose petals, creating a sense of ethereal mystery.

0.15.070.148 I llama_perf_sampler_print:    sampling time =      49.55 ms /    33 runs   (    1.50 ms per token,   666.05 tokens per second)
0.15.070.151 I llama_perf_context_print:        load time =    1548.57 ms
0.15.070.153 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.070.167 I llama_perf_context_print:        eval time =   13430.67 ms /    32 runs   (  419.71 ms per token,     2.38 tokens per second)
0.15.070.169 I llama_perf_context_print:       total time =   13520.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 4330 (b5ae1ddf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.000.840 I main: load the model and apply lora adapter, if any
0.00.023.070 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.079 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.163 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.175 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.177 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.182 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.184 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.185 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.187 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.188 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.189 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.196 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.201 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.203 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.205 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.208 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.389 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.894 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.879 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.888 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.889 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.891 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.892 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.893 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.895 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.899 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.900 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.902 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.903 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.348.904 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.912 I llama_model_loader: - type  f32:   37 tensors
0.00.348.915 I llama_model_loader: - type q8_0:  127 tensors
0.00.561.518 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.625.082 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.626.139 I llm_load_vocab: special tokens cache size = 5
0.00.815.878 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.815.954 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.815.955 I llm_load_print_meta: arch             = gemma
0.00.815.955 I llm_load_print_meta: vocab type       = SPM
0.00.815.957 I llm_load_print_meta: n_vocab          = 256000
0.00.815.959 I llm_load_print_meta: n_merges         = 0
0.00.815.960 I llm_load_print_meta: vocab_only       = 0
0.00.815.960 I llm_load_print_meta: n_ctx_train      = 8192
0.00.815.961 I llm_load_print_meta: n_embd           = 2048
0.00.815.961 I llm_load_print_meta: n_layer          = 18
0.00.816.027 I llm_load_print_meta: n_head           = 8
0.00.816.034 I llm_load_print_meta: n_head_kv        = 1
0.00.816.034 I llm_load_print_meta: n_rot            = 256
0.00.816.035 I llm_load_print_meta: n_swa            = 0
0.00.816.035 I llm_load_print_meta: n_embd_head_k    = 256
0.00.816.035 I llm_load_print_meta: n_embd_head_v    = 256
0.00.816.040 I llm_load_print_meta: n_gqa            = 8
0.00.816.045 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.816.050 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.816.052 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.816.053 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.816.054 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.816.054 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.816.054 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.816.059 I llm_load_print_meta: n_ff             = 16384
0.00.816.060 I llm_load_print_meta: n_expert         = 0
0.00.816.060 I llm_load_print_meta: n_expert_used    = 0
0.00.816.061 I llm_load_print_meta: causal attn      = 1
0.00.816.061 I llm_load_print_meta: pooling type     = 0
0.00.816.061 I llm_load_print_meta: rope type        = 2
0.00.816.062 I llm_load_print_meta: rope scaling     = linear
0.00.816.063 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.816.063 I llm_load_print_meta: freq_scale_train = 1
0.00.816.064 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.816.064 I llm_load_print_meta: rope_finetuned   = unknown
0.00.816.064 I llm_load_print_meta: ssm_d_conv       = 0
0.00.816.065 I llm_load_print_meta: ssm_d_inner      = 0
0.00.816.065 I llm_load_print_meta: ssm_d_state      = 0
0.00.816.065 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.816.066 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.816.066 I llm_load_print_meta: model type       = 2B
0.00.816.067 I llm_load_print_meta: model ftype      = Q8_0
0.00.816.068 I llm_load_print_meta: model params     = 2.51 B
0.00.816.069 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.816.070 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.816.070 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.816.071 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.816.076 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.816.077 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.816.077 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.816.078 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.816.083 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.816.085 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.816.085 I llm_load_print_meta: max token length = 93
0.00.889.190 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.889.200 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.895.319 I llama_new_context_with_model: n_seq_max     = 1
0.00.895.327 I llama_new_context_with_model: n_ctx         = 4096
0.00.895.327 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.895.328 I llama_new_context_with_model: n_batch       = 2048
0.00.895.328 I llama_new_context_with_model: n_ubatch      = 512
0.00.895.329 I llama_new_context_with_model: flash_attn    = 0
0.00.895.331 I llama_new_context_with_model: freq_base     = 10000.0
0.00.895.332 I llama_new_context_with_model: freq_scale    = 1
0.00.895.333 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.909.952 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.909.996 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.910.111 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.912.760 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.912.764 I llama_new_context_with_model: graph nodes  = 601
0.00.912.765 I llama_new_context_with_model: graph splits = 1
0.00.912.788 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.523.060 I main: llama threadpool init, n_threads = 4
0.01.523.077 I 
0.01.523.216 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.523.221 I 
0.01.523.468 I sampler seed: 3401954170
0.01.523.483 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.523.493 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.523.497 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.523.498 I 
 increably. [end of text]


0.03.212.510 I llama_perf_sampler_print:    sampling time =       6.24 ms /     5 runs   (    1.25 ms per token,   801.80 tokens per second)
0.03.212.514 I llama_perf_context_print:        load time =    1522.12 ms
0.03.212.515 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.212.528 I llama_perf_context_print:        eval time =    1676.38 ms /     4 runs   (  419.09 ms per token,     2.39 tokens per second)
0.03.212.530 I llama_perf_context_print:       total time =    1689.46 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.103s
user	3m2.617s
sys	0m9.373s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4330 (b5ae1ddf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 189506.45 ms
main:    total time = 189506.45 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.612 I build: 4330 (b5ae1ddf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.805 I main: llama backend init
0.00.000.813 I main: load the model and apply lora adapter, if any
0.00.023.310 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.320 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.410 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.422 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.424 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.430 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.434 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.435 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.437 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.439 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.440 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.446 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.447 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.448 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.450 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.451 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.432 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.393 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.490 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.499 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.501 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.502 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.503 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.505 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.507 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.511 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.512 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.514 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.515 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.517 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.525 I llama_model_loader: - type  f32:   37 tensors
0.00.349.527 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.528 I llama_model_loader: - type q6_K:   19 tensors
0.00.576.402 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.634.761 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.635.733 I llm_load_vocab: special tokens cache size = 5
0.00.825.819 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.825.892 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.825.893 I llm_load_print_meta: arch             = gemma
0.00.825.894 I llm_load_print_meta: vocab type       = SPM
0.00.825.895 I llm_load_print_meta: n_vocab          = 256000
0.00.825.897 I llm_load_print_meta: n_merges         = 0
0.00.825.897 I llm_load_print_meta: vocab_only       = 0
0.00.825.898 I llm_load_print_meta: n_ctx_train      = 8192
0.00.825.898 I llm_load_print_meta: n_embd           = 2048
0.00.825.899 I llm_load_print_meta: n_layer          = 18
0.00.825.964 I llm_load_print_meta: n_head           = 8
0.00.825.972 I llm_load_print_meta: n_head_kv        = 1
0.00.825.973 I llm_load_print_meta: n_rot            = 256
0.00.825.973 I llm_load_print_meta: n_swa            = 0
0.00.825.974 I llm_load_print_meta: n_embd_head_k    = 256
0.00.825.974 I llm_load_print_meta: n_embd_head_v    = 256
0.00.825.979 I llm_load_print_meta: n_gqa            = 8
0.00.825.983 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.825.990 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.825.995 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.825.997 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.825.998 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.825.998 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.825.999 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.826.004 I llm_load_print_meta: n_ff             = 16384
0.00.826.004 I llm_load_print_meta: n_expert         = 0
0.00.826.005 I llm_load_print_meta: n_expert_used    = 0
0.00.826.006 I llm_load_print_meta: causal attn      = 1
0.00.826.006 I llm_load_print_meta: pooling type     = 0
0.00.826.006 I llm_load_print_meta: rope type        = 2
0.00.826.007 I llm_load_print_meta: rope scaling     = linear
0.00.826.008 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.826.009 I llm_load_print_meta: freq_scale_train = 1
0.00.826.010 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.826.010 I llm_load_print_meta: rope_finetuned   = unknown
0.00.826.011 I llm_load_print_meta: ssm_d_conv       = 0
0.00.826.012 I llm_load_print_meta: ssm_d_inner      = 0
0.00.826.012 I llm_load_print_meta: ssm_d_state      = 0
0.00.826.012 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.826.013 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.826.014 I llm_load_print_meta: model type       = 2B
0.00.826.015 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.826.016 I llm_load_print_meta: model params     = 2.51 B
0.00.826.017 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.826.017 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.826.018 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.826.018 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.826.019 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.826.019 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.826.020 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.826.021 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.826.026 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.826.028 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.826.029 I llm_load_print_meta: max token length = 93
0.00.888.235 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.888.245 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.888.245 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.888.246 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.888.247 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.888.247 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.894.362 I llama_new_context_with_model: n_seq_max     = 1
0.00.894.371 I llama_new_context_with_model: n_ctx         = 4096
0.00.894.372 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.894.372 I llama_new_context_with_model: n_batch       = 2048
0.00.894.373 I llama_new_context_with_model: n_ubatch      = 512
0.00.894.373 I llama_new_context_with_model: flash_attn    = 0
0.00.894.378 I llama_new_context_with_model: freq_base     = 10000.0
0.00.894.378 I llama_new_context_with_model: freq_scale    = 1
0.00.894.379 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.909.830 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.909.873 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.909.997 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.912.599 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.912.603 I llama_new_context_with_model: graph nodes  = 601
0.00.912.603 I llama_new_context_with_model: graph splits = 1
0.00.912.628 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.501.698 I main: llama threadpool init, n_threads = 4
0.01.501.714 I 
0.01.501.837 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.501.841 I 
0.01.502.073 I sampler seed: 2145219202
0.01.502.087 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.502.099 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.502.099 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.502.100 I 
 squaRE, a French company specializing in high-quality, innovative products and services, has embarked on a mission to redefine the way people think about and experience stress

0.12.654.192 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.91 tokens per second)
0.12.654.196 I llama_perf_context_print:        load time =    1500.79 ms
0.12.654.198 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.654.200 I llama_perf_context_print:        eval time =   11063.71 ms /    32 runs   (  345.74 ms per token,     2.89 tokens per second)
0.12.654.202 I llama_perf_context_print:       total time =   11152.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4330 (b5ae1ddf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186649.93 ms
main:    total time = 186649.93 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4330 (b5ae1ddf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.000.848 I main: load the model and apply lora adapter, if any
0.00.023.251 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.350 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.364 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.365 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.370 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.375 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.376 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.377 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.378 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.380 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.385 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.386 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.388 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.390 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.391 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.693 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.219 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.177 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.185 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.187 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.188 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.189 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.191 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.192 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.197 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.198 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.205 I llama_model_loader: - type  f32:   37 tensors
0.00.349.208 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.208 I llama_model_loader: - type q6_K:   19 tensors
0.00.565.912 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.625.119 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.626.104 I llm_load_vocab: special tokens cache size = 5
0.00.817.275 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.817.351 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.817.355 I llm_load_print_meta: arch             = gemma
0.00.817.355 I llm_load_print_meta: vocab type       = SPM
0.00.817.356 I llm_load_print_meta: n_vocab          = 256000
0.00.817.359 I llm_load_print_meta: n_merges         = 0
0.00.817.359 I llm_load_print_meta: vocab_only       = 0
0.00.817.360 I llm_load_print_meta: n_ctx_train      = 8192
0.00.817.360 I llm_load_print_meta: n_embd           = 2048
0.00.817.360 I llm_load_print_meta: n_layer          = 18
0.00.817.426 I llm_load_print_meta: n_head           = 8
0.00.817.436 I llm_load_print_meta: n_head_kv        = 1
0.00.817.437 I llm_load_print_meta: n_rot            = 256
0.00.817.439 I llm_load_print_meta: n_swa            = 0
0.00.817.439 I llm_load_print_meta: n_embd_head_k    = 256
0.00.817.463 I llm_load_print_meta: n_embd_head_v    = 256
0.00.817.473 I llm_load_print_meta: n_gqa            = 8
0.00.817.479 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.817.484 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.817.486 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.817.488 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.817.488 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.817.489 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.817.489 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.817.494 I llm_load_print_meta: n_ff             = 16384
0.00.817.498 I llm_load_print_meta: n_expert         = 0
0.00.817.498 I llm_load_print_meta: n_expert_used    = 0
0.00.817.498 I llm_load_print_meta: causal attn      = 1
0.00.817.499 I llm_load_print_meta: pooling type     = 0
0.00.817.499 I llm_load_print_meta: rope type        = 2
0.00.817.499 I llm_load_print_meta: rope scaling     = linear
0.00.817.501 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.817.501 I llm_load_print_meta: freq_scale_train = 1
0.00.817.502 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.817.502 I llm_load_print_meta: rope_finetuned   = unknown
0.00.817.502 I llm_load_print_meta: ssm_d_conv       = 0
0.00.817.503 I llm_load_print_meta: ssm_d_inner      = 0
0.00.817.503 I llm_load_print_meta: ssm_d_state      = 0
0.00.817.503 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.817.504 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.817.504 I llm_load_print_meta: model type       = 2B
0.00.817.506 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.817.506 I llm_load_print_meta: model params     = 2.51 B
0.00.817.507 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.817.508 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.817.511 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.817.521 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.817.522 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.817.522 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.817.522 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.817.523 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.817.529 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.817.531 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.817.531 I llm_load_print_meta: max token length = 93
0.00.875.372 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.881.113 I llama_new_context_with_model: n_seq_max     = 1
0.00.881.120 I llama_new_context_with_model: n_ctx         = 4096
0.00.881.120 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.881.121 I llama_new_context_with_model: n_batch       = 2048
0.00.881.121 I llama_new_context_with_model: n_ubatch      = 512
0.00.881.122 I llama_new_context_with_model: flash_attn    = 0
0.00.881.125 I llama_new_context_with_model: freq_base     = 10000.0
0.00.881.126 I llama_new_context_with_model: freq_scale    = 1
0.00.881.126 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.896.459 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.896.500 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.896.620 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.899.168 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.899.173 I llama_new_context_with_model: graph nodes  = 601
0.00.899.173 I llama_new_context_with_model: graph splits = 1
0.00.899.197 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.478.136 I main: llama threadpool init, n_threads = 4
0.01.478.153 I 
0.01.478.274 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.478.278 I 
0.01.478.513 I sampler seed: 641437272
0.01.478.526 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.478.539 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.478.540 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.478.540 I 
 maneuvously.

I am unable to generate a response that includes sexually suggestive or inappropriate content. [end of text]


0.08.776.144 I llama_perf_sampler_print:    sampling time =      32.47 ms /    22 runs   (    1.48 ms per token,   677.65 tokens per second)
0.08.776.148 I llama_perf_context_print:        load time =    1477.19 ms
0.08.776.150 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.776.161 I llama_perf_context_print:        eval time =    7238.25 ms /    21 runs   (  344.68 ms per token,     2.90 tokens per second)
0.08.776.163 I llama_perf_context_print:       total time =    7298.02 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.476s
user	46m52.983s
sys	0m6.314s
