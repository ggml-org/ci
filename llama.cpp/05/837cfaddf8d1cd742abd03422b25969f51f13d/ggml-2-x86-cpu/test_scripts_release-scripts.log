+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.169 I build: 4257 (05837cfa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.354 I main: llama backend init
0.00.000.362 I main: load the model and apply lora adapter, if any
0.00.020.852 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.861 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.869 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.877 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.881 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.885 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.886 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.886 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.887 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.888 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.888 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.892 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.893 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.893 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.894 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.894 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.626 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.553 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.802 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.809 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.810 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.811 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.811 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.812 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.813 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.815 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.816 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.817 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.817 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.818 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.822 I llama_model_loader: - type  f32:   37 tensors
0.00.132.823 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.522 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.047 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.647 I llm_load_vocab: special tokens cache size = 5
0.00.272.785 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.802 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.803 I llm_load_print_meta: arch             = gemma
0.00.272.803 I llm_load_print_meta: vocab type       = SPM
0.00.272.804 I llm_load_print_meta: n_vocab          = 256000
0.00.272.805 I llm_load_print_meta: n_merges         = 0
0.00.272.805 I llm_load_print_meta: vocab_only       = 0
0.00.272.806 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.806 I llm_load_print_meta: n_embd           = 2048
0.00.272.806 I llm_load_print_meta: n_layer          = 18
0.00.272.819 I llm_load_print_meta: n_head           = 8
0.00.272.820 I llm_load_print_meta: n_head_kv        = 1
0.00.272.820 I llm_load_print_meta: n_rot            = 256
0.00.272.821 I llm_load_print_meta: n_swa            = 0
0.00.272.821 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.821 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.822 I llm_load_print_meta: n_gqa            = 8
0.00.272.823 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.824 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.825 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.826 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.827 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.828 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.828 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.829 I llm_load_print_meta: n_ff             = 16384
0.00.272.829 I llm_load_print_meta: n_expert         = 0
0.00.272.829 I llm_load_print_meta: n_expert_used    = 0
0.00.272.830 I llm_load_print_meta: causal attn      = 1
0.00.272.830 I llm_load_print_meta: pooling type     = 0
0.00.272.830 I llm_load_print_meta: rope type        = 2
0.00.272.830 I llm_load_print_meta: rope scaling     = linear
0.00.272.832 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.833 I llm_load_print_meta: freq_scale_train = 1
0.00.272.833 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.833 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.834 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.834 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.834 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.835 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.835 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.835 I llm_load_print_meta: model type       = 2B
0.00.272.836 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.837 I llm_load_print_meta: model params     = 2.51 B
0.00.272.838 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.838 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.838 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.839 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.839 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.840 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.840 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.840 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.841 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.841 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.842 I llm_load_print_meta: max token length = 93
0.00.378.560 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.378.570 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.378.570 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.378.571 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.378.572 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.378.573 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.383.829 I llama_new_context_with_model: n_seq_max     = 1
0.00.383.836 I llama_new_context_with_model: n_ctx         = 4096
0.00.383.836 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.383.837 I llama_new_context_with_model: n_batch       = 2048
0.00.383.837 I llama_new_context_with_model: n_ubatch      = 512
0.00.383.838 I llama_new_context_with_model: flash_attn    = 0
0.00.383.841 I llama_new_context_with_model: freq_base     = 10000.0
0.00.383.842 I llama_new_context_with_model: freq_scale    = 1
0.00.383.843 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.399.684 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.399.699 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.399.799 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.401.030 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.401.036 I llama_new_context_with_model: graph nodes  = 601
0.00.401.036 I llama_new_context_with_model: graph splits = 1
0.00.401.038 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.487.625 I main: llama threadpool init, n_threads = 4
0.00.487.639 I 
0.00.487.716 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.487.719 I 
0.00.487.763 I sampler seed: 2303030157
0.00.487.774 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.487.777 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.487.779 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.487.779 I 
 increasities. [end of text]


0.00.771.893 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8169.93 tokens per second)
0.00.771.895 I llama_perf_context_print:        load time =     487.25 ms
0.00.771.896 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.771.897 I llama_perf_context_print:        eval time =     281.11 ms /     4 runs   (   70.28 ms per token,    14.23 tokens per second)
0.00.771.898 I llama_perf_context_print:       total time =     284.28 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.556 I build: 4257 (05837cfa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.757 I main: load the model and apply lora adapter, if any
0.00.020.941 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.956 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.966 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.967 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.972 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.972 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.973 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.974 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.974 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.975 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.983 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.984 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.985 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.985 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.986 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.027 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.613 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.559 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.566 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.567 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.567 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.568 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.569 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.569 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.571 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.572 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.572 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.573 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.574 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.578 I llama_model_loader: - type  f32:   37 tensors
0.00.131.579 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.278 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.621 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.235 I llm_load_vocab: special tokens cache size = 5
0.00.271.233 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.250 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.251 I llm_load_print_meta: arch             = gemma
0.00.271.252 I llm_load_print_meta: vocab type       = SPM
0.00.271.252 I llm_load_print_meta: n_vocab          = 256000
0.00.271.253 I llm_load_print_meta: n_merges         = 0
0.00.271.254 I llm_load_print_meta: vocab_only       = 0
0.00.271.254 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.254 I llm_load_print_meta: n_embd           = 2048
0.00.271.254 I llm_load_print_meta: n_layer          = 18
0.00.271.267 I llm_load_print_meta: n_head           = 8
0.00.271.268 I llm_load_print_meta: n_head_kv        = 1
0.00.271.268 I llm_load_print_meta: n_rot            = 256
0.00.271.268 I llm_load_print_meta: n_swa            = 0
0.00.271.268 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.269 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.270 I llm_load_print_meta: n_gqa            = 8
0.00.271.271 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.272 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.272 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.274 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.274 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.275 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.275 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.276 I llm_load_print_meta: n_ff             = 16384
0.00.271.276 I llm_load_print_meta: n_expert         = 0
0.00.271.277 I llm_load_print_meta: n_expert_used    = 0
0.00.271.277 I llm_load_print_meta: causal attn      = 1
0.00.271.277 I llm_load_print_meta: pooling type     = 0
0.00.271.277 I llm_load_print_meta: rope type        = 2
0.00.271.277 I llm_load_print_meta: rope scaling     = linear
0.00.271.279 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.279 I llm_load_print_meta: freq_scale_train = 1
0.00.271.280 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.280 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.281 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.281 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.281 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.281 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.282 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.282 I llm_load_print_meta: model type       = 2B
0.00.271.282 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.283 I llm_load_print_meta: model params     = 2.51 B
0.00.271.284 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.284 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.285 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.285 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.285 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.286 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.286 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.286 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.287 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.287 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.288 I llm_load_print_meta: max token length = 93
0.00.367.961 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.373.123 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.129 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.130 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.130 I llama_new_context_with_model: n_batch       = 2048
0.00.373.131 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.132 I llama_new_context_with_model: flash_attn    = 0
0.00.373.134 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.135 I llama_new_context_with_model: freq_scale    = 1
0.00.373.136 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.388.645 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.660 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.760 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.039 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.045 I llama_new_context_with_model: graph nodes  = 601
0.00.390.046 I llama_new_context_with_model: graph splits = 1
0.00.390.048 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.172 I main: llama threadpool init, n_threads = 4
0.00.471.186 I 
0.00.471.258 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.471.261 I 
0.00.471.308 I sampler seed: 2063441479
0.00.471.318 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.322 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.322 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.325 I 
 increasities

I am unable to find the requested information in the context. Therefore, I am unable to answer this question. [end of text]


0.02.255.305 I llama_perf_sampler_print:    sampling time =       3.99 ms /    27 runs   (    0.15 ms per token,  6765.22 tokens per second)
0.02.255.309 I llama_perf_context_print:        load time =     470.40 ms
0.02.255.311 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.255.312 I llama_perf_context_print:        eval time =    1768.14 ms /    26 runs   (   68.01 ms per token,    14.70 tokens per second)
0.02.255.313 I llama_perf_context_print:       total time =    1784.14 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.566 I build: 4257 (05837cfa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.840 I main: llama backend init
0.00.000.849 I main: load the model and apply lora adapter, if any
0.00.312.353 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.312.366 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.312.376 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.312.384 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.312.386 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.312.393 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.312.394 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.312.395 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.312.396 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.312.396 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.312.397 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.312.403 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.312.403 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.312.404 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.312.404 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.312.405 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.340.295 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.415.733 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.422.608 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.422.613 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.422.614 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.422.614 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.422.615 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.422.616 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.422.616 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.422.618 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.422.619 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.422.620 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.422.620 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.422.622 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.422.626 I llama_model_loader: - type  f32:   37 tensors
0.00.422.627 I llama_model_loader: - type q8_0:  127 tensors
0.00.492.985 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.545.981 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.546.683 I llm_load_vocab: special tokens cache size = 5
0.00.567.949 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.567.970 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.567.971 I llm_load_print_meta: arch             = gemma
0.00.567.971 I llm_load_print_meta: vocab type       = SPM
0.00.567.972 I llm_load_print_meta: n_vocab          = 256000
0.00.567.973 I llm_load_print_meta: n_merges         = 0
0.00.567.973 I llm_load_print_meta: vocab_only       = 0
0.00.567.974 I llm_load_print_meta: n_ctx_train      = 8192
0.00.567.974 I llm_load_print_meta: n_embd           = 2048
0.00.567.974 I llm_load_print_meta: n_layer          = 18
0.00.567.986 I llm_load_print_meta: n_head           = 8
0.00.567.987 I llm_load_print_meta: n_head_kv        = 1
0.00.567.988 I llm_load_print_meta: n_rot            = 256
0.00.567.988 I llm_load_print_meta: n_swa            = 0
0.00.567.988 I llm_load_print_meta: n_embd_head_k    = 256
0.00.567.988 I llm_load_print_meta: n_embd_head_v    = 256
0.00.567.989 I llm_load_print_meta: n_gqa            = 8
0.00.567.990 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.567.991 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.567.992 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.567.993 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.567.994 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.567.994 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.567.994 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.567.995 I llm_load_print_meta: n_ff             = 16384
0.00.567.996 I llm_load_print_meta: n_expert         = 0
0.00.567.996 I llm_load_print_meta: n_expert_used    = 0
0.00.567.997 I llm_load_print_meta: causal attn      = 1
0.00.567.997 I llm_load_print_meta: pooling type     = 0
0.00.567.997 I llm_load_print_meta: rope type        = 2
0.00.567.997 I llm_load_print_meta: rope scaling     = linear
0.00.567.999 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.567.999 I llm_load_print_meta: freq_scale_train = 1
0.00.568.000 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.568.000 I llm_load_print_meta: rope_finetuned   = unknown
0.00.568.000 I llm_load_print_meta: ssm_d_conv       = 0
0.00.568.001 I llm_load_print_meta: ssm_d_inner      = 0
0.00.568.001 I llm_load_print_meta: ssm_d_state      = 0
0.00.568.001 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.568.002 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.568.002 I llm_load_print_meta: model type       = 2B
0.00.568.003 I llm_load_print_meta: model ftype      = Q8_0
0.00.568.004 I llm_load_print_meta: model params     = 2.51 B
0.00.568.004 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.568.004 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.568.005 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.568.005 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.568.006 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.568.006 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.568.007 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.568.008 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.568.010 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.568.010 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.568.011 I llm_load_print_meta: max token length = 93
0.00.643.089 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.643.096 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.643.097 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.643.097 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.643.098 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.643.099 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.648.270 I llama_new_context_with_model: n_seq_max     = 1
0.00.648.276 I llama_new_context_with_model: n_ctx         = 4096
0.00.648.276 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.648.277 I llama_new_context_with_model: n_batch       = 2048
0.00.648.277 I llama_new_context_with_model: n_ubatch      = 512
0.00.648.278 I llama_new_context_with_model: flash_attn    = 0
0.00.648.280 I llama_new_context_with_model: freq_base     = 10000.0
0.00.648.281 I llama_new_context_with_model: freq_scale    = 1
0.00.648.282 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.663.051 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.663.066 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.663.155 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.664.464 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.664.469 I llama_new_context_with_model: graph nodes  = 601
0.00.664.469 I llama_new_context_with_model: graph splits = 1
0.00.664.472 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.749.661 I main: llama threadpool init, n_threads = 4
0.00.749.678 I 
0.00.749.739 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.749.743 I 
0.00.749.790 I sampler seed: 2924524138
0.00.749.802 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.749.804 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.749.805 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.749.805 I 
 increasively, blurring the lines between individual and collective, reality and imagination.

The wind whistles through the jagged branches, its song a tapestry of rustling leaves and

0.03.020.732 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6928.41 tokens per second)
0.03.020.735 I llama_perf_context_print:        load time =     748.79 ms
0.03.020.736 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.020.737 I llama_perf_context_print:        eval time =    2252.20 ms /    32 runs   (   70.38 ms per token,    14.21 tokens per second)
0.03.020.738 I llama_perf_context_print:       total time =    2271.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.180 I build: 4257 (05837cfa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.380 I main: llama backend init
0.00.000.387 I main: load the model and apply lora adapter, if any
0.00.331.817 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.331.830 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.331.845 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.331.860 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.331.861 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.331.870 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.331.874 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.331.875 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.331.876 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.331.878 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.331.879 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.331.892 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.331.897 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.331.899 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.331.900 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.331.901 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.360.080 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.435.661 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.442.575 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.442.582 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.442.582 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.442.583 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.442.584 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.442.584 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.442.585 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.442.587 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.442.588 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.442.589 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.442.589 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.442.590 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.442.593 I llama_model_loader: - type  f32:   37 tensors
0.00.442.595 I llama_model_loader: - type q8_0:  127 tensors
0.00.520.105 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.574.374 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.575.120 I llm_load_vocab: special tokens cache size = 5
0.00.596.185 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.203 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.204 I llm_load_print_meta: arch             = gemma
0.00.596.205 I llm_load_print_meta: vocab type       = SPM
0.00.596.206 I llm_load_print_meta: n_vocab          = 256000
0.00.596.207 I llm_load_print_meta: n_merges         = 0
0.00.596.207 I llm_load_print_meta: vocab_only       = 0
0.00.596.207 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.207 I llm_load_print_meta: n_embd           = 2048
0.00.596.208 I llm_load_print_meta: n_layer          = 18
0.00.596.219 I llm_load_print_meta: n_head           = 8
0.00.596.220 I llm_load_print_meta: n_head_kv        = 1
0.00.596.220 I llm_load_print_meta: n_rot            = 256
0.00.596.220 I llm_load_print_meta: n_swa            = 0
0.00.596.220 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.221 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.221 I llm_load_print_meta: n_gqa            = 8
0.00.596.222 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.223 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.224 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.226 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.226 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.226 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.227 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.228 I llm_load_print_meta: n_ff             = 16384
0.00.596.228 I llm_load_print_meta: n_expert         = 0
0.00.596.228 I llm_load_print_meta: n_expert_used    = 0
0.00.596.229 I llm_load_print_meta: causal attn      = 1
0.00.596.229 I llm_load_print_meta: pooling type     = 0
0.00.596.229 I llm_load_print_meta: rope type        = 2
0.00.596.230 I llm_load_print_meta: rope scaling     = linear
0.00.596.231 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.232 I llm_load_print_meta: freq_scale_train = 1
0.00.596.232 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.232 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.233 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.233 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.233 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.233 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.234 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.234 I llm_load_print_meta: model type       = 2B
0.00.596.235 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.236 I llm_load_print_meta: model params     = 2.51 B
0.00.596.236 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.236 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.237 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.237 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.238 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.238 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.238 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.239 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.239 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.240 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.240 I llm_load_print_meta: max token length = 93
0.00.667.248 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.667.255 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.672.486 I llama_new_context_with_model: n_seq_max     = 1
0.00.672.492 I llama_new_context_with_model: n_ctx         = 4096
0.00.672.492 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.672.493 I llama_new_context_with_model: n_batch       = 2048
0.00.672.493 I llama_new_context_with_model: n_ubatch      = 512
0.00.672.494 I llama_new_context_with_model: flash_attn    = 0
0.00.672.497 I llama_new_context_with_model: freq_base     = 10000.0
0.00.672.498 I llama_new_context_with_model: freq_scale    = 1
0.00.672.499 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.687.418 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.687.433 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.687.532 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.688.785 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.688.790 I llama_new_context_with_model: graph nodes  = 601
0.00.688.791 I llama_new_context_with_model: graph splits = 1
0.00.688.793 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.777.746 I main: llama threadpool init, n_threads = 4
0.00.777.761 I 
0.00.777.845 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.777.849 I 
0.00.777.901 I sampler seed: 2020652454
0.00.777.913 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.777.919 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.777.920 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.777.920 I 
 increasities and provide evidence to support your claims.

I cannot answer this question as it is asking for inappropriate and potentially harmful content. [end of text]


0.02.903.334 I llama_perf_sampler_print:    sampling time =       4.63 ms /    29 runs   (    0.16 ms per token,  6268.91 tokens per second)
0.02.903.336 I llama_perf_context_print:        load time =     777.34 ms
0.02.903.337 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.903.339 I llama_perf_context_print:        eval time =    2108.16 ms /    28 runs   (   75.29 ms per token,    13.28 tokens per second)
0.02.903.340 I llama_perf_context_print:       total time =    2125.60 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.490s
user	0m28.822s
sys	0m9.378s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4257 (05837cfa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40208.96 ms
main:    total time = 40208.96 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.601 I build: 4257 (05837cfa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.799 I main: llama backend init
0.00.000.806 I main: load the model and apply lora adapter, if any
0.00.021.467 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.480 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.488 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.494 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.495 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.499 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.500 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.500 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.501 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.501 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.502 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.506 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.507 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.507 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.508 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.509 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.019 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.762 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.666 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.673 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.673 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.674 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.675 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.676 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.676 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.679 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.679 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.680 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.682 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.683 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.687 I llama_model_loader: - type  f32:   37 tensors
0.00.130.688 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.688 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.382 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.024 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.627 I llm_load_vocab: special tokens cache size = 5
0.00.270.662 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.677 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.678 I llm_load_print_meta: arch             = gemma
0.00.270.679 I llm_load_print_meta: vocab type       = SPM
0.00.270.679 I llm_load_print_meta: n_vocab          = 256000
0.00.270.680 I llm_load_print_meta: n_merges         = 0
0.00.270.680 I llm_load_print_meta: vocab_only       = 0
0.00.270.680 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.681 I llm_load_print_meta: n_embd           = 2048
0.00.270.681 I llm_load_print_meta: n_layer          = 18
0.00.270.692 I llm_load_print_meta: n_head           = 8
0.00.270.693 I llm_load_print_meta: n_head_kv        = 1
0.00.270.693 I llm_load_print_meta: n_rot            = 256
0.00.270.694 I llm_load_print_meta: n_swa            = 0
0.00.270.694 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.694 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.695 I llm_load_print_meta: n_gqa            = 8
0.00.270.696 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.697 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.698 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.699 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.700 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.700 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.700 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.701 I llm_load_print_meta: n_ff             = 16384
0.00.270.701 I llm_load_print_meta: n_expert         = 0
0.00.270.702 I llm_load_print_meta: n_expert_used    = 0
0.00.270.702 I llm_load_print_meta: causal attn      = 1
0.00.270.702 I llm_load_print_meta: pooling type     = 0
0.00.270.702 I llm_load_print_meta: rope type        = 2
0.00.270.703 I llm_load_print_meta: rope scaling     = linear
0.00.270.704 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.705 I llm_load_print_meta: freq_scale_train = 1
0.00.270.705 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.706 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.706 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.707 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.707 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.707 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.707 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.708 I llm_load_print_meta: model type       = 2B
0.00.270.708 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.709 I llm_load_print_meta: model params     = 2.51 B
0.00.270.710 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.710 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.710 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.711 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.711 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.711 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.712 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.712 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.713 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.713 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.713 I llm_load_print_meta: max token length = 93
0.00.331.680 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.331.688 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.331.689 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.331.689 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.331.690 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.331.690 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.336.824 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.831 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.832 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.832 I llama_new_context_with_model: n_batch       = 2048
0.00.336.833 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.833 I llama_new_context_with_model: flash_attn    = 0
0.00.336.835 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.836 I llama_new_context_with_model: freq_scale    = 1
0.00.336.837 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.525 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.538 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.636 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.841 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.848 I llama_new_context_with_model: graph nodes  = 601
0.00.352.848 I llama_new_context_with_model: graph splits = 1
0.00.352.850 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.229 I main: llama threadpool init, n_threads = 4
0.00.428.246 I 
0.00.428.319 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.428.322 I 
0.00.428.366 I sampler seed: 2298644722
0.00.428.376 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.384 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.384 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.385 I 
 increasities were rampant in the late 19th and early 20th centuries in the Western world. These were characterized by an obsessive pursuit of sexual

0.02.023.937 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6439.02 tokens per second)
0.02.023.940 I llama_perf_context_print:        load time =     427.41 ms
0.02.023.941 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.023.942 I llama_perf_context_print:        eval time =    1576.27 ms /    32 runs   (   49.26 ms per token,    20.30 tokens per second)
0.02.023.943 I llama_perf_context_print:       total time =    1595.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4257 (05837cfa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40195.70 ms
main:    total time = 40195.70 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.538 I build: 4257 (05837cfa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.021.086 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.101 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.108 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.112 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.115 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.116 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.117 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.117 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.118 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.118 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.121 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.122 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.122 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.123 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.123 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.530 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.905 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.767 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.773 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.774 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.774 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.775 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.776 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.776 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.780 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.781 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.783 I llama_model_loader: - type  f32:   37 tensors
0.00.130.785 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.785 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.654 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.374 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.956 I llm_load_vocab: special tokens cache size = 5
0.00.264.943 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.960 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.961 I llm_load_print_meta: arch             = gemma
0.00.264.962 I llm_load_print_meta: vocab type       = SPM
0.00.264.962 I llm_load_print_meta: n_vocab          = 256000
0.00.264.962 I llm_load_print_meta: n_merges         = 0
0.00.264.963 I llm_load_print_meta: vocab_only       = 0
0.00.264.963 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.963 I llm_load_print_meta: n_embd           = 2048
0.00.264.964 I llm_load_print_meta: n_layer          = 18
0.00.264.975 I llm_load_print_meta: n_head           = 8
0.00.264.976 I llm_load_print_meta: n_head_kv        = 1
0.00.264.976 I llm_load_print_meta: n_rot            = 256
0.00.264.976 I llm_load_print_meta: n_swa            = 0
0.00.264.977 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.977 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.978 I llm_load_print_meta: n_gqa            = 8
0.00.264.979 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.980 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.980 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.981 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.982 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.982 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.983 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.984 I llm_load_print_meta: n_ff             = 16384
0.00.264.984 I llm_load_print_meta: n_expert         = 0
0.00.264.984 I llm_load_print_meta: n_expert_used    = 0
0.00.264.984 I llm_load_print_meta: causal attn      = 1
0.00.264.985 I llm_load_print_meta: pooling type     = 0
0.00.264.985 I llm_load_print_meta: rope type        = 2
0.00.264.985 I llm_load_print_meta: rope scaling     = linear
0.00.264.986 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.987 I llm_load_print_meta: freq_scale_train = 1
0.00.264.987 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.987 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.988 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.988 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.988 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.989 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.989 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.990 I llm_load_print_meta: model type       = 2B
0.00.264.990 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.991 I llm_load_print_meta: model params     = 2.51 B
0.00.264.992 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.992 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.992 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.993 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.993 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.993 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.993 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.994 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.994 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.995 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.995 I llm_load_print_meta: max token length = 93
0.00.322.593 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.327.765 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.771 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.771 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.772 I llama_new_context_with_model: n_batch       = 2048
0.00.327.772 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.773 I llama_new_context_with_model: flash_attn    = 0
0.00.327.775 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.776 I llama_new_context_with_model: freq_scale    = 1
0.00.327.777 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.977 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.990 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.082 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.346 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.352 I llama_new_context_with_model: graph nodes  = 601
0.00.344.352 I llama_new_context_with_model: graph splits = 1
0.00.344.354 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.872 I main: llama threadpool init, n_threads = 4
0.00.419.888 I 
0.00.419.966 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.419.969 I 
0.00.420.018 I sampler seed: 3247142835
0.00.420.029 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.041 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.045 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.045 I 
 seconded.

**Solution:**

The solution is:

$$x=a+bt$$

**Explanation:**

The equation of a parabola is $$

0.01.975.820 I llama_perf_sampler_print:    sampling time =       5.50 ms /    33 runs   (    0.17 ms per token,  6002.18 tokens per second)
0.01.975.823 I llama_perf_context_print:        load time =     419.11 ms
0.01.975.825 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.975.826 I llama_perf_context_print:        eval time =    1536.51 ms /    32 runs   (   48.02 ms per token,    20.83 tokens per second)
0.01.975.828 I llama_perf_context_print:       total time =    1555.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.209s
user	10m23.933s
sys	0m7.005s
