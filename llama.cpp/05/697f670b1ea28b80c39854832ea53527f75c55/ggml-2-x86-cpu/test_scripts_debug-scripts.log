+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4026 (05697f67) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.814 I main: llama backend init
0.00.001.071 I main: load the model and apply lora adapter, if any
0.00.023.492 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.501 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.587 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.598 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.600 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.604 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.608 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.609 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.610 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.612 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.613 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.620 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.621 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.622 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.623 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.624 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.638 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.641 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.823 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.831 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.832 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.833 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.834 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.835 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.837 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.840 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.841 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.842 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.843 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.845 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.852 I llama_model_loader: - type  f32:   37 tensors
0.00.267.854 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.393 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.236 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.189 I llm_load_vocab: special tokens cache size = 5
0.00.595.010 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.595.076 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.595.077 I llm_load_print_meta: arch             = gemma
0.00.595.078 I llm_load_print_meta: vocab type       = SPM
0.00.595.079 I llm_load_print_meta: n_vocab          = 256000
0.00.595.081 I llm_load_print_meta: n_merges         = 0
0.00.595.082 I llm_load_print_meta: vocab_only       = 0
0.00.595.082 I llm_load_print_meta: n_ctx_train      = 8192
0.00.595.083 I llm_load_print_meta: n_embd           = 2048
0.00.595.083 I llm_load_print_meta: n_layer          = 18
0.00.595.146 I llm_load_print_meta: n_head           = 8
0.00.595.154 I llm_load_print_meta: n_head_kv        = 1
0.00.595.154 I llm_load_print_meta: n_rot            = 256
0.00.595.155 I llm_load_print_meta: n_swa            = 0
0.00.595.155 I llm_load_print_meta: n_embd_head_k    = 256
0.00.595.155 I llm_load_print_meta: n_embd_head_v    = 256
0.00.595.160 I llm_load_print_meta: n_gqa            = 8
0.00.595.164 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.595.169 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.595.170 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.595.171 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.595.172 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.595.172 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.595.172 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.595.177 I llm_load_print_meta: n_ff             = 16384
0.00.595.177 I llm_load_print_meta: n_expert         = 0
0.00.595.178 I llm_load_print_meta: n_expert_used    = 0
0.00.595.178 I llm_load_print_meta: causal attn      = 1
0.00.595.197 I llm_load_print_meta: pooling type     = 0
0.00.595.198 I llm_load_print_meta: rope type        = 2
0.00.595.199 I llm_load_print_meta: rope scaling     = linear
0.00.595.200 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.200 I llm_load_print_meta: freq_scale_train = 1
0.00.595.201 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.201 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.201 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.202 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.202 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.202 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.203 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.203 I llm_load_print_meta: model type       = 2B
0.00.595.204 I llm_load_print_meta: model ftype      = Q8_0
0.00.595.205 I llm_load_print_meta: model params     = 2.51 B
0.00.595.214 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.595.214 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.215 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.223 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.224 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.224 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.224 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.232 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.238 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.240 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.240 I llm_load_print_meta: max token length = 93
0.00.698.807 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.698.815 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.698.816 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.698.817 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.698.818 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.698.818 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.704.673 I llama_new_context_with_model: n_seq_max     = 1
0.00.704.681 I llama_new_context_with_model: n_ctx         = 4096
0.00.704.681 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.704.682 I llama_new_context_with_model: n_batch       = 2048
0.00.704.682 I llama_new_context_with_model: n_ubatch      = 512
0.00.704.683 I llama_new_context_with_model: flash_attn    = 0
0.00.704.685 I llama_new_context_with_model: freq_base     = 10000.0
0.00.704.686 I llama_new_context_with_model: freq_scale    = 1
0.00.704.687 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.720.935 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.720.970 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.721.090 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.626 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.723.630 I llama_new_context_with_model: graph nodes  = 601
0.00.723.630 I llama_new_context_with_model: graph splits = 1
0.00.723.656 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.332.684 I main: llama threadpool init, n_threads = 4
0.01.332.697 I 
0.01.332.803 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.332.807 I 
0.01.333.034 I sampler seed: 2509880497
0.01.333.047 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.333.054 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.333.055 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.333.055 I 
 increasities with the aim of enhancing the performance of a machine learning model.

**a) Explain the main objective of utilizing increasities in machine learning.**



0.14.773.832 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.80 tokens per second)
0.14.773.837 I llama_perf_context_print:        load time =    1331.52 ms
0.14.773.838 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.773.840 I llama_perf_context_print:        eval time =   13351.28 ms /    32 runs   (  417.23 ms per token,     2.40 tokens per second)
0.14.773.841 I llama_perf_context_print:       total time =   13441.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 4026 (05697f67) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.001.107 I main: load the model and apply lora adapter, if any
0.00.023.205 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.299 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.312 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.314 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.318 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.322 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.323 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.324 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.325 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.326 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.333 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.334 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.336 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.337 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.338 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.210 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.074 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.643 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.654 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.656 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.656 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.658 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.659 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.660 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.664 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.665 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.666 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.667 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.267.668 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.678 I llama_model_loader: - type  f32:   37 tensors
0.00.267.680 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.841 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.360 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.290 I llm_load_vocab: special tokens cache size = 5
0.00.612.621 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.690 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.692 I llm_load_print_meta: arch             = gemma
0.00.612.692 I llm_load_print_meta: vocab type       = SPM
0.00.612.693 I llm_load_print_meta: n_vocab          = 256000
0.00.612.695 I llm_load_print_meta: n_merges         = 0
0.00.612.696 I llm_load_print_meta: vocab_only       = 0
0.00.612.696 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.697 I llm_load_print_meta: n_embd           = 2048
0.00.612.697 I llm_load_print_meta: n_layer          = 18
0.00.612.762 I llm_load_print_meta: n_head           = 8
0.00.612.770 I llm_load_print_meta: n_head_kv        = 1
0.00.612.771 I llm_load_print_meta: n_rot            = 256
0.00.612.771 I llm_load_print_meta: n_swa            = 0
0.00.612.772 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.773 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.787 I llm_load_print_meta: n_gqa            = 8
0.00.612.796 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.801 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.803 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.805 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.805 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.806 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.806 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.811 I llm_load_print_meta: n_ff             = 16384
0.00.612.811 I llm_load_print_meta: n_expert         = 0
0.00.612.825 I llm_load_print_meta: n_expert_used    = 0
0.00.612.825 I llm_load_print_meta: causal attn      = 1
0.00.612.826 I llm_load_print_meta: pooling type     = 0
0.00.612.826 I llm_load_print_meta: rope type        = 2
0.00.612.835 I llm_load_print_meta: rope scaling     = linear
0.00.612.837 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.838 I llm_load_print_meta: freq_scale_train = 1
0.00.612.846 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.846 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.847 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.847 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.847 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.855 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.856 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.857 I llm_load_print_meta: model type       = 2B
0.00.612.858 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.859 I llm_load_print_meta: model params     = 2.51 B
0.00.612.867 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.868 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.868 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.869 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.869 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.870 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.870 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.871 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.877 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.879 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.879 I llm_load_print_meta: max token length = 93
0.00.712.508 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.718.538 I llama_new_context_with_model: n_seq_max     = 1
0.00.718.546 I llama_new_context_with_model: n_ctx         = 4096
0.00.718.546 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.718.546 I llama_new_context_with_model: n_batch       = 2048
0.00.718.547 I llama_new_context_with_model: n_ubatch      = 512
0.00.718.547 I llama_new_context_with_model: flash_attn    = 0
0.00.718.549 I llama_new_context_with_model: freq_base     = 10000.0
0.00.718.550 I llama_new_context_with_model: freq_scale    = 1
0.00.718.550 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.735.707 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.735.750 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.735.875 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.419 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.738.423 I llama_new_context_with_model: graph nodes  = 601
0.00.738.423 I llama_new_context_with_model: graph splits = 1
0.00.738.447 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.348.964 I main: llama threadpool init, n_threads = 4
0.01.348.976 I 
0.01.349.083 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.349.087 I 
0.01.349.318 I sampler seed: 2830596872
0.01.349.330 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.349.337 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.349.337 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.349.337 I 
 increamically.

I am not able to generate responses that contain sexually suggestive or inappropriate content. [end of text]


0.09.893.199 I llama_perf_sampler_print:    sampling time =      31.04 ms /    21 runs   (    1.48 ms per token,   676.57 tokens per second)
0.09.893.202 I llama_perf_context_print:        load time =    1347.77 ms
0.09.893.204 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.893.217 I llama_perf_context_print:        eval time =    8486.55 ms /    20 runs   (  424.33 ms per token,     2.36 tokens per second)
0.09.893.218 I llama_perf_context_print:       total time =    8544.24 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 4026 (05697f67) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.001.143 I main: load the model and apply lora adapter, if any
0.00.023.729 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.739 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.833 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.847 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.848 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.853 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.857 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.859 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.861 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.862 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.865 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.874 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.879 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.881 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.883 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.885 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.177 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.798 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.216 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.228 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.229 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.230 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.231 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.232 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.234 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.237 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.238 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.240 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.241 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.242 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.251 I llama_model_loader: - type  f32:   37 tensors
0.00.268.253 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.187 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.992 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.897 I llm_load_vocab: special tokens cache size = 5
0.00.609.742 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.812 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.813 I llm_load_print_meta: arch             = gemma
0.00.609.814 I llm_load_print_meta: vocab type       = SPM
0.00.609.815 I llm_load_print_meta: n_vocab          = 256000
0.00.609.817 I llm_load_print_meta: n_merges         = 0
0.00.609.818 I llm_load_print_meta: vocab_only       = 0
0.00.609.818 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.819 I llm_load_print_meta: n_embd           = 2048
0.00.609.819 I llm_load_print_meta: n_layer          = 18
0.00.609.883 I llm_load_print_meta: n_head           = 8
0.00.609.890 I llm_load_print_meta: n_head_kv        = 1
0.00.609.891 I llm_load_print_meta: n_rot            = 256
0.00.609.892 I llm_load_print_meta: n_swa            = 0
0.00.609.893 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.893 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.898 I llm_load_print_meta: n_gqa            = 8
0.00.609.902 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.908 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.909 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.911 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.912 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.912 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.913 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.918 I llm_load_print_meta: n_ff             = 16384
0.00.609.919 I llm_load_print_meta: n_expert         = 0
0.00.609.923 I llm_load_print_meta: n_expert_used    = 0
0.00.609.923 I llm_load_print_meta: causal attn      = 1
0.00.609.924 I llm_load_print_meta: pooling type     = 0
0.00.609.924 I llm_load_print_meta: rope type        = 2
0.00.609.925 I llm_load_print_meta: rope scaling     = linear
0.00.609.926 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.927 I llm_load_print_meta: freq_scale_train = 1
0.00.609.928 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.928 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.929 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.929 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.929 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.929 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.938 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.939 I llm_load_print_meta: model type       = 2B
0.00.609.941 I llm_load_print_meta: model ftype      = Q8_0
0.00.609.941 I llm_load_print_meta: model params     = 2.51 B
0.00.609.949 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.609.960 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.961 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.961 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.962 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.962 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.963 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.964 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.970 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.972 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.972 I llm_load_print_meta: max token length = 93
0.00.706.885 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.706.894 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.706.895 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.706.896 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.706.897 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.706.898 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.713.068 I llama_new_context_with_model: n_seq_max     = 1
0.00.713.075 I llama_new_context_with_model: n_ctx         = 4096
0.00.713.076 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.713.076 I llama_new_context_with_model: n_batch       = 2048
0.00.713.076 I llama_new_context_with_model: n_ubatch      = 512
0.00.713.077 I llama_new_context_with_model: flash_attn    = 0
0.00.713.079 I llama_new_context_with_model: freq_base     = 10000.0
0.00.713.079 I llama_new_context_with_model: freq_scale    = 1
0.00.713.080 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.729.495 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.729.536 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.729.662 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.732.226 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.732.231 I llama_new_context_with_model: graph nodes  = 601
0.00.732.231 I llama_new_context_with_model: graph splits = 1
0.00.732.254 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.342.701 I main: llama threadpool init, n_threads = 4
0.01.342.717 I 
0.01.342.842 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.342.846 I 
0.01.343.084 I sampler seed: 3520228273
0.01.343.096 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.104 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.343.105 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.105 I 
 increasities. [end of text]


0.03.042.922 I llama_perf_sampler_print:    sampling time =       6.22 ms /     5 runs   (    1.24 ms per token,   804.12 tokens per second)
0.03.042.936 I llama_perf_context_print:        load time =    1341.46 ms
0.03.042.938 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.042.940 I llama_perf_context_print:        eval time =    1687.46 ms /     4 runs   (  421.87 ms per token,     2.37 tokens per second)
0.03.042.942 I llama_perf_context_print:       total time =    1700.23 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4026 (05697f67) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.001.087 I main: load the model and apply lora adapter, if any
0.00.023.238 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.246 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.330 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.341 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.342 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.346 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.349 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.350 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.351 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.359 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.363 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.369 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.371 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.379 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.383 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.385 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.363 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.579 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.875 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.887 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.888 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.889 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.890 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.892 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.893 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.897 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.898 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.899 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.900 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.267.901 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.910 I llama_model_loader: - type  f32:   37 tensors
0.00.267.912 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.249 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.123 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.961 I llm_load_vocab: special tokens cache size = 5
0.00.593.487 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.593.556 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.593.556 I llm_load_print_meta: arch             = gemma
0.00.593.557 I llm_load_print_meta: vocab type       = SPM
0.00.593.558 I llm_load_print_meta: n_vocab          = 256000
0.00.593.560 I llm_load_print_meta: n_merges         = 0
0.00.593.561 I llm_load_print_meta: vocab_only       = 0
0.00.593.561 I llm_load_print_meta: n_ctx_train      = 8192
0.00.593.562 I llm_load_print_meta: n_embd           = 2048
0.00.593.562 I llm_load_print_meta: n_layer          = 18
0.00.593.626 I llm_load_print_meta: n_head           = 8
0.00.593.633 I llm_load_print_meta: n_head_kv        = 1
0.00.593.634 I llm_load_print_meta: n_rot            = 256
0.00.593.634 I llm_load_print_meta: n_swa            = 0
0.00.593.634 I llm_load_print_meta: n_embd_head_k    = 256
0.00.593.636 I llm_load_print_meta: n_embd_head_v    = 256
0.00.593.640 I llm_load_print_meta: n_gqa            = 8
0.00.593.645 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.593.650 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.593.652 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.593.654 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.593.654 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.593.665 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.593.669 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.593.676 I llm_load_print_meta: n_ff             = 16384
0.00.593.677 I llm_load_print_meta: n_expert         = 0
0.00.593.677 I llm_load_print_meta: n_expert_used    = 0
0.00.593.678 I llm_load_print_meta: causal attn      = 1
0.00.593.678 I llm_load_print_meta: pooling type     = 0
0.00.593.678 I llm_load_print_meta: rope type        = 2
0.00.593.679 I llm_load_print_meta: rope scaling     = linear
0.00.593.680 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.593.681 I llm_load_print_meta: freq_scale_train = 1
0.00.593.681 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.593.681 I llm_load_print_meta: rope_finetuned   = unknown
0.00.593.682 I llm_load_print_meta: ssm_d_conv       = 0
0.00.593.683 I llm_load_print_meta: ssm_d_inner      = 0
0.00.593.683 I llm_load_print_meta: ssm_d_state      = 0
0.00.593.683 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.593.684 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.593.685 I llm_load_print_meta: model type       = 2B
0.00.593.686 I llm_load_print_meta: model ftype      = Q8_0
0.00.593.687 I llm_load_print_meta: model params     = 2.51 B
0.00.593.696 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.593.697 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.593.697 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.593.698 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.593.699 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.593.699 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.593.703 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.593.703 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.593.710 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.593.712 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.593.713 I llm_load_print_meta: max token length = 93
0.00.666.562 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.666.572 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.672.343 I llama_new_context_with_model: n_seq_max     = 1
0.00.672.350 I llama_new_context_with_model: n_ctx         = 4096
0.00.672.350 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.672.350 I llama_new_context_with_model: n_batch       = 2048
0.00.672.351 I llama_new_context_with_model: n_ubatch      = 512
0.00.672.351 I llama_new_context_with_model: flash_attn    = 0
0.00.672.353 I llama_new_context_with_model: freq_base     = 10000.0
0.00.672.354 I llama_new_context_with_model: freq_scale    = 1
0.00.672.354 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.688.412 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.688.451 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.688.569 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.691.023 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.691.027 I llama_new_context_with_model: graph nodes  = 601
0.00.691.027 I llama_new_context_with_model: graph splits = 1
0.00.691.050 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.300.906 I main: llama threadpool init, n_threads = 4
0.01.300.921 I 
0.01.301.028 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.301.031 I 
0.01.301.262 I sampler seed: 3026390102
0.01.301.274 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.301.281 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.301.282 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.301.282 I 
 maneuvring.

Answer: A paradox.

A paradox is a statement or proposition that appears to be contradictory or irrational when examined closely, but may have

0.14.813.390 I llama_perf_sampler_print:    sampling time =      48.97 ms /    33 runs   (    1.48 ms per token,   673.95 tokens per second)
0.14.813.393 I llama_perf_context_print:        load time =    1299.72 ms
0.14.813.407 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.813.409 I llama_perf_context_print:        eval time =   13423.27 ms /    32 runs   (  419.48 ms per token,     2.38 tokens per second)
0.14.813.411 I llama_perf_context_print:       total time =   13512.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m52.106s
user	2m41.448s
sys	0m9.416s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4026 (05697f67)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199301.18 ms
main:    total time = 199301.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 4026 (05697f67) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.001.121 I main: load the model and apply lora adapter, if any
0.00.023.927 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.939 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.038 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.052 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.053 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.059 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.061 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.064 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.066 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.068 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.072 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.084 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.086 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.088 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.090 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.092 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.304 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.922 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.279 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.287 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.288 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.289 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.290 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.292 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.293 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.298 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.300 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.302 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.304 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.306 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.315 I llama_model_loader: - type  f32:   37 tensors
0.00.268.318 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.319 I llama_model_loader: - type q6_K:   19 tensors
0.00.463.423 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.923 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.885 I llm_load_vocab: special tokens cache size = 5
0.00.624.731 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.802 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.803 I llm_load_print_meta: arch             = gemma
0.00.624.804 I llm_load_print_meta: vocab type       = SPM
0.00.624.805 I llm_load_print_meta: n_vocab          = 256000
0.00.624.807 I llm_load_print_meta: n_merges         = 0
0.00.624.808 I llm_load_print_meta: vocab_only       = 0
0.00.624.808 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.809 I llm_load_print_meta: n_embd           = 2048
0.00.624.809 I llm_load_print_meta: n_layer          = 18
0.00.624.875 I llm_load_print_meta: n_head           = 8
0.00.624.885 I llm_load_print_meta: n_head_kv        = 1
0.00.624.886 I llm_load_print_meta: n_rot            = 256
0.00.624.887 I llm_load_print_meta: n_swa            = 0
0.00.624.888 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.889 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.895 I llm_load_print_meta: n_gqa            = 8
0.00.624.901 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.908 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.910 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.912 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.912 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.914 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.915 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.922 I llm_load_print_meta: n_ff             = 16384
0.00.624.924 I llm_load_print_meta: n_expert         = 0
0.00.624.924 I llm_load_print_meta: n_expert_used    = 0
0.00.624.933 I llm_load_print_meta: causal attn      = 1
0.00.624.934 I llm_load_print_meta: pooling type     = 0
0.00.624.935 I llm_load_print_meta: rope type        = 2
0.00.624.936 I llm_load_print_meta: rope scaling     = linear
0.00.624.938 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.939 I llm_load_print_meta: freq_scale_train = 1
0.00.624.940 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.941 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.941 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.942 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.943 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.943 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.944 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.945 I llm_load_print_meta: model type       = 2B
0.00.624.947 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.624.948 I llm_load_print_meta: model params     = 2.51 B
0.00.624.960 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.624.960 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.961 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.962 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.963 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.964 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.965 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.966 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.973 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.975 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.976 I llm_load_print_meta: max token length = 93
0.00.690.479 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.690.488 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.690.489 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.690.490 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.690.490 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.690.491 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.696.675 I llama_new_context_with_model: n_seq_max     = 1
0.00.696.682 I llama_new_context_with_model: n_ctx         = 4096
0.00.696.683 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.696.683 I llama_new_context_with_model: n_batch       = 2048
0.00.696.684 I llama_new_context_with_model: n_ubatch      = 512
0.00.696.684 I llama_new_context_with_model: flash_attn    = 0
0.00.696.687 I llama_new_context_with_model: freq_base     = 10000.0
0.00.696.687 I llama_new_context_with_model: freq_scale    = 1
0.00.696.688 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.713.366 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.713.409 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.713.537 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.065 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.716.069 I llama_new_context_with_model: graph nodes  = 601
0.00.716.070 I llama_new_context_with_model: graph splits = 1
0.00.716.098 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.284.128 I main: llama threadpool init, n_threads = 4
0.01.284.139 I 
0.01.284.254 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.284.258 I 
0.01.284.489 I sampler seed: 1475950175
0.01.284.501 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.284.509 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.284.513 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.284.514 I 
 seconally, but his pronouncements were drowned out by the boisterous crowd.

**Meaning:**

The passage describes a situation where a person's words

0.12.084.623 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   671.97 tokens per second)
0.12.084.626 I llama_perf_context_print:        load time =    1282.91 ms
0.12.084.628 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.084.630 I llama_perf_context_print:        eval time =   10710.82 ms /    32 runs   (  334.71 ms per token,     2.99 tokens per second)
0.12.084.631 I llama_perf_context_print:       total time =   10800.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4026 (05697f67)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199265.53 ms
main:    total time = 199265.53 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 4026 (05697f67) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.001.100 I main: load the model and apply lora adapter, if any
0.00.023.427 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.519 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.532 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.535 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.539 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.543 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.544 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.545 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.546 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.548 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.553 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.555 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.556 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.557 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.558 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.353 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.743 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.194 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.202 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.203 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.204 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.205 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.207 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.208 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.212 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.213 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.221 I llama_model_loader: - type  f32:   37 tensors
0.00.267.224 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.226 I llama_model_loader: - type q6_K:   19 tensors
0.00.443.313 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.695 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.507 I llm_load_vocab: special tokens cache size = 5
0.00.597.674 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.740 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.741 I llm_load_print_meta: arch             = gemma
0.00.597.742 I llm_load_print_meta: vocab type       = SPM
0.00.597.743 I llm_load_print_meta: n_vocab          = 256000
0.00.597.745 I llm_load_print_meta: n_merges         = 0
0.00.597.746 I llm_load_print_meta: vocab_only       = 0
0.00.597.746 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.747 I llm_load_print_meta: n_embd           = 2048
0.00.597.747 I llm_load_print_meta: n_layer          = 18
0.00.597.813 I llm_load_print_meta: n_head           = 8
0.00.597.820 I llm_load_print_meta: n_head_kv        = 1
0.00.597.821 I llm_load_print_meta: n_rot            = 256
0.00.597.821 I llm_load_print_meta: n_swa            = 0
0.00.597.822 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.822 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.826 I llm_load_print_meta: n_gqa            = 8
0.00.597.831 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.836 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.837 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.838 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.839 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.839 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.840 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.844 I llm_load_print_meta: n_ff             = 16384
0.00.597.845 I llm_load_print_meta: n_expert         = 0
0.00.597.846 I llm_load_print_meta: n_expert_used    = 0
0.00.597.846 I llm_load_print_meta: causal attn      = 1
0.00.597.847 I llm_load_print_meta: pooling type     = 0
0.00.597.847 I llm_load_print_meta: rope type        = 2
0.00.597.851 I llm_load_print_meta: rope scaling     = linear
0.00.597.852 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.854 I llm_load_print_meta: freq_scale_train = 1
0.00.597.855 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.855 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.855 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.859 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.859 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.860 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.860 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.860 I llm_load_print_meta: model type       = 2B
0.00.597.861 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.597.862 I llm_load_print_meta: model params     = 2.51 B
0.00.597.871 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.597.872 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.872 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.875 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.875 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.876 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.876 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.877 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.882 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.883 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.884 I llm_load_print_meta: max token length = 93
0.00.658.267 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.664.040 I llama_new_context_with_model: n_seq_max     = 1
0.00.664.047 I llama_new_context_with_model: n_ctx         = 4096
0.00.664.048 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.664.048 I llama_new_context_with_model: n_batch       = 2048
0.00.664.048 I llama_new_context_with_model: n_ubatch      = 512
0.00.664.049 I llama_new_context_with_model: flash_attn    = 0
0.00.664.051 I llama_new_context_with_model: freq_base     = 10000.0
0.00.664.052 I llama_new_context_with_model: freq_scale    = 1
0.00.664.053 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.681.208 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.681.250 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.681.387 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.683.977 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.683.981 I llama_new_context_with_model: graph nodes  = 601
0.00.683.982 I llama_new_context_with_model: graph splits = 1
0.00.684.004 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.255.087 I main: llama threadpool init, n_threads = 4
0.01.255.099 I 
0.01.255.205 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.255.209 I 
0.01.255.442 I sampler seed: 3402949915
0.01.255.454 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.255.463 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.255.464 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.255.464 I 
 seconded.

**Assistant**

I am unable to access external websites or specific files. Therefore, I am unable to assist with this request. [end of text]


0.11.778.913 I llama_perf_sampler_print:    sampling time =      47.49 ms /    32 runs   (    1.48 ms per token,   673.77 tokens per second)
0.11.778.917 I llama_perf_context_print:        load time =    1253.89 ms
0.11.778.928 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.778.931 I llama_perf_context_print:        eval time =   10436.32 ms /    31 runs   (  336.66 ms per token,     2.97 tokens per second)
0.11.778.932 I llama_perf_context_print:       total time =   10523.84 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.285s
user	50m10.481s
sys	0m6.324s
