+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.661 I build: 3883 (058430f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.002.820 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.416 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.625 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.719 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.731 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.733 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.738 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.742 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.743 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.744 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.745 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.746 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.753 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.754 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.755 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.757 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.758 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.863 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.274.809 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.293.709 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.293.722 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.293.723 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.293.724 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.293.725 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.293.726 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.293.727 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.293.731 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.293.732 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.293.733 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.293.734 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.293.735 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.293.746 I llama_model_loader: - type  f32:   37 tensors
0.00.293.750 I llama_model_loader: - type q8_0:  127 tensors
0.00.476.535 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.485 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.597 I llm_load_vocab: special tokens cache size = 5
0.00.617.163 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.226 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.227 I llm_load_print_meta: arch             = gemma
0.00.617.228 I llm_load_print_meta: vocab type       = SPM
0.00.617.228 I llm_load_print_meta: n_vocab          = 256000
0.00.617.231 I llm_load_print_meta: n_merges         = 0
0.00.617.231 I llm_load_print_meta: vocab_only       = 0
0.00.617.232 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.232 I llm_load_print_meta: n_embd           = 2048
0.00.617.232 I llm_load_print_meta: n_layer          = 18
0.00.617.296 I llm_load_print_meta: n_head           = 8
0.00.617.303 I llm_load_print_meta: n_head_kv        = 1
0.00.617.330 I llm_load_print_meta: n_rot            = 256
0.00.617.331 I llm_load_print_meta: n_swa            = 0
0.00.617.332 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.332 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.339 I llm_load_print_meta: n_gqa            = 8
0.00.617.343 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.349 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.350 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.352 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.353 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.354 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.362 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.367 I llm_load_print_meta: n_ff             = 16384
0.00.617.368 I llm_load_print_meta: n_expert         = 0
0.00.617.368 I llm_load_print_meta: n_expert_used    = 0
0.00.617.376 I llm_load_print_meta: causal attn      = 1
0.00.617.377 I llm_load_print_meta: pooling type     = 0
0.00.617.377 I llm_load_print_meta: rope type        = 2
0.00.617.378 I llm_load_print_meta: rope scaling     = linear
0.00.617.379 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.380 I llm_load_print_meta: freq_scale_train = 1
0.00.617.380 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.386 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.386 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.387 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.387 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.387 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.387 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.388 I llm_load_print_meta: model type       = 2B
0.00.617.398 I llm_load_print_meta: model ftype      = Q8_0
0.00.617.399 I llm_load_print_meta: model params     = 2.51 B
0.00.617.400 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.617.401 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.409 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.410 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.411 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.411 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.412 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.413 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.424 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.426 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.427 I llm_load_print_meta: max token length = 93
0.00.617.596 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.717.970 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.717.983 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.717.984 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.717.984 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.717.985 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.717.986 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.723.827 I llama_new_context_with_model: n_ctx      = 8192
0.00.723.836 I llama_new_context_with_model: n_batch    = 2048
0.00.723.836 I llama_new_context_with_model: n_ubatch   = 512
0.00.723.837 I llama_new_context_with_model: flash_attn = 0
0.00.723.840 I llama_new_context_with_model: freq_base  = 10000.0
0.00.723.841 I llama_new_context_with_model: freq_scale = 1
0.00.754.872 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.754.921 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.755.033 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.756.438 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.756.445 I llama_new_context_with_model: graph nodes  = 601
0.00.756.445 I llama_new_context_with_model: graph splits = 1
0.00.756.460 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.370.305 I main: llama threadpool init, n_threads = 4
0.01.370.317 I 
0.01.370.428 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.370.431 I 
0.01.370.594 I sampler seed: 1952697086
0.01.370.604 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.370.610 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.370.611 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.370.611 I 
 increasities of the past and the potential for a similar outcome in the future. [end of text]


0.08.586.360 I llama_perf_sampler_print:    sampling time =      26.28 ms /    18 runs   (    1.46 ms per token,   684.93 tokens per second)
0.08.586.363 I llama_perf_context_print:        load time =    1367.30 ms
0.08.586.364 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.586.366 I llama_perf_context_print:        eval time =    7170.51 ms /    17 runs   (  421.79 ms per token,     2.37 tokens per second)
0.08.586.367 I llama_perf_context_print:       total time =    7216.07 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.647 I build: 3883 (058430f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.789 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.382 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.486 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.503 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.507 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.512 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.514 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.515 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.516 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.517 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.517 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.525 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.526 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.527 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.529 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.530 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.275 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.274.070 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.292.810 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.292.819 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.292.820 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.292.821 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.292.822 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.292.823 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.292.825 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.292.829 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.292.830 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.292.831 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.292.832 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.292.833 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.292.842 I llama_model_loader: - type  f32:   37 tensors
0.00.292.846 I llama_model_loader: - type q8_0:  127 tensors
0.00.483.791 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.742 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.828 I llm_load_vocab: special tokens cache size = 5
0.00.626.939 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.627.001 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.627.003 I llm_load_print_meta: arch             = gemma
0.00.627.003 I llm_load_print_meta: vocab type       = SPM
0.00.627.005 I llm_load_print_meta: n_vocab          = 256000
0.00.627.007 I llm_load_print_meta: n_merges         = 0
0.00.627.007 I llm_load_print_meta: vocab_only       = 0
0.00.627.008 I llm_load_print_meta: n_ctx_train      = 8192
0.00.627.008 I llm_load_print_meta: n_embd           = 2048
0.00.627.008 I llm_load_print_meta: n_layer          = 18
0.00.627.075 I llm_load_print_meta: n_head           = 8
0.00.627.082 I llm_load_print_meta: n_head_kv        = 1
0.00.627.082 I llm_load_print_meta: n_rot            = 256
0.00.627.083 I llm_load_print_meta: n_swa            = 0
0.00.627.083 I llm_load_print_meta: n_embd_head_k    = 256
0.00.627.083 I llm_load_print_meta: n_embd_head_v    = 256
0.00.627.088 I llm_load_print_meta: n_gqa            = 8
0.00.627.114 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.627.120 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.627.121 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.627.123 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.627.123 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.627.124 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.627.124 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.627.140 I llm_load_print_meta: n_ff             = 16384
0.00.627.145 I llm_load_print_meta: n_expert         = 0
0.00.627.146 I llm_load_print_meta: n_expert_used    = 0
0.00.627.151 I llm_load_print_meta: causal attn      = 1
0.00.627.151 I llm_load_print_meta: pooling type     = 0
0.00.627.152 I llm_load_print_meta: rope type        = 2
0.00.627.153 I llm_load_print_meta: rope scaling     = linear
0.00.627.154 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.627.156 I llm_load_print_meta: freq_scale_train = 1
0.00.627.156 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.627.156 I llm_load_print_meta: rope_finetuned   = unknown
0.00.627.157 I llm_load_print_meta: ssm_d_conv       = 0
0.00.627.157 I llm_load_print_meta: ssm_d_inner      = 0
0.00.627.157 I llm_load_print_meta: ssm_d_state      = 0
0.00.627.158 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.627.159 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.627.160 I llm_load_print_meta: model type       = 2B
0.00.627.169 I llm_load_print_meta: model ftype      = Q8_0
0.00.627.169 I llm_load_print_meta: model params     = 2.51 B
0.00.627.170 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.627.171 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.627.172 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.627.172 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.627.173 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.627.173 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.627.174 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.627.175 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.627.183 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.627.185 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.627.186 I llm_load_print_meta: max token length = 93
0.00.627.355 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.720.537 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.726.252 I llama_new_context_with_model: n_ctx      = 8192
0.00.726.259 I llama_new_context_with_model: n_batch    = 2048
0.00.726.259 I llama_new_context_with_model: n_ubatch   = 512
0.00.726.260 I llama_new_context_with_model: flash_attn = 0
0.00.726.263 I llama_new_context_with_model: freq_base  = 10000.0
0.00.726.263 I llama_new_context_with_model: freq_scale = 1
0.00.757.023 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.757.070 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.757.187 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.758.595 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.758.601 I llama_new_context_with_model: graph nodes  = 601
0.00.758.601 I llama_new_context_with_model: graph splits = 1
0.00.758.617 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.369.206 I main: llama threadpool init, n_threads = 4
0.01.369.218 I 
0.01.369.324 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.369.329 I 
0.01.369.491 I sampler seed: 2517878149
0.01.369.502 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.369.507 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.369.508 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.369.508 I 
 seconary element.

The primary element is a noun or pronoun. The seconary element is a verb or adverb.

In a sentence, the primary element

0.14.855.912 I llama_perf_sampler_print:    sampling time =      48.89 ms /    33 runs   (    1.48 ms per token,   674.96 tokens per second)
0.14.855.916 I llama_perf_context_print:        load time =    1366.23 ms
0.14.855.917 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.855.923 I llama_perf_context_print:        eval time =   13404.56 ms /    32 runs   (  418.89 ms per token,     2.39 tokens per second)
0.14.855.925 I llama_perf_context_print:       total time =   13486.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.676 I build: 3883 (058430f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.002.825 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.314 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.531 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.627 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.639 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.642 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.648 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.652 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.653 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.654 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.655 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.656 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.674 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.676 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.677 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.678 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.679 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.580 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.858 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.860 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.871 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.872 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.873 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.874 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.876 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.877 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.881 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.882 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.883 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.884 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.273.885 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.894 I llama_model_loader: - type  f32:   37 tensors
0.00.273.898 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.253 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.494.880 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.495.985 I llm_load_vocab: special tokens cache size = 5
0.00.609.749 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.824 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.829 I llm_load_print_meta: arch             = gemma
0.00.609.829 I llm_load_print_meta: vocab type       = SPM
0.00.609.830 I llm_load_print_meta: n_vocab          = 256000
0.00.609.833 I llm_load_print_meta: n_merges         = 0
0.00.609.833 I llm_load_print_meta: vocab_only       = 0
0.00.609.834 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.835 I llm_load_print_meta: n_embd           = 2048
0.00.609.836 I llm_load_print_meta: n_layer          = 18
0.00.609.911 I llm_load_print_meta: n_head           = 8
0.00.609.923 I llm_load_print_meta: n_head_kv        = 1
0.00.609.927 I llm_load_print_meta: n_rot            = 256
0.00.609.927 I llm_load_print_meta: n_swa            = 0
0.00.609.928 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.928 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.935 I llm_load_print_meta: n_gqa            = 8
0.00.609.942 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.950 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.952 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.954 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.955 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.956 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.957 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.964 I llm_load_print_meta: n_ff             = 16384
0.00.609.966 I llm_load_print_meta: n_expert         = 0
0.00.609.966 I llm_load_print_meta: n_expert_used    = 0
0.00.609.967 I llm_load_print_meta: causal attn      = 1
0.00.609.967 I llm_load_print_meta: pooling type     = 0
0.00.609.968 I llm_load_print_meta: rope type        = 2
0.00.609.969 I llm_load_print_meta: rope scaling     = linear
0.00.609.971 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.972 I llm_load_print_meta: freq_scale_train = 1
0.00.609.973 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.974 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.975 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.994 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.003 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.005 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.005 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.006 I llm_load_print_meta: model type       = 2B
0.00.610.016 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.018 I llm_load_print_meta: model params     = 2.51 B
0.00.610.019 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.020 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.030 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.034 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.034 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.035 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.036 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.037 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.045 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.047 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.050 I llm_load_print_meta: max token length = 93
0.00.610.247 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.691.482 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.691.493 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.691.494 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.691.494 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.691.495 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.691.496 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.697.165 I llama_new_context_with_model: n_ctx      = 8192
0.00.697.171 I llama_new_context_with_model: n_batch    = 2048
0.00.697.172 I llama_new_context_with_model: n_ubatch   = 512
0.00.697.172 I llama_new_context_with_model: flash_attn = 0
0.00.697.176 I llama_new_context_with_model: freq_base  = 10000.0
0.00.697.177 I llama_new_context_with_model: freq_scale = 1
0.00.728.161 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.728.217 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.728.356 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.730.121 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.730.129 I llama_new_context_with_model: graph nodes  = 601
0.00.730.130 I llama_new_context_with_model: graph splits = 1
0.00.730.149 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.368.100 I main: llama threadpool init, n_threads = 4
0.01.368.113 I 
0.01.368.231 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.368.235 I 
0.01.368.428 I sampler seed: 2612386771
0.01.368.452 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.368.466 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.368.467 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.368.467 I 
 increasels in the air, and the ground beneath the trees is covered with a swirling mass of decaying organic matter.

What is the most likely environment?



0.14.956.817 I llama_perf_sampler_print:    sampling time =      49.39 ms /    33 runs   (    1.50 ms per token,   668.21 tokens per second)
0.14.956.820 I llama_perf_context_print:        load time =    1365.05 ms
0.14.956.822 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.956.837 I llama_perf_context_print:        eval time =   13506.37 ms /    32 runs   (  422.07 ms per token,     2.37 tokens per second)
0.14.956.839 I llama_perf_context_print:       total time =   13588.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.711 I build: 3883 (058430f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.958 I main: llama backend init
0.00.002.951 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.584 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.819 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.920 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.933 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.935 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.940 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.945 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.947 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.949 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.951 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.953 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.965 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.970 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.972 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.973 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.975 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.494 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.274.481 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.293.362 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.293.374 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.293.375 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.293.376 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.293.377 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.293.379 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.293.380 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.293.383 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.293.384 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.293.386 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.293.386 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.293.388 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.293.397 I llama_model_loader: - type  f32:   37 tensors
0.00.293.401 I llama_model_loader: - type q8_0:  127 tensors
0.00.478.078 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.395 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.477 I llm_load_vocab: special tokens cache size = 5
0.00.623.585 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.650 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.652 I llm_load_print_meta: arch             = gemma
0.00.623.652 I llm_load_print_meta: vocab type       = SPM
0.00.623.654 I llm_load_print_meta: n_vocab          = 256000
0.00.623.656 I llm_load_print_meta: n_merges         = 0
0.00.623.656 I llm_load_print_meta: vocab_only       = 0
0.00.623.657 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.657 I llm_load_print_meta: n_embd           = 2048
0.00.623.657 I llm_load_print_meta: n_layer          = 18
0.00.623.721 I llm_load_print_meta: n_head           = 8
0.00.623.727 I llm_load_print_meta: n_head_kv        = 1
0.00.623.728 I llm_load_print_meta: n_rot            = 256
0.00.623.728 I llm_load_print_meta: n_swa            = 0
0.00.623.729 I llm_load_print_meta: n_embd_head_k    = 256
0.00.623.729 I llm_load_print_meta: n_embd_head_v    = 256
0.00.623.733 I llm_load_print_meta: n_gqa            = 8
0.00.623.737 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.623.742 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.623.743 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.623.745 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.623.745 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.623.746 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.623.746 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.623.752 I llm_load_print_meta: n_ff             = 16384
0.00.623.752 I llm_load_print_meta: n_expert         = 0
0.00.623.752 I llm_load_print_meta: n_expert_used    = 0
0.00.623.753 I llm_load_print_meta: causal attn      = 1
0.00.623.753 I llm_load_print_meta: pooling type     = 0
0.00.623.753 I llm_load_print_meta: rope type        = 2
0.00.623.754 I llm_load_print_meta: rope scaling     = linear
0.00.623.755 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.623.756 I llm_load_print_meta: freq_scale_train = 1
0.00.623.756 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.623.756 I llm_load_print_meta: rope_finetuned   = unknown
0.00.623.757 I llm_load_print_meta: ssm_d_conv       = 0
0.00.623.757 I llm_load_print_meta: ssm_d_inner      = 0
0.00.623.757 I llm_load_print_meta: ssm_d_state      = 0
0.00.623.758 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.623.758 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.623.760 I llm_load_print_meta: model type       = 2B
0.00.623.790 I llm_load_print_meta: model ftype      = Q8_0
0.00.623.791 I llm_load_print_meta: model params     = 2.51 B
0.00.623.792 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.623.792 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.623.793 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.623.794 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.623.794 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.623.794 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.623.795 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.623.795 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.623.802 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.623.804 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.623.819 I llm_load_print_meta: max token length = 93
0.00.624.010 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.695.053 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.695.062 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.700.946 I llama_new_context_with_model: n_ctx      = 8192
0.00.700.956 I llama_new_context_with_model: n_batch    = 2048
0.00.700.956 I llama_new_context_with_model: n_ubatch   = 512
0.00.700.957 I llama_new_context_with_model: flash_attn = 0
0.00.700.961 I llama_new_context_with_model: freq_base  = 10000.0
0.00.700.962 I llama_new_context_with_model: freq_scale = 1
0.00.732.896 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.732.940 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.733.052 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.734.510 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.734.518 I llama_new_context_with_model: graph nodes  = 601
0.00.734.519 I llama_new_context_with_model: graph splits = 1
0.00.734.535 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.348.939 I main: llama threadpool init, n_threads = 4
0.01.348.953 I 
0.01.349.083 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.349.089 I 
0.01.349.259 I sampler seed: 3358939025
0.01.349.271 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.349.278 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.349.279 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.349.280 I 
 increably, but now she finds herself in a difficult situation.

**Identify the theme of the passage.**

**A.** The importance of adaptability in the

0.14.951.688 I llama_perf_sampler_print:    sampling time =      49.56 ms /    33 runs   (    1.50 ms per token,   665.82 tokens per second)
0.14.951.692 I llama_perf_context_print:        load time =    1345.76 ms
0.14.951.694 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.951.696 I llama_perf_context_print:        eval time =   13520.15 ms /    32 runs   (  422.50 ms per token,     2.37 tokens per second)
0.14.951.697 I llama_perf_context_print:       total time =   13602.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.162s
user	3m24.424s
sys	0m9.751s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3883 (058430f2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200052.36 ms
main:    total time = 200052.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.689 I build: 3883 (058430f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.898 I main: llama backend init
0.00.002.880 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.059 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.273 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.368 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.381 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.383 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.400 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.405 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.407 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.416 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.422 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.423 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.431 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.432 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.434 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.435 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.436 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.697 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.270.974 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.289.828 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.289.838 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.289.839 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.289.840 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.289.841 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.289.842 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.289.843 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.289.847 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.289.848 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.289.850 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.289.851 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.289.852 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.289.861 I llama_model_loader: - type  f32:   37 tensors
0.00.289.864 I llama_model_loader: - type q4_K:  108 tensors
0.00.289.865 I llama_model_loader: - type q6_K:   19 tensors
0.00.472.782 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.762 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.823 I llm_load_vocab: special tokens cache size = 5
0.00.613.087 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.152 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.153 I llm_load_print_meta: arch             = gemma
0.00.613.154 I llm_load_print_meta: vocab type       = SPM
0.00.613.154 I llm_load_print_meta: n_vocab          = 256000
0.00.613.157 I llm_load_print_meta: n_merges         = 0
0.00.613.157 I llm_load_print_meta: vocab_only       = 0
0.00.613.158 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.158 I llm_load_print_meta: n_embd           = 2048
0.00.613.158 I llm_load_print_meta: n_layer          = 18
0.00.613.223 I llm_load_print_meta: n_head           = 8
0.00.613.230 I llm_load_print_meta: n_head_kv        = 1
0.00.613.230 I llm_load_print_meta: n_rot            = 256
0.00.613.231 I llm_load_print_meta: n_swa            = 0
0.00.613.231 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.231 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.236 I llm_load_print_meta: n_gqa            = 8
0.00.613.241 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.245 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.246 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.248 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.248 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.249 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.249 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.254 I llm_load_print_meta: n_ff             = 16384
0.00.613.254 I llm_load_print_meta: n_expert         = 0
0.00.613.254 I llm_load_print_meta: n_expert_used    = 0
0.00.613.255 I llm_load_print_meta: causal attn      = 1
0.00.613.255 I llm_load_print_meta: pooling type     = 0
0.00.613.255 I llm_load_print_meta: rope type        = 2
0.00.613.256 I llm_load_print_meta: rope scaling     = linear
0.00.613.257 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.257 I llm_load_print_meta: freq_scale_train = 1
0.00.613.258 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.258 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.258 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.259 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.259 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.259 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.260 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.260 I llm_load_print_meta: model type       = 2B
0.00.613.272 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.613.273 I llm_load_print_meta: model params     = 2.51 B
0.00.613.273 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.613.274 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.274 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.275 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.275 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.276 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.276 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.277 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.282 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.284 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.284 I llm_load_print_meta: max token length = 93
0.00.613.482 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.674.074 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.674.084 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.674.085 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.674.085 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.674.086 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.674.087 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.679.715 I llama_new_context_with_model: n_ctx      = 8192
0.00.679.722 I llama_new_context_with_model: n_batch    = 2048
0.00.679.723 I llama_new_context_with_model: n_ubatch   = 512
0.00.679.723 I llama_new_context_with_model: flash_attn = 0
0.00.679.726 I llama_new_context_with_model: freq_base  = 10000.0
0.00.679.727 I llama_new_context_with_model: freq_scale = 1
0.00.710.339 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.710.383 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.710.496 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.711.896 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.711.902 I llama_new_context_with_model: graph nodes  = 601
0.00.711.903 I llama_new_context_with_model: graph splits = 1
0.00.711.919 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.294.746 I main: llama threadpool init, n_threads = 4
0.01.294.760 I 
0.01.294.874 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.294.878 I 
0.01.295.050 I sampler seed: 3652830396
0.01.295.063 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.295.071 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.295.072 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.295.072 I 
 squaRE. 

**Instructions:**

1. Identify the main idea of the text.
2. Summarize the main points of the text.


0.12.339.090 I llama_perf_sampler_print:    sampling time =      49.35 ms /    33 runs   (    1.50 ms per token,   668.69 tokens per second)
0.12.339.094 I llama_perf_context_print:        load time =    1291.65 ms
0.12.339.096 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.339.111 I llama_perf_context_print:        eval time =   10957.32 ms /    32 runs   (  342.42 ms per token,     2.92 tokens per second)
0.12.339.115 I llama_perf_context_print:       total time =   11044.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3883 (058430f2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200003.83 ms
main:    total time = 200003.83 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.639 I build: 3883 (058430f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.002.833 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.990 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.097 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.112 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.114 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.119 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.122 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.123 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.124 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.125 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.126 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.134 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.135 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.136 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.137 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.138 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.336 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.273.787 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.292.636 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.292.646 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.292.647 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.292.648 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.292.649 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.292.650 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.292.660 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.292.665 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.292.672 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.292.681 I llama_model_loader: - type  f32:   37 tensors
0.00.292.686 I llama_model_loader: - type q4_K:  108 tensors
0.00.292.692 I llama_model_loader: - type q6_K:   19 tensors
0.00.483.411 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.226 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.272 I llm_load_vocab: special tokens cache size = 5
0.00.624.375 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.454 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.455 I llm_load_print_meta: arch             = gemma
0.00.624.456 I llm_load_print_meta: vocab type       = SPM
0.00.624.457 I llm_load_print_meta: n_vocab          = 256000
0.00.624.459 I llm_load_print_meta: n_merges         = 0
0.00.624.460 I llm_load_print_meta: vocab_only       = 0
0.00.624.460 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.461 I llm_load_print_meta: n_embd           = 2048
0.00.624.461 I llm_load_print_meta: n_layer          = 18
0.00.624.530 I llm_load_print_meta: n_head           = 8
0.00.624.537 I llm_load_print_meta: n_head_kv        = 1
0.00.624.537 I llm_load_print_meta: n_rot            = 256
0.00.624.538 I llm_load_print_meta: n_swa            = 0
0.00.624.538 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.538 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.543 I llm_load_print_meta: n_gqa            = 8
0.00.624.548 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.553 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.554 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.555 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.556 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.556 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.557 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.562 I llm_load_print_meta: n_ff             = 16384
0.00.624.562 I llm_load_print_meta: n_expert         = 0
0.00.624.563 I llm_load_print_meta: n_expert_used    = 0
0.00.624.563 I llm_load_print_meta: causal attn      = 1
0.00.624.563 I llm_load_print_meta: pooling type     = 0
0.00.624.564 I llm_load_print_meta: rope type        = 2
0.00.624.564 I llm_load_print_meta: rope scaling     = linear
0.00.624.565 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.566 I llm_load_print_meta: freq_scale_train = 1
0.00.624.566 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.566 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.567 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.567 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.567 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.568 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.568 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.569 I llm_load_print_meta: model type       = 2B
0.00.624.582 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.624.583 I llm_load_print_meta: model params     = 2.51 B
0.00.624.584 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.624.584 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.585 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.586 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.586 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.586 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.588 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.588 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.594 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.596 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.596 I llm_load_print_meta: max token length = 93
0.00.624.770 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.681.980 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.687.618 I llama_new_context_with_model: n_ctx      = 8192
0.00.687.626 I llama_new_context_with_model: n_batch    = 2048
0.00.687.627 I llama_new_context_with_model: n_ubatch   = 512
0.00.687.627 I llama_new_context_with_model: flash_attn = 0
0.00.687.632 I llama_new_context_with_model: freq_base  = 10000.0
0.00.687.633 I llama_new_context_with_model: freq_scale = 1
0.00.719.265 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.719.313 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.719.440 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.720.849 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.857 I llama_new_context_with_model: graph nodes  = 601
0.00.720.857 I llama_new_context_with_model: graph splits = 1
0.00.720.874 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.297.962 I main: llama threadpool init, n_threads = 4
0.01.297.976 I 
0.01.298.084 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.298.088 I 
0.01.298.248 I sampler seed: 766999673
0.01.298.259 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.298.266 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.298.267 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.298.267 I 
 seconally. The meaning is the same as the sentence above.

I am sorry, but I am unable to provide assistance with tasks that may result in harmful

0.12.274.090 I llama_perf_sampler_print:    sampling time =      49.32 ms /    33 runs   (    1.49 ms per token,   669.13 tokens per second)
0.12.274.094 I llama_perf_context_print:        load time =    1294.94 ms
0.12.274.096 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.274.098 I llama_perf_context_print:        eval time =   10891.86 ms /    32 runs   (  340.37 ms per token,     2.94 tokens per second)
0.12.274.100 I llama_perf_context_print:       total time =   10976.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.642s
user	50m22.765s
sys	0m6.606s
