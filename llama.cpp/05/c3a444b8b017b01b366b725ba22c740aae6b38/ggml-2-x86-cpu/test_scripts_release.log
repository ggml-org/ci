+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.170 I build: 4342 (05c3a444) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.362 I main: llama backend init
0.00.000.368 I main: load the model and apply lora adapter, if any
0.00.021.030 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.040 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.051 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.059 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.063 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.067 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.067 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.068 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.068 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.069 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.069 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.073 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.074 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.075 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.075 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.076 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.353 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.797 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.749 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.755 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.756 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.756 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.757 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.758 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.759 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.762 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.763 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.764 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.764 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.765 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.770 I llama_model_loader: - type  f32:   37 tensors
0.00.130.771 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.752 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.138 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.701 I llm_load_vocab: special tokens cache size = 5
0.00.267.904 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.921 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.922 I llm_load_print_meta: arch             = gemma
0.00.267.923 I llm_load_print_meta: vocab type       = SPM
0.00.267.924 I llm_load_print_meta: n_vocab          = 256000
0.00.267.924 I llm_load_print_meta: n_merges         = 0
0.00.267.925 I llm_load_print_meta: vocab_only       = 0
0.00.267.925 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.925 I llm_load_print_meta: n_embd           = 2048
0.00.267.926 I llm_load_print_meta: n_layer          = 18
0.00.267.938 I llm_load_print_meta: n_head           = 8
0.00.267.939 I llm_load_print_meta: n_head_kv        = 1
0.00.267.939 I llm_load_print_meta: n_rot            = 256
0.00.267.939 I llm_load_print_meta: n_swa            = 0
0.00.267.939 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.940 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.940 I llm_load_print_meta: n_gqa            = 8
0.00.267.941 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.942 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.943 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.944 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.945 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.945 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.946 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.947 I llm_load_print_meta: n_ff             = 16384
0.00.267.947 I llm_load_print_meta: n_expert         = 0
0.00.267.947 I llm_load_print_meta: n_expert_used    = 0
0.00.267.948 I llm_load_print_meta: causal attn      = 1
0.00.267.948 I llm_load_print_meta: pooling type     = 0
0.00.267.948 I llm_load_print_meta: rope type        = 2
0.00.267.949 I llm_load_print_meta: rope scaling     = linear
0.00.267.950 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.950 I llm_load_print_meta: freq_scale_train = 1
0.00.267.951 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.951 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.952 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.952 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.953 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.953 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.953 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.954 I llm_load_print_meta: model type       = 2B
0.00.267.954 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.955 I llm_load_print_meta: model params     = 2.51 B
0.00.267.956 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.956 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.956 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.957 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.957 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.957 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.958 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.958 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.959 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.960 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.960 I llm_load_print_meta: max token length = 93
0.00.369.911 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.369.920 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.369.921 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.369.921 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.369.922 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.369.923 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.375.204 I llama_new_context_with_model: n_seq_max     = 1
0.00.375.210 I llama_new_context_with_model: n_ctx         = 4096
0.00.375.211 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.375.211 I llama_new_context_with_model: n_batch       = 2048
0.00.375.212 I llama_new_context_with_model: n_ubatch      = 512
0.00.375.212 I llama_new_context_with_model: flash_attn    = 0
0.00.375.215 I llama_new_context_with_model: freq_base     = 10000.0
0.00.375.216 I llama_new_context_with_model: freq_scale    = 1
0.00.375.217 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.390.417 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.433 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.532 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.785 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.792 I llama_new_context_with_model: graph nodes  = 601
0.00.391.792 I llama_new_context_with_model: graph splits = 1
0.00.391.795 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.391.795 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.993 I main: llama threadpool init, n_threads = 4
0.00.478.008 I 
0.00.478.077 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.478.081 I 
0.00.478.141 I sampler seed: 3338557061
0.00.478.152 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.164 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.478.168 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.168 I 
 increasities, the act of giving a gift to another person with the expectation that they will return the favor. [end of text]


0.02.134.489 I llama_perf_sampler_print:    sampling time =       3.69 ms /    24 runs   (    0.15 ms per token,  6511.12 tokens per second)
0.02.134.491 I llama_perf_context_print:        load time =     477.61 ms
0.02.134.492 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.134.494 I llama_perf_context_print:        eval time =    1642.04 ms /    23 runs   (   71.39 ms per token,    14.01 tokens per second)
0.02.134.507 I llama_perf_context_print:       total time =    1656.50 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.555 I build: 4342 (05c3a444) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.020.948 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.966 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.977 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.978 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.982 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.983 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.984 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.984 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.985 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.985 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.991 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.992 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.993 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.993 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.994 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.831 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.916 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.834 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.840 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.841 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.842 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.842 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.843 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.844 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.846 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.847 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.848 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.848 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.849 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.854 I llama_model_loader: - type  f32:   37 tensors
0.00.131.854 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.824 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.015 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.700 I llm_load_vocab: special tokens cache size = 5
0.00.282.998 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.017 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.018 I llm_load_print_meta: arch             = gemma
0.00.283.018 I llm_load_print_meta: vocab type       = SPM
0.00.283.019 I llm_load_print_meta: n_vocab          = 256000
0.00.283.019 I llm_load_print_meta: n_merges         = 0
0.00.283.020 I llm_load_print_meta: vocab_only       = 0
0.00.283.020 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.020 I llm_load_print_meta: n_embd           = 2048
0.00.283.021 I llm_load_print_meta: n_layer          = 18
0.00.283.032 I llm_load_print_meta: n_head           = 8
0.00.283.033 I llm_load_print_meta: n_head_kv        = 1
0.00.283.033 I llm_load_print_meta: n_rot            = 256
0.00.283.034 I llm_load_print_meta: n_swa            = 0
0.00.283.034 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.034 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.035 I llm_load_print_meta: n_gqa            = 8
0.00.283.036 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.037 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.038 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.039 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.040 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.040 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.041 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.042 I llm_load_print_meta: n_ff             = 16384
0.00.283.042 I llm_load_print_meta: n_expert         = 0
0.00.283.042 I llm_load_print_meta: n_expert_used    = 0
0.00.283.043 I llm_load_print_meta: causal attn      = 1
0.00.283.043 I llm_load_print_meta: pooling type     = 0
0.00.283.043 I llm_load_print_meta: rope type        = 2
0.00.283.043 I llm_load_print_meta: rope scaling     = linear
0.00.283.045 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.045 I llm_load_print_meta: freq_scale_train = 1
0.00.283.045 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.046 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.046 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.046 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.046 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.047 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.047 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.047 I llm_load_print_meta: model type       = 2B
0.00.283.048 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.049 I llm_load_print_meta: model params     = 2.51 B
0.00.283.049 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.050 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.050 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.051 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.051 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.051 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.052 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.052 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.053 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.054 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.054 I llm_load_print_meta: max token length = 93
0.00.377.637 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.383.128 I llama_new_context_with_model: n_seq_max     = 1
0.00.383.135 I llama_new_context_with_model: n_ctx         = 4096
0.00.383.135 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.383.136 I llama_new_context_with_model: n_batch       = 2048
0.00.383.136 I llama_new_context_with_model: n_ubatch      = 512
0.00.383.137 I llama_new_context_with_model: flash_attn    = 0
0.00.383.140 I llama_new_context_with_model: freq_base     = 10000.0
0.00.383.141 I llama_new_context_with_model: freq_scale    = 1
0.00.383.142 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.399.587 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.399.604 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.399.710 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.985 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.400.992 I llama_new_context_with_model: graph nodes  = 601
0.00.400.992 I llama_new_context_with_model: graph splits = 1
0.00.400.995 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.400.995 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.486.839 I main: llama threadpool init, n_threads = 4
0.00.486.855 I 
0.00.486.930 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.486.933 I 
0.00.486.976 I sampler seed: 4190890613
0.00.486.987 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.990 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.486.992 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.992 I 
 increasities and the limitations of its approach in understanding social phenomena.

**Discussion Points:**

* How does the concept of narcissism intersect with social interactions and

0.02.709.948 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6895.11 tokens per second)
0.02.709.950 I llama_perf_context_print:        load time =     486.07 ms
0.02.709.951 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.709.952 I llama_perf_context_print:        eval time =    2203.99 ms /    32 runs   (   68.87 ms per token,    14.52 tokens per second)
0.02.709.953 I llama_perf_context_print:       total time =    2223.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.175 I build: 4342 (05c3a444) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.375 I main: llama backend init
0.00.000.381 I main: load the model and apply lora adapter, if any
0.00.020.369 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.379 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.391 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.397 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.401 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.409 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.410 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.411 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.411 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.412 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.413 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.418 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.419 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.420 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.421 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.422 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.919 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.404 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.320 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.326 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.327 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.328 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.329 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.330 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.331 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.335 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.336 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.337 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.338 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.340 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.345 I llama_model_loader: - type  f32:   37 tensors
0.00.130.347 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.082 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.238 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.918 I llm_load_vocab: special tokens cache size = 5
0.00.271.101 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.117 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.118 I llm_load_print_meta: arch             = gemma
0.00.271.118 I llm_load_print_meta: vocab type       = SPM
0.00.271.119 I llm_load_print_meta: n_vocab          = 256000
0.00.271.119 I llm_load_print_meta: n_merges         = 0
0.00.271.120 I llm_load_print_meta: vocab_only       = 0
0.00.271.120 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.120 I llm_load_print_meta: n_embd           = 2048
0.00.271.121 I llm_load_print_meta: n_layer          = 18
0.00.271.133 I llm_load_print_meta: n_head           = 8
0.00.271.134 I llm_load_print_meta: n_head_kv        = 1
0.00.271.134 I llm_load_print_meta: n_rot            = 256
0.00.271.134 I llm_load_print_meta: n_swa            = 0
0.00.271.134 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.135 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.135 I llm_load_print_meta: n_gqa            = 8
0.00.271.136 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.137 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.138 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.139 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.140 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.141 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.141 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.142 I llm_load_print_meta: n_ff             = 16384
0.00.271.142 I llm_load_print_meta: n_expert         = 0
0.00.271.143 I llm_load_print_meta: n_expert_used    = 0
0.00.271.143 I llm_load_print_meta: causal attn      = 1
0.00.271.143 I llm_load_print_meta: pooling type     = 0
0.00.271.144 I llm_load_print_meta: rope type        = 2
0.00.271.144 I llm_load_print_meta: rope scaling     = linear
0.00.271.145 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.146 I llm_load_print_meta: freq_scale_train = 1
0.00.271.146 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.147 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.147 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.147 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.147 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.148 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.148 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.149 I llm_load_print_meta: model type       = 2B
0.00.271.150 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.150 I llm_load_print_meta: model params     = 2.51 B
0.00.271.151 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.151 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.152 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.152 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.152 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.153 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.153 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.153 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.154 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.154 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.155 I llm_load_print_meta: max token length = 93
0.00.349.282 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.349.289 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.290 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.349.290 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.349.291 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.291 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.354.422 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.428 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.429 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.429 I llama_new_context_with_model: n_batch       = 2048
0.00.354.430 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.430 I llama_new_context_with_model: flash_attn    = 0
0.00.354.432 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.433 I llama_new_context_with_model: freq_scale    = 1
0.00.354.434 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.817 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.368.832 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.925 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.177 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.185 I llama_new_context_with_model: graph nodes  = 601
0.00.370.185 I llama_new_context_with_model: graph splits = 1
0.00.370.187 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.370.188 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.985 I main: llama threadpool init, n_threads = 4
0.00.456.001 I 
0.00.456.089 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.456.092 I 
0.00.456.139 I sampler seed: 2951832775
0.00.456.149 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.154 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.155 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.156 I 
 increasively, hinting at her true nature.

Her eyes glowed with an unnatural intensity, reflecting a hidden darkness. Her voice, smooth and seductive, held a

0.02.832.612 I llama_perf_sampler_print:    sampling time =       5.11 ms /    33 runs   (    0.15 ms per token,  6456.66 tokens per second)
0.02.832.614 I llama_perf_context_print:        load time =     455.59 ms
0.02.832.616 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.832.618 I llama_perf_context_print:        eval time =    2357.22 ms /    32 runs   (   73.66 ms per token,    13.58 tokens per second)
0.02.832.618 I llama_perf_context_print:       total time =    2376.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.547 I build: 4342 (05c3a444) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.021.718 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.729 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.739 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.748 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.750 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.754 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.755 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.756 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.757 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.757 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.758 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.762 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.763 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.764 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.764 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.765 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.674 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.912 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.876 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.885 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.885 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.886 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.887 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.887 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.888 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.891 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.891 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.892 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.893 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.895 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.899 I llama_model_loader: - type  f32:   37 tensors
0.00.132.899 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.629 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.671 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.368 I llm_load_vocab: special tokens cache size = 5
0.00.288.693 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.288.712 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.288.713 I llm_load_print_meta: arch             = gemma
0.00.288.714 I llm_load_print_meta: vocab type       = SPM
0.00.288.714 I llm_load_print_meta: n_vocab          = 256000
0.00.288.715 I llm_load_print_meta: n_merges         = 0
0.00.288.715 I llm_load_print_meta: vocab_only       = 0
0.00.288.716 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.716 I llm_load_print_meta: n_embd           = 2048
0.00.288.716 I llm_load_print_meta: n_layer          = 18
0.00.288.728 I llm_load_print_meta: n_head           = 8
0.00.288.729 I llm_load_print_meta: n_head_kv        = 1
0.00.288.729 I llm_load_print_meta: n_rot            = 256
0.00.288.730 I llm_load_print_meta: n_swa            = 0
0.00.288.730 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.730 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.731 I llm_load_print_meta: n_gqa            = 8
0.00.288.732 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.733 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.734 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.735 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.735 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.736 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.736 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.737 I llm_load_print_meta: n_ff             = 16384
0.00.288.738 I llm_load_print_meta: n_expert         = 0
0.00.288.738 I llm_load_print_meta: n_expert_used    = 0
0.00.288.738 I llm_load_print_meta: causal attn      = 1
0.00.288.739 I llm_load_print_meta: pooling type     = 0
0.00.288.739 I llm_load_print_meta: rope type        = 2
0.00.288.739 I llm_load_print_meta: rope scaling     = linear
0.00.288.740 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.741 I llm_load_print_meta: freq_scale_train = 1
0.00.288.741 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.741 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.742 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.742 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.742 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.743 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.743 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.743 I llm_load_print_meta: model type       = 2B
0.00.288.744 I llm_load_print_meta: model ftype      = Q8_0
0.00.288.745 I llm_load_print_meta: model params     = 2.51 B
0.00.288.746 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.288.746 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.747 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.747 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.747 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.747 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.748 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.748 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.749 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.749 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.750 I llm_load_print_meta: max token length = 93
0.00.360.177 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.360.184 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.365.506 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.513 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.514 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.514 I llama_new_context_with_model: n_batch       = 2048
0.00.365.515 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.516 I llama_new_context_with_model: flash_attn    = 0
0.00.365.519 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.520 I llama_new_context_with_model: freq_scale    = 1
0.00.365.521 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.631 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.645 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.740 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.976 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.982 I llama_new_context_with_model: graph nodes  = 601
0.00.381.983 I llama_new_context_with_model: graph splits = 1
0.00.381.985 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.381.986 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.391 I main: llama threadpool init, n_threads = 4
0.00.470.408 I 
0.00.470.481 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.470.485 I 
0.00.470.523 I sampler seed: 2051603482
0.00.470.535 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.540 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.540 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.540 I 
 increasities, and other inappropriate behaviors towards minors. [end of text]


0.01.320.705 I llama_perf_sampler_print:    sampling time =       1.70 ms /    12 runs   (    0.14 ms per token,  7067.14 tokens per second)
0.01.320.708 I llama_perf_context_print:        load time =     469.62 ms
0.01.320.710 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.320.712 I llama_perf_context_print:        eval time =     842.97 ms /    11 runs   (   76.63 ms per token,    13.05 tokens per second)
0.01.320.713 I llama_perf_context_print:       total time =     850.32 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.721s
user	0m31.322s
sys	0m9.549s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4342 (05c3a444)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40239.79 ms
main:    total time = 40239.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.514 I build: 4342 (05c3a444) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.715 I main: llama backend init
0.00.000.722 I main: load the model and apply lora adapter, if any
0.00.020.976 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.985 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.996 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.000 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.001 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.005 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.005 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.006 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.007 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.007 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.008 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.011 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.012 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.013 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.013 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.014 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.296 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.646 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.573 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.581 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.582 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.582 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.583 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.584 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.584 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.587 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.588 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.589 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.589 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.591 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.594 I llama_model_loader: - type  f32:   37 tensors
0.00.130.595 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.596 I llama_model_loader: - type q6_K:   19 tensors
0.00.210.005 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.374 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.954 I llm_load_vocab: special tokens cache size = 5
0.00.279.134 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.155 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.155 I llm_load_print_meta: arch             = gemma
0.00.279.156 I llm_load_print_meta: vocab type       = SPM
0.00.279.157 I llm_load_print_meta: n_vocab          = 256000
0.00.279.157 I llm_load_print_meta: n_merges         = 0
0.00.279.157 I llm_load_print_meta: vocab_only       = 0
0.00.279.158 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.158 I llm_load_print_meta: n_embd           = 2048
0.00.279.158 I llm_load_print_meta: n_layer          = 18
0.00.279.170 I llm_load_print_meta: n_head           = 8
0.00.279.171 I llm_load_print_meta: n_head_kv        = 1
0.00.279.172 I llm_load_print_meta: n_rot            = 256
0.00.279.172 I llm_load_print_meta: n_swa            = 0
0.00.279.172 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.172 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.173 I llm_load_print_meta: n_gqa            = 8
0.00.279.174 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.175 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.176 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.177 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.178 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.178 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.179 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.180 I llm_load_print_meta: n_ff             = 16384
0.00.279.180 I llm_load_print_meta: n_expert         = 0
0.00.279.180 I llm_load_print_meta: n_expert_used    = 0
0.00.279.181 I llm_load_print_meta: causal attn      = 1
0.00.279.181 I llm_load_print_meta: pooling type     = 0
0.00.279.181 I llm_load_print_meta: rope type        = 2
0.00.279.181 I llm_load_print_meta: rope scaling     = linear
0.00.279.183 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.184 I llm_load_print_meta: freq_scale_train = 1
0.00.279.184 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.184 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.185 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.186 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.186 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.186 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.187 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.187 I llm_load_print_meta: model type       = 2B
0.00.279.187 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.279.188 I llm_load_print_meta: model params     = 2.51 B
0.00.279.189 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.279.189 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.190 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.190 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.190 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.191 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.191 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.191 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.192 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.192 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.192 I llm_load_print_meta: max token length = 93
0.00.338.309 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.338.318 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.338.318 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.338.319 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.338.320 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.338.321 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.344.467 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.472 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.473 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.473 I llama_new_context_with_model: n_batch       = 2048
0.00.344.474 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.474 I llama_new_context_with_model: flash_attn    = 0
0.00.344.477 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.477 I llama_new_context_with_model: freq_scale    = 1
0.00.344.478 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.895 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.910 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.999 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.264 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.269 I llama_new_context_with_model: graph nodes  = 601
0.00.360.269 I llama_new_context_with_model: graph splits = 1
0.00.360.271 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.360.272 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.438.073 I main: llama threadpool init, n_threads = 4
0.00.438.089 I 
0.00.438.166 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.438.170 I 
0.00.438.211 I sampler seed: 3988469709
0.00.438.222 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.438.226 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.438.227 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.438.227 I 
 squaRE-II, the successor of the SQUIRE-I, is a revolutionary technology in the field of data science. It offers unparalleled processing power, unparalleled

0.02.078.103 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6758.14 tokens per second)
0.02.078.106 I llama_perf_context_print:        load time =     437.33 ms
0.02.078.107 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.078.109 I llama_perf_context_print:        eval time =    1621.14 ms /    32 runs   (   50.66 ms per token,    19.74 tokens per second)
0.02.078.109 I llama_perf_context_print:       total time =    1640.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4342 (05c3a444)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40223.89 ms
main:    total time = 40223.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.556 I build: 4342 (05c3a444) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.760 I main: load the model and apply lora adapter, if any
0.00.021.197 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.215 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.222 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.223 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.227 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.227 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.228 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.228 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.229 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.229 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.233 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.234 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.235 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.235 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.236 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.921 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.356 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.296 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.302 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.303 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.303 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.304 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.305 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.305 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.308 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.308 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.312 I llama_model_loader: - type  f32:   37 tensors
0.00.131.314 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.314 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.013 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.846 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.472 I llm_load_vocab: special tokens cache size = 5
0.00.274.634 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.651 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.654 I llm_load_print_meta: arch             = gemma
0.00.274.654 I llm_load_print_meta: vocab type       = SPM
0.00.274.655 I llm_load_print_meta: n_vocab          = 256000
0.00.274.655 I llm_load_print_meta: n_merges         = 0
0.00.274.656 I llm_load_print_meta: vocab_only       = 0
0.00.274.656 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.657 I llm_load_print_meta: n_embd           = 2048
0.00.274.657 I llm_load_print_meta: n_layer          = 18
0.00.274.669 I llm_load_print_meta: n_head           = 8
0.00.274.670 I llm_load_print_meta: n_head_kv        = 1
0.00.274.671 I llm_load_print_meta: n_rot            = 256
0.00.274.672 I llm_load_print_meta: n_swa            = 0
0.00.274.672 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.672 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.673 I llm_load_print_meta: n_gqa            = 8
0.00.274.674 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.675 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.676 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.678 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.679 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.679 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.679 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.680 I llm_load_print_meta: n_ff             = 16384
0.00.274.681 I llm_load_print_meta: n_expert         = 0
0.00.274.682 I llm_load_print_meta: n_expert_used    = 0
0.00.274.682 I llm_load_print_meta: causal attn      = 1
0.00.274.682 I llm_load_print_meta: pooling type     = 0
0.00.274.683 I llm_load_print_meta: rope type        = 2
0.00.274.683 I llm_load_print_meta: rope scaling     = linear
0.00.274.687 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.688 I llm_load_print_meta: freq_scale_train = 1
0.00.274.688 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.688 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.688 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.688 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.689 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.689 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.689 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.690 I llm_load_print_meta: model type       = 2B
0.00.274.690 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.274.691 I llm_load_print_meta: model params     = 2.51 B
0.00.274.692 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.274.693 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.693 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.693 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.694 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.694 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.695 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.695 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.696 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.696 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.696 I llm_load_print_meta: max token length = 93
0.00.330.493 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.335.765 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.772 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.773 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.773 I llama_new_context_with_model: n_batch       = 2048
0.00.335.773 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.774 I llama_new_context_with_model: flash_attn    = 0
0.00.335.777 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.778 I llama_new_context_with_model: freq_scale    = 1
0.00.335.779 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.300 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.315 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.412 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.692 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.696 I llama_new_context_with_model: graph nodes  = 601
0.00.352.696 I llama_new_context_with_model: graph splits = 1
0.00.352.699 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.352.699 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.298 I main: llama threadpool init, n_threads = 4
0.00.429.314 I 
0.00.429.391 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.429.394 I 
0.00.429.438 I sampler seed: 1589706948
0.00.429.451 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.459 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.462 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.462 I 
 seconded with a crown of thorns. It is the emblem of a powerful and ancient civilization.

The inscription reads: "The wisdom of the ancients."



0.02.040.917 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6619.86 tokens per second)
0.02.040.919 I llama_perf_context_print:        load time =     428.52 ms
0.02.040.920 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.040.921 I llama_perf_context_print:        eval time =    1592.35 ms /    32 runs   (   49.76 ms per token,    20.10 tokens per second)
0.02.040.922 I llama_perf_context_print:       total time =    1611.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.418s
user	10m24.552s
sys	0m7.266s
