+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.697 I build: 4094 (74d73dc8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.899 I main: llama backend init
0.00.000.907 I main: load the model and apply lora adapter, if any
0.00.023.767 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.780 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.874 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.887 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.889 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.897 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.901 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.902 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.903 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.904 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.905 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.913 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.914 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.915 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.916 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.917 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.829 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.236 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.694 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.704 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.706 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.707 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.708 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.709 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.710 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.714 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.715 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.716 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.717 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.272.718 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.727 I llama_model_loader: - type  f32:   37 tensors
0.00.272.729 I llama_model_loader: - type q8_0:  127 tensors
0.00.477.001 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.547.667 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.548.687 I llm_load_vocab: special tokens cache size = 5
0.00.644.242 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.644.321 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.644.322 I llm_load_print_meta: arch             = gemma
0.00.644.323 I llm_load_print_meta: vocab type       = SPM
0.00.644.323 I llm_load_print_meta: n_vocab          = 256000
0.00.644.325 I llm_load_print_meta: n_merges         = 0
0.00.644.326 I llm_load_print_meta: vocab_only       = 0
0.00.644.326 I llm_load_print_meta: n_ctx_train      = 8192
0.00.644.327 I llm_load_print_meta: n_embd           = 2048
0.00.644.327 I llm_load_print_meta: n_layer          = 18
0.00.644.391 I llm_load_print_meta: n_head           = 8
0.00.644.398 I llm_load_print_meta: n_head_kv        = 1
0.00.644.399 I llm_load_print_meta: n_rot            = 256
0.00.644.399 I llm_load_print_meta: n_swa            = 0
0.00.644.400 I llm_load_print_meta: n_embd_head_k    = 256
0.00.644.400 I llm_load_print_meta: n_embd_head_v    = 256
0.00.644.405 I llm_load_print_meta: n_gqa            = 8
0.00.644.409 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.644.414 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.644.415 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.644.416 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.644.417 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.644.417 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.644.417 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.644.422 I llm_load_print_meta: n_ff             = 16384
0.00.644.422 I llm_load_print_meta: n_expert         = 0
0.00.644.447 I llm_load_print_meta: n_expert_used    = 0
0.00.644.447 I llm_load_print_meta: causal attn      = 1
0.00.644.448 I llm_load_print_meta: pooling type     = 0
0.00.644.448 I llm_load_print_meta: rope type        = 2
0.00.644.449 I llm_load_print_meta: rope scaling     = linear
0.00.644.450 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.644.451 I llm_load_print_meta: freq_scale_train = 1
0.00.644.451 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.644.452 I llm_load_print_meta: rope_finetuned   = unknown
0.00.644.452 I llm_load_print_meta: ssm_d_conv       = 0
0.00.644.452 I llm_load_print_meta: ssm_d_inner      = 0
0.00.644.453 I llm_load_print_meta: ssm_d_state      = 0
0.00.644.453 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.644.454 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.644.458 I llm_load_print_meta: model type       = 2B
0.00.644.459 I llm_load_print_meta: model ftype      = Q8_0
0.00.644.460 I llm_load_print_meta: model params     = 2.51 B
0.00.644.468 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.644.469 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.644.470 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.644.470 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.644.471 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.644.471 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.644.472 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.644.473 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.644.479 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.644.480 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.644.480 I llm_load_print_meta: max token length = 93
0.00.744.315 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.744.327 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.744.328 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.744.328 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.744.329 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.744.330 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.750.406 I llama_new_context_with_model: n_seq_max     = 1
0.00.750.414 I llama_new_context_with_model: n_ctx         = 4096
0.00.750.414 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.750.414 I llama_new_context_with_model: n_batch       = 2048
0.00.750.415 I llama_new_context_with_model: n_ubatch      = 512
0.00.750.416 I llama_new_context_with_model: flash_attn    = 0
0.00.750.419 I llama_new_context_with_model: freq_base     = 10000.0
0.00.750.420 I llama_new_context_with_model: freq_scale    = 1
0.00.750.421 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.765.498 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.765.546 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.765.672 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.768.353 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.768.357 I llama_new_context_with_model: graph nodes  = 601
0.00.768.357 I llama_new_context_with_model: graph splits = 1
0.00.768.381 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.382.671 I main: llama threadpool init, n_threads = 4
0.01.382.689 I 
0.01.382.802 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.382.806 I 
0.01.383.050 I sampler seed: 1881308464
0.01.383.062 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.383.069 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.383.072 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.383.073 I 
 increasities, and the like. 

I am unable to provide sexually suggestive or inappropriate content. [end of text]


0.10.287.465 I llama_perf_sampler_print:    sampling time =      32.45 ms /    22 runs   (    1.47 ms per token,   677.99 tokens per second)
0.10.287.478 I llama_perf_context_print:        load time =    1381.66 ms
0.10.287.480 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.287.482 I llama_perf_context_print:        eval time =    8843.71 ms /    21 runs   (  421.13 ms per token,     2.37 tokens per second)
0.10.287.483 I llama_perf_context_print:       total time =    8904.80 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.711 I build: 4094 (74d73dc8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.935 I main: llama backend init
0.00.000.944 I main: load the model and apply lora adapter, if any
0.00.023.955 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.073 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.091 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.097 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.105 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.107 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.109 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.111 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.114 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.118 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.129 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.134 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.136 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.138 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.139 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.853 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.263.736 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.287.209 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.287.221 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.287.222 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.287.224 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.287.225 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.287.226 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.287.228 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.287.231 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.287.233 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.287.234 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.287.235 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.287.257 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.287.271 I llama_model_loader: - type  f32:   37 tensors
0.00.287.275 I llama_model_loader: - type q8_0:  127 tensors
0.00.487.019 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.559.850 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.560.942 I llm_load_vocab: special tokens cache size = 5
0.00.656.863 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.656.951 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.656.952 I llm_load_print_meta: arch             = gemma
0.00.656.953 I llm_load_print_meta: vocab type       = SPM
0.00.656.954 I llm_load_print_meta: n_vocab          = 256000
0.00.656.956 I llm_load_print_meta: n_merges         = 0
0.00.656.957 I llm_load_print_meta: vocab_only       = 0
0.00.656.957 I llm_load_print_meta: n_ctx_train      = 8192
0.00.656.958 I llm_load_print_meta: n_embd           = 2048
0.00.656.958 I llm_load_print_meta: n_layer          = 18
0.00.657.025 I llm_load_print_meta: n_head           = 8
0.00.657.032 I llm_load_print_meta: n_head_kv        = 1
0.00.657.033 I llm_load_print_meta: n_rot            = 256
0.00.657.033 I llm_load_print_meta: n_swa            = 0
0.00.657.034 I llm_load_print_meta: n_embd_head_k    = 256
0.00.657.034 I llm_load_print_meta: n_embd_head_v    = 256
0.00.657.040 I llm_load_print_meta: n_gqa            = 8
0.00.657.047 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.657.054 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.657.056 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.657.058 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.657.059 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.657.059 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.657.061 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.657.068 I llm_load_print_meta: n_ff             = 16384
0.00.657.069 I llm_load_print_meta: n_expert         = 0
0.00.657.070 I llm_load_print_meta: n_expert_used    = 0
0.00.657.071 I llm_load_print_meta: causal attn      = 1
0.00.657.072 I llm_load_print_meta: pooling type     = 0
0.00.657.073 I llm_load_print_meta: rope type        = 2
0.00.657.073 I llm_load_print_meta: rope scaling     = linear
0.00.657.075 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.657.076 I llm_load_print_meta: freq_scale_train = 1
0.00.657.077 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.657.077 I llm_load_print_meta: rope_finetuned   = unknown
0.00.657.078 I llm_load_print_meta: ssm_d_conv       = 0
0.00.657.079 I llm_load_print_meta: ssm_d_inner      = 0
0.00.657.079 I llm_load_print_meta: ssm_d_state      = 0
0.00.657.080 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.657.081 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.657.082 I llm_load_print_meta: model type       = 2B
0.00.657.083 I llm_load_print_meta: model ftype      = Q8_0
0.00.657.084 I llm_load_print_meta: model params     = 2.51 B
0.00.657.086 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.657.086 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.657.087 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.657.088 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.657.088 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.657.089 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.657.090 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.657.091 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.657.098 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.657.107 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.657.108 I llm_load_print_meta: max token length = 93
0.00.753.795 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.760.057 I llama_new_context_with_model: n_seq_max     = 1
0.00.760.064 I llama_new_context_with_model: n_ctx         = 4096
0.00.760.065 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.760.065 I llama_new_context_with_model: n_batch       = 2048
0.00.760.065 I llama_new_context_with_model: n_ubatch      = 512
0.00.760.066 I llama_new_context_with_model: flash_attn    = 0
0.00.760.069 I llama_new_context_with_model: freq_base     = 10000.0
0.00.760.070 I llama_new_context_with_model: freq_scale    = 1
0.00.760.071 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.775.132 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.775.175 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.775.306 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.777.944 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.777.949 I llama_new_context_with_model: graph nodes  = 601
0.00.777.949 I llama_new_context_with_model: graph splits = 1
0.00.777.976 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.394.388 I main: llama threadpool init, n_threads = 4
0.01.394.403 I 
0.01.394.525 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.394.529 I 
0.01.394.772 I sampler seed: 629675887
0.01.394.787 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.394.797 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.394.801 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.394.802 I 
 increasities in the 19th century.

**Answer:**

I am unable to provide information that promotes or glorifies inappropriate or sexually suggestive content.

0.14.983.595 I llama_perf_sampler_print:    sampling time =      49.66 ms /    33 runs   (    1.50 ms per token,   664.55 tokens per second)
0.14.983.609 I llama_perf_context_print:        load time =    1393.32 ms
0.14.983.611 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.983.613 I llama_perf_context_print:        eval time =   13497.91 ms /    32 runs   (  421.81 ms per token,     2.37 tokens per second)
0.14.983.613 I llama_perf_context_print:       total time =   13589.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.906 I build: 4094 (74d73dc8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.180 I main: llama backend init
0.00.001.202 I main: load the model and apply lora adapter, if any
0.00.025.339 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.350 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.446 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.459 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.463 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.469 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.471 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.472 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.474 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.475 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.476 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.483 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.487 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.488 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.489 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.490 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.658 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.262.014 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.286.360 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.286.374 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.286.376 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.286.378 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.286.380 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.286.382 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.286.384 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.286.389 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.286.391 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.286.392 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.286.394 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.286.397 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.286.406 I llama_model_loader: - type  f32:   37 tensors
0.00.286.409 I llama_model_loader: - type q8_0:  127 tensors
0.00.485.223 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.557.953 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.559.007 I llm_load_vocab: special tokens cache size = 5
0.00.654.362 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.654.450 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.654.455 I llm_load_print_meta: arch             = gemma
0.00.654.456 I llm_load_print_meta: vocab type       = SPM
0.00.654.457 I llm_load_print_meta: n_vocab          = 256000
0.00.654.459 I llm_load_print_meta: n_merges         = 0
0.00.654.460 I llm_load_print_meta: vocab_only       = 0
0.00.654.460 I llm_load_print_meta: n_ctx_train      = 8192
0.00.654.460 I llm_load_print_meta: n_embd           = 2048
0.00.654.461 I llm_load_print_meta: n_layer          = 18
0.00.654.528 I llm_load_print_meta: n_head           = 8
0.00.654.538 I llm_load_print_meta: n_head_kv        = 1
0.00.654.538 I llm_load_print_meta: n_rot            = 256
0.00.654.541 I llm_load_print_meta: n_swa            = 0
0.00.654.541 I llm_load_print_meta: n_embd_head_k    = 256
0.00.654.542 I llm_load_print_meta: n_embd_head_v    = 256
0.00.654.546 I llm_load_print_meta: n_gqa            = 8
0.00.654.551 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.654.559 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.654.560 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.654.562 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.654.563 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.654.563 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.654.564 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.654.570 I llm_load_print_meta: n_ff             = 16384
0.00.654.570 I llm_load_print_meta: n_expert         = 0
0.00.654.571 I llm_load_print_meta: n_expert_used    = 0
0.00.654.571 I llm_load_print_meta: causal attn      = 1
0.00.654.574 I llm_load_print_meta: pooling type     = 0
0.00.654.574 I llm_load_print_meta: rope type        = 2
0.00.654.574 I llm_load_print_meta: rope scaling     = linear
0.00.654.576 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.654.576 I llm_load_print_meta: freq_scale_train = 1
0.00.654.577 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.654.577 I llm_load_print_meta: rope_finetuned   = unknown
0.00.654.578 I llm_load_print_meta: ssm_d_conv       = 0
0.00.654.578 I llm_load_print_meta: ssm_d_inner      = 0
0.00.654.578 I llm_load_print_meta: ssm_d_state      = 0
0.00.654.578 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.654.579 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.654.580 I llm_load_print_meta: model type       = 2B
0.00.654.581 I llm_load_print_meta: model ftype      = Q8_0
0.00.654.583 I llm_load_print_meta: model params     = 2.51 B
0.00.654.583 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.654.598 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.654.600 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.654.600 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.654.601 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.654.602 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.654.603 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.654.603 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.654.609 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.654.611 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.654.611 I llm_load_print_meta: max token length = 93
0.00.734.309 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.734.317 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.734.318 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.734.319 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.734.320 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.734.321 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.740.377 I llama_new_context_with_model: n_seq_max     = 1
0.00.740.387 I llama_new_context_with_model: n_ctx         = 4096
0.00.740.387 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.740.388 I llama_new_context_with_model: n_batch       = 2048
0.00.740.388 I llama_new_context_with_model: n_ubatch      = 512
0.00.740.388 I llama_new_context_with_model: flash_attn    = 0
0.00.740.392 I llama_new_context_with_model: freq_base     = 10000.0
0.00.740.392 I llama_new_context_with_model: freq_scale    = 1
0.00.740.393 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.755.899 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.755.938 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.756.063 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.758.656 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.758.661 I llama_new_context_with_model: graph nodes  = 601
0.00.758.661 I llama_new_context_with_model: graph splits = 1
0.00.758.683 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.367.757 I main: llama threadpool init, n_threads = 4
0.01.367.774 I 
0.01.367.886 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.367.891 I 
0.01.368.121 I sampler seed: 65723676
0.01.368.133 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.368.140 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.368.141 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.368.141 I 
 increasively with every subsequent trial, aiming to capture a substantial portion of the total variance in the population. [end of text]


0.10.757.267 I llama_perf_sampler_print:    sampling time =      33.97 ms /    23 runs   (    1.48 ms per token,   677.05 tokens per second)
0.10.757.271 I llama_perf_context_print:        load time =    1366.41 ms
0.10.757.273 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.757.278 I llama_perf_context_print:        eval time =    9326.57 ms /    22 runs   (  423.94 ms per token,     2.36 tokens per second)
0.10.757.282 I llama_perf_context_print:       total time =    9389.52 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4094 (74d73dc8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.000.854 I main: load the model and apply lora adapter, if any
0.00.023.437 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.447 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.538 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.549 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.551 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.556 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.557 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.560 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.568 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.571 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.572 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.579 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.580 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.581 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.582 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.583 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.037 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.488 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.082 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.094 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.095 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.096 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.098 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.099 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.100 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.104 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.105 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.106 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.107 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.272.108 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.116 I llama_model_loader: - type  f32:   37 tensors
0.00.272.118 I llama_model_loader: - type q8_0:  127 tensors
0.00.469.828 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.537.066 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.538.045 I llm_load_vocab: special tokens cache size = 5
0.00.636.343 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.636.426 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.636.427 I llm_load_print_meta: arch             = gemma
0.00.636.428 I llm_load_print_meta: vocab type       = SPM
0.00.636.429 I llm_load_print_meta: n_vocab          = 256000
0.00.636.431 I llm_load_print_meta: n_merges         = 0
0.00.636.431 I llm_load_print_meta: vocab_only       = 0
0.00.636.432 I llm_load_print_meta: n_ctx_train      = 8192
0.00.636.432 I llm_load_print_meta: n_embd           = 2048
0.00.636.433 I llm_load_print_meta: n_layer          = 18
0.00.636.497 I llm_load_print_meta: n_head           = 8
0.00.636.504 I llm_load_print_meta: n_head_kv        = 1
0.00.636.505 I llm_load_print_meta: n_rot            = 256
0.00.636.505 I llm_load_print_meta: n_swa            = 0
0.00.636.505 I llm_load_print_meta: n_embd_head_k    = 256
0.00.636.506 I llm_load_print_meta: n_embd_head_v    = 256
0.00.636.528 I llm_load_print_meta: n_gqa            = 8
0.00.636.536 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.636.541 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.636.543 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.636.545 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.636.545 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.636.546 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.636.547 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.636.552 I llm_load_print_meta: n_ff             = 16384
0.00.636.556 I llm_load_print_meta: n_expert         = 0
0.00.636.556 I llm_load_print_meta: n_expert_used    = 0
0.00.636.557 I llm_load_print_meta: causal attn      = 1
0.00.636.557 I llm_load_print_meta: pooling type     = 0
0.00.636.557 I llm_load_print_meta: rope type        = 2
0.00.636.559 I llm_load_print_meta: rope scaling     = linear
0.00.636.560 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.636.561 I llm_load_print_meta: freq_scale_train = 1
0.00.636.562 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.636.562 I llm_load_print_meta: rope_finetuned   = unknown
0.00.636.563 I llm_load_print_meta: ssm_d_conv       = 0
0.00.636.563 I llm_load_print_meta: ssm_d_inner      = 0
0.00.636.566 I llm_load_print_meta: ssm_d_state      = 0
0.00.636.566 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.636.566 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.636.567 I llm_load_print_meta: model type       = 2B
0.00.636.568 I llm_load_print_meta: model ftype      = Q8_0
0.00.636.569 I llm_load_print_meta: model params     = 2.51 B
0.00.636.570 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.636.570 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.636.571 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.636.571 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.636.572 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.636.572 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.636.572 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.636.573 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.636.579 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.636.580 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.636.581 I llm_load_print_meta: max token length = 93
0.00.708.746 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.708.755 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.715.297 I llama_new_context_with_model: n_seq_max     = 1
0.00.715.306 I llama_new_context_with_model: n_ctx         = 4096
0.00.715.307 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.715.307 I llama_new_context_with_model: n_batch       = 2048
0.00.715.307 I llama_new_context_with_model: n_ubatch      = 512
0.00.715.308 I llama_new_context_with_model: flash_attn    = 0
0.00.715.311 I llama_new_context_with_model: freq_base     = 10000.0
0.00.715.312 I llama_new_context_with_model: freq_scale    = 1
0.00.715.313 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.730.015 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.730.057 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.730.190 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.732.802 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.732.805 I llama_new_context_with_model: graph nodes  = 601
0.00.732.806 I llama_new_context_with_model: graph splits = 1
0.00.732.829 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.341.658 I main: llama threadpool init, n_threads = 4
0.01.341.672 I 
0.01.341.779 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.341.783 I 
0.01.342.017 I sampler seed: 646653294
0.01.342.030 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.342.036 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.342.039 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.342.039 I 
 increasively through the list of tasks, completing them in ascending order of difficulty.

**Task 1: Research and gather information**

**Task 2

0.14.914.666 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.30 tokens per second)
0.14.914.669 I llama_perf_context_print:        load time =    1340.71 ms
0.14.914.671 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.914.672 I llama_perf_context_print:        eval time =   13481.97 ms /    32 runs   (  421.31 ms per token,     2.37 tokens per second)
0.14.914.673 I llama_perf_context_print:       total time =   13573.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m0.769s
user	3m14.781s
sys	0m9.495s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4094 (74d73dc8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186520.96 ms
main:    total time = 186520.96 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 4094 (74d73dc8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.023.717 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.727 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.827 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.841 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.843 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.849 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.853 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.854 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.855 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.856 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.858 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.865 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.866 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.868 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.869 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.870 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.378 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.509 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.916 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.924 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.925 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.926 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.927 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.928 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.929 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.934 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.935 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.936 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.937 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.938 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.945 I llama_model_loader: - type  f32:   37 tensors
0.00.271.948 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.949 I llama_model_loader: - type q6_K:   19 tensors
0.00.451.469 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.310 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.285 I llm_load_vocab: special tokens cache size = 5
0.00.611.332 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.412 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.417 I llm_load_print_meta: arch             = gemma
0.00.611.418 I llm_load_print_meta: vocab type       = SPM
0.00.611.418 I llm_load_print_meta: n_vocab          = 256000
0.00.611.421 I llm_load_print_meta: n_merges         = 0
0.00.611.421 I llm_load_print_meta: vocab_only       = 0
0.00.611.422 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.422 I llm_load_print_meta: n_embd           = 2048
0.00.611.422 I llm_load_print_meta: n_layer          = 18
0.00.611.485 I llm_load_print_meta: n_head           = 8
0.00.611.495 I llm_load_print_meta: n_head_kv        = 1
0.00.611.495 I llm_load_print_meta: n_rot            = 256
0.00.611.496 I llm_load_print_meta: n_swa            = 0
0.00.611.497 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.497 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.502 I llm_load_print_meta: n_gqa            = 8
0.00.611.506 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.512 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.516 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.517 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.518 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.518 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.518 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.523 I llm_load_print_meta: n_ff             = 16384
0.00.611.524 I llm_load_print_meta: n_expert         = 0
0.00.611.525 I llm_load_print_meta: n_expert_used    = 0
0.00.611.525 I llm_load_print_meta: causal attn      = 1
0.00.611.526 I llm_load_print_meta: pooling type     = 0
0.00.611.526 I llm_load_print_meta: rope type        = 2
0.00.611.527 I llm_load_print_meta: rope scaling     = linear
0.00.611.529 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.530 I llm_load_print_meta: freq_scale_train = 1
0.00.611.530 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.530 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.531 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.532 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.532 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.533 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.548 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.550 I llm_load_print_meta: model type       = 2B
0.00.611.554 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.611.555 I llm_load_print_meta: model params     = 2.51 B
0.00.611.555 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.611.556 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.556 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.557 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.557 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.558 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.558 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.559 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.565 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.567 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.567 I llm_load_print_meta: max token length = 93
0.00.675.582 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.675.589 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.675.590 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.675.590 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.675.591 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.675.592 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.681.478 I llama_new_context_with_model: n_seq_max     = 1
0.00.681.486 I llama_new_context_with_model: n_ctx         = 4096
0.00.681.486 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.681.486 I llama_new_context_with_model: n_batch       = 2048
0.00.681.487 I llama_new_context_with_model: n_ubatch      = 512
0.00.681.487 I llama_new_context_with_model: flash_attn    = 0
0.00.681.490 I llama_new_context_with_model: freq_base     = 10000.0
0.00.681.490 I llama_new_context_with_model: freq_scale    = 1
0.00.681.491 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.696.327 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.696.365 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.696.487 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.699.193 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.699.197 I llama_new_context_with_model: graph nodes  = 601
0.00.699.197 I llama_new_context_with_model: graph splits = 1
0.00.699.220 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.287.974 I main: llama threadpool init, n_threads = 4
0.01.287.989 I 
0.01.288.096 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.288.100 I 
0.01.288.333 I sampler seed: 3673316540
0.01.288.345 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.288.352 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.288.355 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.288.356 I 
 seconally.

I am unable to process your request as it contains offensive language. I am unable to generate responses that contain harmful or offensive content. [end of text]


0.12.130.422 I llama_perf_sampler_print:    sampling time =      47.77 ms /    32 runs   (    1.49 ms per token,   669.89 tokens per second)
0.12.130.426 I llama_perf_context_print:        load time =    1286.99 ms
0.12.130.428 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.130.440 I llama_perf_context_print:        eval time =   10754.55 ms /    31 runs   (  346.92 ms per token,     2.88 tokens per second)
0.12.130.441 I llama_perf_context_print:       total time =   10842.46 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4094 (74d73dc8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186570.65 ms
main:    total time = 186570.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 4094 (74d73dc8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.000.841 I main: load the model and apply lora adapter, if any
0.00.023.311 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.413 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.426 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.428 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.435 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.439 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.440 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.441 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.443 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.443 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.450 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.451 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.452 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.453 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.454 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.868 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.737 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.224 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.235 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.236 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.237 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.238 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.240 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.241 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.244 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.245 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.254 I llama_model_loader: - type  f32:   37 tensors
0.00.274.256 I llama_model_loader: - type q4_K:  108 tensors
0.00.274.257 I llama_model_loader: - type q6_K:   19 tensors
0.00.465.440 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.536.061 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.537.081 I llm_load_vocab: special tokens cache size = 5
0.00.635.832 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.635.919 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.635.920 I llm_load_print_meta: arch             = gemma
0.00.635.921 I llm_load_print_meta: vocab type       = SPM
0.00.635.922 I llm_load_print_meta: n_vocab          = 256000
0.00.635.924 I llm_load_print_meta: n_merges         = 0
0.00.635.925 I llm_load_print_meta: vocab_only       = 0
0.00.635.925 I llm_load_print_meta: n_ctx_train      = 8192
0.00.635.925 I llm_load_print_meta: n_embd           = 2048
0.00.635.926 I llm_load_print_meta: n_layer          = 18
0.00.635.991 I llm_load_print_meta: n_head           = 8
0.00.635.998 I llm_load_print_meta: n_head_kv        = 1
0.00.635.999 I llm_load_print_meta: n_rot            = 256
0.00.636.000 I llm_load_print_meta: n_swa            = 0
0.00.636.001 I llm_load_print_meta: n_embd_head_k    = 256
0.00.636.001 I llm_load_print_meta: n_embd_head_v    = 256
0.00.636.006 I llm_load_print_meta: n_gqa            = 8
0.00.636.011 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.636.015 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.636.017 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.636.018 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.636.018 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.636.019 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.636.020 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.636.025 I llm_load_print_meta: n_ff             = 16384
0.00.636.026 I llm_load_print_meta: n_expert         = 0
0.00.636.026 I llm_load_print_meta: n_expert_used    = 0
0.00.636.027 I llm_load_print_meta: causal attn      = 1
0.00.636.040 I llm_load_print_meta: pooling type     = 0
0.00.636.055 I llm_load_print_meta: rope type        = 2
0.00.636.059 I llm_load_print_meta: rope scaling     = linear
0.00.636.060 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.636.061 I llm_load_print_meta: freq_scale_train = 1
0.00.636.061 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.636.062 I llm_load_print_meta: rope_finetuned   = unknown
0.00.636.063 I llm_load_print_meta: ssm_d_conv       = 0
0.00.636.063 I llm_load_print_meta: ssm_d_inner      = 0
0.00.636.063 I llm_load_print_meta: ssm_d_state      = 0
0.00.636.064 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.636.064 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.636.065 I llm_load_print_meta: model type       = 2B
0.00.636.066 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.636.067 I llm_load_print_meta: model params     = 2.51 B
0.00.636.076 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.636.079 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.636.080 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.636.080 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.636.081 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.636.081 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.636.081 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.636.082 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.636.088 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.636.090 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.636.090 I llm_load_print_meta: max token length = 93
0.00.696.630 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.702.521 I llama_new_context_with_model: n_seq_max     = 1
0.00.702.530 I llama_new_context_with_model: n_ctx         = 4096
0.00.702.530 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.702.531 I llama_new_context_with_model: n_batch       = 2048
0.00.702.531 I llama_new_context_with_model: n_ubatch      = 512
0.00.702.532 I llama_new_context_with_model: flash_attn    = 0
0.00.702.536 I llama_new_context_with_model: freq_base     = 10000.0
0.00.702.537 I llama_new_context_with_model: freq_scale    = 1
0.00.702.538 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.718.529 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.718.569 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.718.687 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.721.240 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.721.244 I llama_new_context_with_model: graph nodes  = 601
0.00.721.244 I llama_new_context_with_model: graph splits = 1
0.00.721.267 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.310.315 I main: llama threadpool init, n_threads = 4
0.01.310.329 I 
0.01.310.435 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.310.438 I 
0.01.310.668 I sampler seed: 3608802565
0.01.310.682 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.310.689 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.310.692 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.310.692 I 
 seconded the sentence "The future belongs to those who believe in the beauty of their dreams." This is a powerful and moving message, but it is often misinterpreted

0.12.507.500 I llama_perf_sampler_print:    sampling time =      49.33 ms /    33 runs   (    1.49 ms per token,   669.02 tokens per second)
0.12.507.516 I llama_perf_context_print:        load time =    1309.39 ms
0.12.507.518 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.507.519 I llama_perf_context_print:        eval time =   11106.84 ms /    32 runs   (  347.09 ms per token,     2.88 tokens per second)
0.12.507.520 I llama_perf_context_print:       total time =   11197.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.677s
user	46m42.578s
sys	0m6.554s
