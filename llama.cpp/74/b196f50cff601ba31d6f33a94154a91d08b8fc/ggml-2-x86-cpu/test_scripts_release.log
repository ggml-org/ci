+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.682 I build: 3984 (74b196f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.037 I main: llama backend init
0.00.002.269 I main: load the model and apply lora adapter, if any
0.00.048.692 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.048.870 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.048.887 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.048.895 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.048.899 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.048.904 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.048.906 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.048.907 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.048.909 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.048.911 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.048.912 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.048.918 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.048.919 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.048.920 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.048.921 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.048.923 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.100.897 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.204.604 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.215.284 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.215.292 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.215.294 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.215.295 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.215.296 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.215.297 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.215.299 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.215.312 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.215.313 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.215.315 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.215.316 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.215.318 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.215.322 I llama_model_loader: - type  f32:   37 tensors
0.00.215.325 I llama_model_loader: - type q8_0:  127 tensors
0.00.389.037 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.502 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.124 I llm_load_vocab: special tokens cache size = 5
0.00.553.600 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.553.631 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.553.632 I llm_load_print_meta: arch             = gemma
0.00.553.634 I llm_load_print_meta: vocab type       = SPM
0.00.553.635 I llm_load_print_meta: n_vocab          = 256000
0.00.553.635 I llm_load_print_meta: n_merges         = 0
0.00.553.636 I llm_load_print_meta: vocab_only       = 0
0.00.553.637 I llm_load_print_meta: n_ctx_train      = 8192
0.00.553.637 I llm_load_print_meta: n_embd           = 2048
0.00.553.638 I llm_load_print_meta: n_layer          = 18
0.00.553.666 I llm_load_print_meta: n_head           = 8
0.00.553.671 I llm_load_print_meta: n_head_kv        = 1
0.00.553.672 I llm_load_print_meta: n_rot            = 256
0.00.553.672 I llm_load_print_meta: n_swa            = 0
0.00.553.673 I llm_load_print_meta: n_embd_head_k    = 256
0.00.553.673 I llm_load_print_meta: n_embd_head_v    = 256
0.00.553.683 I llm_load_print_meta: n_gqa            = 8
0.00.553.688 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.553.692 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.553.694 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.553.696 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.553.696 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.553.697 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.553.698 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.553.702 I llm_load_print_meta: n_ff             = 16384
0.00.553.703 I llm_load_print_meta: n_expert         = 0
0.00.553.704 I llm_load_print_meta: n_expert_used    = 0
0.00.553.704 I llm_load_print_meta: causal attn      = 1
0.00.553.705 I llm_load_print_meta: pooling type     = 0
0.00.553.706 I llm_load_print_meta: rope type        = 2
0.00.553.707 I llm_load_print_meta: rope scaling     = linear
0.00.553.708 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.553.709 I llm_load_print_meta: freq_scale_train = 1
0.00.553.710 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.553.711 I llm_load_print_meta: rope_finetuned   = unknown
0.00.553.711 I llm_load_print_meta: ssm_d_conv       = 0
0.00.553.712 I llm_load_print_meta: ssm_d_inner      = 0
0.00.553.716 I llm_load_print_meta: ssm_d_state      = 0
0.00.553.716 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.553.717 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.553.718 I llm_load_print_meta: model type       = 2B
0.00.553.718 I llm_load_print_meta: model ftype      = Q8_0
0.00.553.720 I llm_load_print_meta: model params     = 2.51 B
0.00.553.723 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.553.724 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.553.725 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.553.726 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.553.727 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.553.727 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.553.728 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.553.729 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.553.731 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.553.732 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.553.733 I llm_load_print_meta: max token length = 93
0.00.656.944 I llm_load_tensors:        CPU model buffer size =   865.98 MiB
0.00.656.953 I llm_load_tensors:        CPU model buffer size =   334.74 MiB
0.00.656.954 I llm_load_tensors:        CPU model buffer size =   402.73 MiB
0.00.656.955 I llm_load_tensors:        CPU model buffer size =   335.27 MiB
0.00.656.956 I llm_load_tensors:        CPU model buffer size =   338.98 MiB
0.00.656.957 I llm_load_tensors:        CPU model buffer size =   261.96 MiB
..............................................................
0.00.673.787 I llama_new_context_with_model: n_ctx      = 8192
0.00.673.793 I llama_new_context_with_model: n_batch    = 2048
0.00.673.793 I llama_new_context_with_model: n_ubatch   = 512
0.00.673.794 I llama_new_context_with_model: flash_attn = 0
0.00.673.797 I llama_new_context_with_model: freq_base  = 10000.0
0.00.673.798 I llama_new_context_with_model: freq_scale = 1
0.00.712.947 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.712.970 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.713.482 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.745.664 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.745.670 I llama_new_context_with_model: graph nodes  = 601
0.00.745.671 I llama_new_context_with_model: graph splits = 1
0.00.745.675 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.958.992 I main: llama threadpool init, n_threads = 4
0.00.959.008 I 
0.00.959.103 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.959.106 I 
0.00.959.236 I sampler seed: 753926099
0.00.959.256 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.959.264 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.959.266 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.959.272 I 
 increasively, ignoring any negative consequences. [end of text]


0.02.137.448 I llama_perf_sampler_print:    sampling time =       1.55 ms /    10 runs   (    0.16 ms per token,  6447.45 tokens per second)
0.02.137.451 I llama_perf_context_print:        load time =     956.69 ms
0.02.137.453 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.137.471 I llama_perf_context_print:        eval time =    1171.43 ms /     9 runs   (  130.16 ms per token,     7.68 tokens per second)
0.02.137.472 I llama_perf_context_print:       total time =    1178.47 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.614 I build: 3984 (74b196f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.947 I main: llama backend init
0.00.002.154 I main: load the model and apply lora adapter, if any
0.00.047.422 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.047.438 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.047.446 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.047.448 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.047.453 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.047.454 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.047.456 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.047.457 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.047.458 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.047.460 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.047.465 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.047.466 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.047.468 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.047.469 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.047.470 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.098.715 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.202.524 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.213.072 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.213.080 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.213.081 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.213.082 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.213.083 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.213.085 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.213.087 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.213.095 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.213.096 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.213.098 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.213.100 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.213.102 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.213.107 I llama_model_loader: - type  f32:   37 tensors
0.00.213.110 I llama_model_loader: - type q8_0:  127 tensors
0.00.373.091 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.491.480 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.492.101 I llm_load_vocab: special tokens cache size = 5
0.00.536.344 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.536.374 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.536.375 I llm_load_print_meta: arch             = gemma
0.00.536.376 I llm_load_print_meta: vocab type       = SPM
0.00.536.376 I llm_load_print_meta: n_vocab          = 256000
0.00.536.377 I llm_load_print_meta: n_merges         = 0
0.00.536.378 I llm_load_print_meta: vocab_only       = 0
0.00.536.378 I llm_load_print_meta: n_ctx_train      = 8192
0.00.536.379 I llm_load_print_meta: n_embd           = 2048
0.00.536.379 I llm_load_print_meta: n_layer          = 18
0.00.536.410 I llm_load_print_meta: n_head           = 8
0.00.536.419 I llm_load_print_meta: n_head_kv        = 1
0.00.536.422 I llm_load_print_meta: n_rot            = 256
0.00.536.422 I llm_load_print_meta: n_swa            = 0
0.00.536.423 I llm_load_print_meta: n_embd_head_k    = 256
0.00.536.423 I llm_load_print_meta: n_embd_head_v    = 256
0.00.536.430 I llm_load_print_meta: n_gqa            = 8
0.00.536.453 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.536.467 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.536.468 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.536.469 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.536.470 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.536.471 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.536.471 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.536.480 I llm_load_print_meta: n_ff             = 16384
0.00.536.481 I llm_load_print_meta: n_expert         = 0
0.00.536.481 I llm_load_print_meta: n_expert_used    = 0
0.00.536.482 I llm_load_print_meta: causal attn      = 1
0.00.536.484 I llm_load_print_meta: pooling type     = 0
0.00.536.484 I llm_load_print_meta: rope type        = 2
0.00.536.485 I llm_load_print_meta: rope scaling     = linear
0.00.536.487 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.536.488 I llm_load_print_meta: freq_scale_train = 1
0.00.536.489 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.536.490 I llm_load_print_meta: rope_finetuned   = unknown
0.00.536.490 I llm_load_print_meta: ssm_d_conv       = 0
0.00.536.491 I llm_load_print_meta: ssm_d_inner      = 0
0.00.536.492 I llm_load_print_meta: ssm_d_state      = 0
0.00.536.493 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.536.493 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.536.494 I llm_load_print_meta: model type       = 2B
0.00.536.495 I llm_load_print_meta: model ftype      = Q8_0
0.00.536.496 I llm_load_print_meta: model params     = 2.51 B
0.00.536.497 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.536.498 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.536.499 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.536.500 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.536.501 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.536.502 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.536.502 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.536.503 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.536.505 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.536.506 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.536.506 I llm_load_print_meta: max token length = 93
0.00.634.337 I llm_load_tensors:        CPU model buffer size =  2539.66 MiB
..............................................................
0.00.651.108 I llama_new_context_with_model: n_ctx      = 8192
0.00.651.113 I llama_new_context_with_model: n_batch    = 2048
0.00.651.114 I llama_new_context_with_model: n_ubatch   = 512
0.00.651.115 I llama_new_context_with_model: flash_attn = 0
0.00.651.118 I llama_new_context_with_model: freq_base  = 10000.0
0.00.651.120 I llama_new_context_with_model: freq_scale = 1
0.00.690.946 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.690.987 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.691.484 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.710 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.723.718 I llama_new_context_with_model: graph nodes  = 601
0.00.723.719 I llama_new_context_with_model: graph splits = 1
0.00.723.722 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.961.520 I main: llama threadpool init, n_threads = 4
0.00.961.535 I 
0.00.961.629 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.961.633 I 
0.00.961.744 I sampler seed: 75135255
0.00.961.758 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.961.800 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.961.809 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.961.809 I 
 increably. [end of text]


0.01.483.581 I llama_perf_sampler_print:    sampling time =       0.72 ms /     5 runs   (    0.14 ms per token,  6915.63 tokens per second)
0.01.483.585 I llama_perf_context_print:        load time =     959.33 ms
0.01.483.601 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.483.603 I llama_perf_context_print:        eval time =     517.97 ms /     4 runs   (  129.49 ms per token,     7.72 tokens per second)
0.01.483.604 I llama_perf_context_print:       total time =     522.07 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.657 I build: 3984 (74b196f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.001 I main: llama backend init
0.00.002.243 I main: load the model and apply lora adapter, if any
0.00.046.741 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.046.912 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.046.927 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.046.938 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.046.949 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.046.958 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.046.960 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.046.961 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.046.963 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.046.964 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.046.965 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.046.972 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.046.973 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.046.974 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.046.975 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.046.977 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.098.746 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.203.048 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.213.656 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.213.665 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.213.666 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.213.667 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.213.668 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.213.679 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.213.682 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.213.695 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.213.697 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.213.699 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.213.701 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.213.703 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.213.707 I llama_model_loader: - type  f32:   37 tensors
0.00.213.710 I llama_model_loader: - type q8_0:  127 tensors
0.00.372.091 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.490.422 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.491.072 I llm_load_vocab: special tokens cache size = 5
0.00.535.904 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.535.929 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.535.930 I llm_load_print_meta: arch             = gemma
0.00.535.932 I llm_load_print_meta: vocab type       = SPM
0.00.535.933 I llm_load_print_meta: n_vocab          = 256000
0.00.535.933 I llm_load_print_meta: n_merges         = 0
0.00.535.934 I llm_load_print_meta: vocab_only       = 0
0.00.535.934 I llm_load_print_meta: n_ctx_train      = 8192
0.00.535.935 I llm_load_print_meta: n_embd           = 2048
0.00.535.935 I llm_load_print_meta: n_layer          = 18
0.00.535.967 I llm_load_print_meta: n_head           = 8
0.00.535.976 I llm_load_print_meta: n_head_kv        = 1
0.00.535.977 I llm_load_print_meta: n_rot            = 256
0.00.535.977 I llm_load_print_meta: n_swa            = 0
0.00.535.978 I llm_load_print_meta: n_embd_head_k    = 256
0.00.535.978 I llm_load_print_meta: n_embd_head_v    = 256
0.00.535.985 I llm_load_print_meta: n_gqa            = 8
0.00.535.999 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.536.008 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.536.009 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.536.011 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.536.011 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.536.012 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.536.012 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.536.034 I llm_load_print_meta: n_ff             = 16384
0.00.536.035 I llm_load_print_meta: n_expert         = 0
0.00.536.035 I llm_load_print_meta: n_expert_used    = 0
0.00.536.036 I llm_load_print_meta: causal attn      = 1
0.00.536.036 I llm_load_print_meta: pooling type     = 0
0.00.536.037 I llm_load_print_meta: rope type        = 2
0.00.536.037 I llm_load_print_meta: rope scaling     = linear
0.00.536.039 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.536.040 I llm_load_print_meta: freq_scale_train = 1
0.00.536.040 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.536.041 I llm_load_print_meta: rope_finetuned   = unknown
0.00.536.042 I llm_load_print_meta: ssm_d_conv       = 0
0.00.536.042 I llm_load_print_meta: ssm_d_inner      = 0
0.00.536.043 I llm_load_print_meta: ssm_d_state      = 0
0.00.536.043 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.536.044 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.536.044 I llm_load_print_meta: model type       = 2B
0.00.536.045 I llm_load_print_meta: model ftype      = Q8_0
0.00.536.046 I llm_load_print_meta: model params     = 2.51 B
0.00.536.048 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.536.049 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.536.050 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.536.051 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.536.052 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.536.053 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.536.054 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.536.055 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.536.056 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.536.057 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.536.058 I llm_load_print_meta: max token length = 93
0.00.617.157 I llm_load_tensors:        CPU model buffer size =   967.99 MiB
0.00.617.164 I llm_load_tensors:        CPU model buffer size =   344.30 MiB
0.00.617.165 I llm_load_tensors:        CPU model buffer size =   411.77 MiB
0.00.617.166 I llm_load_tensors:        CPU model buffer size =   437.27 MiB
0.00.617.167 I llm_load_tensors:        CPU model buffer size =   344.30 MiB
0.00.617.168 I llm_load_tensors:        CPU model buffer size =    34.02 MiB
..............................................................
0.00.633.833 I llama_new_context_with_model: n_ctx      = 8192
0.00.633.839 I llama_new_context_with_model: n_batch    = 2048
0.00.633.839 I llama_new_context_with_model: n_ubatch   = 512
0.00.633.840 I llama_new_context_with_model: flash_attn = 0
0.00.633.843 I llama_new_context_with_model: freq_base  = 10000.0
0.00.633.844 I llama_new_context_with_model: freq_scale = 1
0.00.673.581 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.673.606 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.674.112 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.705.236 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.705.246 I llama_new_context_with_model: graph nodes  = 601
0.00.705.247 I llama_new_context_with_model: graph splits = 1
0.00.705.250 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.919.149 I main: llama threadpool init, n_threads = 4
0.00.919.178 I 
0.00.919.288 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.919.296 I 
0.00.919.414 I sampler seed: 4132175293
0.00.919.430 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.919.436 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.919.438 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.919.438 I 
 increably. It is a small town with a population of just over a thousand people. The town is situated in a valley surrounded by towering mountains.

The

0.05.136.670 I llama_perf_sampler_print:    sampling time =       5.40 ms /    33 runs   (    0.16 ms per token,  6106.59 tokens per second)
0.05.136.687 I llama_perf_context_print:        load time =     916.87 ms
0.05.136.690 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.136.694 I llama_perf_context_print:        eval time =    4196.58 ms /    32 runs   (  131.14 ms per token,     7.63 tokens per second)
0.05.136.696 I llama_perf_context_print:       total time =    4217.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.671 I build: 3984 (74b196f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.032 I main: llama backend init
0.00.002.310 I main: load the model and apply lora adapter, if any
0.00.047.504 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.047.674 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.047.686 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.047.694 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.047.696 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.047.701 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.047.702 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.047.704 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.047.706 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.047.707 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.047.708 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.047.713 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.047.714 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.047.716 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.047.717 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.047.718 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.099.206 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.203.175 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.213.738 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.213.746 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.213.748 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.213.749 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.213.750 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.213.752 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.213.754 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.213.767 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.213.769 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.213.770 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.213.772 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.213.773 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.213.777 I llama_model_loader: - type  f32:   37 tensors
0.00.213.780 I llama_model_loader: - type q8_0:  127 tensors
0.00.373.106 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.488.016 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.488.683 I llm_load_vocab: special tokens cache size = 5
0.00.528.939 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.528.983 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.528.987 I llm_load_print_meta: arch             = gemma
0.00.528.988 I llm_load_print_meta: vocab type       = SPM
0.00.528.989 I llm_load_print_meta: n_vocab          = 256000
0.00.528.990 I llm_load_print_meta: n_merges         = 0
0.00.528.990 I llm_load_print_meta: vocab_only       = 0
0.00.528.991 I llm_load_print_meta: n_ctx_train      = 8192
0.00.528.992 I llm_load_print_meta: n_embd           = 2048
0.00.528.992 I llm_load_print_meta: n_layer          = 18
0.00.529.055 I llm_load_print_meta: n_head           = 8
0.00.529.090 I llm_load_print_meta: n_head_kv        = 1
0.00.529.091 I llm_load_print_meta: n_rot            = 256
0.00.529.091 I llm_load_print_meta: n_swa            = 0
0.00.529.092 I llm_load_print_meta: n_embd_head_k    = 256
0.00.529.092 I llm_load_print_meta: n_embd_head_v    = 256
0.00.529.127 I llm_load_print_meta: n_gqa            = 8
0.00.529.164 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.529.201 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.529.204 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.529.206 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.529.206 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.529.207 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.529.207 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.529.239 I llm_load_print_meta: n_ff             = 16384
0.00.529.240 I llm_load_print_meta: n_expert         = 0
0.00.529.240 I llm_load_print_meta: n_expert_used    = 0
0.00.529.241 I llm_load_print_meta: causal attn      = 1
0.00.529.241 I llm_load_print_meta: pooling type     = 0
0.00.529.242 I llm_load_print_meta: rope type        = 2
0.00.529.243 I llm_load_print_meta: rope scaling     = linear
0.00.529.245 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.529.246 I llm_load_print_meta: freq_scale_train = 1
0.00.529.256 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.529.257 I llm_load_print_meta: rope_finetuned   = unknown
0.00.529.258 I llm_load_print_meta: ssm_d_conv       = 0
0.00.529.258 I llm_load_print_meta: ssm_d_inner      = 0
0.00.529.258 I llm_load_print_meta: ssm_d_state      = 0
0.00.529.259 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.529.259 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.529.260 I llm_load_print_meta: model type       = 2B
0.00.529.261 I llm_load_print_meta: model ftype      = Q8_0
0.00.529.262 I llm_load_print_meta: model params     = 2.51 B
0.00.529.263 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.529.265 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.529.266 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.529.266 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.529.267 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.529.268 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.529.276 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.529.277 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.529.278 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.529.280 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.529.280 I llm_load_print_meta: max token length = 93
0.00.600.601 I llm_load_tensors:        CPU model buffer size =  1904.18 MiB
0.00.600.610 I llm_load_tensors:        CPU model buffer size =   635.48 MiB
..............................................................
0.00.617.317 I llama_new_context_with_model: n_ctx      = 8192
0.00.617.324 I llama_new_context_with_model: n_batch    = 2048
0.00.617.325 I llama_new_context_with_model: n_ubatch   = 512
0.00.617.326 I llama_new_context_with_model: flash_attn = 0
0.00.617.331 I llama_new_context_with_model: freq_base  = 10000.0
0.00.617.332 I llama_new_context_with_model: freq_scale = 1
0.00.658.299 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.658.333 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.658.861 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.690.044 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.690.053 I llama_new_context_with_model: graph nodes  = 601
0.00.690.054 I llama_new_context_with_model: graph splits = 1
0.00.690.058 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.919.080 I main: llama threadpool init, n_threads = 4
0.00.919.108 I 
0.00.919.228 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.919.235 I 
0.00.919.429 I sampler seed: 638771239
0.00.919.444 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.919.482 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.919.490 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.919.492 I 
 increasities:

1. The relationship between the variables x and y is inversely proportional. As x increases, y decreases.
2. The relationship between the

0.05.264.663 I llama_perf_sampler_print:    sampling time =       5.66 ms /    33 runs   (    0.17 ms per token,  5831.42 tokens per second)
0.05.264.667 I llama_perf_context_print:        load time =     916.73 ms
0.05.264.670 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.264.672 I llama_perf_context_print:        eval time =    4324.35 ms /    32 runs   (  135.14 ms per token,     7.40 tokens per second)
0.05.264.673 I llama_perf_context_print:       total time =    4345.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m25.290s
user	0m47.870s
sys	0m10.569s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3984 (74b196f5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 72148.65 ms
main:    total time = 72148.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.640 I build: 3984 (74b196f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.996 I main: llama backend init
0.00.002.223 I main: load the model and apply lora adapter, if any
0.00.047.585 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.047.760 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.047.776 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.047.783 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.047.785 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.047.789 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.047.792 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.047.793 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.047.794 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.047.797 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.047.798 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.047.803 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.047.804 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.047.805 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.047.807 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.047.808 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.099.580 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.203.677 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.214.335 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.214.343 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.214.344 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.214.345 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.214.346 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.214.348 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.214.349 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.214.361 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.214.362 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.214.364 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.214.365 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.214.367 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.214.371 I llama_model_loader: - type  f32:   37 tensors
0.00.214.375 I llama_model_loader: - type q4_K:  108 tensors
0.00.214.376 I llama_model_loader: - type q6_K:   19 tensors
0.00.379.201 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.189 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.840 I llm_load_vocab: special tokens cache size = 5
0.00.539.176 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.539.208 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.539.209 I llm_load_print_meta: arch             = gemma
0.00.539.210 I llm_load_print_meta: vocab type       = SPM
0.00.539.211 I llm_load_print_meta: n_vocab          = 256000
0.00.539.211 I llm_load_print_meta: n_merges         = 0
0.00.539.212 I llm_load_print_meta: vocab_only       = 0
0.00.539.213 I llm_load_print_meta: n_ctx_train      = 8192
0.00.539.213 I llm_load_print_meta: n_embd           = 2048
0.00.539.214 I llm_load_print_meta: n_layer          = 18
0.00.539.241 I llm_load_print_meta: n_head           = 8
0.00.539.295 I llm_load_print_meta: n_head_kv        = 1
0.00.539.296 I llm_load_print_meta: n_rot            = 256
0.00.539.297 I llm_load_print_meta: n_swa            = 0
0.00.539.297 I llm_load_print_meta: n_embd_head_k    = 256
0.00.539.298 I llm_load_print_meta: n_embd_head_v    = 256
0.00.539.342 I llm_load_print_meta: n_gqa            = 8
0.00.539.368 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.539.405 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.539.410 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.539.412 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.539.412 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.539.413 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.539.413 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.539.457 I llm_load_print_meta: n_ff             = 16384
0.00.539.460 I llm_load_print_meta: n_expert         = 0
0.00.539.461 I llm_load_print_meta: n_expert_used    = 0
0.00.539.461 I llm_load_print_meta: causal attn      = 1
0.00.539.462 I llm_load_print_meta: pooling type     = 0
0.00.539.462 I llm_load_print_meta: rope type        = 2
0.00.539.463 I llm_load_print_meta: rope scaling     = linear
0.00.539.465 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.539.466 I llm_load_print_meta: freq_scale_train = 1
0.00.539.466 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.539.467 I llm_load_print_meta: rope_finetuned   = unknown
0.00.539.475 I llm_load_print_meta: ssm_d_conv       = 0
0.00.539.476 I llm_load_print_meta: ssm_d_inner      = 0
0.00.539.477 I llm_load_print_meta: ssm_d_state      = 0
0.00.539.477 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.539.478 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.539.479 I llm_load_print_meta: model type       = 2B
0.00.539.480 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.539.481 I llm_load_print_meta: model params     = 2.51 B
0.00.539.482 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.539.489 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.539.490 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.539.490 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.539.491 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.539.492 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.539.492 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.539.493 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.539.493 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.539.494 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.539.495 I llm_load_print_meta: max token length = 93
0.00.601.080 I llm_load_tensors:        CPU model buffer size =   604.15 MiB
0.00.601.086 I llm_load_tensors:        CPU model buffer size =   185.62 MiB
0.00.601.087 I llm_load_tensors:        CPU model buffer size =   221.61 MiB
0.00.601.088 I llm_load_tensors:        CPU model buffer size =   185.89 MiB
0.00.601.089 I llm_load_tensors:        CPU model buffer size =   187.86 MiB
0.00.601.090 I llm_load_tensors:        CPU model buffer size =   163.85 MiB
.............................................................
0.00.617.773 I llama_new_context_with_model: n_ctx      = 8192
0.00.617.777 I llama_new_context_with_model: n_batch    = 2048
0.00.617.778 I llama_new_context_with_model: n_ubatch   = 512
0.00.617.778 I llama_new_context_with_model: flash_attn = 0
0.00.617.781 I llama_new_context_with_model: freq_base  = 10000.0
0.00.617.782 I llama_new_context_with_model: freq_scale = 1
0.00.658.232 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.658.269 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.658.777 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.691.141 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.691.150 I llama_new_context_with_model: graph nodes  = 601
0.00.691.151 I llama_new_context_with_model: graph splits = 1
0.00.691.162 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.881.048 I main: llama threadpool init, n_threads = 4
0.00.881.073 I 
0.00.881.201 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.881.204 I 
0.00.881.401 I sampler seed: 3697856826
0.00.881.416 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.881.446 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.881.454 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.881.454 I 
 squaRED text, and hovered text.
**Text Formatting:**

* Bold: Important information
* Italic: Descriptive text
* Strikethrough: Text

0.04.073.635 I llama_perf_sampler_print:    sampling time =       5.94 ms /    33 runs   (    0.18 ms per token,  5558.36 tokens per second)
0.04.073.639 I llama_perf_context_print:        load time =     878.77 ms
0.04.073.655 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.073.663 I llama_perf_context_print:        eval time =    3171.13 ms /    32 runs   (   99.10 ms per token,    10.09 tokens per second)
0.04.073.664 I llama_perf_context_print:       total time =    3192.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3984 (74b196f5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 72099.21 ms
main:    total time = 72099.21 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.617 I build: 3984 (74b196f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.952 I main: llama backend init
0.00.002.192 I main: load the model and apply lora adapter, if any
0.00.047.335 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.047.352 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.047.360 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.047.362 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.047.366 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.047.367 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.047.369 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.047.370 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.047.371 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.047.372 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.047.377 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.047.378 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.047.379 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.047.380 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.047.381 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.098.752 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.202.845 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.213.567 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.213.577 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.213.579 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.213.580 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.213.581 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.213.583 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.213.584 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.213.597 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.213.598 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.213.605 I llama_model_loader: - type  f32:   37 tensors
0.00.213.608 I llama_model_loader: - type q4_K:  108 tensors
0.00.213.609 I llama_model_loader: - type q6_K:   19 tensors
0.00.372.779 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.489.694 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.490.299 I llm_load_vocab: special tokens cache size = 5
0.00.530.849 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.530.885 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.530.886 I llm_load_print_meta: arch             = gemma
0.00.530.887 I llm_load_print_meta: vocab type       = SPM
0.00.530.887 I llm_load_print_meta: n_vocab          = 256000
0.00.530.888 I llm_load_print_meta: n_merges         = 0
0.00.530.889 I llm_load_print_meta: vocab_only       = 0
0.00.530.889 I llm_load_print_meta: n_ctx_train      = 8192
0.00.530.890 I llm_load_print_meta: n_embd           = 2048
0.00.530.890 I llm_load_print_meta: n_layer          = 18
0.00.530.945 I llm_load_print_meta: n_head           = 8
0.00.530.979 I llm_load_print_meta: n_head_kv        = 1
0.00.530.983 I llm_load_print_meta: n_rot            = 256
0.00.530.983 I llm_load_print_meta: n_swa            = 0
0.00.530.984 I llm_load_print_meta: n_embd_head_k    = 256
0.00.530.984 I llm_load_print_meta: n_embd_head_v    = 256
0.00.531.018 I llm_load_print_meta: n_gqa            = 8
0.00.531.053 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.531.082 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.531.087 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.531.088 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.531.089 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.531.089 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.531.090 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.531.120 I llm_load_print_meta: n_ff             = 16384
0.00.531.120 I llm_load_print_meta: n_expert         = 0
0.00.531.121 I llm_load_print_meta: n_expert_used    = 0
0.00.531.121 I llm_load_print_meta: causal attn      = 1
0.00.531.122 I llm_load_print_meta: pooling type     = 0
0.00.531.123 I llm_load_print_meta: rope type        = 2
0.00.531.124 I llm_load_print_meta: rope scaling     = linear
0.00.531.126 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.531.128 I llm_load_print_meta: freq_scale_train = 1
0.00.531.129 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.531.129 I llm_load_print_meta: rope_finetuned   = unknown
0.00.531.130 I llm_load_print_meta: ssm_d_conv       = 0
0.00.531.131 I llm_load_print_meta: ssm_d_inner      = 0
0.00.531.131 I llm_load_print_meta: ssm_d_state      = 0
0.00.531.132 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.531.132 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.531.134 I llm_load_print_meta: model type       = 2B
0.00.531.134 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.531.144 I llm_load_print_meta: model params     = 2.51 B
0.00.531.146 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.531.148 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.531.149 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.531.150 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.531.150 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.531.151 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.531.152 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.531.161 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.531.162 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.531.163 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.531.164 I llm_load_print_meta: max token length = 93
0.00.590.523 I llm_load_tensors:        CPU model buffer size =  1548.98 MiB
.............................................................
0.00.607.277 I llama_new_context_with_model: n_ctx      = 8192
0.00.607.282 I llama_new_context_with_model: n_batch    = 2048
0.00.607.283 I llama_new_context_with_model: n_ubatch   = 512
0.00.607.284 I llama_new_context_with_model: flash_attn = 0
0.00.607.287 I llama_new_context_with_model: freq_base  = 10000.0
0.00.607.288 I llama_new_context_with_model: freq_scale = 1
0.00.646.864 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.646.901 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.647.413 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.679.090 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.679.099 I llama_new_context_with_model: graph nodes  = 601
0.00.679.099 I llama_new_context_with_model: graph splits = 1
0.00.679.108 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.867.800 I main: llama threadpool init, n_threads = 4
0.00.867.826 I 
0.00.867.951 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.867.955 I 
0.00.868.134 I sampler seed: 3374805322
0.00.868.155 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.868.194 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.868.202 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.868.203 I 
 seconded arms that held tightly woven baskets of leaves, twigs, and insects. The baskets were filled with a vibrant array of flora and fauna, each element carefully

0.04.051.856 I llama_perf_sampler_print:    sampling time =       6.04 ms /    33 runs   (    0.18 ms per token,  5464.48 tokens per second)
0.04.051.860 I llama_perf_context_print:        load time =     865.56 ms
0.04.051.863 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.051.866 I llama_perf_context_print:        eval time =    3162.87 ms /    32 runs   (   98.84 ms per token,    10.12 tokens per second)
0.04.051.868 I llama_perf_context_print:       total time =    3184.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	2m35.729s
user	18m50.626s
sys	0m9.876s
