+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.538 I build: 4429 (96be8c32) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.738 I main: load the model and apply lora adapter, if any
0.00.021.443 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.451 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.458 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.464 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.465 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.467 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.468 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.469 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.469 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.470 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.470 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.474 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.474 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.475 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.475 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.476 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.006 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.891 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.706 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.712 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.712 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.713 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.713 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.714 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.715 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.717 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.718 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.720 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.721 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.721 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.724 I llama_model_loader: - type  f32:   37 tensors
0.00.130.725 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.978 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.743 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.276 I llm_load_vocab: special tokens cache size = 5
0.00.267.026 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.044 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.045 I llm_load_print_meta: arch             = gemma
0.00.267.045 I llm_load_print_meta: vocab type       = SPM
0.00.267.046 I llm_load_print_meta: n_vocab          = 256000
0.00.267.047 I llm_load_print_meta: n_merges         = 0
0.00.267.047 I llm_load_print_meta: vocab_only       = 0
0.00.267.047 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.048 I llm_load_print_meta: n_embd           = 2048
0.00.267.048 I llm_load_print_meta: n_layer          = 18
0.00.267.059 I llm_load_print_meta: n_head           = 8
0.00.267.061 I llm_load_print_meta: n_head_kv        = 1
0.00.267.062 I llm_load_print_meta: n_rot            = 256
0.00.267.062 I llm_load_print_meta: n_swa            = 0
0.00.267.062 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.062 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.064 I llm_load_print_meta: n_gqa            = 8
0.00.267.066 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.068 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.068 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.070 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.070 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.071 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.071 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.073 I llm_load_print_meta: n_ff             = 16384
0.00.267.073 I llm_load_print_meta: n_expert         = 0
0.00.267.074 I llm_load_print_meta: n_expert_used    = 0
0.00.267.074 I llm_load_print_meta: causal attn      = 1
0.00.267.074 I llm_load_print_meta: pooling type     = 0
0.00.267.075 I llm_load_print_meta: rope type        = 2
0.00.267.075 I llm_load_print_meta: rope scaling     = linear
0.00.267.076 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.077 I llm_load_print_meta: freq_scale_train = 1
0.00.267.077 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.078 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.078 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.078 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.078 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.079 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.079 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.081 I llm_load_print_meta: model type       = 2B
0.00.267.082 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.082 I llm_load_print_meta: model params     = 2.51 B
0.00.267.083 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.084 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.084 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.084 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.085 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.085 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.085 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.086 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.086 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.087 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.087 I llm_load_print_meta: max token length = 93
0.00.369.781 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.369.786 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.369.786 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.369.787 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.369.788 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.369.788 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.375.036 I llama_new_context_with_model: n_seq_max     = 1
0.00.375.042 I llama_new_context_with_model: n_ctx         = 4096
0.00.375.043 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.375.043 I llama_new_context_with_model: n_batch       = 2048
0.00.375.043 I llama_new_context_with_model: n_ubatch      = 512
0.00.375.044 I llama_new_context_with_model: flash_attn    = 0
0.00.375.046 I llama_new_context_with_model: freq_base     = 10000.0
0.00.375.046 I llama_new_context_with_model: freq_scale    = 1
0.00.375.047 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.067 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.389.486 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.500 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.588 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.800 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.806 I llama_new_context_with_model: graph nodes  = 601
0.00.390.807 I llama_new_context_with_model: graph splits = 1
0.00.390.810 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.390.811 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.764 I main: llama threadpool init, n_threads = 4
0.00.475.781 I 
0.00.475.855 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.475.858 I 
0.00.475.891 I sampler seed: 664155568
0.00.475.903 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.915 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.918 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.919 I 
 increasities, and the resulting human suffering.

The horrors of war are undeniable. The loss of innocent lives, the destruction of homes and communities, and the

0.02.726.395 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7006.37 tokens per second)
0.02.726.398 I llama_perf_context_print:        load time =     475.01 ms
0.02.726.399 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.726.400 I llama_perf_context_print:        eval time =    2232.27 ms /    32 runs   (   69.76 ms per token,    14.34 tokens per second)
0.02.726.401 I llama_perf_context_print:       total time =    2250.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.534 I build: 4429 (96be8c32) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.000.732 I main: load the model and apply lora adapter, if any
0.00.020.691 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.705 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.712 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.717 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.720 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.721 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.722 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.723 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.723 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.724 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.728 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.728 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.729 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.730 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.731 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.663 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.088 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.866 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.872 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.873 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.873 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.874 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.875 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.876 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.878 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.879 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.881 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.881 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.882 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.885 I llama_model_loader: - type  f32:   37 tensors
0.00.129.886 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.310 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.659 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.121 I llm_load_vocab: special tokens cache size = 5
0.00.259.682 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.698 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.700 I llm_load_print_meta: arch             = gemma
0.00.259.701 I llm_load_print_meta: vocab type       = SPM
0.00.259.701 I llm_load_print_meta: n_vocab          = 256000
0.00.259.702 I llm_load_print_meta: n_merges         = 0
0.00.259.702 I llm_load_print_meta: vocab_only       = 0
0.00.259.702 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.703 I llm_load_print_meta: n_embd           = 2048
0.00.259.703 I llm_load_print_meta: n_layer          = 18
0.00.259.716 I llm_load_print_meta: n_head           = 8
0.00.259.718 I llm_load_print_meta: n_head_kv        = 1
0.00.259.718 I llm_load_print_meta: n_rot            = 256
0.00.259.718 I llm_load_print_meta: n_swa            = 0
0.00.259.719 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.719 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.721 I llm_load_print_meta: n_gqa            = 8
0.00.259.723 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.725 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.726 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.727 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.728 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.728 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.729 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.730 I llm_load_print_meta: n_ff             = 16384
0.00.259.731 I llm_load_print_meta: n_expert         = 0
0.00.259.731 I llm_load_print_meta: n_expert_used    = 0
0.00.259.731 I llm_load_print_meta: causal attn      = 1
0.00.259.732 I llm_load_print_meta: pooling type     = 0
0.00.259.732 I llm_load_print_meta: rope type        = 2
0.00.259.733 I llm_load_print_meta: rope scaling     = linear
0.00.259.734 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.735 I llm_load_print_meta: freq_scale_train = 1
0.00.259.735 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.736 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.736 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.737 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.737 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.737 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.737 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.740 I llm_load_print_meta: model type       = 2B
0.00.259.742 I llm_load_print_meta: model ftype      = Q8_0
0.00.259.743 I llm_load_print_meta: model params     = 2.51 B
0.00.259.744 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.259.744 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.744 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.745 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.746 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.746 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.746 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.747 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.747 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.748 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.749 I llm_load_print_meta: max token length = 93
0.00.356.909 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.362.056 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.062 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.062 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.062 I llama_new_context_with_model: n_batch       = 2048
0.00.362.063 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.063 I llama_new_context_with_model: flash_attn    = 0
0.00.362.066 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.067 I llama_new_context_with_model: freq_scale    = 1
0.00.362.068 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.095 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.376.573 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.586 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.680 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.941 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.946 I llama_new_context_with_model: graph nodes  = 601
0.00.377.947 I llama_new_context_with_model: graph splits = 1
0.00.377.950 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.377.951 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.824 I main: llama threadpool init, n_threads = 4
0.00.458.840 I 
0.00.458.913 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.458.916 I 
0.00.458.947 I sampler seed: 665071160
0.00.458.959 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.971 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.975 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.975 I 
 increasities with a blend of dark humor, witty dialogue, and relatable scenarios.

**Characters:**

- **Ellie:** A young professional navigating the complexities of

0.02.641.895 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6887.91 tokens per second)
0.02.641.898 I llama_perf_context_print:        load time =     458.07 ms
0.02.641.899 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.641.900 I llama_perf_context_print:        eval time =    2163.96 ms /    32 runs   (   67.62 ms per token,    14.79 tokens per second)
0.02.641.901 I llama_perf_context_print:       total time =    2183.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.545 I build: 4429 (96be8c32) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.021.218 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.230 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.237 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.243 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.244 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.246 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.247 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.248 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.248 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.250 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.250 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.254 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.255 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.256 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.257 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.257 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.202 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.683 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.519 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.525 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.526 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.526 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.527 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.528 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.529 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.532 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.533 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.534 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.535 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.537 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.540 I llama_model_loader: - type  f32:   37 tensors
0.00.131.541 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.373 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.343 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.829 I llm_load_vocab: special tokens cache size = 5
0.00.267.960 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.976 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.977 I llm_load_print_meta: arch             = gemma
0.00.267.978 I llm_load_print_meta: vocab type       = SPM
0.00.267.979 I llm_load_print_meta: n_vocab          = 256000
0.00.267.979 I llm_load_print_meta: n_merges         = 0
0.00.267.980 I llm_load_print_meta: vocab_only       = 0
0.00.267.980 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.980 I llm_load_print_meta: n_embd           = 2048
0.00.267.981 I llm_load_print_meta: n_layer          = 18
0.00.267.991 I llm_load_print_meta: n_head           = 8
0.00.267.993 I llm_load_print_meta: n_head_kv        = 1
0.00.267.994 I llm_load_print_meta: n_rot            = 256
0.00.267.994 I llm_load_print_meta: n_swa            = 0
0.00.267.994 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.995 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.996 I llm_load_print_meta: n_gqa            = 8
0.00.267.998 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.999 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.000 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.002 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.003 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.003 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.004 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.006 I llm_load_print_meta: n_ff             = 16384
0.00.268.006 I llm_load_print_meta: n_expert         = 0
0.00.268.006 I llm_load_print_meta: n_expert_used    = 0
0.00.268.007 I llm_load_print_meta: causal attn      = 1
0.00.268.007 I llm_load_print_meta: pooling type     = 0
0.00.268.007 I llm_load_print_meta: rope type        = 2
0.00.268.008 I llm_load_print_meta: rope scaling     = linear
0.00.268.009 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.010 I llm_load_print_meta: freq_scale_train = 1
0.00.268.010 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.011 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.011 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.011 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.011 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.012 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.012 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.014 I llm_load_print_meta: model type       = 2B
0.00.268.015 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.016 I llm_load_print_meta: model params     = 2.51 B
0.00.268.016 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.017 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.017 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.017 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.018 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.018 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.018 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.019 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.019 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.019 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.020 I llm_load_print_meta: max token length = 93
0.00.345.556 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.345.563 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.564 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.345.564 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.345.565 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.565 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.350.768 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.774 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.774 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.774 I llama_new_context_with_model: n_batch       = 2048
0.00.350.775 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.775 I llama_new_context_with_model: flash_attn    = 0
0.00.350.778 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.779 I llama_new_context_with_model: freq_scale    = 1
0.00.350.780 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.806 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.365.118 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.132 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.222 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.473 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.480 I llama_new_context_with_model: graph nodes  = 601
0.00.366.480 I llama_new_context_with_model: graph splits = 1
0.00.366.484 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.366.484 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.723 I main: llama threadpool init, n_threads = 4
0.00.452.738 I 
0.00.452.811 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.452.815 I 
0.00.452.858 I sampler seed: 297978674
0.00.452.869 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.874 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.452.875 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.452.875 I 
 increasities and the reasons why the government should not interfere.

**Response:**

I am unable to provide information that promotes controversial or misleading perspectives. It is

0.02.737.281 I llama_perf_sampler_print:    sampling time =       4.73 ms /    33 runs   (    0.14 ms per token,  6972.32 tokens per second)
0.02.737.283 I llama_perf_context_print:        load time =     451.96 ms
0.02.737.284 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.737.286 I llama_perf_context_print:        eval time =    2265.90 ms /    32 runs   (   70.81 ms per token,    14.12 tokens per second)
0.02.737.286 I llama_perf_context_print:       total time =    2284.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.176 I build: 4429 (96be8c32) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.393 I main: llama backend init
0.00.000.400 I main: load the model and apply lora adapter, if any
0.00.020.459 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.467 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.474 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.480 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.481 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.484 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.485 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.485 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.486 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.487 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.488 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.491 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.492 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.493 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.494 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.495 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.243 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.313 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.177 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.184 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.185 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.186 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.186 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.188 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.188 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.191 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.192 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.193 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.193 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.194 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.198 I llama_model_loader: - type  f32:   37 tensors
0.00.130.199 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.669 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.314 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.823 I llm_load_vocab: special tokens cache size = 5
0.00.263.968 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.985 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.986 I llm_load_print_meta: arch             = gemma
0.00.263.987 I llm_load_print_meta: vocab type       = SPM
0.00.263.987 I llm_load_print_meta: n_vocab          = 256000
0.00.263.987 I llm_load_print_meta: n_merges         = 0
0.00.263.988 I llm_load_print_meta: vocab_only       = 0
0.00.263.988 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.989 I llm_load_print_meta: n_embd           = 2048
0.00.263.989 I llm_load_print_meta: n_layer          = 18
0.00.264.000 I llm_load_print_meta: n_head           = 8
0.00.264.002 I llm_load_print_meta: n_head_kv        = 1
0.00.264.002 I llm_load_print_meta: n_rot            = 256
0.00.264.003 I llm_load_print_meta: n_swa            = 0
0.00.264.003 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.003 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.005 I llm_load_print_meta: n_gqa            = 8
0.00.264.006 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.008 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.009 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.010 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.010 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.011 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.011 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.013 I llm_load_print_meta: n_ff             = 16384
0.00.264.013 I llm_load_print_meta: n_expert         = 0
0.00.264.013 I llm_load_print_meta: n_expert_used    = 0
0.00.264.014 I llm_load_print_meta: causal attn      = 1
0.00.264.014 I llm_load_print_meta: pooling type     = 0
0.00.264.014 I llm_load_print_meta: rope type        = 2
0.00.264.014 I llm_load_print_meta: rope scaling     = linear
0.00.264.016 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.016 I llm_load_print_meta: freq_scale_train = 1
0.00.264.016 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.017 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.017 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.017 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.018 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.018 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.018 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.020 I llm_load_print_meta: model type       = 2B
0.00.264.021 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.022 I llm_load_print_meta: model params     = 2.51 B
0.00.264.023 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.023 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.023 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.024 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.024 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.025 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.025 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.025 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.026 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.026 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.027 I llm_load_print_meta: max token length = 93
0.00.335.143 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.335.150 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.340.342 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.348 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.348 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.349 I llama_new_context_with_model: n_batch       = 2048
0.00.340.349 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.350 I llama_new_context_with_model: flash_attn    = 0
0.00.340.352 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.353 I llama_new_context_with_model: freq_scale    = 1
0.00.340.354 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.340.376 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.355.740 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.753 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.849 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.183 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.190 I llama_new_context_with_model: graph nodes  = 601
0.00.357.190 I llama_new_context_with_model: graph splits = 1
0.00.357.194 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.357.195 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.250 I main: llama threadpool init, n_threads = 4
0.00.450.266 I 
0.00.450.351 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.450.355 I 
0.00.450.392 I sampler seed: 2721816677
0.00.450.415 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.422 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.422 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.422 I 
 increasities!

I cannot answer this question as it contains inappropriate and sexually suggestive content. [end of text]


0.01.882.457 I llama_perf_sampler_print:    sampling time =       3.15 ms /    20 runs   (    0.16 ms per token,  6345.18 tokens per second)
0.01.882.460 I llama_perf_context_print:        load time =     449.83 ms
0.01.882.461 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.882.463 I llama_perf_context_print:        eval time =    1419.86 ms /    19 runs   (   74.73 ms per token,    13.38 tokens per second)
0.01.882.463 I llama_perf_context_print:       total time =    1432.22 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.389s
user	0m35.448s
sys	0m9.321s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4429 (96be8c32)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40263.13 ms
main:    total time = 40263.13 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.541 I build: 4429 (96be8c32) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.021.333 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.343 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.351 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.357 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.358 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.361 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.361 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.362 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.363 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.364 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.364 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.367 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.368 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.369 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.369 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.370 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.566 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.374 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.144 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.150 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.151 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.151 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.152 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.153 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.154 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.156 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.157 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.157 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.159 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.159 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.163 I llama_model_loader: - type  f32:   37 tensors
0.00.130.164 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.165 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.762 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.125 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.613 I llm_load_vocab: special tokens cache size = 5
0.00.267.283 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.300 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.301 I llm_load_print_meta: arch             = gemma
0.00.267.302 I llm_load_print_meta: vocab type       = SPM
0.00.267.302 I llm_load_print_meta: n_vocab          = 256000
0.00.267.303 I llm_load_print_meta: n_merges         = 0
0.00.267.303 I llm_load_print_meta: vocab_only       = 0
0.00.267.303 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.304 I llm_load_print_meta: n_embd           = 2048
0.00.267.304 I llm_load_print_meta: n_layer          = 18
0.00.267.321 I llm_load_print_meta: n_head           = 8
0.00.267.323 I llm_load_print_meta: n_head_kv        = 1
0.00.267.324 I llm_load_print_meta: n_rot            = 256
0.00.267.324 I llm_load_print_meta: n_swa            = 0
0.00.267.324 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.325 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.326 I llm_load_print_meta: n_gqa            = 8
0.00.267.328 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.329 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.330 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.332 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.332 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.333 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.333 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.335 I llm_load_print_meta: n_ff             = 16384
0.00.267.335 I llm_load_print_meta: n_expert         = 0
0.00.267.335 I llm_load_print_meta: n_expert_used    = 0
0.00.267.336 I llm_load_print_meta: causal attn      = 1
0.00.267.336 I llm_load_print_meta: pooling type     = 0
0.00.267.336 I llm_load_print_meta: rope type        = 2
0.00.267.336 I llm_load_print_meta: rope scaling     = linear
0.00.267.338 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.339 I llm_load_print_meta: freq_scale_train = 1
0.00.267.339 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.339 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.340 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.340 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.340 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.341 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.341 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.343 I llm_load_print_meta: model type       = 2B
0.00.267.344 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.345 I llm_load_print_meta: model params     = 2.51 B
0.00.267.346 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.346 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.346 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.347 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.347 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.347 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.348 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.348 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.349 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.349 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.349 I llm_load_print_meta: max token length = 93
0.00.327.507 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.327.515 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.327.516 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.327.516 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.327.517 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.327.517 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.332.830 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.838 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.839 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.839 I llama_new_context_with_model: n_batch       = 2048
0.00.332.840 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.841 I llama_new_context_with_model: flash_attn    = 0
0.00.332.844 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.845 I llama_new_context_with_model: freq_scale    = 1
0.00.332.846 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.332.867 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.348.489 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.504 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.601 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.997 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.002 I llama_new_context_with_model: graph nodes  = 601
0.00.350.002 I llama_new_context_with_model: graph splits = 1
0.00.350.006 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.350.006 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.438.452 I main: llama threadpool init, n_threads = 4
0.00.438.470 I 
0.00.438.550 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.438.553 I 
0.00.438.586 I sampler seed: 2731791529
0.00.438.597 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.438.610 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.438.613 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.438.613 I 
 secon.jpeg
I'm unable to access the image file at the specified location. Could you please provide me with the correct path or alternative way to access

0.02.027.231 I llama_perf_sampler_print:    sampling time =       5.02 ms /    33 runs   (    0.15 ms per token,  6569.78 tokens per second)
0.02.027.234 I llama_perf_context_print:        load time =     437.69 ms
0.02.027.235 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.027.236 I llama_perf_context_print:        eval time =    1570.14 ms /    32 runs   (   49.07 ms per token,    20.38 tokens per second)
0.02.027.237 I llama_perf_context_print:       total time =    1588.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4429 (96be8c32)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40238.22 ms
main:    total time = 40238.22 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.178 I build: 4429 (96be8c32) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.418 I main: llama backend init
0.00.000.425 I main: load the model and apply lora adapter, if any
0.00.020.521 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.537 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.544 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.545 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.548 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.549 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.549 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.550 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.550 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.551 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.555 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.555 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.556 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.557 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.557 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.388 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.171 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.079 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.085 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.085 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.086 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.086 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.087 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.088 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.090 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.091 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.093 I llama_model_loader: - type  f32:   37 tensors
0.00.130.094 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.095 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.641 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.537 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.177 I llm_load_vocab: special tokens cache size = 5
0.00.268.168 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.195 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.197 I llm_load_print_meta: arch             = gemma
0.00.268.197 I llm_load_print_meta: vocab type       = SPM
0.00.268.198 I llm_load_print_meta: n_vocab          = 256000
0.00.268.199 I llm_load_print_meta: n_merges         = 0
0.00.268.199 I llm_load_print_meta: vocab_only       = 0
0.00.268.200 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.200 I llm_load_print_meta: n_embd           = 2048
0.00.268.201 I llm_load_print_meta: n_layer          = 18
0.00.268.216 I llm_load_print_meta: n_head           = 8
0.00.268.219 I llm_load_print_meta: n_head_kv        = 1
0.00.268.220 I llm_load_print_meta: n_rot            = 256
0.00.268.220 I llm_load_print_meta: n_swa            = 0
0.00.268.221 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.221 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.224 I llm_load_print_meta: n_gqa            = 8
0.00.268.227 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.229 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.230 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.232 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.233 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.234 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.235 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.237 I llm_load_print_meta: n_ff             = 16384
0.00.268.239 I llm_load_print_meta: n_expert         = 0
0.00.268.239 I llm_load_print_meta: n_expert_used    = 0
0.00.268.240 I llm_load_print_meta: causal attn      = 1
0.00.268.240 I llm_load_print_meta: pooling type     = 0
0.00.268.241 I llm_load_print_meta: rope type        = 2
0.00.268.242 I llm_load_print_meta: rope scaling     = linear
0.00.268.244 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.245 I llm_load_print_meta: freq_scale_train = 1
0.00.268.245 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.246 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.247 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.247 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.248 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.249 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.250 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.252 I llm_load_print_meta: model type       = 2B
0.00.268.254 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.255 I llm_load_print_meta: model params     = 2.51 B
0.00.268.256 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.256 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.257 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.258 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.258 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.259 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.259 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.260 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.260 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.261 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.262 I llm_load_print_meta: max token length = 93
0.00.331.174 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.336.357 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.365 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.366 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.366 I llama_new_context_with_model: n_batch       = 2048
0.00.336.366 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.367 I llama_new_context_with_model: flash_attn    = 0
0.00.336.370 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.371 I llama_new_context_with_model: freq_scale    = 1
0.00.336.372 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.336.404 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.352.126 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.140 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.235 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.509 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.516 I llama_new_context_with_model: graph nodes  = 601
0.00.353.516 I llama_new_context_with_model: graph splits = 1
0.00.353.520 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.353.520 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.438 I main: llama threadpool init, n_threads = 4
0.00.427.453 I 
0.00.427.529 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.427.532 I 
0.00.427.575 I sampler seed: 15216097
0.00.427.584 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.587 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.587 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.587 I 
 seconally, the sentence sounds clunky and awkward.

Could you rewrite it in a clearer and more concise way?

The original sentence is:

"The

0.01.974.875 I llama_perf_sampler_print:    sampling time =       5.66 ms /    33 runs   (    0.17 ms per token,  5832.45 tokens per second)
0.01.974.877 I llama_perf_context_print:        load time =     426.99 ms
0.01.974.878 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.974.879 I llama_perf_context_print:        eval time =    1528.17 ms /    32 runs   (   47.76 ms per token,    20.94 tokens per second)
0.01.974.880 I llama_perf_context_print:       total time =    1547.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.269s
user	10m24.035s
sys	0m6.878s
