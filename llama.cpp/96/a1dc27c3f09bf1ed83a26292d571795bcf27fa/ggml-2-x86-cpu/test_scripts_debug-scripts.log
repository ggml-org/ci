+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 4426 (96a1dc27) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.023.266 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.275 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.367 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.380 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.382 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.386 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.390 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.391 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.392 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.393 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.396 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.402 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.404 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.405 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.406 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.408 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.744 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.323.151 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.347.215 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.347.224 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.347.225 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.347.227 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.347.228 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.347.229 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.347.231 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.347.235 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.347.236 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.347.238 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.347.239 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.347.240 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.347.247 I llama_model_loader: - type  f32:   37 tensors
0.00.347.249 I llama_model_loader: - type q8_0:  127 tensors
0.00.578.546 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.636.893 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.637.774 I llm_load_vocab: special tokens cache size = 5
0.00.841.959 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.842.039 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.842.044 I llm_load_print_meta: arch             = gemma
0.00.842.045 I llm_load_print_meta: vocab type       = SPM
0.00.842.046 I llm_load_print_meta: n_vocab          = 256000
0.00.842.049 I llm_load_print_meta: n_merges         = 0
0.00.842.049 I llm_load_print_meta: vocab_only       = 0
0.00.842.050 I llm_load_print_meta: n_ctx_train      = 8192
0.00.842.050 I llm_load_print_meta: n_embd           = 2048
0.00.842.051 I llm_load_print_meta: n_layer          = 18
0.00.842.129 I llm_load_print_meta: n_head           = 8
0.00.842.140 I llm_load_print_meta: n_head_kv        = 1
0.00.842.141 I llm_load_print_meta: n_rot            = 256
0.00.842.142 I llm_load_print_meta: n_swa            = 0
0.00.842.143 I llm_load_print_meta: n_embd_head_k    = 256
0.00.842.143 I llm_load_print_meta: n_embd_head_v    = 256
0.00.842.148 I llm_load_print_meta: n_gqa            = 8
0.00.842.152 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.842.157 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.842.161 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.842.163 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.842.163 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.842.164 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.842.164 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.842.169 I llm_load_print_meta: n_ff             = 16384
0.00.842.169 I llm_load_print_meta: n_expert         = 0
0.00.842.170 I llm_load_print_meta: n_expert_used    = 0
0.00.842.170 I llm_load_print_meta: causal attn      = 1
0.00.842.170 I llm_load_print_meta: pooling type     = 0
0.00.842.171 I llm_load_print_meta: rope type        = 2
0.00.842.171 I llm_load_print_meta: rope scaling     = linear
0.00.842.172 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.842.173 I llm_load_print_meta: freq_scale_train = 1
0.00.842.173 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.842.174 I llm_load_print_meta: rope_finetuned   = unknown
0.00.842.174 I llm_load_print_meta: ssm_d_conv       = 0
0.00.842.175 I llm_load_print_meta: ssm_d_inner      = 0
0.00.842.175 I llm_load_print_meta: ssm_d_state      = 0
0.00.842.175 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.842.176 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.842.189 I llm_load_print_meta: model type       = 2B
0.00.842.192 I llm_load_print_meta: model ftype      = Q8_0
0.00.842.193 I llm_load_print_meta: model params     = 2.51 B
0.00.842.194 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.842.194 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.842.197 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.842.197 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.842.198 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.842.198 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.842.199 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.842.199 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.842.205 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.842.207 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.842.207 I llm_load_print_meta: max token length = 93
0.00.946.200 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.946.210 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.946.211 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.946.212 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.946.212 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.946.213 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.952.070 I llama_new_context_with_model: n_seq_max     = 1
0.00.952.077 I llama_new_context_with_model: n_ctx         = 4096
0.00.952.078 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.952.078 I llama_new_context_with_model: n_batch       = 2048
0.00.952.078 I llama_new_context_with_model: n_ubatch      = 512
0.00.952.079 I llama_new_context_with_model: flash_attn    = 0
0.00.952.081 I llama_new_context_with_model: freq_base     = 10000.0
0.00.952.082 I llama_new_context_with_model: freq_scale    = 1
0.00.952.082 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.952.164 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.966.837 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.966.872 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.966.991 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.969.586 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.969.590 I llama_new_context_with_model: graph nodes  = 601
0.00.969.591 I llama_new_context_with_model: graph splits = 1
0.00.969.616 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.969.618 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.586.880 I main: llama threadpool init, n_threads = 4
0.01.586.895 I 
0.01.587.018 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.587.023 I 
0.01.587.261 I sampler seed: 2483652082
0.01.587.276 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.587.286 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.587.289 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.587.289 I 
 increasities, and a broader range of activities. 

**Current Challenges:**

* Difficulty in attracting and retaining qualified staff
* Rising costs of living and

0.15.076.845 I llama_perf_sampler_print:    sampling time =      49.77 ms /    33 runs   (    1.51 ms per token,   663.04 tokens per second)
0.15.076.861 I llama_perf_context_print:        load time =    1585.92 ms
0.15.076.863 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.076.864 I llama_perf_context_print:        eval time =   13404.24 ms /    32 runs   (  418.88 ms per token,     2.39 tokens per second)
0.15.076.865 I llama_perf_context_print:       total time =   13489.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4426 (96a1dc27) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.000.844 I main: load the model and apply lora adapter, if any
0.00.023.311 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.409 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.424 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.429 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.433 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.434 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.436 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.437 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.439 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.440 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.447 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.450 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.452 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.453 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.455 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.127 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.092 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.203 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.215 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.217 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.218 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.220 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.221 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.222 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.226 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.228 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.230 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.231 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.351.233 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.241 I llama_model_loader: - type  f32:   37 tensors
0.00.351.243 I llama_model_loader: - type q8_0:  127 tensors
0.00.569.676 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.628.442 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.629.344 I llm_load_vocab: special tokens cache size = 5
0.00.851.666 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.851.742 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.851.746 I llm_load_print_meta: arch             = gemma
0.00.851.747 I llm_load_print_meta: vocab type       = SPM
0.00.851.748 I llm_load_print_meta: n_vocab          = 256000
0.00.851.750 I llm_load_print_meta: n_merges         = 0
0.00.851.751 I llm_load_print_meta: vocab_only       = 0
0.00.851.751 I llm_load_print_meta: n_ctx_train      = 8192
0.00.851.752 I llm_load_print_meta: n_embd           = 2048
0.00.851.752 I llm_load_print_meta: n_layer          = 18
0.00.851.833 I llm_load_print_meta: n_head           = 8
0.00.851.844 I llm_load_print_meta: n_head_kv        = 1
0.00.851.844 I llm_load_print_meta: n_rot            = 256
0.00.851.845 I llm_load_print_meta: n_swa            = 0
0.00.851.845 I llm_load_print_meta: n_embd_head_k    = 256
0.00.851.846 I llm_load_print_meta: n_embd_head_v    = 256
0.00.851.851 I llm_load_print_meta: n_gqa            = 8
0.00.851.856 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.851.861 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.851.863 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.851.864 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.851.865 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.851.866 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.851.866 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.851.872 I llm_load_print_meta: n_ff             = 16384
0.00.851.872 I llm_load_print_meta: n_expert         = 0
0.00.851.875 I llm_load_print_meta: n_expert_used    = 0
0.00.851.876 I llm_load_print_meta: causal attn      = 1
0.00.851.876 I llm_load_print_meta: pooling type     = 0
0.00.851.876 I llm_load_print_meta: rope type        = 2
0.00.851.877 I llm_load_print_meta: rope scaling     = linear
0.00.851.878 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.851.879 I llm_load_print_meta: freq_scale_train = 1
0.00.851.879 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.851.879 I llm_load_print_meta: rope_finetuned   = unknown
0.00.851.880 I llm_load_print_meta: ssm_d_conv       = 0
0.00.851.880 I llm_load_print_meta: ssm_d_inner      = 0
0.00.851.880 I llm_load_print_meta: ssm_d_state      = 0
0.00.851.881 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.851.881 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.851.884 I llm_load_print_meta: model type       = 2B
0.00.851.886 I llm_load_print_meta: model ftype      = Q8_0
0.00.851.887 I llm_load_print_meta: model params     = 2.51 B
0.00.851.888 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.851.888 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.851.889 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.851.889 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.851.890 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.851.890 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.851.891 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.851.892 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.851.899 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.851.901 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.851.901 I llm_load_print_meta: max token length = 93
0.00.949.756 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.955.809 I llama_new_context_with_model: n_seq_max     = 1
0.00.955.815 I llama_new_context_with_model: n_ctx         = 4096
0.00.955.816 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.955.816 I llama_new_context_with_model: n_batch       = 2048
0.00.955.817 I llama_new_context_with_model: n_ubatch      = 512
0.00.955.817 I llama_new_context_with_model: flash_attn    = 0
0.00.955.820 I llama_new_context_with_model: freq_base     = 10000.0
0.00.955.820 I llama_new_context_with_model: freq_scale    = 1
0.00.955.821 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.955.908 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.970.738 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.970.777 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.970.909 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.973.488 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.973.492 I llama_new_context_with_model: graph nodes  = 601
0.00.973.493 I llama_new_context_with_model: graph splits = 1
0.00.973.517 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.973.520 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.585.367 I main: llama threadpool init, n_threads = 4
0.01.585.383 I 
0.01.585.504 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.585.509 I 
0.01.585.743 I sampler seed: 903367825
0.01.585.757 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.585.767 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.585.770 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.585.770 I 
 increasities and a unique blend of whimsical charm!

This is a playful invitation for a whimsical celebration where guests can express themselves and embrace the spirit of playful exploration

0.15.170.891 I llama_perf_sampler_print:    sampling time =      50.18 ms /    33 runs   (    1.52 ms per token,   657.70 tokens per second)
0.15.170.896 I llama_perf_context_print:        load time =    1584.44 ms
0.15.170.897 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.170.899 I llama_perf_context_print:        eval time =   13499.58 ms /    32 runs   (  421.86 ms per token,     2.37 tokens per second)
0.15.170.900 I llama_perf_context_print:       total time =   13585.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 4426 (96a1dc27) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.000.831 I main: load the model and apply lora adapter, if any
0.00.023.228 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.240 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.324 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.337 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.341 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.345 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.347 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.348 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.350 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.351 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.353 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.359 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.363 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.364 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.366 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.374 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.107 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.323.862 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.011 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.023 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.024 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.026 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.027 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.028 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.030 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.034 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.035 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.037 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.038 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.348.040 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.047 I llama_model_loader: - type  f32:   37 tensors
0.00.348.050 I llama_model_loader: - type q8_0:  127 tensors
0.00.558.361 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.617.975 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.618.899 I llm_load_vocab: special tokens cache size = 5
0.00.820.405 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.820.480 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.820.485 I llm_load_print_meta: arch             = gemma
0.00.820.486 I llm_load_print_meta: vocab type       = SPM
0.00.820.487 I llm_load_print_meta: n_vocab          = 256000
0.00.820.489 I llm_load_print_meta: n_merges         = 0
0.00.820.490 I llm_load_print_meta: vocab_only       = 0
0.00.820.490 I llm_load_print_meta: n_ctx_train      = 8192
0.00.820.490 I llm_load_print_meta: n_embd           = 2048
0.00.820.491 I llm_load_print_meta: n_layer          = 18
0.00.820.570 I llm_load_print_meta: n_head           = 8
0.00.820.581 I llm_load_print_meta: n_head_kv        = 1
0.00.820.582 I llm_load_print_meta: n_rot            = 256
0.00.820.582 I llm_load_print_meta: n_swa            = 0
0.00.820.583 I llm_load_print_meta: n_embd_head_k    = 256
0.00.820.585 I llm_load_print_meta: n_embd_head_v    = 256
0.00.820.590 I llm_load_print_meta: n_gqa            = 8
0.00.820.595 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.820.600 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.820.601 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.820.602 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.820.603 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.820.604 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.820.605 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.820.612 I llm_load_print_meta: n_ff             = 16384
0.00.820.613 I llm_load_print_meta: n_expert         = 0
0.00.820.613 I llm_load_print_meta: n_expert_used    = 0
0.00.820.614 I llm_load_print_meta: causal attn      = 1
0.00.820.615 I llm_load_print_meta: pooling type     = 0
0.00.820.615 I llm_load_print_meta: rope type        = 2
0.00.820.615 I llm_load_print_meta: rope scaling     = linear
0.00.820.617 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.820.617 I llm_load_print_meta: freq_scale_train = 1
0.00.820.618 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.820.619 I llm_load_print_meta: rope_finetuned   = unknown
0.00.820.619 I llm_load_print_meta: ssm_d_conv       = 0
0.00.820.619 I llm_load_print_meta: ssm_d_inner      = 0
0.00.820.620 I llm_load_print_meta: ssm_d_state      = 0
0.00.820.621 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.820.622 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.820.625 I llm_load_print_meta: model type       = 2B
0.00.820.626 I llm_load_print_meta: model ftype      = Q8_0
0.00.820.627 I llm_load_print_meta: model params     = 2.51 B
0.00.820.629 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.820.630 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.820.630 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.820.630 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.820.631 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.820.632 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.820.633 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.820.634 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.820.640 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.820.642 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.820.643 I llm_load_print_meta: max token length = 93
0.00.901.090 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.901.098 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.901.099 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.901.099 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.901.100 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.901.113 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.907.439 I llama_new_context_with_model: n_seq_max     = 1
0.00.907.446 I llama_new_context_with_model: n_ctx         = 4096
0.00.907.447 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.907.447 I llama_new_context_with_model: n_batch       = 2048
0.00.907.447 I llama_new_context_with_model: n_ubatch      = 512
0.00.907.448 I llama_new_context_with_model: flash_attn    = 0
0.00.907.450 I llama_new_context_with_model: freq_base     = 10000.0
0.00.907.451 I llama_new_context_with_model: freq_scale    = 1
0.00.907.451 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.907.539 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.922.228 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.922.267 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.922.387 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.924.976 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.924.980 I llama_new_context_with_model: graph nodes  = 601
0.00.924.980 I llama_new_context_with_model: graph splits = 1
0.00.925.003 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.925.007 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.537.143 I main: llama threadpool init, n_threads = 4
0.01.537.159 I 
0.01.537.296 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.537.301 I 
0.01.537.543 I sampler seed: 730435939
0.01.537.556 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.537.568 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.537.569 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.537.569 I 
 increasities:

**Answer the following questions about the provided text:**

a) What is the meaning of the phrase "a increasities"?
b)

0.15.033.854 I llama_perf_sampler_print:    sampling time =      49.72 ms /    33 runs   (    1.51 ms per token,   663.73 tokens per second)
0.15.033.857 I llama_perf_context_print:        load time =    1536.23 ms
0.15.033.871 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.033.873 I llama_perf_context_print:        eval time =   13410.92 ms /    32 runs   (  419.09 ms per token,     2.39 tokens per second)
0.15.033.874 I llama_perf_context_print:       total time =   13496.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4426 (96a1dc27) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.000.852 I main: load the model and apply lora adapter, if any
0.00.023.177 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.189 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.285 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.300 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.301 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.306 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.310 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.312 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.314 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.316 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.319 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.326 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.329 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.332 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.334 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.336 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.665 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.323.886 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.347.961 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.347.970 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.347.971 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.347.973 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.347.974 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.347.976 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.347.977 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.347.981 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.347.982 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.347.984 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.347.985 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.347.987 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.347.996 I llama_model_loader: - type  f32:   37 tensors
0.00.347.998 I llama_model_loader: - type q8_0:  127 tensors
0.00.568.134 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.626.938 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.627.892 I llm_load_vocab: special tokens cache size = 5
0.00.834.409 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.834.483 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.834.488 I llm_load_print_meta: arch             = gemma
0.00.834.489 I llm_load_print_meta: vocab type       = SPM
0.00.834.489 I llm_load_print_meta: n_vocab          = 256000
0.00.834.492 I llm_load_print_meta: n_merges         = 0
0.00.834.493 I llm_load_print_meta: vocab_only       = 0
0.00.834.493 I llm_load_print_meta: n_ctx_train      = 8192
0.00.834.493 I llm_load_print_meta: n_embd           = 2048
0.00.834.494 I llm_load_print_meta: n_layer          = 18
0.00.834.573 I llm_load_print_meta: n_head           = 8
0.00.834.584 I llm_load_print_meta: n_head_kv        = 1
0.00.834.584 I llm_load_print_meta: n_rot            = 256
0.00.834.585 I llm_load_print_meta: n_swa            = 0
0.00.834.585 I llm_load_print_meta: n_embd_head_k    = 256
0.00.834.586 I llm_load_print_meta: n_embd_head_v    = 256
0.00.834.591 I llm_load_print_meta: n_gqa            = 8
0.00.834.596 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.834.601 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.834.603 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.834.605 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.834.607 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.834.607 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.834.608 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.834.613 I llm_load_print_meta: n_ff             = 16384
0.00.834.614 I llm_load_print_meta: n_expert         = 0
0.00.834.615 I llm_load_print_meta: n_expert_used    = 0
0.00.834.624 I llm_load_print_meta: causal attn      = 1
0.00.834.625 I llm_load_print_meta: pooling type     = 0
0.00.834.626 I llm_load_print_meta: rope type        = 2
0.00.834.627 I llm_load_print_meta: rope scaling     = linear
0.00.834.628 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.834.629 I llm_load_print_meta: freq_scale_train = 1
0.00.834.630 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.834.631 I llm_load_print_meta: rope_finetuned   = unknown
0.00.834.631 I llm_load_print_meta: ssm_d_conv       = 0
0.00.834.632 I llm_load_print_meta: ssm_d_inner      = 0
0.00.834.633 I llm_load_print_meta: ssm_d_state      = 0
0.00.834.633 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.834.644 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.834.648 I llm_load_print_meta: model type       = 2B
0.00.834.653 I llm_load_print_meta: model ftype      = Q8_0
0.00.834.653 I llm_load_print_meta: model params     = 2.51 B
0.00.834.654 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.834.655 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.834.655 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.834.655 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.834.656 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.834.663 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.834.664 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.834.665 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.834.672 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.834.673 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.834.674 I llm_load_print_meta: max token length = 93
0.00.907.840 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.907.850 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.914.124 I llama_new_context_with_model: n_seq_max     = 1
0.00.914.130 I llama_new_context_with_model: n_ctx         = 4096
0.00.914.130 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.914.130 I llama_new_context_with_model: n_batch       = 2048
0.00.914.131 I llama_new_context_with_model: n_ubatch      = 512
0.00.914.131 I llama_new_context_with_model: flash_attn    = 0
0.00.914.133 I llama_new_context_with_model: freq_base     = 10000.0
0.00.914.134 I llama_new_context_with_model: freq_scale    = 1
0.00.914.135 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.914.225 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.928.783 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.928.823 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.928.939 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.931.533 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.931.537 I llama_new_context_with_model: graph nodes  = 601
0.00.931.537 I llama_new_context_with_model: graph splits = 1
0.00.931.562 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.931.566 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.541.892 I main: llama threadpool init, n_threads = 4
0.01.541.907 I 
0.01.542.040 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.542.045 I 
0.01.542.289 I sampler seed: 3231235011
0.01.542.304 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.542.317 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.542.319 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.542.319 I 
 increamically. I cannot answer this question as it would require generating potentially harmful or inappropriate content. [end of text]


0.09.978.381 I llama_perf_sampler_print:    sampling time =      31.12 ms /    21 runs   (    1.48 ms per token,   674.76 tokens per second)
0.09.978.384 I llama_perf_context_print:        load time =    1540.95 ms
0.09.978.385 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.978.387 I llama_perf_context_print:        eval time =    8382.19 ms /    20 runs   (  419.11 ms per token,     2.39 tokens per second)
0.09.978.388 I llama_perf_context_print:       total time =    8436.50 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.925s
user	3m29.675s
sys	0m9.369s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4426 (96a1dc27)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186459.75 ms
main:    total time = 186459.75 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4426 (96a1dc27) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.000.866 I main: load the model and apply lora adapter, if any
0.00.023.371 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.382 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.472 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.485 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.486 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.491 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.493 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.494 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.496 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.498 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.500 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.508 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.513 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.515 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.517 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.519 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.963 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.593 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.702 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.712 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.714 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.715 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.716 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.718 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.729 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.737 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.739 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.741 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.742 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.744 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.752 I llama_model_loader: - type  f32:   37 tensors
0.00.348.754 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.755 I llama_model_loader: - type q6_K:   19 tensors
0.00.561.334 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.620.712 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.621.628 I llm_load_vocab: special tokens cache size = 5
0.00.826.038 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.826.117 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.826.125 I llm_load_print_meta: arch             = gemma
0.00.826.126 I llm_load_print_meta: vocab type       = SPM
0.00.826.127 I llm_load_print_meta: n_vocab          = 256000
0.00.826.130 I llm_load_print_meta: n_merges         = 0
0.00.826.131 I llm_load_print_meta: vocab_only       = 0
0.00.826.131 I llm_load_print_meta: n_ctx_train      = 8192
0.00.826.132 I llm_load_print_meta: n_embd           = 2048
0.00.826.133 I llm_load_print_meta: n_layer          = 18
0.00.826.214 I llm_load_print_meta: n_head           = 8
0.00.826.224 I llm_load_print_meta: n_head_kv        = 1
0.00.826.225 I llm_load_print_meta: n_rot            = 256
0.00.826.225 I llm_load_print_meta: n_swa            = 0
0.00.826.225 I llm_load_print_meta: n_embd_head_k    = 256
0.00.826.244 I llm_load_print_meta: n_embd_head_v    = 256
0.00.826.250 I llm_load_print_meta: n_gqa            = 8
0.00.826.256 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.826.266 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.826.268 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.826.270 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.826.271 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.826.272 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.826.273 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.826.280 I llm_load_print_meta: n_ff             = 16384
0.00.826.281 I llm_load_print_meta: n_expert         = 0
0.00.826.282 I llm_load_print_meta: n_expert_used    = 0
0.00.826.283 I llm_load_print_meta: causal attn      = 1
0.00.826.284 I llm_load_print_meta: pooling type     = 0
0.00.826.285 I llm_load_print_meta: rope type        = 2
0.00.826.286 I llm_load_print_meta: rope scaling     = linear
0.00.826.288 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.826.289 I llm_load_print_meta: freq_scale_train = 1
0.00.826.290 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.826.290 I llm_load_print_meta: rope_finetuned   = unknown
0.00.826.291 I llm_load_print_meta: ssm_d_conv       = 0
0.00.826.292 I llm_load_print_meta: ssm_d_inner      = 0
0.00.826.293 I llm_load_print_meta: ssm_d_state      = 0
0.00.826.294 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.826.295 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.826.298 I llm_load_print_meta: model type       = 2B
0.00.826.300 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.826.302 I llm_load_print_meta: model params     = 2.51 B
0.00.826.303 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.826.304 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.826.305 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.826.306 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.826.307 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.826.308 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.826.309 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.826.311 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.826.319 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.826.321 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.826.322 I llm_load_print_meta: max token length = 93
0.00.888.535 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.888.547 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.888.548 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.888.549 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.888.549 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.888.550 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.894.690 I llama_new_context_with_model: n_seq_max     = 1
0.00.894.698 I llama_new_context_with_model: n_ctx         = 4096
0.00.894.698 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.894.699 I llama_new_context_with_model: n_batch       = 2048
0.00.894.699 I llama_new_context_with_model: n_ubatch      = 512
0.00.894.700 I llama_new_context_with_model: flash_attn    = 0
0.00.894.702 I llama_new_context_with_model: freq_base     = 10000.0
0.00.894.703 I llama_new_context_with_model: freq_scale    = 1
0.00.894.703 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.894.793 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.909.252 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.909.290 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.909.415 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.912.029 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.912.033 I llama_new_context_with_model: graph nodes  = 601
0.00.912.034 I llama_new_context_with_model: graph splits = 1
0.00.912.059 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.912.063 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.493.502 I main: llama threadpool init, n_threads = 4
0.01.493.518 I 
0.01.493.646 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.493.650 I 
0.01.493.900 I sampler seed: 1177668139
0.01.493.916 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.493.929 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.493.929 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.493.930 I 
 increasively, and then stumbled. The stumble was so severe that it made him fall and hit his head on a rock.

What is the lesson that can

0.12.630.595 I llama_perf_sampler_print:    sampling time =      49.59 ms /    33 runs   (    1.50 ms per token,   665.40 tokens per second)
0.12.630.599 I llama_perf_context_print:        load time =    1492.55 ms
0.12.630.611 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.630.614 I llama_perf_context_print:        eval time =   11051.54 ms /    32 runs   (  345.36 ms per token,     2.90 tokens per second)
0.12.630.615 I llama_perf_context_print:       total time =   11137.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4426 (96a1dc27)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186609.24 ms
main:    total time = 186609.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 4426 (96a1dc27) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.000.845 I main: load the model and apply lora adapter, if any
0.00.023.300 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.401 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.415 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.417 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.421 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.425 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.426 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.427 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.428 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.430 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.436 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.438 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.439 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.441 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.442 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.484 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.097 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.155 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.163 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.164 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.166 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.167 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.169 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.170 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.174 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.175 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.184 I llama_model_loader: - type  f32:   37 tensors
0.00.351.186 I llama_model_loader: - type q4_K:  108 tensors
0.00.351.186 I llama_model_loader: - type q6_K:   19 tensors
0.00.569.481 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.630.443 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.631.390 I llm_load_vocab: special tokens cache size = 5
0.00.851.213 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.851.289 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.851.293 I llm_load_print_meta: arch             = gemma
0.00.851.294 I llm_load_print_meta: vocab type       = SPM
0.00.851.294 I llm_load_print_meta: n_vocab          = 256000
0.00.851.297 I llm_load_print_meta: n_merges         = 0
0.00.851.298 I llm_load_print_meta: vocab_only       = 0
0.00.851.298 I llm_load_print_meta: n_ctx_train      = 8192
0.00.851.298 I llm_load_print_meta: n_embd           = 2048
0.00.851.299 I llm_load_print_meta: n_layer          = 18
0.00.851.381 I llm_load_print_meta: n_head           = 8
0.00.851.388 I llm_load_print_meta: n_head_kv        = 1
0.00.851.389 I llm_load_print_meta: n_rot            = 256
0.00.851.390 I llm_load_print_meta: n_swa            = 0
0.00.851.390 I llm_load_print_meta: n_embd_head_k    = 256
0.00.851.395 I llm_load_print_meta: n_embd_head_v    = 256
0.00.851.400 I llm_load_print_meta: n_gqa            = 8
0.00.851.405 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.851.410 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.851.411 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.851.412 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.851.413 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.851.414 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.851.415 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.851.420 I llm_load_print_meta: n_ff             = 16384
0.00.851.421 I llm_load_print_meta: n_expert         = 0
0.00.851.421 I llm_load_print_meta: n_expert_used    = 0
0.00.851.422 I llm_load_print_meta: causal attn      = 1
0.00.851.423 I llm_load_print_meta: pooling type     = 0
0.00.851.423 I llm_load_print_meta: rope type        = 2
0.00.851.423 I llm_load_print_meta: rope scaling     = linear
0.00.851.425 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.851.425 I llm_load_print_meta: freq_scale_train = 1
0.00.851.427 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.851.427 I llm_load_print_meta: rope_finetuned   = unknown
0.00.851.428 I llm_load_print_meta: ssm_d_conv       = 0
0.00.851.429 I llm_load_print_meta: ssm_d_inner      = 0
0.00.851.429 I llm_load_print_meta: ssm_d_state      = 0
0.00.851.430 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.851.430 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.851.434 I llm_load_print_meta: model type       = 2B
0.00.851.436 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.851.436 I llm_load_print_meta: model params     = 2.51 B
0.00.851.437 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.851.438 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.851.438 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.851.439 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.851.440 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.851.440 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.851.441 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.851.442 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.851.449 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.851.450 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.851.450 I llm_load_print_meta: max token length = 93
0.00.911.864 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.917.925 I llama_new_context_with_model: n_seq_max     = 1
0.00.917.933 I llama_new_context_with_model: n_ctx         = 4096
0.00.917.933 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.917.933 I llama_new_context_with_model: n_batch       = 2048
0.00.917.934 I llama_new_context_with_model: n_ubatch      = 512
0.00.917.935 I llama_new_context_with_model: flash_attn    = 0
0.00.917.937 I llama_new_context_with_model: freq_base     = 10000.0
0.00.917.938 I llama_new_context_with_model: freq_scale    = 1
0.00.917.939 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.918.027 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.933.305 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.933.346 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.933.471 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.935.987 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.935.992 I llama_new_context_with_model: graph nodes  = 601
0.00.935.992 I llama_new_context_with_model: graph splits = 1
0.00.936.018 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.936.021 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.517.755 I main: llama threadpool init, n_threads = 4
0.01.517.770 I 
0.01.517.892 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.517.897 I 
0.01.518.131 I sampler seed: 3251823850
0.01.518.146 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.518.156 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.518.158 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.518.158 I 
 seconally.

I need help with a question about statistics.

**Question:** Calculate the mean, median, and mode of the following dataset:

1

0.12.673.235 I llama_perf_sampler_print:    sampling time =      49.61 ms /    33 runs   (    1.50 ms per token,   665.20 tokens per second)
0.12.673.238 I llama_perf_context_print:        load time =    1516.83 ms
0.12.673.239 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.673.240 I llama_perf_context_print:        eval time =   11069.92 ms /    32 runs   (  345.94 ms per token,     2.89 tokens per second)
0.12.673.241 I llama_perf_context_print:       total time =   11155.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.236s
user	46m46.701s
sys	0m6.359s
