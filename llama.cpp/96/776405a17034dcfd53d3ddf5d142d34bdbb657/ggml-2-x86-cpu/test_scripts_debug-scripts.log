+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 3907 (96776405) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.024.677 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.881 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.973 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.984 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.986 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.990 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.991 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.992 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.993 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.995 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.996 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.003 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.007 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.008 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.009 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.010 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.853 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.482 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.933 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.945 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.947 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.948 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.949 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.950 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.951 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.955 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.956 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.957 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.958 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.959 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.969 I llama_model_loader: - type  f32:   37 tensors
0.00.271.973 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.071 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.483.696 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.484.736 I llm_load_vocab: special tokens cache size = 5
0.00.581.017 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.581.079 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.581.081 I llm_load_print_meta: arch             = gemma
0.00.581.082 I llm_load_print_meta: vocab type       = SPM
0.00.581.083 I llm_load_print_meta: n_vocab          = 256000
0.00.581.085 I llm_load_print_meta: n_merges         = 0
0.00.581.086 I llm_load_print_meta: vocab_only       = 0
0.00.581.086 I llm_load_print_meta: n_ctx_train      = 8192
0.00.581.087 I llm_load_print_meta: n_embd           = 2048
0.00.581.087 I llm_load_print_meta: n_layer          = 18
0.00.581.151 I llm_load_print_meta: n_head           = 8
0.00.581.158 I llm_load_print_meta: n_head_kv        = 1
0.00.581.158 I llm_load_print_meta: n_rot            = 256
0.00.581.159 I llm_load_print_meta: n_swa            = 0
0.00.581.159 I llm_load_print_meta: n_embd_head_k    = 256
0.00.581.160 I llm_load_print_meta: n_embd_head_v    = 256
0.00.581.164 I llm_load_print_meta: n_gqa            = 8
0.00.581.169 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.581.174 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.581.175 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.581.177 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.581.178 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.581.178 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.581.179 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.581.185 I llm_load_print_meta: n_ff             = 16384
0.00.581.186 I llm_load_print_meta: n_expert         = 0
0.00.581.186 I llm_load_print_meta: n_expert_used    = 0
0.00.581.186 I llm_load_print_meta: causal attn      = 1
0.00.581.186 I llm_load_print_meta: pooling type     = 0
0.00.581.187 I llm_load_print_meta: rope type        = 2
0.00.581.187 I llm_load_print_meta: rope scaling     = linear
0.00.581.189 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.581.189 I llm_load_print_meta: freq_scale_train = 1
0.00.581.190 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.581.190 I llm_load_print_meta: rope_finetuned   = unknown
0.00.581.190 I llm_load_print_meta: ssm_d_conv       = 0
0.00.581.191 I llm_load_print_meta: ssm_d_inner      = 0
0.00.581.191 I llm_load_print_meta: ssm_d_state      = 0
0.00.581.192 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.581.192 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.581.193 I llm_load_print_meta: model type       = 2B
0.00.581.194 I llm_load_print_meta: model ftype      = Q8_0
0.00.581.195 I llm_load_print_meta: model params     = 2.51 B
0.00.581.195 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.581.196 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.581.196 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.581.197 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.581.197 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.581.198 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.581.198 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.581.199 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.581.205 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.581.206 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.581.206 I llm_load_print_meta: max token length = 93
0.00.581.377 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.681.843 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.681.855 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.681.856 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.681.857 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.681.858 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.681.858 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.687.625 I llama_new_context_with_model: n_ctx      = 8192
0.00.687.633 I llama_new_context_with_model: n_batch    = 2048
0.00.687.633 I llama_new_context_with_model: n_ubatch   = 512
0.00.687.634 I llama_new_context_with_model: flash_attn = 0
0.00.687.638 I llama_new_context_with_model: freq_base  = 10000.0
0.00.687.639 I llama_new_context_with_model: freq_scale = 1
0.00.717.337 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.717.380 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.717.492 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.718.924 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.718.929 I llama_new_context_with_model: graph nodes  = 601
0.00.718.929 I llama_new_context_with_model: graph splits = 1
0.00.718.946 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.332.150 I main: llama threadpool init, n_threads = 4
0.01.332.162 I 
0.01.332.269 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.332.273 I 
0.01.332.450 I sampler seed: 2989327271
0.01.332.460 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.332.467 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.332.467 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.332.469 I 
 increasities for the following.
$$3x + 5 = 19$$

$$2y - 3 = 5$$

$$4

0.14.935.846 I llama_perf_sampler_print:    sampling time =      49.03 ms /    33 runs   (    1.49 ms per token,   673.07 tokens per second)
0.14.935.863 I llama_perf_context_print:        load time =    1329.26 ms
0.14.935.865 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.935.866 I llama_perf_context_print:        eval time =   13521.37 ms /    32 runs   (  422.54 ms per token,     2.37 tokens per second)
0.14.935.868 I llama_perf_context_print:       total time =   13603.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 3907 (96776405) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.002.773 I main: load the model and apply lora adapter, if any
0.00.025.000 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.111 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.126 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.127 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.139 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.141 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.142 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.144 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.145 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.146 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.153 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.154 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.155 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.156 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.157 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.170 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.596 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.040 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.053 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.054 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.056 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.057 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.058 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.059 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.063 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.064 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.066 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.066 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.271.068 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.078 I llama_model_loader: - type  f32:   37 tensors
0.00.271.082 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.553 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.472.964 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.474.094 I llm_load_vocab: special tokens cache size = 5
0.00.569.731 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.569.796 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.569.797 I llm_load_print_meta: arch             = gemma
0.00.569.798 I llm_load_print_meta: vocab type       = SPM
0.00.569.798 I llm_load_print_meta: n_vocab          = 256000
0.00.569.801 I llm_load_print_meta: n_merges         = 0
0.00.569.802 I llm_load_print_meta: vocab_only       = 0
0.00.569.802 I llm_load_print_meta: n_ctx_train      = 8192
0.00.569.802 I llm_load_print_meta: n_embd           = 2048
0.00.569.803 I llm_load_print_meta: n_layer          = 18
0.00.569.882 I llm_load_print_meta: n_head           = 8
0.00.569.891 I llm_load_print_meta: n_head_kv        = 1
0.00.569.892 I llm_load_print_meta: n_rot            = 256
0.00.569.892 I llm_load_print_meta: n_swa            = 0
0.00.569.892 I llm_load_print_meta: n_embd_head_k    = 256
0.00.569.893 I llm_load_print_meta: n_embd_head_v    = 256
0.00.569.897 I llm_load_print_meta: n_gqa            = 8
0.00.569.902 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.569.907 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.569.908 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.569.910 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.569.910 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.569.928 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.569.936 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.569.942 I llm_load_print_meta: n_ff             = 16384
0.00.569.943 I llm_load_print_meta: n_expert         = 0
0.00.569.943 I llm_load_print_meta: n_expert_used    = 0
0.00.569.951 I llm_load_print_meta: causal attn      = 1
0.00.569.952 I llm_load_print_meta: pooling type     = 0
0.00.569.952 I llm_load_print_meta: rope type        = 2
0.00.569.953 I llm_load_print_meta: rope scaling     = linear
0.00.569.957 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.569.958 I llm_load_print_meta: freq_scale_train = 1
0.00.569.959 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.569.960 I llm_load_print_meta: rope_finetuned   = unknown
0.00.569.960 I llm_load_print_meta: ssm_d_conv       = 0
0.00.569.960 I llm_load_print_meta: ssm_d_inner      = 0
0.00.569.961 I llm_load_print_meta: ssm_d_state      = 0
0.00.569.961 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.569.967 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.569.968 I llm_load_print_meta: model type       = 2B
0.00.569.969 I llm_load_print_meta: model ftype      = Q8_0
0.00.569.970 I llm_load_print_meta: model params     = 2.51 B
0.00.569.971 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.569.971 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.569.972 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.569.972 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.569.973 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.569.980 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.569.981 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.569.984 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.569.990 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.569.992 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.569.992 I llm_load_print_meta: max token length = 93
0.00.570.157 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.664.462 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.670.129 I llama_new_context_with_model: n_ctx      = 8192
0.00.670.135 I llama_new_context_with_model: n_batch    = 2048
0.00.670.136 I llama_new_context_with_model: n_ubatch   = 512
0.00.670.137 I llama_new_context_with_model: flash_attn = 0
0.00.670.139 I llama_new_context_with_model: freq_base  = 10000.0
0.00.670.140 I llama_new_context_with_model: freq_scale = 1
0.00.700.268 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.700.316 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.700.426 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.701.789 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.701.794 I llama_new_context_with_model: graph nodes  = 601
0.00.701.794 I llama_new_context_with_model: graph splits = 1
0.00.701.809 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.351.137 I main: llama threadpool init, n_threads = 4
0.01.351.149 I 
0.01.351.253 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.351.257 I 
0.01.351.422 I sampler seed: 1255137638
0.01.351.432 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.351.453 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.351.457 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.351.458 I 
 increasities. [end of text]


0.03.028.797 I llama_perf_sampler_print:    sampling time =       6.24 ms /     5 runs   (    1.25 ms per token,   801.15 tokens per second)
0.03.028.800 I llama_perf_context_print:        load time =    1348.27 ms
0.03.028.801 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.028.802 I llama_perf_context_print:        eval time =    1665.41 ms /     4 runs   (  416.35 ms per token,     2.40 tokens per second)
0.03.028.803 I llama_perf_context_print:       total time =    1677.67 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 3907 (96776405) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.024.596 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.812 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.910 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.923 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.924 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.929 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.933 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.934 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.935 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.936 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.938 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.948 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.949 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.950 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.952 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.953 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.458 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.761 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.178 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.188 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.189 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.190 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.191 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.192 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.193 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.197 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.198 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.199 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.212 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.271.216 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.226 I llama_model_loader: - type  f32:   37 tensors
0.00.271.230 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.074 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.472.315 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.473.392 I llm_load_vocab: special tokens cache size = 5
0.00.569.389 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.569.454 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.569.458 I llm_load_print_meta: arch             = gemma
0.00.569.459 I llm_load_print_meta: vocab type       = SPM
0.00.569.460 I llm_load_print_meta: n_vocab          = 256000
0.00.569.462 I llm_load_print_meta: n_merges         = 0
0.00.569.463 I llm_load_print_meta: vocab_only       = 0
0.00.569.463 I llm_load_print_meta: n_ctx_train      = 8192
0.00.569.464 I llm_load_print_meta: n_embd           = 2048
0.00.569.464 I llm_load_print_meta: n_layer          = 18
0.00.569.528 I llm_load_print_meta: n_head           = 8
0.00.569.537 I llm_load_print_meta: n_head_kv        = 1
0.00.569.537 I llm_load_print_meta: n_rot            = 256
0.00.569.538 I llm_load_print_meta: n_swa            = 0
0.00.569.538 I llm_load_print_meta: n_embd_head_k    = 256
0.00.569.540 I llm_load_print_meta: n_embd_head_v    = 256
0.00.569.545 I llm_load_print_meta: n_gqa            = 8
0.00.569.550 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.569.556 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.569.560 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.569.561 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.569.561 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.569.562 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.569.562 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.569.567 I llm_load_print_meta: n_ff             = 16384
0.00.569.567 I llm_load_print_meta: n_expert         = 0
0.00.569.568 I llm_load_print_meta: n_expert_used    = 0
0.00.569.569 I llm_load_print_meta: causal attn      = 1
0.00.569.569 I llm_load_print_meta: pooling type     = 0
0.00.569.570 I llm_load_print_meta: rope type        = 2
0.00.569.570 I llm_load_print_meta: rope scaling     = linear
0.00.569.572 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.569.573 I llm_load_print_meta: freq_scale_train = 1
0.00.569.573 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.569.573 I llm_load_print_meta: rope_finetuned   = unknown
0.00.569.574 I llm_load_print_meta: ssm_d_conv       = 0
0.00.569.577 I llm_load_print_meta: ssm_d_inner      = 0
0.00.569.577 I llm_load_print_meta: ssm_d_state      = 0
0.00.569.577 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.569.578 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.569.578 I llm_load_print_meta: model type       = 2B
0.00.569.579 I llm_load_print_meta: model ftype      = Q8_0
0.00.569.580 I llm_load_print_meta: model params     = 2.51 B
0.00.569.580 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.569.581 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.569.581 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.569.582 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.569.582 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.569.583 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.569.584 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.569.584 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.569.590 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.569.591 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.569.591 I llm_load_print_meta: max token length = 93
0.00.569.754 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.648.429 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.648.441 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.648.442 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.648.443 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.648.443 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.648.444 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.654.066 I llama_new_context_with_model: n_ctx      = 8192
0.00.654.074 I llama_new_context_with_model: n_batch    = 2048
0.00.654.074 I llama_new_context_with_model: n_ubatch   = 512
0.00.654.074 I llama_new_context_with_model: flash_attn = 0
0.00.654.078 I llama_new_context_with_model: freq_base  = 10000.0
0.00.654.079 I llama_new_context_with_model: freq_scale = 1
0.00.684.300 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.684.344 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.684.454 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.685.816 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.685.821 I llama_new_context_with_model: graph nodes  = 601
0.00.685.821 I llama_new_context_with_model: graph splits = 1
0.00.685.837 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.300.817 I main: llama threadpool init, n_threads = 4
0.01.300.829 I 
0.01.300.937 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.300.941 I 
0.01.301.105 I sampler seed: 1176336111
0.01.301.115 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.301.121 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.301.122 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.301.123 I 
 seconally.

I cannot answer this question as it contains inappropriate content. I am not programmed to provide sexually suggestive or inappropriate responses. [end of text]


0.13.214.769 I llama_perf_sampler_print:    sampling time =      43.11 ms /    29 runs   (    1.49 ms per token,   672.71 tokens per second)
0.13.214.772 I llama_perf_context_print:        load time =    1297.95 ms
0.13.214.773 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.214.775 I llama_perf_context_print:        eval time =   11841.36 ms /    28 runs   (  422.91 ms per token,     2.36 tokens per second)
0.13.214.776 I llama_perf_context_print:       total time =   11913.96 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 3907 (96776405) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.002.805 I main: load the model and apply lora adapter, if any
0.00.024.634 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.833 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.923 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.933 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.935 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.939 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.940 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.941 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.942 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.943 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.945 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.952 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.956 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.957 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.957 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.958 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.803 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.430 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.747 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.755 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.756 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.757 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.758 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.759 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.761 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.764 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.765 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.766 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.767 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.768 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.776 I llama_model_loader: - type  f32:   37 tensors
0.00.271.788 I llama_model_loader: - type q8_0:  127 tensors
0.00.425.679 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.454.066 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.455.080 I llm_load_vocab: special tokens cache size = 5
0.00.550.931 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.550.993 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.550.997 I llm_load_print_meta: arch             = gemma
0.00.550.998 I llm_load_print_meta: vocab type       = SPM
0.00.550.999 I llm_load_print_meta: n_vocab          = 256000
0.00.551.001 I llm_load_print_meta: n_merges         = 0
0.00.551.002 I llm_load_print_meta: vocab_only       = 0
0.00.551.002 I llm_load_print_meta: n_ctx_train      = 8192
0.00.551.003 I llm_load_print_meta: n_embd           = 2048
0.00.551.003 I llm_load_print_meta: n_layer          = 18
0.00.551.068 I llm_load_print_meta: n_head           = 8
0.00.551.078 I llm_load_print_meta: n_head_kv        = 1
0.00.551.079 I llm_load_print_meta: n_rot            = 256
0.00.551.079 I llm_load_print_meta: n_swa            = 0
0.00.551.079 I llm_load_print_meta: n_embd_head_k    = 256
0.00.551.080 I llm_load_print_meta: n_embd_head_v    = 256
0.00.551.084 I llm_load_print_meta: n_gqa            = 8
0.00.551.089 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.551.094 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.551.096 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.551.097 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.551.098 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.551.098 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.551.099 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.551.104 I llm_load_print_meta: n_ff             = 16384
0.00.551.105 I llm_load_print_meta: n_expert         = 0
0.00.551.105 I llm_load_print_meta: n_expert_used    = 0
0.00.551.113 I llm_load_print_meta: causal attn      = 1
0.00.551.114 I llm_load_print_meta: pooling type     = 0
0.00.551.114 I llm_load_print_meta: rope type        = 2
0.00.551.127 I llm_load_print_meta: rope scaling     = linear
0.00.551.129 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.551.129 I llm_load_print_meta: freq_scale_train = 1
0.00.551.130 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.551.139 I llm_load_print_meta: rope_finetuned   = unknown
0.00.551.140 I llm_load_print_meta: ssm_d_conv       = 0
0.00.551.140 I llm_load_print_meta: ssm_d_inner      = 0
0.00.551.141 I llm_load_print_meta: ssm_d_state      = 0
0.00.551.141 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.551.141 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.551.142 I llm_load_print_meta: model type       = 2B
0.00.551.151 I llm_load_print_meta: model ftype      = Q8_0
0.00.551.152 I llm_load_print_meta: model params     = 2.51 B
0.00.551.153 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.551.153 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.551.154 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.551.154 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.551.154 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.551.163 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.551.163 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.551.164 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.551.171 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.551.172 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.551.173 I llm_load_print_meta: max token length = 93
0.00.551.340 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.622.418 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.622.431 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.628.189 I llama_new_context_with_model: n_ctx      = 8192
0.00.628.197 I llama_new_context_with_model: n_batch    = 2048
0.00.628.198 I llama_new_context_with_model: n_ubatch   = 512
0.00.628.198 I llama_new_context_with_model: flash_attn = 0
0.00.628.202 I llama_new_context_with_model: freq_base  = 10000.0
0.00.628.203 I llama_new_context_with_model: freq_scale = 1
0.00.658.613 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.658.655 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.658.769 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.660.173 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.660.178 I llama_new_context_with_model: graph nodes  = 601
0.00.660.178 I llama_new_context_with_model: graph splits = 1
0.00.660.195 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.278.350 I main: llama threadpool init, n_threads = 4
0.01.278.361 I 
0.01.278.467 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.278.471 I 
0.01.278.638 I sampler seed: 889383589
0.01.278.648 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.278.655 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.278.656 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.278.664 I 
 increasively.

I'm feeling a bit overwhelmed with all the tasks at hand. I need to prioritize and focus on the most important things.

**

0.14.891.937 I llama_perf_sampler_print:    sampling time =      48.97 ms /    33 runs   (    1.48 ms per token,   673.83 tokens per second)
0.14.891.939 I llama_perf_context_print:        load time =    1275.46 ms
0.14.891.941 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.891.942 I llama_perf_context_print:        eval time =   13531.04 ms /    32 runs   (  422.85 ms per token,     2.36 tokens per second)
0.14.891.957 I llama_perf_context_print:       total time =   13613.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m56.937s
user	2m55.900s
sys	0m9.632s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3907 (96776405)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199342.32 ms
main:    total time = 199342.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 3907 (96776405) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.002.816 I main: load the model and apply lora adapter, if any
0.00.024.864 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.071 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.171 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.183 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.185 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.190 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.191 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.193 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.194 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.195 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.196 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.203 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.207 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.208 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.209 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.210 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.740 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.636 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.101 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.112 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.113 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.114 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.115 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.116 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.118 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.122 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.123 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.124 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.127 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.129 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.139 I llama_model_loader: - type  f32:   37 tensors
0.00.275.168 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.170 I llama_model_loader: - type q6_K:   19 tensors
0.00.443.022 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.471.970 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.472.966 I llm_load_vocab: special tokens cache size = 5
0.00.568.411 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.568.475 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.568.480 I llm_load_print_meta: arch             = gemma
0.00.568.480 I llm_load_print_meta: vocab type       = SPM
0.00.568.481 I llm_load_print_meta: n_vocab          = 256000
0.00.568.483 I llm_load_print_meta: n_merges         = 0
0.00.568.484 I llm_load_print_meta: vocab_only       = 0
0.00.568.484 I llm_load_print_meta: n_ctx_train      = 8192
0.00.568.485 I llm_load_print_meta: n_embd           = 2048
0.00.568.485 I llm_load_print_meta: n_layer          = 18
0.00.568.548 I llm_load_print_meta: n_head           = 8
0.00.568.558 I llm_load_print_meta: n_head_kv        = 1
0.00.568.558 I llm_load_print_meta: n_rot            = 256
0.00.568.559 I llm_load_print_meta: n_swa            = 0
0.00.568.559 I llm_load_print_meta: n_embd_head_k    = 256
0.00.568.559 I llm_load_print_meta: n_embd_head_v    = 256
0.00.568.564 I llm_load_print_meta: n_gqa            = 8
0.00.568.568 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.568.573 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.568.575 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.568.576 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.568.576 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.568.577 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.568.577 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.568.582 I llm_load_print_meta: n_ff             = 16384
0.00.568.584 I llm_load_print_meta: n_expert         = 0
0.00.568.584 I llm_load_print_meta: n_expert_used    = 0
0.00.568.596 I llm_load_print_meta: causal attn      = 1
0.00.568.597 I llm_load_print_meta: pooling type     = 0
0.00.568.611 I llm_load_print_meta: rope type        = 2
0.00.568.614 I llm_load_print_meta: rope scaling     = linear
0.00.568.616 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.568.616 I llm_load_print_meta: freq_scale_train = 1
0.00.568.617 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.568.617 I llm_load_print_meta: rope_finetuned   = unknown
0.00.568.617 I llm_load_print_meta: ssm_d_conv       = 0
0.00.568.618 I llm_load_print_meta: ssm_d_inner      = 0
0.00.568.618 I llm_load_print_meta: ssm_d_state      = 0
0.00.568.619 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.568.619 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.568.620 I llm_load_print_meta: model type       = 2B
0.00.568.621 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.568.621 I llm_load_print_meta: model params     = 2.51 B
0.00.568.622 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.568.622 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.568.632 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.568.639 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.568.640 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.568.648 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.568.648 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.568.649 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.568.655 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.568.656 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.568.657 I llm_load_print_meta: max token length = 93
0.00.568.824 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.630.150 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.630.158 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.630.159 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.630.159 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.630.160 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.630.160 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.635.660 I llama_new_context_with_model: n_ctx      = 8192
0.00.635.668 I llama_new_context_with_model: n_batch    = 2048
0.00.635.669 I llama_new_context_with_model: n_ubatch   = 512
0.00.635.669 I llama_new_context_with_model: flash_attn = 0
0.00.635.672 I llama_new_context_with_model: freq_base  = 10000.0
0.00.635.673 I llama_new_context_with_model: freq_scale = 1
0.00.666.620 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.666.669 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.666.787 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.668.280 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.668.285 I llama_new_context_with_model: graph nodes  = 601
0.00.668.285 I llama_new_context_with_model: graph splits = 1
0.00.668.302 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.251.690 I main: llama threadpool init, n_threads = 4
0.01.251.702 I 
0.01.251.808 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.251.812 I 
0.01.251.974 I sampler seed: 2571486529
0.01.251.985 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.251.991 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.251.992 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.251.993 I 
 susceptivity.

**Vulnerability**

Vulnerability refers to the susceptibility of an entity to harm or damage. It encompasses a range of factors, including:

0.12.191.683 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.71 tokens per second)
0.12.191.686 I llama_perf_context_print:        load time =    1248.79 ms
0.12.191.688 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.191.689 I llama_perf_context_print:        eval time =   10856.75 ms /    32 runs   (  339.27 ms per token,     2.95 tokens per second)
0.12.191.710 I llama_perf_context_print:       total time =   10940.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3907 (96776405)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199608.57 ms
main:    total time = 199608.57 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.684 I build: 3907 (96776405) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.896 I main: llama backend init
0.00.002.832 I main: load the model and apply lora adapter, if any
0.00.025.039 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.138 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.153 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.157 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.162 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.164 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.165 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.167 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.168 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.168 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.175 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.176 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.177 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.178 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.179 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.063 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.126 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.250 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.257 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.259 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.260 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.261 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.262 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.263 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.267 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.268 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.276 I llama_model_loader: - type  f32:   37 tensors
0.00.270.280 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.281 I llama_model_loader: - type q6_K:   19 tensors
0.00.419.999 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.444.880 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.445.905 I llm_load_vocab: special tokens cache size = 5
0.00.541.421 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.541.482 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.541.483 I llm_load_print_meta: arch             = gemma
0.00.541.484 I llm_load_print_meta: vocab type       = SPM
0.00.541.485 I llm_load_print_meta: n_vocab          = 256000
0.00.541.487 I llm_load_print_meta: n_merges         = 0
0.00.541.489 I llm_load_print_meta: vocab_only       = 0
0.00.541.489 I llm_load_print_meta: n_ctx_train      = 8192
0.00.541.489 I llm_load_print_meta: n_embd           = 2048
0.00.541.490 I llm_load_print_meta: n_layer          = 18
0.00.541.555 I llm_load_print_meta: n_head           = 8
0.00.541.562 I llm_load_print_meta: n_head_kv        = 1
0.00.541.562 I llm_load_print_meta: n_rot            = 256
0.00.541.563 I llm_load_print_meta: n_swa            = 0
0.00.541.563 I llm_load_print_meta: n_embd_head_k    = 256
0.00.541.563 I llm_load_print_meta: n_embd_head_v    = 256
0.00.541.568 I llm_load_print_meta: n_gqa            = 8
0.00.541.573 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.541.578 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.541.579 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.541.581 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.541.581 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.541.606 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.541.608 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.541.615 I llm_load_print_meta: n_ff             = 16384
0.00.541.615 I llm_load_print_meta: n_expert         = 0
0.00.541.616 I llm_load_print_meta: n_expert_used    = 0
0.00.541.616 I llm_load_print_meta: causal attn      = 1
0.00.541.616 I llm_load_print_meta: pooling type     = 0
0.00.541.617 I llm_load_print_meta: rope type        = 2
0.00.541.626 I llm_load_print_meta: rope scaling     = linear
0.00.541.628 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.541.628 I llm_load_print_meta: freq_scale_train = 1
0.00.541.629 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.541.630 I llm_load_print_meta: rope_finetuned   = unknown
0.00.541.630 I llm_load_print_meta: ssm_d_conv       = 0
0.00.541.630 I llm_load_print_meta: ssm_d_inner      = 0
0.00.541.631 I llm_load_print_meta: ssm_d_state      = 0
0.00.541.631 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.541.632 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.541.633 I llm_load_print_meta: model type       = 2B
0.00.541.641 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.541.643 I llm_load_print_meta: model params     = 2.51 B
0.00.541.643 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.541.643 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.541.644 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.541.645 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.541.645 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.541.646 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.541.647 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.541.648 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.541.653 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.541.655 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.541.655 I llm_load_print_meta: max token length = 93
0.00.541.827 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.599.824 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.605.482 I llama_new_context_with_model: n_ctx      = 8192
0.00.605.490 I llama_new_context_with_model: n_batch    = 2048
0.00.605.490 I llama_new_context_with_model: n_ubatch   = 512
0.00.605.491 I llama_new_context_with_model: flash_attn = 0
0.00.605.493 I llama_new_context_with_model: freq_base  = 10000.0
0.00.605.494 I llama_new_context_with_model: freq_scale = 1
0.00.635.127 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.635.173 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.635.289 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.636.679 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.636.684 I llama_new_context_with_model: graph nodes  = 601
0.00.636.685 I llama_new_context_with_model: graph splits = 1
0.00.636.701 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.214.130 I main: llama threadpool init, n_threads = 4
0.01.214.142 I 
0.01.214.251 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.214.255 I 
0.01.214.424 I sampler seed: 2387813548
0.01.214.434 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.214.440 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.214.441 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.214.441 I 
 seconally with a smile. "Let's dance, shall we?"

The music swelled, and the couple danced, their movements smooth and graceful. They

0.12.249.379 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.00 tokens per second)
0.12.249.383 I llama_perf_context_print:        load time =    1211.21 ms
0.12.249.385 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.249.387 I llama_perf_context_print:        eval time =   10953.61 ms /    32 runs   (  342.30 ms per token,     2.92 tokens per second)
0.12.249.388 I llama_perf_context_print:       total time =   11035.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.339s
user	50m12.669s
sys	0m6.506s
