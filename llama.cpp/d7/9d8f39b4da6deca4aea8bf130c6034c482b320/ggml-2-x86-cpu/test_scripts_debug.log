+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.693 I build: 4393 (d79d8f39) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.898 I main: llama backend init
0.00.000.907 I main: load the model and apply lora adapter, if any
0.00.023.592 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.604 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.699 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.713 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.717 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.722 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.724 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.726 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.727 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.728 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.730 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.736 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.738 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.739 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.740 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.742 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.237.333 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.339.770 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.363.908 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.363.919 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.363.921 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.363.922 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.363.924 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.363.926 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.363.927 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.363.931 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.363.932 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.363.933 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.363.935 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.363.938 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.363.948 I llama_model_loader: - type  f32:   37 tensors
0.00.363.951 I llama_model_loader: - type q8_0:  127 tensors
0.00.605.286 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.676.181 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.677.224 I llm_load_vocab: special tokens cache size = 5
0.00.896.494 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.896.565 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.896.570 I llm_load_print_meta: arch             = gemma
0.00.896.571 I llm_load_print_meta: vocab type       = SPM
0.00.896.572 I llm_load_print_meta: n_vocab          = 256000
0.00.896.574 I llm_load_print_meta: n_merges         = 0
0.00.896.574 I llm_load_print_meta: vocab_only       = 0
0.00.896.575 I llm_load_print_meta: n_ctx_train      = 8192
0.00.896.575 I llm_load_print_meta: n_embd           = 2048
0.00.896.576 I llm_load_print_meta: n_layer          = 18
0.00.896.643 I llm_load_print_meta: n_head           = 8
0.00.896.653 I llm_load_print_meta: n_head_kv        = 1
0.00.896.653 I llm_load_print_meta: n_rot            = 256
0.00.896.654 I llm_load_print_meta: n_swa            = 0
0.00.896.654 I llm_load_print_meta: n_embd_head_k    = 256
0.00.896.654 I llm_load_print_meta: n_embd_head_v    = 256
0.00.896.659 I llm_load_print_meta: n_gqa            = 8
0.00.896.663 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.896.668 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.896.670 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.896.672 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.896.672 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.896.673 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.896.673 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.896.680 I llm_load_print_meta: n_ff             = 16384
0.00.896.680 I llm_load_print_meta: n_expert         = 0
0.00.896.681 I llm_load_print_meta: n_expert_used    = 0
0.00.896.681 I llm_load_print_meta: causal attn      = 1
0.00.896.682 I llm_load_print_meta: pooling type     = 0
0.00.896.683 I llm_load_print_meta: rope type        = 2
0.00.896.683 I llm_load_print_meta: rope scaling     = linear
0.00.896.685 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.896.686 I llm_load_print_meta: freq_scale_train = 1
0.00.896.687 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.896.687 I llm_load_print_meta: rope_finetuned   = unknown
0.00.896.687 I llm_load_print_meta: ssm_d_conv       = 0
0.00.896.689 I llm_load_print_meta: ssm_d_inner      = 0
0.00.896.689 I llm_load_print_meta: ssm_d_state      = 0
0.00.896.690 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.896.691 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.896.692 I llm_load_print_meta: model type       = 2B
0.00.896.693 I llm_load_print_meta: model ftype      = Q8_0
0.00.896.694 I llm_load_print_meta: model params     = 2.51 B
0.00.896.695 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.896.696 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.896.697 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.896.698 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.896.698 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.896.699 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.896.700 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.896.700 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.896.706 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.896.707 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.896.707 I llm_load_print_meta: max token length = 93
0.00.998.595 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.998.608 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.998.608 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.998.609 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.998.610 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.998.611 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.004.659 I llama_new_context_with_model: n_seq_max     = 1
0.01.004.666 I llama_new_context_with_model: n_ctx         = 4096
0.01.004.666 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.004.667 I llama_new_context_with_model: n_batch       = 2048
0.01.004.667 I llama_new_context_with_model: n_ubatch      = 512
0.01.004.668 I llama_new_context_with_model: flash_attn    = 0
0.01.004.671 I llama_new_context_with_model: freq_base     = 10000.0
0.01.004.671 I llama_new_context_with_model: freq_scale    = 1
0.01.004.672 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.004.761 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.01.020.111 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.020.154 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.020.273 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.022.997 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.023.001 I llama_new_context_with_model: graph nodes  = 601
0.01.023.001 I llama_new_context_with_model: graph splits = 1
0.01.023.026 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.023.029 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.632.424 I main: llama threadpool init, n_threads = 4
0.01.632.440 I 
0.01.632.567 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.632.571 I 
0.01.632.816 I sampler seed: 553974057
0.01.632.830 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.632.840 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.632.844 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.632.844 I 
 increadibly with a new song, "In the Shadows."

**In the Shadows**

(Verse 1)
Shadows crawl and whispers rise,


0.15.098.594 I llama_perf_sampler_print:    sampling time =      49.66 ms /    33 runs   (    1.50 ms per token,   664.51 tokens per second)
0.15.098.610 I llama_perf_context_print:        load time =    1631.42 ms
0.15.098.612 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.098.614 I llama_perf_context_print:        eval time =   13375.30 ms /    32 runs   (  417.98 ms per token,     2.39 tokens per second)
0.15.098.615 I llama_perf_context_print:       total time =   13466.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.691 I build: 4393 (d79d8f39) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.895 I main: llama backend init
0.00.000.904 I main: load the model and apply lora adapter, if any
0.00.023.640 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.747 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.765 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.770 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.776 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.777 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.779 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.780 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.781 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.783 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.791 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.795 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.797 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.798 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.800 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.246.554 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.349.101 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.373.245 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.373.259 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.373.260 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.373.262 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.373.263 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.373.265 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.373.266 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.373.270 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.373.272 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.373.273 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.373.274 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.373.276 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.373.284 I llama_model_loader: - type  f32:   37 tensors
0.00.373.287 I llama_model_loader: - type q8_0:  127 tensors
0.00.618.067 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.690.650 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.691.722 I llm_load_vocab: special tokens cache size = 5
0.00.907.488 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.907.560 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.907.561 I llm_load_print_meta: arch             = gemma
0.00.907.562 I llm_load_print_meta: vocab type       = SPM
0.00.907.563 I llm_load_print_meta: n_vocab          = 256000
0.00.907.565 I llm_load_print_meta: n_merges         = 0
0.00.907.566 I llm_load_print_meta: vocab_only       = 0
0.00.907.566 I llm_load_print_meta: n_ctx_train      = 8192
0.00.907.567 I llm_load_print_meta: n_embd           = 2048
0.00.907.567 I llm_load_print_meta: n_layer          = 18
0.00.907.634 I llm_load_print_meta: n_head           = 8
0.00.907.641 I llm_load_print_meta: n_head_kv        = 1
0.00.907.642 I llm_load_print_meta: n_rot            = 256
0.00.907.642 I llm_load_print_meta: n_swa            = 0
0.00.907.643 I llm_load_print_meta: n_embd_head_k    = 256
0.00.907.643 I llm_load_print_meta: n_embd_head_v    = 256
0.00.907.663 I llm_load_print_meta: n_gqa            = 8
0.00.907.668 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.907.673 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.907.674 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.907.676 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.907.676 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.907.676 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.907.677 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.907.682 I llm_load_print_meta: n_ff             = 16384
0.00.907.682 I llm_load_print_meta: n_expert         = 0
0.00.907.683 I llm_load_print_meta: n_expert_used    = 0
0.00.907.684 I llm_load_print_meta: causal attn      = 1
0.00.907.684 I llm_load_print_meta: pooling type     = 0
0.00.907.685 I llm_load_print_meta: rope type        = 2
0.00.907.686 I llm_load_print_meta: rope scaling     = linear
0.00.907.687 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.907.688 I llm_load_print_meta: freq_scale_train = 1
0.00.907.688 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.907.689 I llm_load_print_meta: rope_finetuned   = unknown
0.00.907.689 I llm_load_print_meta: ssm_d_conv       = 0
0.00.907.689 I llm_load_print_meta: ssm_d_inner      = 0
0.00.907.690 I llm_load_print_meta: ssm_d_state      = 0
0.00.907.691 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.907.691 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.907.692 I llm_load_print_meta: model type       = 2B
0.00.907.692 I llm_load_print_meta: model ftype      = Q8_0
0.00.907.693 I llm_load_print_meta: model params     = 2.51 B
0.00.907.694 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.907.694 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.907.695 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.907.695 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.907.696 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.907.696 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.907.697 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.907.698 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.907.704 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.907.705 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.907.705 I llm_load_print_meta: max token length = 93
0.01.002.608 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.008.723 I llama_new_context_with_model: n_seq_max     = 1
0.01.008.732 I llama_new_context_with_model: n_ctx         = 4096
0.01.008.732 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.008.733 I llama_new_context_with_model: n_batch       = 2048
0.01.008.733 I llama_new_context_with_model: n_ubatch      = 512
0.01.008.734 I llama_new_context_with_model: flash_attn    = 0
0.01.008.737 I llama_new_context_with_model: freq_base     = 10000.0
0.01.008.738 I llama_new_context_with_model: freq_scale    = 1
0.01.008.748 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.008.842 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.01.024.940 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.024.986 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.025.107 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.027.782 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.027.786 I llama_new_context_with_model: graph nodes  = 601
0.01.027.786 I llama_new_context_with_model: graph splits = 1
0.01.027.810 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.027.813 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.642.288 I main: llama threadpool init, n_threads = 4
0.01.642.305 I 
0.01.642.428 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.642.432 I 
0.01.642.665 I sampler seed: 3741407700
0.01.642.678 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.642.687 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.642.690 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.642.690 I 
 seconary structure of the paragraph:

**Introduction**
- Introduce the concept of the human mind.
- Highlight the complexity and interconnectedness of the mind

0.15.191.635 I llama_perf_sampler_print:    sampling time =      49.53 ms /    33 runs   (    1.50 ms per token,   666.32 tokens per second)
0.15.191.638 I llama_perf_context_print:        load time =    1641.28 ms
0.15.191.639 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.191.641 I llama_perf_context_print:        eval time =   13459.81 ms /    32 runs   (  420.62 ms per token,     2.38 tokens per second)
0.15.191.654 I llama_perf_context_print:       total time =   13549.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4393 (d79d8f39) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.000.853 I main: load the model and apply lora adapter, if any
0.00.023.624 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.638 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.736 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.750 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.752 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.757 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.761 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.762 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.764 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.765 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.766 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.775 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.777 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.787 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.789 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.791 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.026 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.552 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.707 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.718 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.720 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.721 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.722 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.724 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.725 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.729 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.730 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.731 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.355.733 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.355.734 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.355.744 I llama_model_loader: - type  f32:   37 tensors
0.00.355.747 I llama_model_loader: - type q8_0:  127 tensors
0.00.589.261 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.653.948 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.654.939 I llm_load_vocab: special tokens cache size = 5
0.00.863.318 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.863.398 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.863.399 I llm_load_print_meta: arch             = gemma
0.00.863.400 I llm_load_print_meta: vocab type       = SPM
0.00.863.401 I llm_load_print_meta: n_vocab          = 256000
0.00.863.403 I llm_load_print_meta: n_merges         = 0
0.00.863.404 I llm_load_print_meta: vocab_only       = 0
0.00.863.404 I llm_load_print_meta: n_ctx_train      = 8192
0.00.863.404 I llm_load_print_meta: n_embd           = 2048
0.00.863.405 I llm_load_print_meta: n_layer          = 18
0.00.863.468 I llm_load_print_meta: n_head           = 8
0.00.863.476 I llm_load_print_meta: n_head_kv        = 1
0.00.863.476 I llm_load_print_meta: n_rot            = 256
0.00.863.477 I llm_load_print_meta: n_swa            = 0
0.00.863.477 I llm_load_print_meta: n_embd_head_k    = 256
0.00.863.477 I llm_load_print_meta: n_embd_head_v    = 256
0.00.863.482 I llm_load_print_meta: n_gqa            = 8
0.00.863.487 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.863.492 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.863.493 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.863.495 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.863.495 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.863.496 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.863.496 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.863.501 I llm_load_print_meta: n_ff             = 16384
0.00.863.502 I llm_load_print_meta: n_expert         = 0
0.00.863.502 I llm_load_print_meta: n_expert_used    = 0
0.00.863.503 I llm_load_print_meta: causal attn      = 1
0.00.863.503 I llm_load_print_meta: pooling type     = 0
0.00.863.503 I llm_load_print_meta: rope type        = 2
0.00.863.504 I llm_load_print_meta: rope scaling     = linear
0.00.863.530 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.863.531 I llm_load_print_meta: freq_scale_train = 1
0.00.863.532 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.863.532 I llm_load_print_meta: rope_finetuned   = unknown
0.00.863.533 I llm_load_print_meta: ssm_d_conv       = 0
0.00.863.533 I llm_load_print_meta: ssm_d_inner      = 0
0.00.863.533 I llm_load_print_meta: ssm_d_state      = 0
0.00.863.533 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.863.534 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.863.535 I llm_load_print_meta: model type       = 2B
0.00.863.544 I llm_load_print_meta: model ftype      = Q8_0
0.00.863.545 I llm_load_print_meta: model params     = 2.51 B
0.00.863.546 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.863.546 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.863.548 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.863.548 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.863.548 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.863.549 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.863.549 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.863.550 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.863.565 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.863.569 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.863.570 I llm_load_print_meta: max token length = 93
0.00.942.774 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.942.784 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.942.785 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.942.785 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.942.786 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.942.787 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.948.768 I llama_new_context_with_model: n_seq_max     = 1
0.00.948.776 I llama_new_context_with_model: n_ctx         = 4096
0.00.948.777 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.948.777 I llama_new_context_with_model: n_batch       = 2048
0.00.948.777 I llama_new_context_with_model: n_ubatch      = 512
0.00.948.778 I llama_new_context_with_model: flash_attn    = 0
0.00.948.782 I llama_new_context_with_model: freq_base     = 10000.0
0.00.948.783 I llama_new_context_with_model: freq_scale    = 1
0.00.948.784 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.948.875 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.964.391 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.964.434 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.964.556 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.967.243 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.967.247 I llama_new_context_with_model: graph nodes  = 601
0.00.967.247 I llama_new_context_with_model: graph splits = 1
0.00.967.271 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.967.274 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.601.583 I main: llama threadpool init, n_threads = 4
0.01.601.599 I 
0.01.601.718 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.601.722 I 
0.01.601.958 I sampler seed: 2045140480
0.01.601.971 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.601.983 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.601.984 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.601.984 I 
 increasities in her eyes.

The woman looked up, her expression a mask of calm. She smiled gently, her voice as warm as honey. "There

0.15.128.220 I llama_perf_sampler_print:    sampling time =      49.87 ms /    33 runs   (    1.51 ms per token,   661.79 tokens per second)
0.15.128.224 I llama_perf_context_print:        load time =    1600.64 ms
0.15.128.225 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.128.241 I llama_perf_context_print:        eval time =   13436.71 ms /    32 runs   (  419.90 ms per token,     2.38 tokens per second)
0.15.128.243 I llama_perf_context_print:       total time =   13526.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.681 I build: 4393 (d79d8f39) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.888 I main: llama backend init
0.00.000.897 I main: load the model and apply lora adapter, if any
0.00.023.454 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.464 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.587 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.600 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.602 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.607 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.611 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.613 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.615 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.617 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.620 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.629 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.634 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.636 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.638 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.641 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.312 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.679 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.771 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.783 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.785 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.786 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.787 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.789 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.790 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.794 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.795 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.796 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.798 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.351.800 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.808 I llama_model_loader: - type  f32:   37 tensors
0.00.351.811 I llama_model_loader: - type q8_0:  127 tensors
0.00.580.147 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.648.888 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.649.912 I llm_load_vocab: special tokens cache size = 5
0.00.853.498 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.853.575 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.853.576 I llm_load_print_meta: arch             = gemma
0.00.853.577 I llm_load_print_meta: vocab type       = SPM
0.00.853.578 I llm_load_print_meta: n_vocab          = 256000
0.00.853.580 I llm_load_print_meta: n_merges         = 0
0.00.853.580 I llm_load_print_meta: vocab_only       = 0
0.00.853.581 I llm_load_print_meta: n_ctx_train      = 8192
0.00.853.581 I llm_load_print_meta: n_embd           = 2048
0.00.853.582 I llm_load_print_meta: n_layer          = 18
0.00.853.649 I llm_load_print_meta: n_head           = 8
0.00.853.656 I llm_load_print_meta: n_head_kv        = 1
0.00.853.656 I llm_load_print_meta: n_rot            = 256
0.00.853.657 I llm_load_print_meta: n_swa            = 0
0.00.853.657 I llm_load_print_meta: n_embd_head_k    = 256
0.00.853.657 I llm_load_print_meta: n_embd_head_v    = 256
0.00.853.662 I llm_load_print_meta: n_gqa            = 8
0.00.853.666 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.853.671 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.853.674 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.853.676 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.853.677 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.853.677 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.853.701 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.853.710 I llm_load_print_meta: n_ff             = 16384
0.00.853.711 I llm_load_print_meta: n_expert         = 0
0.00.853.712 I llm_load_print_meta: n_expert_used    = 0
0.00.853.712 I llm_load_print_meta: causal attn      = 1
0.00.853.714 I llm_load_print_meta: pooling type     = 0
0.00.853.714 I llm_load_print_meta: rope type        = 2
0.00.853.715 I llm_load_print_meta: rope scaling     = linear
0.00.853.717 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.853.718 I llm_load_print_meta: freq_scale_train = 1
0.00.853.718 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.853.719 I llm_load_print_meta: rope_finetuned   = unknown
0.00.853.722 I llm_load_print_meta: ssm_d_conv       = 0
0.00.853.723 I llm_load_print_meta: ssm_d_inner      = 0
0.00.853.723 I llm_load_print_meta: ssm_d_state      = 0
0.00.853.723 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.853.724 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.853.724 I llm_load_print_meta: model type       = 2B
0.00.853.725 I llm_load_print_meta: model ftype      = Q8_0
0.00.853.726 I llm_load_print_meta: model params     = 2.51 B
0.00.853.727 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.853.728 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.853.728 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.853.729 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.853.729 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.853.729 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.853.730 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.853.730 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.853.736 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.853.738 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.853.739 I llm_load_print_meta: max token length = 93
0.00.927.053 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.927.064 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.933.244 I llama_new_context_with_model: n_seq_max     = 1
0.00.933.251 I llama_new_context_with_model: n_ctx         = 4096
0.00.933.252 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.933.252 I llama_new_context_with_model: n_batch       = 2048
0.00.933.253 I llama_new_context_with_model: n_ubatch      = 512
0.00.933.253 I llama_new_context_with_model: flash_attn    = 0
0.00.933.256 I llama_new_context_with_model: freq_base     = 10000.0
0.00.933.257 I llama_new_context_with_model: freq_scale    = 1
0.00.933.258 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.933.349 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.947.901 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.947.943 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.948.059 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.950.638 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.950.642 I llama_new_context_with_model: graph nodes  = 601
0.00.950.642 I llama_new_context_with_model: graph splits = 1
0.00.950.667 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.950.671 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.560.261 I main: llama threadpool init, n_threads = 4
0.01.560.277 I 
0.01.560.414 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.560.419 I 
0.01.560.661 I sampler seed: 2079933078
0.01.560.675 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.560.686 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.560.690 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.560.691 I 
 increasities of the human body and their relationship to health and disease.

**Answer:**

**The human body's musculoskeletal system is intricately designed to

0.15.115.951 I llama_perf_sampler_print:    sampling time =      49.59 ms /    33 runs   (    1.50 ms per token,   665.40 tokens per second)
0.15.115.955 I llama_perf_context_print:        load time =    1559.25 ms
0.15.115.957 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.115.959 I llama_perf_context_print:        eval time =   13465.57 ms /    32 runs   (  420.80 ms per token,     2.38 tokens per second)
0.15.115.960 I llama_perf_context_print:       total time =   13555.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m10.865s
user	3m50.234s
sys	0m9.661s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4393 (d79d8f39)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185789.23 ms
main:    total time = 185789.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.677 I build: 4393 (d79d8f39) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.000.889 I main: load the model and apply lora adapter, if any
0.00.023.636 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.649 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.750 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.764 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.769 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.773 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.775 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.776 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.778 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.779 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.780 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.790 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.792 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.794 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.795 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.796 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.836 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.804 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.918 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.930 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.931 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.932 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.934 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.935 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.937 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.941 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.942 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.943 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.944 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.352.947 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.956 I llama_model_loader: - type  f32:   37 tensors
0.00.352.959 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.959 I llama_model_loader: - type q6_K:   19 tensors
0.00.599.382 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.672.112 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.673.093 I llm_load_vocab: special tokens cache size = 5
0.00.885.045 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.885.120 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.885.121 I llm_load_print_meta: arch             = gemma
0.00.885.122 I llm_load_print_meta: vocab type       = SPM
0.00.885.122 I llm_load_print_meta: n_vocab          = 256000
0.00.885.125 I llm_load_print_meta: n_merges         = 0
0.00.885.125 I llm_load_print_meta: vocab_only       = 0
0.00.885.125 I llm_load_print_meta: n_ctx_train      = 8192
0.00.885.126 I llm_load_print_meta: n_embd           = 2048
0.00.885.126 I llm_load_print_meta: n_layer          = 18
0.00.885.200 I llm_load_print_meta: n_head           = 8
0.00.885.206 I llm_load_print_meta: n_head_kv        = 1
0.00.885.207 I llm_load_print_meta: n_rot            = 256
0.00.885.207 I llm_load_print_meta: n_swa            = 0
0.00.885.208 I llm_load_print_meta: n_embd_head_k    = 256
0.00.885.210 I llm_load_print_meta: n_embd_head_v    = 256
0.00.885.216 I llm_load_print_meta: n_gqa            = 8
0.00.885.221 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.885.226 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.885.228 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.885.229 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.885.230 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.885.231 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.885.232 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.885.237 I llm_load_print_meta: n_ff             = 16384
0.00.885.238 I llm_load_print_meta: n_expert         = 0
0.00.885.238 I llm_load_print_meta: n_expert_used    = 0
0.00.885.239 I llm_load_print_meta: causal attn      = 1
0.00.885.240 I llm_load_print_meta: pooling type     = 0
0.00.885.240 I llm_load_print_meta: rope type        = 2
0.00.885.241 I llm_load_print_meta: rope scaling     = linear
0.00.885.242 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.885.243 I llm_load_print_meta: freq_scale_train = 1
0.00.885.244 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.885.244 I llm_load_print_meta: rope_finetuned   = unknown
0.00.885.244 I llm_load_print_meta: ssm_d_conv       = 0
0.00.885.245 I llm_load_print_meta: ssm_d_inner      = 0
0.00.885.246 I llm_load_print_meta: ssm_d_state      = 0
0.00.885.246 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.885.246 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.885.247 I llm_load_print_meta: model type       = 2B
0.00.885.248 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.885.250 I llm_load_print_meta: model params     = 2.51 B
0.00.885.250 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.885.251 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.885.252 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.885.271 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.885.272 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.885.272 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.885.273 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.885.274 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.885.287 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.885.289 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.885.289 I llm_load_print_meta: max token length = 93
0.00.948.929 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.948.938 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.948.939 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.948.940 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.948.941 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.948.941 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.954.850 I llama_new_context_with_model: n_seq_max     = 1
0.00.954.857 I llama_new_context_with_model: n_ctx         = 4096
0.00.954.858 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.954.858 I llama_new_context_with_model: n_batch       = 2048
0.00.954.859 I llama_new_context_with_model: n_ubatch      = 512
0.00.954.860 I llama_new_context_with_model: flash_attn    = 0
0.00.954.863 I llama_new_context_with_model: freq_base     = 10000.0
0.00.954.864 I llama_new_context_with_model: freq_scale    = 1
0.00.954.865 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.954.954 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.969.522 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.969.560 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.969.677 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.972.288 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.972.293 I llama_new_context_with_model: graph nodes  = 601
0.00.972.293 I llama_new_context_with_model: graph splits = 1
0.00.972.315 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.972.315 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.553.750 I main: llama threadpool init, n_threads = 4
0.01.553.768 I 
0.01.553.893 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.553.897 I 
0.01.554.138 I sampler seed: 2952355308
0.01.554.153 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.554.163 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.554.166 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.554.166 I 
 squaRE

## Square Root of a Number

The square root of a number is a number that, when multiplied by itself, results in the original number.

0.12.674.961 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.79 tokens per second)
0.12.674.965 I llama_perf_context_print:        load time =    1552.76 ms
0.12.674.967 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.674.972 I llama_perf_context_print:        eval time =   11031.50 ms /    32 runs   (  344.73 ms per token,     2.90 tokens per second)
0.12.674.974 I llama_perf_context_print:       total time =   11121.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4393 (d79d8f39)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185878.42 ms
main:    total time = 185878.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4393 (d79d8f39) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.000.867 I main: load the model and apply lora adapter, if any
0.00.023.321 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.426 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.442 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.445 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.449 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.451 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.452 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.454 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.455 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.459 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.467 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.468 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.469 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.471 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.473 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.348 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.903 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.008 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.020 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.022 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.023 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.025 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.026 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.028 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.033 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.034 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.044 I llama_model_loader: - type  f32:   37 tensors
0.00.352.046 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.046 I llama_model_loader: - type q6_K:   19 tensors
0.00.592.137 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.662.520 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.663.531 I llm_load_vocab: special tokens cache size = 5
0.00.867.382 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.867.456 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.867.460 I llm_load_print_meta: arch             = gemma
0.00.867.461 I llm_load_print_meta: vocab type       = SPM
0.00.867.462 I llm_load_print_meta: n_vocab          = 256000
0.00.867.464 I llm_load_print_meta: n_merges         = 0
0.00.867.464 I llm_load_print_meta: vocab_only       = 0
0.00.867.465 I llm_load_print_meta: n_ctx_train      = 8192
0.00.867.465 I llm_load_print_meta: n_embd           = 2048
0.00.867.465 I llm_load_print_meta: n_layer          = 18
0.00.867.529 I llm_load_print_meta: n_head           = 8
0.00.867.538 I llm_load_print_meta: n_head_kv        = 1
0.00.867.539 I llm_load_print_meta: n_rot            = 256
0.00.867.540 I llm_load_print_meta: n_swa            = 0
0.00.867.541 I llm_load_print_meta: n_embd_head_k    = 256
0.00.867.541 I llm_load_print_meta: n_embd_head_v    = 256
0.00.867.546 I llm_load_print_meta: n_gqa            = 8
0.00.867.551 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.867.556 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.867.559 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.867.561 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.867.561 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.867.562 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.867.562 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.867.568 I llm_load_print_meta: n_ff             = 16384
0.00.867.569 I llm_load_print_meta: n_expert         = 0
0.00.867.569 I llm_load_print_meta: n_expert_used    = 0
0.00.867.570 I llm_load_print_meta: causal attn      = 1
0.00.867.570 I llm_load_print_meta: pooling type     = 0
0.00.867.571 I llm_load_print_meta: rope type        = 2
0.00.867.571 I llm_load_print_meta: rope scaling     = linear
0.00.867.573 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.867.573 I llm_load_print_meta: freq_scale_train = 1
0.00.867.574 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.867.574 I llm_load_print_meta: rope_finetuned   = unknown
0.00.867.578 I llm_load_print_meta: ssm_d_conv       = 0
0.00.867.581 I llm_load_print_meta: ssm_d_inner      = 0
0.00.867.581 I llm_load_print_meta: ssm_d_state      = 0
0.00.867.581 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.867.581 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.867.582 I llm_load_print_meta: model type       = 2B
0.00.867.583 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.867.584 I llm_load_print_meta: model params     = 2.51 B
0.00.867.585 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.867.585 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.867.586 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.867.595 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.867.608 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.867.611 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.867.612 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.867.612 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.867.619 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.867.620 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.867.620 I llm_load_print_meta: max token length = 93
0.00.927.434 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.933.397 I llama_new_context_with_model: n_seq_max     = 1
0.00.933.405 I llama_new_context_with_model: n_ctx         = 4096
0.00.933.405 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.933.405 I llama_new_context_with_model: n_batch       = 2048
0.00.933.406 I llama_new_context_with_model: n_ubatch      = 512
0.00.933.406 I llama_new_context_with_model: flash_attn    = 0
0.00.933.409 I llama_new_context_with_model: freq_base     = 10000.0
0.00.933.410 I llama_new_context_with_model: freq_scale    = 1
0.00.933.411 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.933.506 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.948.841 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.948.893 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.949.046 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.951.724 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.951.728 I llama_new_context_with_model: graph nodes  = 601
0.00.951.728 I llama_new_context_with_model: graph splits = 1
0.00.951.753 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.951.756 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.532.999 I main: llama threadpool init, n_threads = 4
0.01.533.016 I 
0.01.533.135 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.533.139 I 
0.01.533.374 I sampler seed: 2089634361
0.01.533.388 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.533.400 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.533.401 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.533.401 I 
 increasities can be explained by the following factors:

A) Genetic predisposition
B) Environmental factors
C) Both A and B
D) None of

0.12.669.095 I llama_perf_sampler_print:    sampling time =      49.54 ms /    33 runs   (    1.50 ms per token,   666.16 tokens per second)
0.12.669.111 I llama_perf_context_print:        load time =    1532.03 ms
0.12.669.113 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.669.115 I llama_perf_context_print:        eval time =   11043.78 ms /    32 runs   (  345.12 ms per token,     2.90 tokens per second)
0.12.669.116 I llama_perf_context_print:       total time =   11136.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.982s
user	46m44.743s
sys	0m6.483s
