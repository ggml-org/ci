+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.532 I build: 4342 (b0597b14) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.708 I main: llama backend init
0.00.000.716 I main: load the model and apply lora adapter, if any
0.00.021.027 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.038 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.046 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.051 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.052 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.055 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.056 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.057 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.058 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.058 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.059 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.063 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.064 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.065 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.065 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.065 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.425 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.229 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.174 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.182 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.183 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.183 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.184 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.185 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.185 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.188 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.188 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.189 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.189 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.191 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.195 I llama_model_loader: - type  f32:   37 tensors
0.00.131.196 I llama_model_loader: - type q8_0:  127 tensors
0.00.219.922 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.268.660 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.269.251 I llm_load_vocab: special tokens cache size = 5
0.00.290.342 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.290.358 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.290.359 I llm_load_print_meta: arch             = gemma
0.00.290.359 I llm_load_print_meta: vocab type       = SPM
0.00.290.360 I llm_load_print_meta: n_vocab          = 256000
0.00.290.360 I llm_load_print_meta: n_merges         = 0
0.00.290.361 I llm_load_print_meta: vocab_only       = 0
0.00.290.361 I llm_load_print_meta: n_ctx_train      = 8192
0.00.290.361 I llm_load_print_meta: n_embd           = 2048
0.00.290.362 I llm_load_print_meta: n_layer          = 18
0.00.290.373 I llm_load_print_meta: n_head           = 8
0.00.290.373 I llm_load_print_meta: n_head_kv        = 1
0.00.290.374 I llm_load_print_meta: n_rot            = 256
0.00.290.374 I llm_load_print_meta: n_swa            = 0
0.00.290.374 I llm_load_print_meta: n_embd_head_k    = 256
0.00.290.375 I llm_load_print_meta: n_embd_head_v    = 256
0.00.290.375 I llm_load_print_meta: n_gqa            = 8
0.00.290.376 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.290.377 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.290.378 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.290.379 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.290.379 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.290.380 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.290.380 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.290.381 I llm_load_print_meta: n_ff             = 16384
0.00.290.381 I llm_load_print_meta: n_expert         = 0
0.00.290.382 I llm_load_print_meta: n_expert_used    = 0
0.00.290.382 I llm_load_print_meta: causal attn      = 1
0.00.290.382 I llm_load_print_meta: pooling type     = 0
0.00.290.383 I llm_load_print_meta: rope type        = 2
0.00.290.383 I llm_load_print_meta: rope scaling     = linear
0.00.290.385 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.290.385 I llm_load_print_meta: freq_scale_train = 1
0.00.290.386 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.290.386 I llm_load_print_meta: rope_finetuned   = unknown
0.00.290.386 I llm_load_print_meta: ssm_d_conv       = 0
0.00.290.386 I llm_load_print_meta: ssm_d_inner      = 0
0.00.290.387 I llm_load_print_meta: ssm_d_state      = 0
0.00.290.387 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.290.387 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.290.388 I llm_load_print_meta: model type       = 2B
0.00.290.389 I llm_load_print_meta: model ftype      = Q8_0
0.00.290.390 I llm_load_print_meta: model params     = 2.51 B
0.00.290.390 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.290.391 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.290.391 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.290.391 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.290.392 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.290.392 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.290.392 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.290.393 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.290.393 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.290.394 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.290.394 I llm_load_print_meta: max token length = 93
0.00.389.634 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.389.642 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.389.643 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.389.644 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.389.644 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.389.645 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.394.808 I llama_new_context_with_model: n_seq_max     = 1
0.00.394.814 I llama_new_context_with_model: n_ctx         = 4096
0.00.394.815 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.394.815 I llama_new_context_with_model: n_batch       = 2048
0.00.394.816 I llama_new_context_with_model: n_ubatch      = 512
0.00.394.816 I llama_new_context_with_model: flash_attn    = 0
0.00.394.819 I llama_new_context_with_model: freq_base     = 10000.0
0.00.394.820 I llama_new_context_with_model: freq_scale    = 1
0.00.394.821 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.409.031 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.409.045 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.409.134 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.410.397 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.410.401 I llama_new_context_with_model: graph nodes  = 601
0.00.410.402 I llama_new_context_with_model: graph splits = 1
0.00.410.404 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.410.404 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.495.059 I main: llama threadpool init, n_threads = 4
0.00.495.074 I 
0.00.495.145 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.495.148 I 
0.00.495.193 I sampler seed: 2384711728
0.00.495.204 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.495.216 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.495.219 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.495.219 I 
 increasively.

I have a secret, a hidden truth.
It is something I wish I could tell.
But the fear holds me back, it

0.02.750.011 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6935.69 tokens per second)
0.02.750.016 I llama_perf_context_print:        load time =     494.33 ms
0.02.750.017 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.750.019 I llama_perf_context_print:        eval time =    2236.23 ms /    32 runs   (   69.88 ms per token,    14.31 tokens per second)
0.02.750.020 I llama_perf_context_print:       total time =    2254.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.551 I build: 4342 (b0597b14) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.772 I main: load the model and apply lora adapter, if any
0.00.021.133 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.151 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.158 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.162 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.167 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.168 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.169 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.170 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.171 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.171 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.175 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.176 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.177 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.179 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.180 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.145 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.390 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.336 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.343 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.344 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.345 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.345 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.346 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.347 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.350 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.350 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.351 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.352 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.354 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.357 I llama_model_loader: - type  f32:   37 tensors
0.00.131.358 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.619 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.920 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.666 I llm_load_vocab: special tokens cache size = 5
0.00.268.023 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.045 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.046 I llm_load_print_meta: arch             = gemma
0.00.268.046 I llm_load_print_meta: vocab type       = SPM
0.00.268.047 I llm_load_print_meta: n_vocab          = 256000
0.00.268.048 I llm_load_print_meta: n_merges         = 0
0.00.268.049 I llm_load_print_meta: vocab_only       = 0
0.00.268.049 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.049 I llm_load_print_meta: n_embd           = 2048
0.00.268.049 I llm_load_print_meta: n_layer          = 18
0.00.268.062 I llm_load_print_meta: n_head           = 8
0.00.268.063 I llm_load_print_meta: n_head_kv        = 1
0.00.268.063 I llm_load_print_meta: n_rot            = 256
0.00.268.063 I llm_load_print_meta: n_swa            = 0
0.00.268.064 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.064 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.065 I llm_load_print_meta: n_gqa            = 8
0.00.268.066 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.066 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.067 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.068 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.069 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.069 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.069 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.070 I llm_load_print_meta: n_ff             = 16384
0.00.268.071 I llm_load_print_meta: n_expert         = 0
0.00.268.071 I llm_load_print_meta: n_expert_used    = 0
0.00.268.071 I llm_load_print_meta: causal attn      = 1
0.00.268.071 I llm_load_print_meta: pooling type     = 0
0.00.268.072 I llm_load_print_meta: rope type        = 2
0.00.268.072 I llm_load_print_meta: rope scaling     = linear
0.00.268.073 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.074 I llm_load_print_meta: freq_scale_train = 1
0.00.268.074 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.075 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.075 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.075 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.076 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.076 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.076 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.077 I llm_load_print_meta: model type       = 2B
0.00.268.077 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.078 I llm_load_print_meta: model params     = 2.51 B
0.00.268.079 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.079 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.080 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.080 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.081 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.081 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.081 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.081 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.082 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.082 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.083 I llm_load_print_meta: max token length = 93
0.00.362.778 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.368.088 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.097 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.098 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.098 I llama_new_context_with_model: n_batch       = 2048
0.00.368.099 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.099 I llama_new_context_with_model: flash_attn    = 0
0.00.368.104 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.105 I llama_new_context_with_model: freq_scale    = 1
0.00.368.106 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.601 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.619 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.715 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.989 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.994 I llama_new_context_with_model: graph nodes  = 601
0.00.385.995 I llama_new_context_with_model: graph splits = 1
0.00.385.997 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.385.997 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.358 I main: llama threadpool init, n_threads = 4
0.00.469.374 I 
0.00.469.454 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.469.459 I 
0.00.469.516 I sampler seed: 1701819790
0.00.469.526 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.530 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.531 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.533 I 
 increasities?

I am unable to generate a response that meets your requirements because the provided context contains sexually suggestive and inappropriate content that is not appropriate for me to

0.02.666.365 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6818.18 tokens per second)
0.02.666.367 I llama_perf_context_print:        load time =     468.57 ms
0.02.666.369 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.666.371 I llama_perf_context_print:        eval time =    2177.41 ms /    32 runs   (   68.04 ms per token,    14.70 tokens per second)
0.02.666.381 I llama_perf_context_print:       total time =    2197.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.530 I build: 4342 (b0597b14) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.705 I main: llama backend init
0.00.000.713 I main: load the model and apply lora adapter, if any
0.00.020.762 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.774 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.785 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.790 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.794 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.797 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.798 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.799 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.799 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.800 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.800 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.804 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.804 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.805 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.806 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.806 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.558 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.326 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.211 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.217 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.218 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.219 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.219 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.220 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.221 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.223 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.223 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.224 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.225 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.226 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.230 I llama_model_loader: - type  f32:   37 tensors
0.00.131.231 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.384 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.189 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.851 I llm_load_vocab: special tokens cache size = 5
0.00.272.396 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.413 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.414 I llm_load_print_meta: arch             = gemma
0.00.272.414 I llm_load_print_meta: vocab type       = SPM
0.00.272.416 I llm_load_print_meta: n_vocab          = 256000
0.00.272.416 I llm_load_print_meta: n_merges         = 0
0.00.272.416 I llm_load_print_meta: vocab_only       = 0
0.00.272.417 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.417 I llm_load_print_meta: n_embd           = 2048
0.00.272.417 I llm_load_print_meta: n_layer          = 18
0.00.272.429 I llm_load_print_meta: n_head           = 8
0.00.272.430 I llm_load_print_meta: n_head_kv        = 1
0.00.272.430 I llm_load_print_meta: n_rot            = 256
0.00.272.430 I llm_load_print_meta: n_swa            = 0
0.00.272.431 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.431 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.432 I llm_load_print_meta: n_gqa            = 8
0.00.272.433 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.434 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.434 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.436 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.436 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.437 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.437 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.438 I llm_load_print_meta: n_ff             = 16384
0.00.272.438 I llm_load_print_meta: n_expert         = 0
0.00.272.439 I llm_load_print_meta: n_expert_used    = 0
0.00.272.439 I llm_load_print_meta: causal attn      = 1
0.00.272.439 I llm_load_print_meta: pooling type     = 0
0.00.272.439 I llm_load_print_meta: rope type        = 2
0.00.272.440 I llm_load_print_meta: rope scaling     = linear
0.00.272.441 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.441 I llm_load_print_meta: freq_scale_train = 1
0.00.272.442 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.442 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.442 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.443 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.443 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.443 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.443 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.444 I llm_load_print_meta: model type       = 2B
0.00.272.444 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.445 I llm_load_print_meta: model params     = 2.51 B
0.00.272.446 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.447 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.447 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.447 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.447 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.448 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.448 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.448 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.449 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.449 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.450 I llm_load_print_meta: max token length = 93
0.00.348.197 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.348.203 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.348.203 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.348.204 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.348.204 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.348.205 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.353.374 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.380 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.381 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.381 I llama_new_context_with_model: n_batch       = 2048
0.00.353.382 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.382 I llama_new_context_with_model: flash_attn    = 0
0.00.353.385 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.386 I llama_new_context_with_model: freq_scale    = 1
0.00.353.387 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.141 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.368.154 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.248 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.510 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.517 I llama_new_context_with_model: graph nodes  = 601
0.00.369.518 I llama_new_context_with_model: graph splits = 1
0.00.369.521 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.369.521 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.084 I main: llama threadpool init, n_threads = 4
0.00.464.099 I 
0.00.464.178 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.464.181 I 
0.00.464.223 I sampler seed: 2840894588
0.00.464.233 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.245 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.249 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.249 I 
 increasities

I am unable to generate a response that contains sexually suggestive or inappropriate content. My purpose is to assist with tasks and questions in a safe and responsible

0.02.781.812 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6493.51 tokens per second)
0.02.781.815 I llama_perf_context_print:        load time =     463.35 ms
0.02.781.817 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.781.819 I llama_perf_context_print:        eval time =    2297.97 ms /    32 runs   (   71.81 ms per token,    13.93 tokens per second)
0.02.781.820 I llama_perf_context_print:       total time =    2317.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.169 I build: 4342 (b0597b14) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.369 I main: llama backend init
0.00.000.375 I main: load the model and apply lora adapter, if any
0.00.020.931 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.942 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.949 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.954 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.956 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.962 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.965 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.966 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.966 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.967 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.967 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.972 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.973 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.973 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.974 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.975 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.565 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.368 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.443 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.452 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.452 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.453 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.453 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.454 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.455 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.458 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.459 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.460 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.460 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.461 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.465 I llama_model_loader: - type  f32:   37 tensors
0.00.131.466 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.985 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.891 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.538 I llm_load_vocab: special tokens cache size = 5
0.00.276.905 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.924 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.925 I llm_load_print_meta: arch             = gemma
0.00.276.925 I llm_load_print_meta: vocab type       = SPM
0.00.276.926 I llm_load_print_meta: n_vocab          = 256000
0.00.276.940 I llm_load_print_meta: n_merges         = 0
0.00.276.941 I llm_load_print_meta: vocab_only       = 0
0.00.276.942 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.942 I llm_load_print_meta: n_embd           = 2048
0.00.276.942 I llm_load_print_meta: n_layer          = 18
0.00.276.956 I llm_load_print_meta: n_head           = 8
0.00.276.957 I llm_load_print_meta: n_head_kv        = 1
0.00.276.957 I llm_load_print_meta: n_rot            = 256
0.00.276.958 I llm_load_print_meta: n_swa            = 0
0.00.276.959 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.959 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.960 I llm_load_print_meta: n_gqa            = 8
0.00.276.961 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.962 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.964 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.965 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.965 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.966 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.967 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.968 I llm_load_print_meta: n_ff             = 16384
0.00.276.968 I llm_load_print_meta: n_expert         = 0
0.00.276.969 I llm_load_print_meta: n_expert_used    = 0
0.00.276.970 I llm_load_print_meta: causal attn      = 1
0.00.276.970 I llm_load_print_meta: pooling type     = 0
0.00.276.970 I llm_load_print_meta: rope type        = 2
0.00.276.972 I llm_load_print_meta: rope scaling     = linear
0.00.276.973 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.974 I llm_load_print_meta: freq_scale_train = 1
0.00.276.974 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.975 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.975 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.976 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.977 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.977 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.977 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.978 I llm_load_print_meta: model type       = 2B
0.00.276.979 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.980 I llm_load_print_meta: model params     = 2.51 B
0.00.276.981 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.982 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.982 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.983 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.983 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.983 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.984 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.984 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.985 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.985 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.986 I llm_load_print_meta: max token length = 93
0.00.348.221 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.348.227 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.353.288 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.296 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.296 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.297 I llama_new_context_with_model: n_batch       = 2048
0.00.353.297 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.298 I llama_new_context_with_model: flash_attn    = 0
0.00.353.300 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.301 I llama_new_context_with_model: freq_scale    = 1
0.00.353.302 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.367.737 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.367.750 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.367.841 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.093 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.098 I llama_new_context_with_model: graph nodes  = 601
0.00.369.099 I llama_new_context_with_model: graph splits = 1
0.00.369.101 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.369.102 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.349 I main: llama threadpool init, n_threads = 4
0.00.459.365 I 
0.00.459.439 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.459.442 I 
0.00.459.481 I sampler seed: 132632151
0.00.459.492 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.503 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.507 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.507 I 
 increably, and then vanished. The locals whispered about a curse, but no one dared to believe it.

Years later, a group of brave explorers ventured

0.02.909.659 I llama_perf_sampler_print:    sampling time =       5.19 ms /    33 runs   (    0.16 ms per token,  6360.83 tokens per second)
0.02.909.662 I llama_perf_context_print:        load time =     458.96 ms
0.02.909.663 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.909.664 I llama_perf_context_print:        eval time =    2430.46 ms /    32 runs   (   75.95 ms per token,    13.17 tokens per second)
0.02.909.665 I llama_perf_context_print:       total time =    2450.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.925s
user	0m39.840s
sys	0m9.358s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4342 (b0597b14)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40222.80 ms
main:    total time = 40222.80 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.546 I build: 4342 (b0597b14) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.750 I main: load the model and apply lora adapter, if any
0.00.021.258 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.269 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.277 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.282 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.283 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.288 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.289 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.290 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.291 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.291 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.292 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.296 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.296 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.297 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.298 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.299 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.779 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.629 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.561 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.568 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.569 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.569 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.570 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.571 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.571 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.574 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.574 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.575 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.576 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.577 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.580 I llama_model_loader: - type  f32:   37 tensors
0.00.131.581 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.582 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.482 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.476 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.015 I llm_load_vocab: special tokens cache size = 5
0.00.269.032 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.047 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.048 I llm_load_print_meta: arch             = gemma
0.00.269.048 I llm_load_print_meta: vocab type       = SPM
0.00.269.049 I llm_load_print_meta: n_vocab          = 256000
0.00.269.050 I llm_load_print_meta: n_merges         = 0
0.00.269.050 I llm_load_print_meta: vocab_only       = 0
0.00.269.050 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.051 I llm_load_print_meta: n_embd           = 2048
0.00.269.051 I llm_load_print_meta: n_layer          = 18
0.00.269.062 I llm_load_print_meta: n_head           = 8
0.00.269.063 I llm_load_print_meta: n_head_kv        = 1
0.00.269.063 I llm_load_print_meta: n_rot            = 256
0.00.269.064 I llm_load_print_meta: n_swa            = 0
0.00.269.064 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.064 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.065 I llm_load_print_meta: n_gqa            = 8
0.00.269.066 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.067 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.068 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.069 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.070 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.070 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.071 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.072 I llm_load_print_meta: n_ff             = 16384
0.00.269.072 I llm_load_print_meta: n_expert         = 0
0.00.269.073 I llm_load_print_meta: n_expert_used    = 0
0.00.269.073 I llm_load_print_meta: causal attn      = 1
0.00.269.073 I llm_load_print_meta: pooling type     = 0
0.00.269.074 I llm_load_print_meta: rope type        = 2
0.00.269.074 I llm_load_print_meta: rope scaling     = linear
0.00.269.075 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.075 I llm_load_print_meta: freq_scale_train = 1
0.00.269.076 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.076 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.076 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.077 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.077 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.077 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.077 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.078 I llm_load_print_meta: model type       = 2B
0.00.269.078 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.079 I llm_load_print_meta: model params     = 2.51 B
0.00.269.080 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.080 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.081 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.081 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.081 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.081 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.082 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.082 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.083 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.083 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.084 I llm_load_print_meta: max token length = 93
0.00.330.757 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.330.765 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.330.765 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.330.766 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.330.766 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.330.767 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.336.016 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.022 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.023 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.023 I llama_new_context_with_model: n_batch       = 2048
0.00.336.024 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.024 I llama_new_context_with_model: flash_attn    = 0
0.00.336.027 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.028 I llama_new_context_with_model: freq_scale    = 1
0.00.336.029 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.973 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.987 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.080 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.364 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.369 I llama_new_context_with_model: graph nodes  = 601
0.00.352.369 I llama_new_context_with_model: graph splits = 1
0.00.352.372 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.352.372 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.577 I main: llama threadpool init, n_threads = 4
0.00.428.593 I 
0.00.428.672 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.428.675 I 
0.00.428.725 I sampler seed: 221372085
0.00.428.739 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.745 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.746 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.746 I 
 squaRE's annual meeting, taking place virtually from October 27th to November 1st, 2023.

**Key Highlights

0.02.032.260 I llama_perf_sampler_print:    sampling time =       5.66 ms /    33 runs   (    0.17 ms per token,  5832.45 tokens per second)
0.02.032.263 I llama_perf_context_print:        load time =     427.81 ms
0.02.032.265 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.032.267 I llama_perf_context_print:        eval time =    1584.03 ms /    32 runs   (   49.50 ms per token,    20.20 tokens per second)
0.02.032.269 I llama_perf_context_print:       total time =    1603.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4342 (b0597b14)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40197.88 ms
main:    total time = 40197.88 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.540 I build: 4342 (b0597b14) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.021.031 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.049 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.055 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.058 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.062 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.062 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.064 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.065 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.066 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.067 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.071 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.071 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.074 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.075 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.076 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.876 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.931 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.787 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.793 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.793 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.794 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.794 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.795 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.796 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.799 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.799 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.802 I llama_model_loader: - type  f32:   37 tensors
0.00.130.803 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.804 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.450 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.033 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.589 I llm_load_vocab: special tokens cache size = 5
0.00.268.754 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.771 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.772 I llm_load_print_meta: arch             = gemma
0.00.268.772 I llm_load_print_meta: vocab type       = SPM
0.00.268.773 I llm_load_print_meta: n_vocab          = 256000
0.00.268.773 I llm_load_print_meta: n_merges         = 0
0.00.268.774 I llm_load_print_meta: vocab_only       = 0
0.00.268.774 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.775 I llm_load_print_meta: n_embd           = 2048
0.00.268.775 I llm_load_print_meta: n_layer          = 18
0.00.268.786 I llm_load_print_meta: n_head           = 8
0.00.268.788 I llm_load_print_meta: n_head_kv        = 1
0.00.268.788 I llm_load_print_meta: n_rot            = 256
0.00.268.788 I llm_load_print_meta: n_swa            = 0
0.00.268.789 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.790 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.791 I llm_load_print_meta: n_gqa            = 8
0.00.268.792 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.794 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.794 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.796 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.796 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.797 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.798 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.799 I llm_load_print_meta: n_ff             = 16384
0.00.268.800 I llm_load_print_meta: n_expert         = 0
0.00.268.800 I llm_load_print_meta: n_expert_used    = 0
0.00.268.801 I llm_load_print_meta: causal attn      = 1
0.00.268.801 I llm_load_print_meta: pooling type     = 0
0.00.268.801 I llm_load_print_meta: rope type        = 2
0.00.268.802 I llm_load_print_meta: rope scaling     = linear
0.00.268.803 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.804 I llm_load_print_meta: freq_scale_train = 1
0.00.268.804 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.805 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.805 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.805 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.805 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.806 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.807 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.807 I llm_load_print_meta: model type       = 2B
0.00.268.808 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.812 I llm_load_print_meta: model params     = 2.51 B
0.00.268.812 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.813 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.813 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.814 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.815 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.815 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.816 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.816 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.816 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.817 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.817 I llm_load_print_meta: max token length = 93
0.00.326.997 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.332.015 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.022 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.022 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.023 I llama_new_context_with_model: n_batch       = 2048
0.00.332.023 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.024 I llama_new_context_with_model: flash_attn    = 0
0.00.332.026 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.027 I llama_new_context_with_model: freq_scale    = 1
0.00.332.027 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.560 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.573 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.659 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.882 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.888 I llama_new_context_with_model: graph nodes  = 601
0.00.347.888 I llama_new_context_with_model: graph splits = 1
0.00.347.890 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.347.891 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.278 I main: llama threadpool init, n_threads = 4
0.00.424.297 I 
0.00.424.373 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.424.376 I 
0.00.424.420 I sampler seed: 466703921
0.00.424.431 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.442 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.424.446 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.424.446 I 
 squaRED text. 

## Understanding the Role of Data in Business

**Data** is the lifeblood of any business. It fuels decision-making,

0.02.002.526 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6400.31 tokens per second)
0.02.002.530 I llama_perf_context_print:        load time =     423.53 ms
0.02.002.531 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.002.533 I llama_perf_context_print:        eval time =    1558.93 ms /    32 runs   (   48.72 ms per token,    20.53 tokens per second)
0.02.002.534 I llama_perf_context_print:       total time =    1578.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.264s
user	10m24.174s
sys	0m7.231s
