+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.542 I build: 4396 (b0d6b66b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.720 I main: llama backend init
0.00.000.728 I main: load the model and apply lora adapter, if any
0.00.021.141 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.152 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.163 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.168 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.169 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.174 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.177 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.178 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.178 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.179 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.179 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.183 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.184 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.185 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.186 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.187 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.987 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.644 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.478 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.485 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.486 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.486 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.487 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.488 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.488 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.491 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.491 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.492 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.493 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.495 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.498 I llama_model_loader: - type  f32:   37 tensors
0.00.132.499 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.489 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.336 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.006 I llm_load_vocab: special tokens cache size = 5
0.00.276.671 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.691 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.693 I llm_load_print_meta: arch             = gemma
0.00.276.693 I llm_load_print_meta: vocab type       = SPM
0.00.276.694 I llm_load_print_meta: n_vocab          = 256000
0.00.276.695 I llm_load_print_meta: n_merges         = 0
0.00.276.696 I llm_load_print_meta: vocab_only       = 0
0.00.276.696 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.696 I llm_load_print_meta: n_embd           = 2048
0.00.276.697 I llm_load_print_meta: n_layer          = 18
0.00.276.708 I llm_load_print_meta: n_head           = 8
0.00.276.710 I llm_load_print_meta: n_head_kv        = 1
0.00.276.711 I llm_load_print_meta: n_rot            = 256
0.00.276.711 I llm_load_print_meta: n_swa            = 0
0.00.276.711 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.712 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.713 I llm_load_print_meta: n_gqa            = 8
0.00.276.715 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.717 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.718 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.719 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.719 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.720 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.720 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.721 I llm_load_print_meta: n_ff             = 16384
0.00.276.722 I llm_load_print_meta: n_expert         = 0
0.00.276.722 I llm_load_print_meta: n_expert_used    = 0
0.00.276.722 I llm_load_print_meta: causal attn      = 1
0.00.276.722 I llm_load_print_meta: pooling type     = 0
0.00.276.723 I llm_load_print_meta: rope type        = 2
0.00.276.723 I llm_load_print_meta: rope scaling     = linear
0.00.276.725 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.726 I llm_load_print_meta: freq_scale_train = 1
0.00.276.726 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.726 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.727 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.727 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.727 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.727 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.727 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.729 I llm_load_print_meta: model type       = 2B
0.00.276.730 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.731 I llm_load_print_meta: model params     = 2.51 B
0.00.276.732 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.732 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.733 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.733 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.735 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.735 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.735 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.736 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.736 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.736 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.737 I llm_load_print_meta: max token length = 93
0.00.377.939 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.377.948 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.377.949 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.377.949 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.377.950 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.377.950 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.383.113 I llama_new_context_with_model: n_seq_max     = 1
0.00.383.119 I llama_new_context_with_model: n_ctx         = 4096
0.00.383.120 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.383.120 I llama_new_context_with_model: n_batch       = 2048
0.00.383.121 I llama_new_context_with_model: n_ubatch      = 512
0.00.383.121 I llama_new_context_with_model: flash_attn    = 0
0.00.383.123 I llama_new_context_with_model: freq_base     = 10000.0
0.00.383.124 I llama_new_context_with_model: freq_scale    = 1
0.00.383.125 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.145 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.397.902 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.397.917 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.398.009 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.399.252 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.399.259 I llama_new_context_with_model: graph nodes  = 601
0.00.399.260 I llama_new_context_with_model: graph splits = 1
0.00.399.263 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.399.263 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.960 I main: llama threadpool init, n_threads = 4
0.00.484.975 I 
0.00.485.050 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.485.053 I 
0.00.485.087 I sampler seed: 3246925668
0.00.485.098 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.485.102 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.485.103 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.485.103 I 
 increasities, a man who had an affair with his underage daughter, and another man who engaged in inappropriate sexual behavior with a minor.

These are just a

0.02.745.170 I llama_perf_sampler_print:    sampling time =       5.69 ms /    33 runs   (    0.17 ms per token,  5802.71 tokens per second)
0.02.745.173 I llama_perf_context_print:        load time =     484.21 ms
0.02.745.174 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.745.175 I llama_perf_context_print:        eval time =    2240.58 ms /    32 runs   (   70.02 ms per token,    14.28 tokens per second)
0.02.745.176 I llama_perf_context_print:       total time =    2260.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.543 I build: 4396 (b0d6b66b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.020.805 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.823 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.830 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.834 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.838 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.838 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.839 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.840 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.840 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.841 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.845 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.845 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.846 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.846 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.847 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.765 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.855 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.742 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.748 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.749 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.750 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.750 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.751 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.752 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.754 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.755 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.755 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.756 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.757 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.761 I llama_model_loader: - type  f32:   37 tensors
0.00.131.762 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.641 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.554 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.098 I llm_load_vocab: special tokens cache size = 5
0.00.275.584 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.600 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.601 I llm_load_print_meta: arch             = gemma
0.00.275.602 I llm_load_print_meta: vocab type       = SPM
0.00.275.602 I llm_load_print_meta: n_vocab          = 256000
0.00.275.603 I llm_load_print_meta: n_merges         = 0
0.00.275.603 I llm_load_print_meta: vocab_only       = 0
0.00.275.603 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.604 I llm_load_print_meta: n_embd           = 2048
0.00.275.604 I llm_load_print_meta: n_layer          = 18
0.00.275.618 I llm_load_print_meta: n_head           = 8
0.00.275.620 I llm_load_print_meta: n_head_kv        = 1
0.00.275.620 I llm_load_print_meta: n_rot            = 256
0.00.275.620 I llm_load_print_meta: n_swa            = 0
0.00.275.621 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.621 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.623 I llm_load_print_meta: n_gqa            = 8
0.00.275.625 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.626 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.627 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.629 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.630 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.630 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.630 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.632 I llm_load_print_meta: n_ff             = 16384
0.00.275.632 I llm_load_print_meta: n_expert         = 0
0.00.275.633 I llm_load_print_meta: n_expert_used    = 0
0.00.275.633 I llm_load_print_meta: causal attn      = 1
0.00.275.633 I llm_load_print_meta: pooling type     = 0
0.00.275.633 I llm_load_print_meta: rope type        = 2
0.00.275.634 I llm_load_print_meta: rope scaling     = linear
0.00.275.635 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.636 I llm_load_print_meta: freq_scale_train = 1
0.00.275.637 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.637 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.637 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.638 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.638 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.638 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.639 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.641 I llm_load_print_meta: model type       = 2B
0.00.275.642 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.643 I llm_load_print_meta: model params     = 2.51 B
0.00.275.644 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.644 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.645 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.646 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.646 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.647 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.647 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.647 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.648 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.648 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.648 I llm_load_print_meta: max token length = 93
0.00.371.027 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.376.218 I llama_new_context_with_model: n_seq_max     = 1
0.00.376.224 I llama_new_context_with_model: n_ctx         = 4096
0.00.376.225 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.376.225 I llama_new_context_with_model: n_batch       = 2048
0.00.376.226 I llama_new_context_with_model: n_ubatch      = 512
0.00.376.226 I llama_new_context_with_model: flash_attn    = 0
0.00.376.229 I llama_new_context_with_model: freq_base     = 10000.0
0.00.376.230 I llama_new_context_with_model: freq_scale    = 1
0.00.376.231 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.252 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.391.221 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.391.236 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.391.326 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.392.624 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.392.631 I llama_new_context_with_model: graph nodes  = 601
0.00.392.631 I llama_new_context_with_model: graph splits = 1
0.00.392.634 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.392.635 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.724 I main: llama threadpool init, n_threads = 4
0.00.479.740 I 
0.00.479.820 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.479.823 I 
0.00.479.859 I sampler seed: 780643110
0.00.479.870 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.882 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.886 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.886 I 
 increasities with an angry, grumpy demeanor.

These are the three main personality traits that contribute to a grumpy and irritable personality.

Which of the following is

0.02.674.108 I llama_perf_sampler_print:    sampling time =       5.47 ms /    33 runs   (    0.17 ms per token,  6029.60 tokens per second)
0.02.674.110 I llama_perf_context_print:        load time =     478.96 ms
0.02.674.111 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.674.113 I llama_perf_context_print:        eval time =    2175.03 ms /    32 runs   (   67.97 ms per token,    14.71 tokens per second)
0.02.674.114 I llama_perf_context_print:       total time =    2194.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.555 I build: 4396 (b0d6b66b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.000.763 I main: load the model and apply lora adapter, if any
0.00.021.282 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.290 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.298 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.303 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.304 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.308 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.308 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.309 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.309 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.310 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.311 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.315 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.315 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.316 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.317 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.317 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.754 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.098 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.884 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.891 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.892 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.893 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.893 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.895 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.896 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.899 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.900 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.901 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.902 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.134.903 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.907 I llama_model_loader: - type  f32:   37 tensors
0.00.134.908 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.871 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.265 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.879 I llm_load_vocab: special tokens cache size = 5
0.00.277.548 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.562 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.563 I llm_load_print_meta: arch             = gemma
0.00.277.564 I llm_load_print_meta: vocab type       = SPM
0.00.277.564 I llm_load_print_meta: n_vocab          = 256000
0.00.277.565 I llm_load_print_meta: n_merges         = 0
0.00.277.565 I llm_load_print_meta: vocab_only       = 0
0.00.277.565 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.566 I llm_load_print_meta: n_embd           = 2048
0.00.277.566 I llm_load_print_meta: n_layer          = 18
0.00.277.578 I llm_load_print_meta: n_head           = 8
0.00.277.580 I llm_load_print_meta: n_head_kv        = 1
0.00.277.580 I llm_load_print_meta: n_rot            = 256
0.00.277.581 I llm_load_print_meta: n_swa            = 0
0.00.277.581 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.581 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.583 I llm_load_print_meta: n_gqa            = 8
0.00.277.585 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.587 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.588 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.589 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.590 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.590 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.591 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.593 I llm_load_print_meta: n_ff             = 16384
0.00.277.593 I llm_load_print_meta: n_expert         = 0
0.00.277.593 I llm_load_print_meta: n_expert_used    = 0
0.00.277.594 I llm_load_print_meta: causal attn      = 1
0.00.277.595 I llm_load_print_meta: pooling type     = 0
0.00.277.595 I llm_load_print_meta: rope type        = 2
0.00.277.596 I llm_load_print_meta: rope scaling     = linear
0.00.277.598 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.598 I llm_load_print_meta: freq_scale_train = 1
0.00.277.599 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.599 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.599 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.600 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.600 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.600 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.600 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.603 I llm_load_print_meta: model type       = 2B
0.00.277.604 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.605 I llm_load_print_meta: model params     = 2.51 B
0.00.277.606 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.606 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.606 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.607 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.607 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.608 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.608 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.609 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.609 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.609 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.610 I llm_load_print_meta: max token length = 93
0.00.354.349 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.354.355 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.356 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.354.356 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.354.357 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.358 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.359.553 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.559 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.560 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.560 I llama_new_context_with_model: n_batch       = 2048
0.00.359.560 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.561 I llama_new_context_with_model: flash_attn    = 0
0.00.359.563 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.564 I llama_new_context_with_model: freq_scale    = 1
0.00.359.565 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.585 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.373.820 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.834 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.928 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.173 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.180 I llama_new_context_with_model: graph nodes  = 601
0.00.375.180 I llama_new_context_with_model: graph splits = 1
0.00.375.184 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.375.184 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.853 I main: llama threadpool init, n_threads = 4
0.00.460.870 I 
0.00.460.948 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.460.951 I 
0.00.460.984 I sampler seed: 557369416
0.00.460.995 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.007 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.011 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.011 I 
 increasities with the intention of acquiring knowledge, skills, or personal advancement.

**a) What is the primary purpose of acquiring knowledge?**

b)

0.02.739.807 I llama_perf_sampler_print:    sampling time =       5.65 ms /    33 runs   (    0.17 ms per token,  5836.58 tokens per second)
0.02.739.809 I llama_perf_context_print:        load time =     460.07 ms
0.02.739.811 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.739.812 I llama_perf_context_print:        eval time =    2258.93 ms /    32 runs   (   70.59 ms per token,    14.17 tokens per second)
0.02.739.813 I llama_perf_context_print:       total time =    2278.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.538 I build: 4396 (b0d6b66b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.000.739 I main: load the model and apply lora adapter, if any
0.00.021.123 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.134 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.143 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.148 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.149 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.153 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.154 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.155 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.155 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.156 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.156 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.161 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.161 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.162 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.162 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.163 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.728 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.114 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.931 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.938 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.938 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.939 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.940 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.941 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.941 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.944 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.944 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.945 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.946 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.947 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.951 I llama_model_loader: - type  f32:   37 tensors
0.00.131.952 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.438 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.125 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.740 I llm_load_vocab: special tokens cache size = 5
0.00.275.448 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.467 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.469 I llm_load_print_meta: arch             = gemma
0.00.275.470 I llm_load_print_meta: vocab type       = SPM
0.00.275.471 I llm_load_print_meta: n_vocab          = 256000
0.00.275.471 I llm_load_print_meta: n_merges         = 0
0.00.275.471 I llm_load_print_meta: vocab_only       = 0
0.00.275.472 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.472 I llm_load_print_meta: n_embd           = 2048
0.00.275.472 I llm_load_print_meta: n_layer          = 18
0.00.275.486 I llm_load_print_meta: n_head           = 8
0.00.275.488 I llm_load_print_meta: n_head_kv        = 1
0.00.275.489 I llm_load_print_meta: n_rot            = 256
0.00.275.489 I llm_load_print_meta: n_swa            = 0
0.00.275.489 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.490 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.491 I llm_load_print_meta: n_gqa            = 8
0.00.275.493 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.494 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.495 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.496 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.497 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.497 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.497 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.499 I llm_load_print_meta: n_ff             = 16384
0.00.275.499 I llm_load_print_meta: n_expert         = 0
0.00.275.499 I llm_load_print_meta: n_expert_used    = 0
0.00.275.500 I llm_load_print_meta: causal attn      = 1
0.00.275.500 I llm_load_print_meta: pooling type     = 0
0.00.275.500 I llm_load_print_meta: rope type        = 2
0.00.275.501 I llm_load_print_meta: rope scaling     = linear
0.00.275.502 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.503 I llm_load_print_meta: freq_scale_train = 1
0.00.275.503 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.504 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.504 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.504 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.504 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.505 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.505 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.507 I llm_load_print_meta: model type       = 2B
0.00.275.508 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.509 I llm_load_print_meta: model params     = 2.51 B
0.00.275.510 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.510 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.511 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.511 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.512 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.512 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.513 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.513 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.513 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.514 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.514 I llm_load_print_meta: max token length = 93
0.00.346.729 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.346.735 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.351.941 I llama_new_context_with_model: n_seq_max     = 1
0.00.351.947 I llama_new_context_with_model: n_ctx         = 4096
0.00.351.948 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.351.948 I llama_new_context_with_model: n_batch       = 2048
0.00.351.949 I llama_new_context_with_model: n_ubatch      = 512
0.00.351.949 I llama_new_context_with_model: flash_attn    = 0
0.00.351.952 I llama_new_context_with_model: freq_base     = 10000.0
0.00.351.952 I llama_new_context_with_model: freq_scale    = 1
0.00.351.953 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.974 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.366.915 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.931 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.367.024 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.319 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.368.326 I llama_new_context_with_model: graph nodes  = 601
0.00.368.326 I llama_new_context_with_model: graph splits = 1
0.00.368.331 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.368.331 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.551 I main: llama threadpool init, n_threads = 4
0.00.456.566 I 
0.00.456.640 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.456.643 I 
0.00.456.676 I sampler seed: 3599811510
0.00.456.686 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.689 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.690 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.690 I 
 increasities, but also with a strong sense of self and purpose.

**Answer:** The individual possesses a unique blend of resilience, determination, and self-

0.02.874.236 I llama_perf_sampler_print:    sampling time =       5.46 ms /    33 runs   (    0.17 ms per token,  6049.50 tokens per second)
0.02.874.239 I llama_perf_context_print:        load time =     455.80 ms
0.02.874.240 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.874.241 I llama_perf_context_print:        eval time =    2398.09 ms /    32 runs   (   74.94 ms per token,    13.34 tokens per second)
0.02.874.242 I llama_perf_context_print:       total time =    2417.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.679s
user	0m39.519s
sys	0m9.458s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4396 (b0d6b66b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40270.58 ms
main:    total time = 40270.58 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.525 I build: 4396 (b0d6b66b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.721 I main: llama backend init
0.00.000.728 I main: load the model and apply lora adapter, if any
0.00.021.466 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.476 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.488 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.495 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.496 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.499 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.500 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.501 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.501 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.502 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.502 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.505 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.506 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.507 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.508 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.509 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.228 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.855 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.675 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.681 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.682 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.683 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.683 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.684 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.685 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.687 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.688 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.688 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.689 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.691 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.695 I llama_model_loader: - type  f32:   37 tensors
0.00.132.696 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.697 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.159 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.531 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.088 I llm_load_vocab: special tokens cache size = 5
0.00.272.688 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.707 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.708 I llm_load_print_meta: arch             = gemma
0.00.272.709 I llm_load_print_meta: vocab type       = SPM
0.00.272.710 I llm_load_print_meta: n_vocab          = 256000
0.00.272.710 I llm_load_print_meta: n_merges         = 0
0.00.272.710 I llm_load_print_meta: vocab_only       = 0
0.00.272.711 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.712 I llm_load_print_meta: n_embd           = 2048
0.00.272.712 I llm_load_print_meta: n_layer          = 18
0.00.272.724 I llm_load_print_meta: n_head           = 8
0.00.272.726 I llm_load_print_meta: n_head_kv        = 1
0.00.272.726 I llm_load_print_meta: n_rot            = 256
0.00.272.727 I llm_load_print_meta: n_swa            = 0
0.00.272.727 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.727 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.729 I llm_load_print_meta: n_gqa            = 8
0.00.272.730 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.732 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.733 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.734 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.735 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.735 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.735 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.737 I llm_load_print_meta: n_ff             = 16384
0.00.272.737 I llm_load_print_meta: n_expert         = 0
0.00.272.737 I llm_load_print_meta: n_expert_used    = 0
0.00.272.738 I llm_load_print_meta: causal attn      = 1
0.00.272.738 I llm_load_print_meta: pooling type     = 0
0.00.272.738 I llm_load_print_meta: rope type        = 2
0.00.272.739 I llm_load_print_meta: rope scaling     = linear
0.00.272.740 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.741 I llm_load_print_meta: freq_scale_train = 1
0.00.272.741 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.741 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.742 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.742 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.743 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.743 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.743 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.745 I llm_load_print_meta: model type       = 2B
0.00.272.747 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.748 I llm_load_print_meta: model params     = 2.51 B
0.00.272.748 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.749 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.749 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.750 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.750 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.751 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.751 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.751 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.752 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.752 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.752 I llm_load_print_meta: max token length = 93
0.00.333.384 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.333.392 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.333.393 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.333.394 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.333.394 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.333.395 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.338.594 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.600 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.601 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.601 I llama_new_context_with_model: n_batch       = 2048
0.00.338.601 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.602 I llama_new_context_with_model: flash_attn    = 0
0.00.338.605 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.606 I llama_new_context_with_model: freq_scale    = 1
0.00.338.606 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.338.627 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.352.978 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.992 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.076 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.294 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.300 I llama_new_context_with_model: graph nodes  = 601
0.00.354.301 I llama_new_context_with_model: graph splits = 1
0.00.354.304 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.354.305 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.510 I main: llama threadpool init, n_threads = 4
0.00.429.526 I 
0.00.429.598 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.429.602 I 
0.00.429.635 I sampler seed: 432032077
0.00.429.645 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.658 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.662 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.662 I 
 increasities in the city of Bristol.

Bristol has a long and complicated history with music and nightlife. From the early days of Bristol as a frontier settlement,

0.02.035.250 I llama_perf_sampler_print:    sampling time =       5.48 ms /    33 runs   (    0.17 ms per token,  6026.30 tokens per second)
0.02.035.252 I llama_perf_context_print:        load time =     428.77 ms
0.02.035.254 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.035.255 I llama_perf_context_print:        eval time =    1586.62 ms /    32 runs   (   49.58 ms per token,    20.17 tokens per second)
0.02.035.256 I llama_perf_context_print:       total time =    1605.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4396 (b0d6b66b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40240.24 ms
main:    total time = 40240.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.550 I build: 4396 (b0d6b66b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.748 I main: load the model and apply lora adapter, if any
0.00.021.415 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.433 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.439 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.443 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.447 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.448 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.448 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.449 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.449 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.450 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.454 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.454 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.455 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.455 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.456 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.128 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.981 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.811 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.817 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.818 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.819 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.819 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.820 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.821 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.823 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.824 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.827 I llama_model_loader: - type  f32:   37 tensors
0.00.131.828 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.828 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.764 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.321 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.844 I llm_load_vocab: special tokens cache size = 5
0.00.268.246 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.262 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.263 I llm_load_print_meta: arch             = gemma
0.00.268.264 I llm_load_print_meta: vocab type       = SPM
0.00.268.265 I llm_load_print_meta: n_vocab          = 256000
0.00.268.265 I llm_load_print_meta: n_merges         = 0
0.00.268.265 I llm_load_print_meta: vocab_only       = 0
0.00.268.266 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.266 I llm_load_print_meta: n_embd           = 2048
0.00.268.266 I llm_load_print_meta: n_layer          = 18
0.00.268.277 I llm_load_print_meta: n_head           = 8
0.00.268.279 I llm_load_print_meta: n_head_kv        = 1
0.00.268.279 I llm_load_print_meta: n_rot            = 256
0.00.268.279 I llm_load_print_meta: n_swa            = 0
0.00.268.280 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.280 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.281 I llm_load_print_meta: n_gqa            = 8
0.00.268.283 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.285 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.286 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.287 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.287 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.287 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.288 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.290 I llm_load_print_meta: n_ff             = 16384
0.00.268.290 I llm_load_print_meta: n_expert         = 0
0.00.268.290 I llm_load_print_meta: n_expert_used    = 0
0.00.268.291 I llm_load_print_meta: causal attn      = 1
0.00.268.291 I llm_load_print_meta: pooling type     = 0
0.00.268.291 I llm_load_print_meta: rope type        = 2
0.00.268.292 I llm_load_print_meta: rope scaling     = linear
0.00.268.293 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.294 I llm_load_print_meta: freq_scale_train = 1
0.00.268.294 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.294 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.295 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.295 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.295 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.296 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.296 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.298 I llm_load_print_meta: model type       = 2B
0.00.268.299 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.300 I llm_load_print_meta: model params     = 2.51 B
0.00.268.301 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.302 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.302 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.302 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.303 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.303 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.304 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.304 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.305 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.305 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.305 I llm_load_print_meta: max token length = 93
0.00.326.614 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.331.828 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.835 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.835 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.836 I llama_new_context_with_model: n_batch       = 2048
0.00.331.836 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.836 I llama_new_context_with_model: flash_attn    = 0
0.00.331.839 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.839 I llama_new_context_with_model: freq_scale    = 1
0.00.331.840 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.331.862 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.346.905 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.920 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.020 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.325 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.332 I llama_new_context_with_model: graph nodes  = 601
0.00.348.332 I llama_new_context_with_model: graph splits = 1
0.00.348.336 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.348.336 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.874 I main: llama threadpool init, n_threads = 4
0.00.422.889 I 
0.00.422.965 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.422.968 I 
0.00.423.002 I sampler seed: 2083034229
0.00.423.013 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.025 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.028 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.029 I 
 increasities with a focus on the human experience.

**Answer:**

The provided text suggests a rich and evocative interpretation of human experience. It implies a deep

0.02.009.159 I llama_perf_sampler_print:    sampling time =       5.62 ms /    33 runs   (    0.17 ms per token,  5867.71 tokens per second)
0.02.009.162 I llama_perf_context_print:        load time =     422.11 ms
0.02.009.164 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.009.166 I llama_perf_context_print:        eval time =    1566.21 ms /    32 runs   (   48.94 ms per token,    20.43 tokens per second)
0.02.009.167 I llama_perf_context_print:       total time =    1586.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.347s
user	10m24.309s
sys	0m6.909s
