+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4066 (b0cefea5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.001.131 I main: load the model and apply lora adapter, if any
0.00.023.719 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.729 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.824 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.836 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.838 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.843 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.847 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.848 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.849 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.851 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.851 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.858 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.859 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.860 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.862 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.864 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.915 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.199 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.186 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.195 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.196 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.197 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.198 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.199 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.200 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.204 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.205 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.206 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.207 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.208 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.216 I llama_model_loader: - type  f32:   37 tensors
0.00.265.219 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.761 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.100 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.051 I llm_load_vocab: special tokens cache size = 5
0.00.608.405 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.479 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.480 I llm_load_print_meta: arch             = gemma
0.00.608.481 I llm_load_print_meta: vocab type       = SPM
0.00.608.482 I llm_load_print_meta: n_vocab          = 256000
0.00.608.484 I llm_load_print_meta: n_merges         = 0
0.00.608.485 I llm_load_print_meta: vocab_only       = 0
0.00.608.486 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.486 I llm_load_print_meta: n_embd           = 2048
0.00.608.486 I llm_load_print_meta: n_layer          = 18
0.00.608.555 I llm_load_print_meta: n_head           = 8
0.00.608.561 I llm_load_print_meta: n_head_kv        = 1
0.00.608.562 I llm_load_print_meta: n_rot            = 256
0.00.608.562 I llm_load_print_meta: n_swa            = 0
0.00.608.563 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.563 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.568 I llm_load_print_meta: n_gqa            = 8
0.00.608.573 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.578 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.579 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.580 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.581 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.581 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.581 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.587 I llm_load_print_meta: n_ff             = 16384
0.00.608.587 I llm_load_print_meta: n_expert         = 0
0.00.608.588 I llm_load_print_meta: n_expert_used    = 0
0.00.608.588 I llm_load_print_meta: causal attn      = 1
0.00.608.588 I llm_load_print_meta: pooling type     = 0
0.00.608.589 I llm_load_print_meta: rope type        = 2
0.00.608.589 I llm_load_print_meta: rope scaling     = linear
0.00.608.590 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.591 I llm_load_print_meta: freq_scale_train = 1
0.00.608.592 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.592 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.592 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.593 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.593 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.593 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.593 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.594 I llm_load_print_meta: model type       = 2B
0.00.608.595 I llm_load_print_meta: model ftype      = Q8_0
0.00.608.596 I llm_load_print_meta: model params     = 2.51 B
0.00.608.606 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.608.606 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.607 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.607 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.607 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.608 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.608 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.609 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.614 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.616 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.616 I llm_load_print_meta: max token length = 93
0.00.709.445 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.709.453 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.709.454 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.709.455 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.709.456 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.709.457 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.715.243 I llama_new_context_with_model: n_seq_max     = 1
0.00.715.250 I llama_new_context_with_model: n_ctx         = 4096
0.00.715.251 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.715.251 I llama_new_context_with_model: n_batch       = 2048
0.00.715.251 I llama_new_context_with_model: n_ubatch      = 512
0.00.715.252 I llama_new_context_with_model: flash_attn    = 0
0.00.715.254 I llama_new_context_with_model: freq_base     = 10000.0
0.00.715.255 I llama_new_context_with_model: freq_scale    = 1
0.00.715.256 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.731.647 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.731.686 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.731.806 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.734.350 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.734.354 I llama_new_context_with_model: graph nodes  = 601
0.00.734.354 I llama_new_context_with_model: graph splits = 1
0.00.734.378 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.341.752 I main: llama threadpool init, n_threads = 4
0.01.341.765 I 
0.01.341.872 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.341.876 I 
0.01.342.108 I sampler seed: 1160785000
0.01.342.121 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.342.130 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.342.131 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.342.131 I 
 increably and with a cheerful smile. The world was her canvas, and she painted it with her boundless creativity.

Eleanor was a woman who embodied the essence

0.14.783.181 I llama_perf_sampler_print:    sampling time =      47.24 ms /    33 runs   (    1.43 ms per token,   698.53 tokens per second)
0.14.783.184 I llama_perf_context_print:        load time =    1340.52 ms
0.14.783.186 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.783.187 I llama_perf_context_print:        eval time =   13352.79 ms /    32 runs   (  417.27 ms per token,     2.40 tokens per second)
0.14.783.188 I llama_perf_context_print:       total time =   13441.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 4066 (b0cefea5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.001.141 I main: load the model and apply lora adapter, if any
0.00.024.095 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.200 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.216 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.217 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.222 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.226 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.227 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.229 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.230 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.231 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.238 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.239 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.241 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.242 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.244 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.928 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.103 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.257 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.265 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.266 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.267 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.268 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.270 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.271 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.275 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.276 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.277 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.278 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.267.280 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.288 I llama_model_loader: - type  f32:   37 tensors
0.00.267.290 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.256 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.623 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.617 I llm_load_vocab: special tokens cache size = 5
0.00.614.384 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.457 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.458 I llm_load_print_meta: arch             = gemma
0.00.614.459 I llm_load_print_meta: vocab type       = SPM
0.00.614.460 I llm_load_print_meta: n_vocab          = 256000
0.00.614.462 I llm_load_print_meta: n_merges         = 0
0.00.614.463 I llm_load_print_meta: vocab_only       = 0
0.00.614.463 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.464 I llm_load_print_meta: n_embd           = 2048
0.00.614.464 I llm_load_print_meta: n_layer          = 18
0.00.614.529 I llm_load_print_meta: n_head           = 8
0.00.614.536 I llm_load_print_meta: n_head_kv        = 1
0.00.614.537 I llm_load_print_meta: n_rot            = 256
0.00.614.537 I llm_load_print_meta: n_swa            = 0
0.00.614.538 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.538 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.543 I llm_load_print_meta: n_gqa            = 8
0.00.614.547 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.552 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.553 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.554 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.555 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.555 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.556 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.560 I llm_load_print_meta: n_ff             = 16384
0.00.614.561 I llm_load_print_meta: n_expert         = 0
0.00.614.561 I llm_load_print_meta: n_expert_used    = 0
0.00.614.562 I llm_load_print_meta: causal attn      = 1
0.00.614.562 I llm_load_print_meta: pooling type     = 0
0.00.614.562 I llm_load_print_meta: rope type        = 2
0.00.614.563 I llm_load_print_meta: rope scaling     = linear
0.00.614.564 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.564 I llm_load_print_meta: freq_scale_train = 1
0.00.614.565 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.565 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.565 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.566 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.566 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.566 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.566 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.567 I llm_load_print_meta: model type       = 2B
0.00.614.568 I llm_load_print_meta: model ftype      = Q8_0
0.00.614.568 I llm_load_print_meta: model params     = 2.51 B
0.00.614.578 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.614.578 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.579 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.579 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.580 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.580 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.580 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.581 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.586 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.587 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.588 I llm_load_print_meta: max token length = 93
0.00.710.745 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.716.591 I llama_new_context_with_model: n_seq_max     = 1
0.00.716.598 I llama_new_context_with_model: n_ctx         = 4096
0.00.716.599 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.716.599 I llama_new_context_with_model: n_batch       = 2048
0.00.716.600 I llama_new_context_with_model: n_ubatch      = 512
0.00.716.600 I llama_new_context_with_model: flash_attn    = 0
0.00.716.603 I llama_new_context_with_model: freq_base     = 10000.0
0.00.716.603 I llama_new_context_with_model: freq_scale    = 1
0.00.716.604 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.734.535 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.734.575 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.734.701 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.737.177 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.737.181 I llama_new_context_with_model: graph nodes  = 601
0.00.737.182 I llama_new_context_with_model: graph splits = 1
0.00.737.206 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.342.868 I main: llama threadpool init, n_threads = 4
0.01.342.880 I 
0.01.342.991 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.342.995 I 
0.01.343.221 I sampler seed: 2846143962
0.01.343.234 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.241 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.343.244 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.245 I 
 increasities, but there is no such thing as a neutral or objective view of the world.

This is a bold statement, but it is important to remember

0.14.868.730 I llama_perf_sampler_print:    sampling time =      47.24 ms /    33 runs   (    1.43 ms per token,   698.49 tokens per second)
0.14.868.744 I llama_perf_context_print:        load time =    1341.62 ms
0.14.868.746 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.868.749 I llama_perf_context_print:        eval time =   13437.14 ms /    32 runs   (  419.91 ms per token,     2.38 tokens per second)
0.14.868.750 I llama_perf_context_print:       total time =   13525.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4066 (b0cefea5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.001.113 I main: load the model and apply lora adapter, if any
0.00.023.759 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.768 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.861 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.873 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.875 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.880 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.884 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.885 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.886 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.887 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.888 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.896 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.897 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.899 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.900 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.909 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.253 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.848 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.942 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.951 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.952 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.953 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.954 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.955 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.957 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.960 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.962 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.963 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.964 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.271.965 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.972 I llama_model_loader: - type  f32:   37 tensors
0.00.271.975 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.182 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.249 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.197 I llm_load_vocab: special tokens cache size = 5
0.00.625.527 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.625.595 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.625.600 I llm_load_print_meta: arch             = gemma
0.00.625.600 I llm_load_print_meta: vocab type       = SPM
0.00.625.601 I llm_load_print_meta: n_vocab          = 256000
0.00.625.604 I llm_load_print_meta: n_merges         = 0
0.00.625.604 I llm_load_print_meta: vocab_only       = 0
0.00.625.605 I llm_load_print_meta: n_ctx_train      = 8192
0.00.625.605 I llm_load_print_meta: n_embd           = 2048
0.00.625.605 I llm_load_print_meta: n_layer          = 18
0.00.625.672 I llm_load_print_meta: n_head           = 8
0.00.625.682 I llm_load_print_meta: n_head_kv        = 1
0.00.625.683 I llm_load_print_meta: n_rot            = 256
0.00.625.683 I llm_load_print_meta: n_swa            = 0
0.00.625.684 I llm_load_print_meta: n_embd_head_k    = 256
0.00.625.684 I llm_load_print_meta: n_embd_head_v    = 256
0.00.625.689 I llm_load_print_meta: n_gqa            = 8
0.00.625.694 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.625.700 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.625.702 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.625.703 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.625.703 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.625.704 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.625.704 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.625.709 I llm_load_print_meta: n_ff             = 16384
0.00.625.710 I llm_load_print_meta: n_expert         = 0
0.00.625.710 I llm_load_print_meta: n_expert_used    = 0
0.00.625.711 I llm_load_print_meta: causal attn      = 1
0.00.625.711 I llm_load_print_meta: pooling type     = 0
0.00.625.712 I llm_load_print_meta: rope type        = 2
0.00.625.712 I llm_load_print_meta: rope scaling     = linear
0.00.625.714 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.625.714 I llm_load_print_meta: freq_scale_train = 1
0.00.625.715 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.625.715 I llm_load_print_meta: rope_finetuned   = unknown
0.00.625.715 I llm_load_print_meta: ssm_d_conv       = 0
0.00.625.716 I llm_load_print_meta: ssm_d_inner      = 0
0.00.625.717 I llm_load_print_meta: ssm_d_state      = 0
0.00.625.717 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.625.717 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.625.718 I llm_load_print_meta: model type       = 2B
0.00.625.720 I llm_load_print_meta: model ftype      = Q8_0
0.00.625.732 I llm_load_print_meta: model params     = 2.51 B
0.00.625.742 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.625.743 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.625.743 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.625.744 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.625.744 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.625.745 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.625.746 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.625.747 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.625.753 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.625.754 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.625.755 I llm_load_print_meta: max token length = 93
0.00.711.565 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.711.575 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.711.576 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.711.576 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.711.577 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.711.578 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.717.412 I llama_new_context_with_model: n_seq_max     = 1
0.00.717.420 I llama_new_context_with_model: n_ctx         = 4096
0.00.717.421 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.717.421 I llama_new_context_with_model: n_batch       = 2048
0.00.717.421 I llama_new_context_with_model: n_ubatch      = 512
0.00.717.422 I llama_new_context_with_model: flash_attn    = 0
0.00.717.425 I llama_new_context_with_model: freq_base     = 10000.0
0.00.717.425 I llama_new_context_with_model: freq_scale    = 1
0.00.717.426 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.733.619 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.733.658 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.733.779 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.736.318 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.736.322 I llama_new_context_with_model: graph nodes  = 601
0.00.736.323 I llama_new_context_with_model: graph splits = 1
0.00.736.349 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.342.748 I main: llama threadpool init, n_threads = 4
0.01.342.760 I 
0.01.342.867 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.342.886 I 
0.01.343.115 I sampler seed: 2918645256
0.01.343.127 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.134 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.343.137 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.138 I 
 seconary education in the Philippines faces several challenges, including limited resources, inadequate teacher training, and lack of learner support.

**To address these challenges, a

0.14.750.046 I llama_perf_sampler_print:    sampling time =      47.35 ms /    33 runs   (    1.43 ms per token,   696.97 tokens per second)
0.14.750.049 I llama_perf_context_print:        load time =    1341.53 ms
0.14.750.051 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.750.052 I llama_perf_context_print:        eval time =   13319.27 ms /    32 runs   (  416.23 ms per token,     2.40 tokens per second)
0.14.750.053 I llama_perf_context_print:       total time =   13407.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4066 (b0cefea5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.001.094 I main: load the model and apply lora adapter, if any
0.00.023.396 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.407 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.494 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.505 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.507 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.511 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.515 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.516 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.517 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.518 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.519 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.526 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.528 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.530 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.539 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.541 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.366 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.714 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.997 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.006 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.008 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.009 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.010 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.011 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.013 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.017 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.018 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.019 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.020 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.021 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.030 I llama_model_loader: - type  f32:   37 tensors
0.00.266.032 I llama_model_loader: - type q8_0:  127 tensors
0.00.435.654 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.493.504 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.494.435 I llm_load_vocab: special tokens cache size = 5
0.00.589.583 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.589.654 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.589.655 I llm_load_print_meta: arch             = gemma
0.00.589.656 I llm_load_print_meta: vocab type       = SPM
0.00.589.657 I llm_load_print_meta: n_vocab          = 256000
0.00.589.659 I llm_load_print_meta: n_merges         = 0
0.00.589.660 I llm_load_print_meta: vocab_only       = 0
0.00.589.660 I llm_load_print_meta: n_ctx_train      = 8192
0.00.589.660 I llm_load_print_meta: n_embd           = 2048
0.00.589.661 I llm_load_print_meta: n_layer          = 18
0.00.589.726 I llm_load_print_meta: n_head           = 8
0.00.589.733 I llm_load_print_meta: n_head_kv        = 1
0.00.589.733 I llm_load_print_meta: n_rot            = 256
0.00.589.734 I llm_load_print_meta: n_swa            = 0
0.00.589.735 I llm_load_print_meta: n_embd_head_k    = 256
0.00.589.735 I llm_load_print_meta: n_embd_head_v    = 256
0.00.589.740 I llm_load_print_meta: n_gqa            = 8
0.00.589.745 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.589.750 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.589.751 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.589.753 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.589.753 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.589.754 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.589.755 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.589.760 I llm_load_print_meta: n_ff             = 16384
0.00.589.761 I llm_load_print_meta: n_expert         = 0
0.00.589.761 I llm_load_print_meta: n_expert_used    = 0
0.00.589.761 I llm_load_print_meta: causal attn      = 1
0.00.589.762 I llm_load_print_meta: pooling type     = 0
0.00.589.762 I llm_load_print_meta: rope type        = 2
0.00.589.763 I llm_load_print_meta: rope scaling     = linear
0.00.589.764 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.589.765 I llm_load_print_meta: freq_scale_train = 1
0.00.589.765 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.589.766 I llm_load_print_meta: rope_finetuned   = unknown
0.00.589.766 I llm_load_print_meta: ssm_d_conv       = 0
0.00.589.767 I llm_load_print_meta: ssm_d_inner      = 0
0.00.589.767 I llm_load_print_meta: ssm_d_state      = 0
0.00.589.767 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.589.768 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.589.769 I llm_load_print_meta: model type       = 2B
0.00.589.771 I llm_load_print_meta: model ftype      = Q8_0
0.00.589.771 I llm_load_print_meta: model params     = 2.51 B
0.00.589.780 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.589.781 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.589.782 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.589.782 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.589.783 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.589.784 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.589.784 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.589.784 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.589.795 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.589.796 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.589.797 I llm_load_print_meta: max token length = 93
0.00.662.528 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.662.539 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.668.107 I llama_new_context_with_model: n_seq_max     = 1
0.00.668.114 I llama_new_context_with_model: n_ctx         = 4096
0.00.668.115 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.668.115 I llama_new_context_with_model: n_batch       = 2048
0.00.668.115 I llama_new_context_with_model: n_ubatch      = 512
0.00.668.116 I llama_new_context_with_model: flash_attn    = 0
0.00.668.118 I llama_new_context_with_model: freq_base     = 10000.0
0.00.668.119 I llama_new_context_with_model: freq_scale    = 1
0.00.668.120 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.684.104 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.684.142 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.684.261 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.686.782 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.686.786 I llama_new_context_with_model: graph nodes  = 601
0.00.686.786 I llama_new_context_with_model: graph splits = 1
0.00.686.811 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.294.066 I main: llama threadpool init, n_threads = 4
0.01.294.079 I 
0.01.294.190 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.294.194 I 
0.01.294.425 I sampler seed: 4275255877
0.01.294.437 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.294.444 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.294.447 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.294.448 I 
 increasities, which would not otherwise be possible without the existence of the said monstrosity.

This monstrosity is not explicitly named in the text, but is

0.14.740.170 I llama_perf_sampler_print:    sampling time =      47.24 ms /    33 runs   (    1.43 ms per token,   698.59 tokens per second)
0.14.740.174 I llama_perf_context_print:        load time =    1292.88 ms
0.14.740.175 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.740.177 I llama_perf_context_print:        eval time =   13357.43 ms /    32 runs   (  417.42 ms per token,     2.40 tokens per second)
0.14.740.178 I llama_perf_context_print:       total time =   13446.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m8.862s
user	3m47.879s
sys	0m9.403s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4066 (b0cefea5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198626.74 ms
main:    total time = 198626.74 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 4066 (b0cefea5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.001.109 I main: load the model and apply lora adapter, if any
0.00.023.558 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.570 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.665 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.677 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.678 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.683 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.687 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.688 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.689 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.702 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.703 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.710 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.718 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.719 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.720 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.721 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.151 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.306 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.507 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.515 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.516 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.517 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.518 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.519 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.521 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.524 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.525 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.526 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.527 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.264.529 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.537 I llama_model_loader: - type  f32:   37 tensors
0.00.264.539 I llama_model_loader: - type q4_K:  108 tensors
0.00.264.540 I llama_model_loader: - type q6_K:   19 tensors
0.00.435.184 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.494.373 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.495.348 I llm_load_vocab: special tokens cache size = 5
0.00.589.848 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.589.917 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.589.919 I llm_load_print_meta: arch             = gemma
0.00.589.919 I llm_load_print_meta: vocab type       = SPM
0.00.589.920 I llm_load_print_meta: n_vocab          = 256000
0.00.589.923 I llm_load_print_meta: n_merges         = 0
0.00.589.924 I llm_load_print_meta: vocab_only       = 0
0.00.589.924 I llm_load_print_meta: n_ctx_train      = 8192
0.00.589.924 I llm_load_print_meta: n_embd           = 2048
0.00.589.925 I llm_load_print_meta: n_layer          = 18
0.00.589.989 I llm_load_print_meta: n_head           = 8
0.00.589.996 I llm_load_print_meta: n_head_kv        = 1
0.00.589.997 I llm_load_print_meta: n_rot            = 256
0.00.589.997 I llm_load_print_meta: n_swa            = 0
0.00.589.998 I llm_load_print_meta: n_embd_head_k    = 256
0.00.589.998 I llm_load_print_meta: n_embd_head_v    = 256
0.00.590.003 I llm_load_print_meta: n_gqa            = 8
0.00.590.007 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.590.013 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.590.014 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.590.016 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.590.016 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.590.016 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.590.017 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.590.022 I llm_load_print_meta: n_ff             = 16384
0.00.590.022 I llm_load_print_meta: n_expert         = 0
0.00.590.023 I llm_load_print_meta: n_expert_used    = 0
0.00.590.023 I llm_load_print_meta: causal attn      = 1
0.00.590.023 I llm_load_print_meta: pooling type     = 0
0.00.590.024 I llm_load_print_meta: rope type        = 2
0.00.590.024 I llm_load_print_meta: rope scaling     = linear
0.00.590.025 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.590.026 I llm_load_print_meta: freq_scale_train = 1
0.00.590.026 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.590.027 I llm_load_print_meta: rope_finetuned   = unknown
0.00.590.027 I llm_load_print_meta: ssm_d_conv       = 0
0.00.590.027 I llm_load_print_meta: ssm_d_inner      = 0
0.00.590.027 I llm_load_print_meta: ssm_d_state      = 0
0.00.590.028 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.590.028 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.590.029 I llm_load_print_meta: model type       = 2B
0.00.590.030 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.590.031 I llm_load_print_meta: model params     = 2.51 B
0.00.590.039 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.590.039 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.590.040 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.590.041 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.590.042 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.590.042 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.590.043 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.590.043 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.590.050 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.590.051 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.590.051 I llm_load_print_meta: max token length = 93
0.00.652.723 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.652.731 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.652.732 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.652.733 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.652.734 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.652.734 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.658.401 I llama_new_context_with_model: n_seq_max     = 1
0.00.658.408 I llama_new_context_with_model: n_ctx         = 4096
0.00.658.408 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.658.409 I llama_new_context_with_model: n_batch       = 2048
0.00.658.409 I llama_new_context_with_model: n_ubatch      = 512
0.00.658.410 I llama_new_context_with_model: flash_attn    = 0
0.00.658.412 I llama_new_context_with_model: freq_base     = 10000.0
0.00.658.413 I llama_new_context_with_model: freq_scale    = 1
0.00.658.414 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.674.551 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.674.591 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.674.718 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.677.269 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.677.273 I llama_new_context_with_model: graph nodes  = 601
0.00.677.273 I llama_new_context_with_model: graph splits = 1
0.00.677.298 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.249.572 I main: llama threadpool init, n_threads = 4
0.01.249.585 I 
0.01.249.690 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.249.694 I 
0.01.249.925 I sampler seed: 216422998
0.01.249.938 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.249.945 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.249.948 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.249.948 I 
 seconally to the first sentence.

The _______ is the most important factor in determining the success of a project.

(A) Project
(B)

0.12.093.518 I llama_perf_sampler_print:    sampling time =      47.12 ms /    33 runs   (    1.43 ms per token,   700.29 tokens per second)
0.12.093.520 I llama_perf_context_print:        load time =    1248.37 ms
0.12.093.545 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.093.547 I llama_perf_context_print:        eval time =   10755.14 ms /    32 runs   (  336.10 ms per token,     2.98 tokens per second)
0.12.093.547 I llama_perf_context_print:       total time =   10843.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4066 (b0cefea5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198483.75 ms
main:    total time = 198483.75 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4066 (b0cefea5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.001.090 I main: load the model and apply lora adapter, if any
0.00.023.292 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.394 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.408 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.409 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.413 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.415 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.417 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.419 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.420 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.421 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.426 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.428 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.429 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.431 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.432 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.872 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.027 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.222 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.232 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.234 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.235 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.236 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.238 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.239 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.243 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.244 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.253 I llama_model_loader: - type  f32:   37 tensors
0.00.264.256 I llama_model_loader: - type q4_K:  108 tensors
0.00.264.256 I llama_model_loader: - type q6_K:   19 tensors
0.00.434.240 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.632 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.493.676 I llm_load_vocab: special tokens cache size = 5
0.00.598.297 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.598.365 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.598.370 I llm_load_print_meta: arch             = gemma
0.00.598.371 I llm_load_print_meta: vocab type       = SPM
0.00.598.372 I llm_load_print_meta: n_vocab          = 256000
0.00.598.374 I llm_load_print_meta: n_merges         = 0
0.00.598.375 I llm_load_print_meta: vocab_only       = 0
0.00.598.375 I llm_load_print_meta: n_ctx_train      = 8192
0.00.598.376 I llm_load_print_meta: n_embd           = 2048
0.00.598.376 I llm_load_print_meta: n_layer          = 18
0.00.598.440 I llm_load_print_meta: n_head           = 8
0.00.598.450 I llm_load_print_meta: n_head_kv        = 1
0.00.598.451 I llm_load_print_meta: n_rot            = 256
0.00.598.454 I llm_load_print_meta: n_swa            = 0
0.00.598.454 I llm_load_print_meta: n_embd_head_k    = 256
0.00.598.454 I llm_load_print_meta: n_embd_head_v    = 256
0.00.598.459 I llm_load_print_meta: n_gqa            = 8
0.00.598.464 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.598.469 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.598.470 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.598.471 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.598.471 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.598.472 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.598.473 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.598.478 I llm_load_print_meta: n_ff             = 16384
0.00.598.479 I llm_load_print_meta: n_expert         = 0
0.00.598.480 I llm_load_print_meta: n_expert_used    = 0
0.00.598.480 I llm_load_print_meta: causal attn      = 1
0.00.598.480 I llm_load_print_meta: pooling type     = 0
0.00.598.481 I llm_load_print_meta: rope type        = 2
0.00.598.481 I llm_load_print_meta: rope scaling     = linear
0.00.598.483 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.598.484 I llm_load_print_meta: freq_scale_train = 1
0.00.598.484 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.598.487 I llm_load_print_meta: rope_finetuned   = unknown
0.00.598.487 I llm_load_print_meta: ssm_d_conv       = 0
0.00.598.487 I llm_load_print_meta: ssm_d_inner      = 0
0.00.598.488 I llm_load_print_meta: ssm_d_state      = 0
0.00.598.488 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.598.488 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.598.489 I llm_load_print_meta: model type       = 2B
0.00.598.490 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.598.490 I llm_load_print_meta: model params     = 2.51 B
0.00.598.499 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.598.500 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.598.500 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.598.509 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.598.510 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.598.510 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.598.511 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.598.511 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.598.518 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.598.519 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.598.520 I llm_load_print_meta: max token length = 93
0.00.659.161 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.664.896 I llama_new_context_with_model: n_seq_max     = 1
0.00.664.903 I llama_new_context_with_model: n_ctx         = 4096
0.00.664.903 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.664.904 I llama_new_context_with_model: n_batch       = 2048
0.00.664.904 I llama_new_context_with_model: n_ubatch      = 512
0.00.664.905 I llama_new_context_with_model: flash_attn    = 0
0.00.664.907 I llama_new_context_with_model: freq_base     = 10000.0
0.00.664.908 I llama_new_context_with_model: freq_scale    = 1
0.00.664.909 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.681.376 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.681.417 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.681.532 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.684.084 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.684.088 I llama_new_context_with_model: graph nodes  = 601
0.00.684.089 I llama_new_context_with_model: graph splits = 1
0.00.684.113 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.257.472 I main: llama threadpool init, n_threads = 4
0.01.257.484 I 
0.01.257.591 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.257.595 I 
0.01.257.845 I sampler seed: 2980710070
0.01.257.857 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.257.866 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.257.867 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.257.867 I 
 seconally to the following:
The primary concern of a financial advisor is to protect the client's assets. This involves managing investments, ensuring the safety and

0.12.160.091 I llama_perf_sampler_print:    sampling time =      47.02 ms /    33 runs   (    1.42 ms per token,   701.86 tokens per second)
0.12.160.094 I llama_perf_context_print:        load time =    1256.29 ms
0.12.160.096 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.160.097 I llama_perf_context_print:        eval time =   10814.53 ms /    32 runs   (  337.95 ms per token,     2.96 tokens per second)
0.12.160.111 I llama_perf_context_print:       total time =   10902.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.202s
user	50m7.916s
sys	0m6.390s
