+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 4434 (a3d50bc0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.844 I main: load the model and apply lora adapter, if any
0.00.023.478 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.490 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.577 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.590 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.594 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.600 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.601 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.603 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.604 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.606 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.607 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.613 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.616 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.618 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.619 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.620 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.856 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.927 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.019 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.028 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.029 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.031 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.032 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.034 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.035 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.039 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.040 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.043 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.045 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.047 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.056 I llama_model_loader: - type  f32:   37 tensors
0.00.349.060 I llama_model_loader: - type q8_0:  127 tensors
0.00.569.199 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.637.578 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.638.636 I llm_load_vocab: special tokens cache size = 5
0.00.856.797 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.856.872 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.856.877 I llm_load_print_meta: arch             = gemma
0.00.856.877 I llm_load_print_meta: vocab type       = SPM
0.00.856.879 I llm_load_print_meta: n_vocab          = 256000
0.00.856.881 I llm_load_print_meta: n_merges         = 0
0.00.856.882 I llm_load_print_meta: vocab_only       = 0
0.00.856.882 I llm_load_print_meta: n_ctx_train      = 8192
0.00.856.882 I llm_load_print_meta: n_embd           = 2048
0.00.856.883 I llm_load_print_meta: n_layer          = 18
0.00.856.964 I llm_load_print_meta: n_head           = 8
0.00.856.974 I llm_load_print_meta: n_head_kv        = 1
0.00.856.975 I llm_load_print_meta: n_rot            = 256
0.00.856.976 I llm_load_print_meta: n_swa            = 0
0.00.856.976 I llm_load_print_meta: n_embd_head_k    = 256
0.00.856.978 I llm_load_print_meta: n_embd_head_v    = 256
0.00.856.982 I llm_load_print_meta: n_gqa            = 8
0.00.856.987 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.856.992 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.856.996 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.856.998 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.856.998 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.856.999 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.856.999 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.857.004 I llm_load_print_meta: n_ff             = 16384
0.00.857.005 I llm_load_print_meta: n_expert         = 0
0.00.857.005 I llm_load_print_meta: n_expert_used    = 0
0.00.857.005 I llm_load_print_meta: causal attn      = 1
0.00.857.006 I llm_load_print_meta: pooling type     = 0
0.00.857.006 I llm_load_print_meta: rope type        = 2
0.00.857.007 I llm_load_print_meta: rope scaling     = linear
0.00.857.009 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.857.010 I llm_load_print_meta: freq_scale_train = 1
0.00.857.010 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.857.013 I llm_load_print_meta: rope_finetuned   = unknown
0.00.857.013 I llm_load_print_meta: ssm_d_conv       = 0
0.00.857.013 I llm_load_print_meta: ssm_d_inner      = 0
0.00.857.014 I llm_load_print_meta: ssm_d_state      = 0
0.00.857.014 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.857.014 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.857.018 I llm_load_print_meta: model type       = 2B
0.00.857.019 I llm_load_print_meta: model ftype      = Q8_0
0.00.857.031 I llm_load_print_meta: model params     = 2.51 B
0.00.857.034 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.857.034 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.857.035 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.857.035 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.857.036 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.857.036 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.857.036 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.857.037 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.857.044 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.857.045 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.857.046 I llm_load_print_meta: max token length = 93
0.00.959.852 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.959.861 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.959.862 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.959.862 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.959.863 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.959.864 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.965.816 I llama_new_context_with_model: n_seq_max     = 1
0.00.965.823 I llama_new_context_with_model: n_ctx         = 4096
0.00.965.823 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.965.824 I llama_new_context_with_model: n_batch       = 2048
0.00.965.824 I llama_new_context_with_model: n_ubatch      = 512
0.00.965.825 I llama_new_context_with_model: flash_attn    = 0
0.00.965.827 I llama_new_context_with_model: freq_base     = 10000.0
0.00.965.828 I llama_new_context_with_model: freq_scale    = 1
0.00.965.828 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.965.916 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.980.778 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.980.817 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.980.945 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.983.602 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.983.606 I llama_new_context_with_model: graph nodes  = 601
0.00.983.606 I llama_new_context_with_model: graph splits = 1
0.00.983.631 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.983.635 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.592.371 I main: llama threadpool init, n_threads = 4
0.01.592.388 I 
0.01.592.509 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.592.513 I 
0.01.592.752 I sampler seed: 3024235007
0.01.592.765 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.592.775 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.592.779 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.592.779 I 
 increably. [end of text]


0.03.274.216 I llama_perf_sampler_print:    sampling time =       6.37 ms /     5 runs   (    1.27 ms per token,   785.55 tokens per second)
0.03.274.219 I llama_perf_context_print:        load time =    1591.44 ms
0.03.274.220 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.274.232 I llama_perf_context_print:        eval time =    1669.58 ms /     4 runs   (  417.40 ms per token,     2.40 tokens per second)
0.03.274.233 I llama_perf_context_print:       total time =    1681.85 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4434 (a3d50bc0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.000.849 I main: load the model and apply lora adapter, if any
0.00.023.185 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.274 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.289 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.293 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.298 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.300 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.301 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.310 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.312 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.314 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.320 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.322 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.323 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.325 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.326 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.465 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.945 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.132 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.142 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.144 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.145 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.146 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.148 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.149 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.153 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.154 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.156 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.157 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.349.159 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.168 I llama_model_loader: - type  f32:   37 tensors
0.00.349.171 I llama_model_loader: - type q8_0:  127 tensors
0.00.573.791 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.632.741 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.633.676 I llm_load_vocab: special tokens cache size = 5
0.00.840.279 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.840.355 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.840.359 I llm_load_print_meta: arch             = gemma
0.00.840.359 I llm_load_print_meta: vocab type       = SPM
0.00.840.360 I llm_load_print_meta: n_vocab          = 256000
0.00.840.363 I llm_load_print_meta: n_merges         = 0
0.00.840.363 I llm_load_print_meta: vocab_only       = 0
0.00.840.364 I llm_load_print_meta: n_ctx_train      = 8192
0.00.840.364 I llm_load_print_meta: n_embd           = 2048
0.00.840.364 I llm_load_print_meta: n_layer          = 18
0.00.840.441 I llm_load_print_meta: n_head           = 8
0.00.840.448 I llm_load_print_meta: n_head_kv        = 1
0.00.840.451 I llm_load_print_meta: n_rot            = 256
0.00.840.452 I llm_load_print_meta: n_swa            = 0
0.00.840.452 I llm_load_print_meta: n_embd_head_k    = 256
0.00.840.453 I llm_load_print_meta: n_embd_head_v    = 256
0.00.840.457 I llm_load_print_meta: n_gqa            = 8
0.00.840.462 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.840.467 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.840.468 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.840.470 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.840.471 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.840.471 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.840.472 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.840.477 I llm_load_print_meta: n_ff             = 16384
0.00.840.477 I llm_load_print_meta: n_expert         = 0
0.00.840.478 I llm_load_print_meta: n_expert_used    = 0
0.00.840.479 I llm_load_print_meta: causal attn      = 1
0.00.840.479 I llm_load_print_meta: pooling type     = 0
0.00.840.480 I llm_load_print_meta: rope type        = 2
0.00.840.483 I llm_load_print_meta: rope scaling     = linear
0.00.840.484 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.840.485 I llm_load_print_meta: freq_scale_train = 1
0.00.840.485 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.840.485 I llm_load_print_meta: rope_finetuned   = unknown
0.00.840.486 I llm_load_print_meta: ssm_d_conv       = 0
0.00.840.486 I llm_load_print_meta: ssm_d_inner      = 0
0.00.840.486 I llm_load_print_meta: ssm_d_state      = 0
0.00.840.487 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.840.487 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.840.490 I llm_load_print_meta: model type       = 2B
0.00.840.492 I llm_load_print_meta: model ftype      = Q8_0
0.00.840.493 I llm_load_print_meta: model params     = 2.51 B
0.00.840.493 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.840.494 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.840.495 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.840.495 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.840.496 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.840.496 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.840.497 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.840.497 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.840.506 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.840.507 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.840.509 I llm_load_print_meta: max token length = 93
0.00.938.775 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.944.664 I llama_new_context_with_model: n_seq_max     = 1
0.00.944.672 I llama_new_context_with_model: n_ctx         = 4096
0.00.944.672 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.944.672 I llama_new_context_with_model: n_batch       = 2048
0.00.944.673 I llama_new_context_with_model: n_ubatch      = 512
0.00.944.674 I llama_new_context_with_model: flash_attn    = 0
0.00.944.676 I llama_new_context_with_model: freq_base     = 10000.0
0.00.944.677 I llama_new_context_with_model: freq_scale    = 1
0.00.944.678 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.944.763 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.959.743 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.959.781 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.959.898 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.962.495 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.962.499 I llama_new_context_with_model: graph nodes  = 601
0.00.962.499 I llama_new_context_with_model: graph splits = 1
0.00.962.525 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.962.528 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.572.001 I main: llama threadpool init, n_threads = 4
0.01.572.016 I 
0.01.572.139 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.572.143 I 
0.01.572.372 I sampler seed: 1501215511
0.01.572.385 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.572.397 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.572.398 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.572.399 I 
 increamically.

**Assistant**

I understand. I will provide you with the requested information within the stipulated time frame. [end of text]


0.12.501.911 I llama_perf_sampler_print:    sampling time =      40.28 ms /    27 runs   (    1.49 ms per token,   670.37 tokens per second)
0.12.501.915 I llama_perf_context_print:        load time =    1571.07 ms
0.12.501.916 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.501.932 I llama_perf_context_print:        eval time =   10859.93 ms /    26 runs   (  417.69 ms per token,     2.39 tokens per second)
0.12.501.935 I llama_perf_context_print:       total time =   10929.92 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 4434 (a3d50bc0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.000.878 I main: load the model and apply lora adapter, if any
0.00.023.511 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.523 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.613 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.626 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.628 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.632 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.636 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.638 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.639 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.640 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.642 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.648 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.650 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.651 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.653 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.655 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.238.703 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.343.680 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.367.840 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.367.851 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.367.852 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.367.854 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.367.855 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.367.856 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.367.858 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.367.862 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.367.863 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.367.865 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.367.866 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.367.868 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.367.877 I llama_model_loader: - type  f32:   37 tensors
0.00.367.880 I llama_model_loader: - type q8_0:  127 tensors
0.00.575.850 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.635.108 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.636.079 I llm_load_vocab: special tokens cache size = 5
0.00.858.042 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.858.117 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.858.126 I llm_load_print_meta: arch             = gemma
0.00.858.127 I llm_load_print_meta: vocab type       = SPM
0.00.858.129 I llm_load_print_meta: n_vocab          = 256000
0.00.858.131 I llm_load_print_meta: n_merges         = 0
0.00.858.132 I llm_load_print_meta: vocab_only       = 0
0.00.858.133 I llm_load_print_meta: n_ctx_train      = 8192
0.00.858.133 I llm_load_print_meta: n_embd           = 2048
0.00.858.134 I llm_load_print_meta: n_layer          = 18
0.00.858.222 I llm_load_print_meta: n_head           = 8
0.00.858.235 I llm_load_print_meta: n_head_kv        = 1
0.00.858.236 I llm_load_print_meta: n_rot            = 256
0.00.858.237 I llm_load_print_meta: n_swa            = 0
0.00.858.237 I llm_load_print_meta: n_embd_head_k    = 256
0.00.858.238 I llm_load_print_meta: n_embd_head_v    = 256
0.00.858.246 I llm_load_print_meta: n_gqa            = 8
0.00.858.254 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.858.265 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.858.267 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.858.269 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.858.270 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.858.271 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.858.272 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.858.280 I llm_load_print_meta: n_ff             = 16384
0.00.858.281 I llm_load_print_meta: n_expert         = 0
0.00.858.282 I llm_load_print_meta: n_expert_used    = 0
0.00.858.282 I llm_load_print_meta: causal attn      = 1
0.00.858.283 I llm_load_print_meta: pooling type     = 0
0.00.858.284 I llm_load_print_meta: rope type        = 2
0.00.858.284 I llm_load_print_meta: rope scaling     = linear
0.00.858.286 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.858.287 I llm_load_print_meta: freq_scale_train = 1
0.00.858.288 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.858.289 I llm_load_print_meta: rope_finetuned   = unknown
0.00.858.289 I llm_load_print_meta: ssm_d_conv       = 0
0.00.858.290 I llm_load_print_meta: ssm_d_inner      = 0
0.00.858.291 I llm_load_print_meta: ssm_d_state      = 0
0.00.858.291 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.858.292 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.858.296 I llm_load_print_meta: model type       = 2B
0.00.858.307 I llm_load_print_meta: model ftype      = Q8_0
0.00.858.309 I llm_load_print_meta: model params     = 2.51 B
0.00.858.310 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.858.311 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.858.312 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.858.313 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.858.314 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.858.315 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.858.315 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.858.316 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.858.325 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.858.327 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.858.327 I llm_load_print_meta: max token length = 93
0.00.937.844 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.937.851 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.937.852 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.937.853 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.937.855 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.937.856 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.944.054 I llama_new_context_with_model: n_seq_max     = 1
0.00.944.062 I llama_new_context_with_model: n_ctx         = 4096
0.00.944.062 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.944.063 I llama_new_context_with_model: n_batch       = 2048
0.00.944.063 I llama_new_context_with_model: n_ubatch      = 512
0.00.944.064 I llama_new_context_with_model: flash_attn    = 0
0.00.944.067 I llama_new_context_with_model: freq_base     = 10000.0
0.00.944.068 I llama_new_context_with_model: freq_scale    = 1
0.00.944.069 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.944.160 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.958.626 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.958.669 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.958.788 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.961.411 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.961.415 I llama_new_context_with_model: graph nodes  = 601
0.00.961.416 I llama_new_context_with_model: graph splits = 1
0.00.961.443 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.961.444 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.571.646 I main: llama threadpool init, n_threads = 4
0.01.571.663 I 
0.01.571.785 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.571.789 I 
0.01.572.031 I sampler seed: 1484198783
0.01.572.045 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.572.054 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.572.057 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.572.057 I 
 increasities, but I am unable to reproduce this behavior in my system.

I am curious to understand the reasons behind this discrepancy. Could you please provide insights

0.15.158.703 I llama_perf_sampler_print:    sampling time =      49.98 ms /    33 runs   (    1.51 ms per token,   660.24 tokens per second)
0.15.158.708 I llama_perf_context_print:        load time =    1570.68 ms
0.15.158.710 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.158.712 I llama_perf_context_print:        eval time =   13501.02 ms /    32 runs   (  421.91 ms per token,     2.37 tokens per second)
0.15.158.713 I llama_perf_context_print:       total time =   13587.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4434 (a3d50bc0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.000.842 I main: load the model and apply lora adapter, if any
0.00.023.091 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.102 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.187 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.199 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.201 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.205 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.207 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.208 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.210 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.212 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.213 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.219 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.220 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.221 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.222 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.224 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.842 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.323.448 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.347.516 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.347.524 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.347.526 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.347.527 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.347.528 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.347.530 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.347.531 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.347.535 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.347.537 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.347.538 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.347.539 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.347.541 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.347.549 I llama_model_loader: - type  f32:   37 tensors
0.00.347.551 I llama_model_loader: - type q8_0:  127 tensors
0.00.563.111 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.635.619 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.636.697 I llm_load_vocab: special tokens cache size = 5
0.00.841.457 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.841.533 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.841.538 I llm_load_print_meta: arch             = gemma
0.00.841.538 I llm_load_print_meta: vocab type       = SPM
0.00.841.539 I llm_load_print_meta: n_vocab          = 256000
0.00.841.542 I llm_load_print_meta: n_merges         = 0
0.00.841.543 I llm_load_print_meta: vocab_only       = 0
0.00.841.543 I llm_load_print_meta: n_ctx_train      = 8192
0.00.841.543 I llm_load_print_meta: n_embd           = 2048
0.00.841.544 I llm_load_print_meta: n_layer          = 18
0.00.841.625 I llm_load_print_meta: n_head           = 8
0.00.841.632 I llm_load_print_meta: n_head_kv        = 1
0.00.841.632 I llm_load_print_meta: n_rot            = 256
0.00.841.633 I llm_load_print_meta: n_swa            = 0
0.00.841.633 I llm_load_print_meta: n_embd_head_k    = 256
0.00.841.633 I llm_load_print_meta: n_embd_head_v    = 256
0.00.841.638 I llm_load_print_meta: n_gqa            = 8
0.00.841.643 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.841.648 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.841.650 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.841.651 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.841.652 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.841.653 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.841.653 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.841.658 I llm_load_print_meta: n_ff             = 16384
0.00.841.658 I llm_load_print_meta: n_expert         = 0
0.00.841.659 I llm_load_print_meta: n_expert_used    = 0
0.00.841.659 I llm_load_print_meta: causal attn      = 1
0.00.841.660 I llm_load_print_meta: pooling type     = 0
0.00.841.660 I llm_load_print_meta: rope type        = 2
0.00.841.661 I llm_load_print_meta: rope scaling     = linear
0.00.841.662 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.841.663 I llm_load_print_meta: freq_scale_train = 1
0.00.841.664 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.841.664 I llm_load_print_meta: rope_finetuned   = unknown
0.00.841.664 I llm_load_print_meta: ssm_d_conv       = 0
0.00.841.665 I llm_load_print_meta: ssm_d_inner      = 0
0.00.841.675 I llm_load_print_meta: ssm_d_state      = 0
0.00.841.676 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.841.676 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.841.679 I llm_load_print_meta: model type       = 2B
0.00.841.681 I llm_load_print_meta: model ftype      = Q8_0
0.00.841.682 I llm_load_print_meta: model params     = 2.51 B
0.00.841.683 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.841.684 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.841.697 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.841.697 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.841.698 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.841.699 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.841.708 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.841.713 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.841.726 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.841.728 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.841.729 I llm_load_print_meta: max token length = 93
0.00.914.529 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.914.538 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.920.356 I llama_new_context_with_model: n_seq_max     = 1
0.00.920.363 I llama_new_context_with_model: n_ctx         = 4096
0.00.920.363 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.920.363 I llama_new_context_with_model: n_batch       = 2048
0.00.920.364 I llama_new_context_with_model: n_ubatch      = 512
0.00.920.364 I llama_new_context_with_model: flash_attn    = 0
0.00.920.367 I llama_new_context_with_model: freq_base     = 10000.0
0.00.920.368 I llama_new_context_with_model: freq_scale    = 1
0.00.920.369 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.920.453 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.934.885 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.934.927 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.935.049 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.937.633 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.937.637 I llama_new_context_with_model: graph nodes  = 601
0.00.937.637 I llama_new_context_with_model: graph splits = 1
0.00.937.660 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.937.661 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.548.059 I main: llama threadpool init, n_threads = 4
0.01.548.075 I 
0.01.548.195 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.548.200 I 
0.01.548.440 I sampler seed: 1413742389
0.01.548.454 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.548.466 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.548.467 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.548.467 I 
 increasities!

I am unable to generate the requested content as it contains sexually suggestive and inappropriate language. I am programmed to provide safe and appropriate responses. [end of text]


0.15.080.564 I llama_perf_sampler_print:    sampling time =      49.78 ms /    33 runs   (    1.51 ms per token,   662.96 tokens per second)
0.15.080.567 I llama_perf_context_print:        load time =    1547.13 ms
0.15.080.581 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.080.583 I llama_perf_context_print:        eval time =   13446.99 ms /    32 runs   (  420.22 ms per token,     2.38 tokens per second)
0.15.080.585 I llama_perf_context_print:       total time =   13532.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m55.555s
user	2m52.599s
sys	0m9.312s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4434 (a3d50bc0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186541.49 ms
main:    total time = 186541.49 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 4434 (a3d50bc0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.874 I main: llama backend init
0.00.000.882 I main: load the model and apply lora adapter, if any
0.00.023.237 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.249 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.341 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.354 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.356 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.361 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.365 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.366 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.368 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.369 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.370 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.376 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.377 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.378 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.381 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.382 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.245 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.661 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.708 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.719 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.720 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.722 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.723 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.724 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.726 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.730 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.732 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.733 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.734 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.736 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.744 I llama_model_loader: - type  f32:   37 tensors
0.00.348.746 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.746 I llama_model_loader: - type q6_K:   19 tensors
0.00.565.355 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.627.208 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.628.151 I llm_load_vocab: special tokens cache size = 5
0.00.832.178 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.832.255 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.832.259 I llm_load_print_meta: arch             = gemma
0.00.832.260 I llm_load_print_meta: vocab type       = SPM
0.00.832.261 I llm_load_print_meta: n_vocab          = 256000
0.00.832.264 I llm_load_print_meta: n_merges         = 0
0.00.832.264 I llm_load_print_meta: vocab_only       = 0
0.00.832.264 I llm_load_print_meta: n_ctx_train      = 8192
0.00.832.265 I llm_load_print_meta: n_embd           = 2048
0.00.832.265 I llm_load_print_meta: n_layer          = 18
0.00.832.348 I llm_load_print_meta: n_head           = 8
0.00.832.355 I llm_load_print_meta: n_head_kv        = 1
0.00.832.356 I llm_load_print_meta: n_rot            = 256
0.00.832.356 I llm_load_print_meta: n_swa            = 0
0.00.832.357 I llm_load_print_meta: n_embd_head_k    = 256
0.00.832.358 I llm_load_print_meta: n_embd_head_v    = 256
0.00.832.363 I llm_load_print_meta: n_gqa            = 8
0.00.832.368 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.832.374 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.832.375 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.832.376 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.832.377 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.832.377 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.832.378 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.832.383 I llm_load_print_meta: n_ff             = 16384
0.00.832.383 I llm_load_print_meta: n_expert         = 0
0.00.832.383 I llm_load_print_meta: n_expert_used    = 0
0.00.832.384 I llm_load_print_meta: causal attn      = 1
0.00.832.385 I llm_load_print_meta: pooling type     = 0
0.00.832.385 I llm_load_print_meta: rope type        = 2
0.00.832.385 I llm_load_print_meta: rope scaling     = linear
0.00.832.388 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.832.389 I llm_load_print_meta: freq_scale_train = 1
0.00.832.390 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.832.390 I llm_load_print_meta: rope_finetuned   = unknown
0.00.832.391 I llm_load_print_meta: ssm_d_conv       = 0
0.00.832.391 I llm_load_print_meta: ssm_d_inner      = 0
0.00.832.392 I llm_load_print_meta: ssm_d_state      = 0
0.00.832.392 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.832.393 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.832.396 I llm_load_print_meta: model type       = 2B
0.00.832.398 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.832.399 I llm_load_print_meta: model params     = 2.51 B
0.00.832.399 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.832.400 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.832.400 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.832.401 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.832.401 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.832.401 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.832.402 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.832.402 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.832.408 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.832.410 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.832.410 I llm_load_print_meta: max token length = 93
0.00.895.354 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.895.365 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.895.366 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.895.366 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.895.367 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.895.367 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.901.208 I llama_new_context_with_model: n_seq_max     = 1
0.00.901.215 I llama_new_context_with_model: n_ctx         = 4096
0.00.901.216 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.901.216 I llama_new_context_with_model: n_batch       = 2048
0.00.901.216 I llama_new_context_with_model: n_ubatch      = 512
0.00.901.217 I llama_new_context_with_model: flash_attn    = 0
0.00.901.220 I llama_new_context_with_model: freq_base     = 10000.0
0.00.901.220 I llama_new_context_with_model: freq_scale    = 1
0.00.901.221 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.901.309 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.915.872 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.915.910 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.916.031 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.918.636 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.918.639 I llama_new_context_with_model: graph nodes  = 601
0.00.918.640 I llama_new_context_with_model: graph splits = 1
0.00.918.664 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.918.667 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.501.339 I main: llama threadpool init, n_threads = 4
0.01.501.353 I 
0.01.501.472 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.501.476 I 
0.01.501.708 I sampler seed: 2950513495
0.01.501.721 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.501.733 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.501.733 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.501.734 I 
 increasities.

I am not sure if I should use this phrase or something else.

The phrase "incredibly increasities" is inappropriate and should be

0.12.639.374 I llama_perf_sampler_print:    sampling time =      49.57 ms /    33 runs   (    1.50 ms per token,   665.74 tokens per second)
0.12.639.380 I llama_perf_context_print:        load time =    1500.36 ms
0.12.639.381 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.639.383 I llama_perf_context_print:        eval time =   11053.14 ms /    32 runs   (  345.41 ms per token,     2.90 tokens per second)
0.12.639.385 I llama_perf_context_print:       total time =   11138.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4434 (a3d50bc0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186532.17 ms
main:    total time = 186532.17 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.617 I build: 4434 (a3d50bc0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.816 I main: llama backend init
0.00.000.823 I main: load the model and apply lora adapter, if any
0.00.023.417 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.524 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.542 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.545 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.549 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.551 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.553 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.554 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.555 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.557 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.564 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.566 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.567 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.568 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.570 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.136 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.323.849 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.090 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.098 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.099 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.101 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.102 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.104 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.105 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.109 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.110 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.118 I llama_model_loader: - type  f32:   37 tensors
0.00.348.120 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.121 I llama_model_loader: - type q6_K:   19 tensors
0.00.571.199 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.631.590 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.632.523 I llm_load_vocab: special tokens cache size = 5
0.00.854.636 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.854.711 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.854.715 I llm_load_print_meta: arch             = gemma
0.00.854.716 I llm_load_print_meta: vocab type       = SPM
0.00.854.717 I llm_load_print_meta: n_vocab          = 256000
0.00.854.719 I llm_load_print_meta: n_merges         = 0
0.00.854.719 I llm_load_print_meta: vocab_only       = 0
0.00.854.720 I llm_load_print_meta: n_ctx_train      = 8192
0.00.854.720 I llm_load_print_meta: n_embd           = 2048
0.00.854.721 I llm_load_print_meta: n_layer          = 18
0.00.854.801 I llm_load_print_meta: n_head           = 8
0.00.854.809 I llm_load_print_meta: n_head_kv        = 1
0.00.854.812 I llm_load_print_meta: n_rot            = 256
0.00.854.813 I llm_load_print_meta: n_swa            = 0
0.00.854.813 I llm_load_print_meta: n_embd_head_k    = 256
0.00.854.814 I llm_load_print_meta: n_embd_head_v    = 256
0.00.854.819 I llm_load_print_meta: n_gqa            = 8
0.00.854.823 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.854.828 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.854.829 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.854.830 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.854.831 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.854.832 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.854.832 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.854.837 I llm_load_print_meta: n_ff             = 16384
0.00.854.838 I llm_load_print_meta: n_expert         = 0
0.00.854.839 I llm_load_print_meta: n_expert_used    = 0
0.00.854.840 I llm_load_print_meta: causal attn      = 1
0.00.854.840 I llm_load_print_meta: pooling type     = 0
0.00.854.841 I llm_load_print_meta: rope type        = 2
0.00.854.842 I llm_load_print_meta: rope scaling     = linear
0.00.854.843 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.854.844 I llm_load_print_meta: freq_scale_train = 1
0.00.854.845 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.854.845 I llm_load_print_meta: rope_finetuned   = unknown
0.00.854.846 I llm_load_print_meta: ssm_d_conv       = 0
0.00.854.846 I llm_load_print_meta: ssm_d_inner      = 0
0.00.854.846 I llm_load_print_meta: ssm_d_state      = 0
0.00.854.847 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.854.847 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.854.850 I llm_load_print_meta: model type       = 2B
0.00.854.852 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.854.853 I llm_load_print_meta: model params     = 2.51 B
0.00.854.854 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.854.854 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.854.855 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.854.855 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.854.856 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.854.866 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.854.867 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.854.879 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.854.886 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.854.888 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.854.889 I llm_load_print_meta: max token length = 93
0.00.914.705 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.920.691 I llama_new_context_with_model: n_seq_max     = 1
0.00.920.698 I llama_new_context_with_model: n_ctx         = 4096
0.00.920.698 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.920.699 I llama_new_context_with_model: n_batch       = 2048
0.00.920.699 I llama_new_context_with_model: n_ubatch      = 512
0.00.920.700 I llama_new_context_with_model: flash_attn    = 0
0.00.920.702 I llama_new_context_with_model: freq_base     = 10000.0
0.00.920.703 I llama_new_context_with_model: freq_scale    = 1
0.00.920.704 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.920.787 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.935.780 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.935.819 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.935.937 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.938.505 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.938.509 I llama_new_context_with_model: graph nodes  = 601
0.00.938.509 I llama_new_context_with_model: graph splits = 1
0.00.938.532 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.938.533 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.527.299 I main: llama threadpool init, n_threads = 4
0.01.527.313 I 
0.01.527.436 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.527.440 I 
0.01.527.677 I sampler seed: 3089308729
0.01.527.690 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.527.702 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.527.703 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.527.703 I 
 seconded, and fragmented data. How would you approach the problem of cleaning and preparing data for analysis?

**Step 1: Data Assessment**

-

0.12.936.887 I llama_perf_sampler_print:    sampling time =      49.61 ms /    33 runs   (    1.50 ms per token,   665.20 tokens per second)
0.12.936.892 I llama_perf_context_print:        load time =    1526.40 ms
0.12.936.894 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.936.896 I llama_perf_context_print:        eval time =   11324.72 ms /    32 runs   (  353.90 ms per token,     2.83 tokens per second)
0.12.936.898 I llama_perf_context_print:       total time =   11409.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.504s
user	46m43.728s
sys	0m6.386s
