+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.550 I build: 4441 (a3c1232c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.747 I main: load the model and apply lora adapter, if any
0.00.029.879 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.029.890 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.029.897 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.903 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.905 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.907 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.908 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.909 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.910 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.910 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.911 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.915 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.915 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.916 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.917 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.917 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.861 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.387 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.732 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.738 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.739 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.740 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.740 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.741 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.742 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.744 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.745 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.745 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.747 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.136.747 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.136.751 I llama_model_loader: - type  f32:   37 tensors
0.00.136.751 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.187 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.021 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.536 I llm_load_vocab: special tokens cache size = 5
0.00.275.508 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.525 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.526 I llm_load_print_meta: arch             = gemma
0.00.275.527 I llm_load_print_meta: vocab type       = SPM
0.00.275.528 I llm_load_print_meta: n_vocab          = 256000
0.00.275.528 I llm_load_print_meta: n_merges         = 0
0.00.275.528 I llm_load_print_meta: vocab_only       = 0
0.00.275.529 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.529 I llm_load_print_meta: n_embd           = 2048
0.00.275.529 I llm_load_print_meta: n_layer          = 18
0.00.275.540 I llm_load_print_meta: n_head           = 8
0.00.275.542 I llm_load_print_meta: n_head_kv        = 1
0.00.275.542 I llm_load_print_meta: n_rot            = 256
0.00.275.542 I llm_load_print_meta: n_swa            = 0
0.00.275.542 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.543 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.545 I llm_load_print_meta: n_gqa            = 8
0.00.275.547 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.548 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.549 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.551 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.551 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.552 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.552 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.554 I llm_load_print_meta: n_ff             = 16384
0.00.275.554 I llm_load_print_meta: n_expert         = 0
0.00.275.555 I llm_load_print_meta: n_expert_used    = 0
0.00.275.555 I llm_load_print_meta: causal attn      = 1
0.00.275.555 I llm_load_print_meta: pooling type     = 0
0.00.275.555 I llm_load_print_meta: rope type        = 2
0.00.275.556 I llm_load_print_meta: rope scaling     = linear
0.00.275.557 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.558 I llm_load_print_meta: freq_scale_train = 1
0.00.275.558 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.559 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.559 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.559 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.560 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.560 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.560 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.562 I llm_load_print_meta: model type       = 2B
0.00.275.563 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.564 I llm_load_print_meta: model params     = 2.51 B
0.00.275.565 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.565 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.565 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.566 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.566 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.566 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.567 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.567 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.567 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.568 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.568 I llm_load_print_meta: max token length = 93
0.00.376.169 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.376.175 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.376.176 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.376.177 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.376.177 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.376.178 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.377.476 I llama_new_context_with_model: n_seq_max     = 1
0.00.377.479 I llama_new_context_with_model: n_ctx         = 4096
0.00.377.480 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.377.480 I llama_new_context_with_model: n_batch       = 2048
0.00.377.481 I llama_new_context_with_model: n_ubatch      = 512
0.00.377.481 I llama_new_context_with_model: flash_attn    = 0
0.00.377.483 I llama_new_context_with_model: freq_base     = 10000.0
0.00.377.483 I llama_new_context_with_model: freq_scale    = 1
0.00.377.484 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.501 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.391.628 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.391.641 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.391.741 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.593 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.393.599 I llama_new_context_with_model: graph nodes  = 601
0.00.393.600 I llama_new_context_with_model: graph splits = 1
0.00.393.603 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.393.603 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.857 I main: llama threadpool init, n_threads = 4
0.00.478.870 I 
0.00.478.946 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.478.949 I 
0.00.478.980 I sampler seed: 45699866
0.00.478.991 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.994 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.478.995 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.997 I 
 increadibly high-quality video game.

This is a subjective and personal evaluation, and I am not trying to make a factually accurate statement. I am

0.02.721.520 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6859.28 tokens per second)
0.02.721.523 I llama_perf_context_print:        load time =     478.09 ms
0.02.721.524 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.721.526 I llama_perf_context_print:        eval time =    2223.53 ms /    32 runs   (   69.49 ms per token,    14.39 tokens per second)
0.02.721.527 I llama_perf_context_print:       total time =    2242.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.525 I build: 4441 (a3c1232c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.719 I main: llama backend init
0.00.000.726 I main: load the model and apply lora adapter, if any
0.00.029.706 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.029.719 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.726 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.727 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.730 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.731 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.731 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.732 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.733 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.733 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.737 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.738 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.739 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.740 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.740 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.558 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.073 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.387 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.393 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.394 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.394 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.395 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.396 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.397 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.399 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.401 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.402 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.402 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.136.403 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.136.406 I llama_model_loader: - type  f32:   37 tensors
0.00.136.407 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.751 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.842 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.318 I llm_load_vocab: special tokens cache size = 5
0.00.265.189 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.204 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.206 I llm_load_print_meta: arch             = gemma
0.00.265.206 I llm_load_print_meta: vocab type       = SPM
0.00.265.207 I llm_load_print_meta: n_vocab          = 256000
0.00.265.207 I llm_load_print_meta: n_merges         = 0
0.00.265.207 I llm_load_print_meta: vocab_only       = 0
0.00.265.208 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.208 I llm_load_print_meta: n_embd           = 2048
0.00.265.208 I llm_load_print_meta: n_layer          = 18
0.00.265.218 I llm_load_print_meta: n_head           = 8
0.00.265.220 I llm_load_print_meta: n_head_kv        = 1
0.00.265.220 I llm_load_print_meta: n_rot            = 256
0.00.265.221 I llm_load_print_meta: n_swa            = 0
0.00.265.221 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.221 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.223 I llm_load_print_meta: n_gqa            = 8
0.00.265.225 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.226 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.227 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.228 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.229 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.229 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.230 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.231 I llm_load_print_meta: n_ff             = 16384
0.00.265.232 I llm_load_print_meta: n_expert         = 0
0.00.265.232 I llm_load_print_meta: n_expert_used    = 0
0.00.265.232 I llm_load_print_meta: causal attn      = 1
0.00.265.233 I llm_load_print_meta: pooling type     = 0
0.00.265.233 I llm_load_print_meta: rope type        = 2
0.00.265.233 I llm_load_print_meta: rope scaling     = linear
0.00.265.235 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.235 I llm_load_print_meta: freq_scale_train = 1
0.00.265.236 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.236 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.236 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.237 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.237 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.237 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.237 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.239 I llm_load_print_meta: model type       = 2B
0.00.265.240 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.241 I llm_load_print_meta: model params     = 2.51 B
0.00.265.242 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.242 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.242 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.243 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.243 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.243 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.244 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.244 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.245 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.245 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.245 I llm_load_print_meta: max token length = 93
0.00.362.880 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.364.112 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.116 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.117 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.117 I llama_new_context_with_model: n_batch       = 2048
0.00.364.117 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.118 I llama_new_context_with_model: flash_attn    = 0
0.00.364.120 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.121 I llama_new_context_with_model: freq_scale    = 1
0.00.364.122 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.139 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.378.697 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.710 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.805 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.672 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.679 I llama_new_context_with_model: graph nodes  = 601
0.00.380.679 I llama_new_context_with_model: graph splits = 1
0.00.380.682 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.380.682 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.781 I main: llama threadpool init, n_threads = 4
0.00.461.793 I 
0.00.461.865 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.461.869 I 
0.00.461.903 I sampler seed: 862945193
0.00.461.914 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.930 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.933 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.933 I 
 increamically. I am unable to determine the exact time as I am lacking access to real-time information. [end of text]


0.02.030.923 I llama_perf_sampler_print:    sampling time =       3.45 ms /    24 runs   (    0.14 ms per token,  6952.49 tokens per second)
0.02.030.926 I llama_perf_context_print:        load time =     461.03 ms
0.02.030.927 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.030.929 I llama_perf_context_print:        eval time =    1555.42 ms /    23 runs   (   67.63 ms per token,    14.79 tokens per second)
0.02.030.930 I llama_perf_context_print:       total time =    1569.15 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.546 I build: 4441 (a3c1232c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.746 I main: load the model and apply lora adapter, if any
0.00.030.466 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.030.478 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.030.486 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.492 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.493 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.496 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.496 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.497 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.498 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.498 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.499 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.504 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.505 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.506 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.507 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.508 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.058.951 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.135.108 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.141.466 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.141.474 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.141.474 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.141.475 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.141.476 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.141.477 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.141.477 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.141.480 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.141.481 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.141.482 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.141.482 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.141.483 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.141.486 I llama_model_loader: - type  f32:   37 tensors
0.00.141.487 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.452 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.425 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.053 I llm_load_vocab: special tokens cache size = 5
0.00.285.183 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.201 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.202 I llm_load_print_meta: arch             = gemma
0.00.285.203 I llm_load_print_meta: vocab type       = SPM
0.00.285.204 I llm_load_print_meta: n_vocab          = 256000
0.00.285.204 I llm_load_print_meta: n_merges         = 0
0.00.285.205 I llm_load_print_meta: vocab_only       = 0
0.00.285.205 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.205 I llm_load_print_meta: n_embd           = 2048
0.00.285.206 I llm_load_print_meta: n_layer          = 18
0.00.285.216 I llm_load_print_meta: n_head           = 8
0.00.285.218 I llm_load_print_meta: n_head_kv        = 1
0.00.285.219 I llm_load_print_meta: n_rot            = 256
0.00.285.219 I llm_load_print_meta: n_swa            = 0
0.00.285.219 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.220 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.221 I llm_load_print_meta: n_gqa            = 8
0.00.285.223 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.225 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.226 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.227 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.227 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.228 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.228 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.230 I llm_load_print_meta: n_ff             = 16384
0.00.285.230 I llm_load_print_meta: n_expert         = 0
0.00.285.230 I llm_load_print_meta: n_expert_used    = 0
0.00.285.231 I llm_load_print_meta: causal attn      = 1
0.00.285.231 I llm_load_print_meta: pooling type     = 0
0.00.285.231 I llm_load_print_meta: rope type        = 2
0.00.285.232 I llm_load_print_meta: rope scaling     = linear
0.00.285.233 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.234 I llm_load_print_meta: freq_scale_train = 1
0.00.285.234 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.234 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.235 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.235 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.235 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.236 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.236 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.238 I llm_load_print_meta: model type       = 2B
0.00.285.239 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.240 I llm_load_print_meta: model params     = 2.51 B
0.00.285.240 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.241 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.241 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.241 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.242 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.242 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.242 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.243 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.243 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.243 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.244 I llm_load_print_meta: max token length = 93
0.00.362.965 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.362.971 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.362.972 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.362.972 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.362.973 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.362.973 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.364.319 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.323 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.323 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.324 I llama_new_context_with_model: n_batch       = 2048
0.00.364.324 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.325 I llama_new_context_with_model: flash_attn    = 0
0.00.364.327 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.328 I llama_new_context_with_model: freq_scale    = 1
0.00.364.329 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.346 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.379.196 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.211 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.313 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.563 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.569 I llama_new_context_with_model: graph nodes  = 601
0.00.381.569 I llama_new_context_with_model: graph splits = 1
0.00.381.573 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.381.573 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.377 I main: llama threadpool init, n_threads = 4
0.00.467.391 I 
0.00.467.470 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.467.474 I 
0.00.467.515 I sampler seed: 3290490939
0.00.467.528 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.543 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.547 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.547 I 
 increasities, a mesmerizing blend of classical elegance and modern audacity. [end of text]


0.01.476.679 I llama_perf_sampler_print:    sampling time =       2.15 ms /    15 runs   (    0.14 ms per token,  6963.79 tokens per second)
0.01.476.682 I llama_perf_context_print:        load time =     466.61 ms
0.01.476.683 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.476.685 I llama_perf_context_print:        eval time =    1000.54 ms /    14 runs   (   71.47 ms per token,    13.99 tokens per second)
0.01.476.686 I llama_perf_context_print:       total time =    1009.31 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.536 I build: 4441 (a3c1232c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.736 I main: load the model and apply lora adapter, if any
0.00.030.805 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.030.814 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.030.822 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.829 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.830 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.833 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.835 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.836 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.837 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.838 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.846 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.850 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.851 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.852 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.853 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.853 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.944 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.312 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.669 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.677 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.678 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.679 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.680 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.681 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.682 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.685 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.686 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.687 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.688 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.137.690 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.137.693 I llama_model_loader: - type  f32:   37 tensors
0.00.137.694 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.371 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.216 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.706 I llm_load_vocab: special tokens cache size = 5
0.00.267.643 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.663 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.665 I llm_load_print_meta: arch             = gemma
0.00.267.666 I llm_load_print_meta: vocab type       = SPM
0.00.267.667 I llm_load_print_meta: n_vocab          = 256000
0.00.267.667 I llm_load_print_meta: n_merges         = 0
0.00.267.667 I llm_load_print_meta: vocab_only       = 0
0.00.267.668 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.668 I llm_load_print_meta: n_embd           = 2048
0.00.267.669 I llm_load_print_meta: n_layer          = 18
0.00.267.679 I llm_load_print_meta: n_head           = 8
0.00.267.681 I llm_load_print_meta: n_head_kv        = 1
0.00.267.681 I llm_load_print_meta: n_rot            = 256
0.00.267.682 I llm_load_print_meta: n_swa            = 0
0.00.267.682 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.682 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.684 I llm_load_print_meta: n_gqa            = 8
0.00.267.686 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.688 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.688 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.690 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.690 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.691 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.691 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.693 I llm_load_print_meta: n_ff             = 16384
0.00.267.693 I llm_load_print_meta: n_expert         = 0
0.00.267.694 I llm_load_print_meta: n_expert_used    = 0
0.00.267.695 I llm_load_print_meta: causal attn      = 1
0.00.267.695 I llm_load_print_meta: pooling type     = 0
0.00.267.696 I llm_load_print_meta: rope type        = 2
0.00.267.696 I llm_load_print_meta: rope scaling     = linear
0.00.267.698 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.698 I llm_load_print_meta: freq_scale_train = 1
0.00.267.699 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.700 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.700 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.700 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.701 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.701 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.705 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.707 I llm_load_print_meta: model type       = 2B
0.00.267.708 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.708 I llm_load_print_meta: model params     = 2.51 B
0.00.267.709 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.709 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.710 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.710 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.710 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.711 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.711 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.714 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.715 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.715 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.715 I llm_load_print_meta: max token length = 93
0.00.339.265 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.339.274 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.340.530 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.534 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.534 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.535 I llama_new_context_with_model: n_batch       = 2048
0.00.340.535 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.536 I llama_new_context_with_model: flash_attn    = 0
0.00.340.538 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.539 I llama_new_context_with_model: freq_scale    = 1
0.00.340.540 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.340.557 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.355.995 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.009 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.105 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.005 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.012 I llama_new_context_with_model: graph nodes  = 601
0.00.358.012 I llama_new_context_with_model: graph splits = 1
0.00.358.015 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.358.016 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.870 I main: llama threadpool init, n_threads = 4
0.00.445.885 I 
0.00.445.959 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.445.962 I 
0.00.445.997 I sampler seed: 792672153
0.00.446.008 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.023 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.026 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.026 I 
 increasels, a monstrous troll-like being, and other magical creatures. [end of text]


0.01.659.045 I llama_perf_sampler_print:    sampling time =       2.47 ms /    17 runs   (    0.15 ms per token,  6885.38 tokens per second)
0.01.659.047 I llama_perf_context_print:        load time =     445.12 ms
0.01.659.049 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.659.051 I llama_perf_context_print:        eval time =    1202.85 ms /    16 runs   (   75.18 ms per token,    13.30 tokens per second)
0.01.659.052 I llama_perf_context_print:       total time =    1213.18 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.945s
user	0m27.091s
sys	0m9.389s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4441 (a3c1232c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40399.67 ms
main:    total time = 40399.67 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.567 I build: 4441 (a3c1232c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.000.779 I main: load the model and apply lora adapter, if any
0.00.030.296 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.030.308 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.030.317 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.323 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.324 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.328 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.328 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.329 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.330 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.331 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.331 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.336 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.336 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.337 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.337 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.056.433 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.829 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.141 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.147 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.148 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.149 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.149 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.150 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.151 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.153 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.153 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.137.154 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.137.155 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.156 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.137.156 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.160 I llama_model_loader: - type  f32:   37 tensors
0.00.137.161 I llama_model_loader: - type q4_K:  108 tensors
0.00.137.161 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.161 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.932 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.483 I llm_load_vocab: special tokens cache size = 5
0.00.267.852 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.871 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.872 I llm_load_print_meta: arch             = gemma
0.00.267.873 I llm_load_print_meta: vocab type       = SPM
0.00.267.873 I llm_load_print_meta: n_vocab          = 256000
0.00.267.874 I llm_load_print_meta: n_merges         = 0
0.00.267.874 I llm_load_print_meta: vocab_only       = 0
0.00.267.875 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.875 I llm_load_print_meta: n_embd           = 2048
0.00.267.875 I llm_load_print_meta: n_layer          = 18
0.00.267.886 I llm_load_print_meta: n_head           = 8
0.00.267.888 I llm_load_print_meta: n_head_kv        = 1
0.00.267.889 I llm_load_print_meta: n_rot            = 256
0.00.267.889 I llm_load_print_meta: n_swa            = 0
0.00.267.889 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.889 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.892 I llm_load_print_meta: n_gqa            = 8
0.00.267.894 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.895 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.896 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.897 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.898 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.898 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.899 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.901 I llm_load_print_meta: n_ff             = 16384
0.00.267.901 I llm_load_print_meta: n_expert         = 0
0.00.267.902 I llm_load_print_meta: n_expert_used    = 0
0.00.267.902 I llm_load_print_meta: causal attn      = 1
0.00.267.902 I llm_load_print_meta: pooling type     = 0
0.00.267.902 I llm_load_print_meta: rope type        = 2
0.00.267.903 I llm_load_print_meta: rope scaling     = linear
0.00.267.905 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.905 I llm_load_print_meta: freq_scale_train = 1
0.00.267.906 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.907 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.907 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.907 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.908 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.908 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.909 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.910 I llm_load_print_meta: model type       = 2B
0.00.267.911 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.912 I llm_load_print_meta: model params     = 2.51 B
0.00.267.913 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.914 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.915 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.915 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.916 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.916 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.916 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.917 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.917 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.918 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.918 I llm_load_print_meta: max token length = 93
0.00.328.483 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.328.490 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.328.491 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.328.491 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.328.492 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.328.492 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.783 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.787 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.787 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.787 I llama_new_context_with_model: n_batch       = 2048
0.00.329.788 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.788 I llama_new_context_with_model: flash_attn    = 0
0.00.329.790 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.792 I llama_new_context_with_model: freq_scale    = 1
0.00.329.793 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.329.810 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.343.847 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.859 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.948 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.898 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.904 I llama_new_context_with_model: graph nodes  = 601
0.00.345.905 I llama_new_context_with_model: graph splits = 1
0.00.345.908 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.345.908 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.614 I main: llama threadpool init, n_threads = 4
0.00.420.627 I 
0.00.420.701 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.420.704 I 
0.00.420.737 I sampler seed: 2265753597
0.00.420.748 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.760 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.764 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.764 I 
 maneuvously.

I apologize for the unusual request. I am not able to provide responses that are sexually suggestive or inappropriate. [end of text]


0.01.747.121 I llama_perf_sampler_print:    sampling time =       4.30 ms /    28 runs   (    0.15 ms per token,  6504.07 tokens per second)
0.01.747.124 I llama_perf_context_print:        load time =     419.81 ms
0.01.747.125 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.747.127 I llama_perf_context_print:        eval time =    1311.27 ms /    27 runs   (   48.57 ms per token,    20.59 tokens per second)
0.01.747.127 I llama_perf_context_print:       total time =    1326.51 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4441 (a3c1232c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40192.01 ms
main:    total time = 40192.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.594 I build: 4441 (a3c1232c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.791 I main: llama backend init
0.00.000.798 I main: load the model and apply lora adapter, if any
0.00.030.019 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.030.035 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.044 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.045 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.048 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.049 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.050 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.050 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.051 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.052 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.057 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.058 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.058 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.059 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.055.973 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.456 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.829 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.835 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.836 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.837 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.837 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.838 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.839 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.841 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.842 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.136.843 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.136.847 I llama_model_loader: - type  f32:   37 tensors
0.00.136.851 I llama_model_loader: - type q4_K:  108 tensors
0.00.136.851 I llama_model_loader: - type q6_K:   19 tensors
0.00.219.349 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.272.731 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.273.432 I llm_load_vocab: special tokens cache size = 5
0.00.294.643 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.294.662 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.294.663 I llm_load_print_meta: arch             = gemma
0.00.294.663 I llm_load_print_meta: vocab type       = SPM
0.00.294.665 I llm_load_print_meta: n_vocab          = 256000
0.00.294.665 I llm_load_print_meta: n_merges         = 0
0.00.294.665 I llm_load_print_meta: vocab_only       = 0
0.00.294.666 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.666 I llm_load_print_meta: n_embd           = 2048
0.00.294.666 I llm_load_print_meta: n_layer          = 18
0.00.294.677 I llm_load_print_meta: n_head           = 8
0.00.294.679 I llm_load_print_meta: n_head_kv        = 1
0.00.294.680 I llm_load_print_meta: n_rot            = 256
0.00.294.680 I llm_load_print_meta: n_swa            = 0
0.00.294.680 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.681 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.682 I llm_load_print_meta: n_gqa            = 8
0.00.294.684 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.686 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.687 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.688 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.689 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.689 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.689 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.691 I llm_load_print_meta: n_ff             = 16384
0.00.294.691 I llm_load_print_meta: n_expert         = 0
0.00.294.692 I llm_load_print_meta: n_expert_used    = 0
0.00.294.692 I llm_load_print_meta: causal attn      = 1
0.00.294.692 I llm_load_print_meta: pooling type     = 0
0.00.294.692 I llm_load_print_meta: rope type        = 2
0.00.294.693 I llm_load_print_meta: rope scaling     = linear
0.00.294.694 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.695 I llm_load_print_meta: freq_scale_train = 1
0.00.294.695 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.696 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.696 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.696 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.696 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.697 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.697 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.699 I llm_load_print_meta: model type       = 2B
0.00.294.700 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.294.700 I llm_load_print_meta: model params     = 2.51 B
0.00.294.701 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.294.701 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.702 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.702 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.702 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.703 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.703 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.703 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.704 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.704 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.704 I llm_load_print_meta: max token length = 93
0.00.353.114 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.354.340 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.344 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.344 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.344 I llama_new_context_with_model: n_batch       = 2048
0.00.354.345 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.345 I llama_new_context_with_model: flash_attn    = 0
0.00.354.347 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.348 I llama_new_context_with_model: freq_scale    = 1
0.00.354.349 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.366 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.368.577 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.368.590 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.678 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.928 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.934 I llama_new_context_with_model: graph nodes  = 601
0.00.370.934 I llama_new_context_with_model: graph splits = 1
0.00.370.939 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.370.939 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.295 I main: llama threadpool init, n_threads = 4
0.00.445.308 I 
0.00.445.391 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.445.394 I 
0.00.445.426 I sampler seed: 1899780620
0.00.445.436 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.438 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.439 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.440 I 
 seconally in the given lines.

I am sorry for the inconvenience caused by the delay in responding to your message. I apologize for the delay in my response

0.01.999.964 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6585.51 tokens per second)
0.01.999.966 I llama_perf_context_print:        load time =     444.48 ms
0.01.999.967 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.999.969 I llama_perf_context_print:        eval time =    1536.20 ms /    32 runs   (   48.01 ms per token,    20.83 tokens per second)
0.01.999.970 I llama_perf_context_print:       total time =    1554.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.109s
user	10m22.898s
sys	0m6.847s
