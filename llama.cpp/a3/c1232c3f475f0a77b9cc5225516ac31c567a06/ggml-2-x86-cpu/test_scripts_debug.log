+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.683 I build: 4441 (a3c1232c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.895 I main: llama backend init
0.00.000.903 I main: load the model and apply lora adapter, if any
0.00.088.856 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.088.869 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.088.963 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.088.982 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.088.985 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.088.990 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.088.992 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.088.994 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.088.996 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.088.998 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.088.999 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.089.006 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.089.012 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.089.014 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.089.015 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.089.017 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.291.661 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.392.752 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.416.242 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.416.253 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.416.255 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.416.257 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.416.259 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.416.261 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.416.263 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.416.268 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.416.269 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.416.271 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.416.273 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.416.275 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.416.283 I llama_model_loader: - type  f32:   37 tensors
0.00.416.285 I llama_model_loader: - type q8_0:  127 tensors
0.00.680.492 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.810.516 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.811.456 I llm_load_vocab: special tokens cache size = 5
0.01.025.365 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.025.445 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.025.454 I llm_load_print_meta: arch             = gemma
0.01.025.455 I llm_load_print_meta: vocab type       = SPM
0.01.025.455 I llm_load_print_meta: n_vocab          = 256000
0.01.025.458 I llm_load_print_meta: n_merges         = 0
0.01.025.458 I llm_load_print_meta: vocab_only       = 0
0.01.025.459 I llm_load_print_meta: n_ctx_train      = 8192
0.01.025.460 I llm_load_print_meta: n_embd           = 2048
0.01.025.461 I llm_load_print_meta: n_layer          = 18
0.01.025.540 I llm_load_print_meta: n_head           = 8
0.01.025.550 I llm_load_print_meta: n_head_kv        = 1
0.01.025.550 I llm_load_print_meta: n_rot            = 256
0.01.025.551 I llm_load_print_meta: n_swa            = 0
0.01.025.553 I llm_load_print_meta: n_embd_head_k    = 256
0.01.025.553 I llm_load_print_meta: n_embd_head_v    = 256
0.01.025.558 I llm_load_print_meta: n_gqa            = 8
0.01.025.563 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.025.571 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.025.572 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.025.573 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.025.575 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.025.575 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.025.576 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.025.581 I llm_load_print_meta: n_ff             = 16384
0.01.025.581 I llm_load_print_meta: n_expert         = 0
0.01.025.582 I llm_load_print_meta: n_expert_used    = 0
0.01.025.583 I llm_load_print_meta: causal attn      = 1
0.01.025.583 I llm_load_print_meta: pooling type     = 0
0.01.025.583 I llm_load_print_meta: rope type        = 2
0.01.025.584 I llm_load_print_meta: rope scaling     = linear
0.01.025.596 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.025.597 I llm_load_print_meta: freq_scale_train = 1
0.01.025.598 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.025.599 I llm_load_print_meta: rope_finetuned   = unknown
0.01.025.599 I llm_load_print_meta: ssm_d_conv       = 0
0.01.025.600 I llm_load_print_meta: ssm_d_inner      = 0
0.01.025.600 I llm_load_print_meta: ssm_d_state      = 0
0.01.025.601 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.025.603 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.025.606 I llm_load_print_meta: model type       = 2B
0.01.025.608 I llm_load_print_meta: model ftype      = Q8_0
0.01.025.608 I llm_load_print_meta: model params     = 2.51 B
0.01.025.610 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.025.610 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.025.611 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.025.612 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.025.613 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.025.613 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.025.613 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.025.616 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.025.622 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.025.623 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.025.623 I llm_load_print_meta: max token length = 93
0.01.127.805 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.127.816 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.127.817 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.127.818 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.127.818 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.127.819 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.134.865 I llama_new_context_with_model: n_seq_max     = 1
0.01.134.871 I llama_new_context_with_model: n_ctx         = 4096
0.01.134.871 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.134.872 I llama_new_context_with_model: n_batch       = 2048
0.01.134.872 I llama_new_context_with_model: n_ubatch      = 512
0.01.134.873 I llama_new_context_with_model: flash_attn    = 0
0.01.134.875 I llama_new_context_with_model: freq_base     = 10000.0
0.01.134.876 I llama_new_context_with_model: freq_scale    = 1
0.01.134.876 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.134.956 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.149.351 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.149.393 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.149.519 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.153.033 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.153.038 I llama_new_context_with_model: graph nodes  = 601
0.01.153.038 I llama_new_context_with_model: graph splits = 1
0.01.153.064 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.153.067 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.764.672 I main: llama threadpool init, n_threads = 4
0.01.764.689 I 
0.01.764.812 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.764.816 I 
0.01.765.046 I sampler seed: 704970099
0.01.765.061 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.765.071 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.765.072 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.765.073 I 
 increamically. 

Answer: With great anticipation! [end of text]


0.06.847.772 I llama_perf_sampler_print:    sampling time =      18.74 ms /    13 runs   (    1.44 ms per token,   693.74 tokens per second)
0.06.847.776 I llama_perf_context_print:        load time =    1763.68 ms
0.06.847.778 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.847.780 I llama_perf_context_print:        eval time =    5049.86 ms /    12 runs   (  420.82 ms per token,     2.38 tokens per second)
0.06.847.781 I llama_perf_context_print:       total time =    5083.11 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4441 (a3c1232c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.000.838 I main: load the model and apply lora adapter, if any
0.00.085.831 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.085.929 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.952 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.954 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.959 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.960 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.962 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.963 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.965 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.966 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.973 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.975 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.976 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.978 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.979 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.288.644 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.034 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.413.588 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.413.604 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.413.606 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.413.607 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.413.609 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.413.611 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.413.613 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.413.619 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.413.620 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.413.623 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.413.625 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.413.626 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.413.636 I llama_model_loader: - type  f32:   37 tensors
0.00.413.638 I llama_model_loader: - type q8_0:  127 tensors
0.00.671.922 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.797.333 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.798.420 I llm_load_vocab: special tokens cache size = 5
0.01.006.554 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.006.636 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.006.641 I llm_load_print_meta: arch             = gemma
0.01.006.641 I llm_load_print_meta: vocab type       = SPM
0.01.006.642 I llm_load_print_meta: n_vocab          = 256000
0.01.006.645 I llm_load_print_meta: n_merges         = 0
0.01.006.646 I llm_load_print_meta: vocab_only       = 0
0.01.006.646 I llm_load_print_meta: n_ctx_train      = 8192
0.01.006.646 I llm_load_print_meta: n_embd           = 2048
0.01.006.647 I llm_load_print_meta: n_layer          = 18
0.01.006.723 I llm_load_print_meta: n_head           = 8
0.01.006.733 I llm_load_print_meta: n_head_kv        = 1
0.01.006.734 I llm_load_print_meta: n_rot            = 256
0.01.006.734 I llm_load_print_meta: n_swa            = 0
0.01.006.734 I llm_load_print_meta: n_embd_head_k    = 256
0.01.006.735 I llm_load_print_meta: n_embd_head_v    = 256
0.01.006.739 I llm_load_print_meta: n_gqa            = 8
0.01.006.744 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.006.749 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.006.750 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.006.752 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.006.753 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.006.754 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.006.754 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.006.759 I llm_load_print_meta: n_ff             = 16384
0.01.006.759 I llm_load_print_meta: n_expert         = 0
0.01.006.760 I llm_load_print_meta: n_expert_used    = 0
0.01.006.761 I llm_load_print_meta: causal attn      = 1
0.01.006.761 I llm_load_print_meta: pooling type     = 0
0.01.006.761 I llm_load_print_meta: rope type        = 2
0.01.006.762 I llm_load_print_meta: rope scaling     = linear
0.01.006.763 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.006.764 I llm_load_print_meta: freq_scale_train = 1
0.01.006.765 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.006.765 I llm_load_print_meta: rope_finetuned   = unknown
0.01.006.766 I llm_load_print_meta: ssm_d_conv       = 0
0.01.006.767 I llm_load_print_meta: ssm_d_inner      = 0
0.01.006.767 I llm_load_print_meta: ssm_d_state      = 0
0.01.006.768 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.006.768 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.006.771 I llm_load_print_meta: model type       = 2B
0.01.006.773 I llm_load_print_meta: model ftype      = Q8_0
0.01.006.774 I llm_load_print_meta: model params     = 2.51 B
0.01.006.775 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.006.776 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.006.777 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.006.777 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.006.778 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.006.778 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.006.779 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.006.779 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.006.786 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.006.789 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.006.790 I llm_load_print_meta: max token length = 93
0.01.104.888 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.111.943 I llama_new_context_with_model: n_seq_max     = 1
0.01.111.949 I llama_new_context_with_model: n_ctx         = 4096
0.01.111.949 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.111.950 I llama_new_context_with_model: n_batch       = 2048
0.01.111.950 I llama_new_context_with_model: n_ubatch      = 512
0.01.111.950 I llama_new_context_with_model: flash_attn    = 0
0.01.111.953 I llama_new_context_with_model: freq_base     = 10000.0
0.01.111.954 I llama_new_context_with_model: freq_scale    = 1
0.01.111.954 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.112.035 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.126.631 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.126.671 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.126.793 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.129.975 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.129.979 I llama_new_context_with_model: graph nodes  = 601
0.01.129.979 I llama_new_context_with_model: graph splits = 1
0.01.130.003 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.130.006 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.749.166 I main: llama threadpool init, n_threads = 4
0.01.749.182 I 
0.01.749.302 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.749.302 I 
0.01.749.533 I sampler seed: 1921268420
0.01.749.547 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.749.573 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.749.574 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.749.574 I 
 increadibly. [end of text]


0.03.445.434 I llama_perf_sampler_print:    sampling time =       6.36 ms /     5 runs   (    1.27 ms per token,   786.53 tokens per second)
0.03.445.436 I llama_perf_context_print:        load time =    1748.25 ms
0.03.445.438 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.445.439 I llama_perf_context_print:        eval time =    1683.74 ms /     4 runs   (  420.94 ms per token,     2.38 tokens per second)
0.03.445.440 I llama_perf_context_print:       total time =    1696.28 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4441 (a3c1232c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.000.852 I main: load the model and apply lora adapter, if any
0.00.089.435 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.089.447 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.089.544 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.089.566 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.089.569 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.089.574 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.089.576 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.089.578 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.089.579 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.089.581 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.089.583 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.089.590 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.089.592 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.089.594 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.089.595 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.089.597 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.299.549 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.400.700 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.424.231 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.424.246 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.424.248 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.424.250 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.424.252 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.424.254 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.424.256 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.424.261 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.424.262 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.424.265 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.424.267 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.424.268 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.424.277 I llama_model_loader: - type  f32:   37 tensors
0.00.424.279 I llama_model_loader: - type q8_0:  127 tensors
0.00.713.939 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.840.951 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.841.950 I llm_load_vocab: special tokens cache size = 5
0.01.055.089 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.055.166 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.055.171 I llm_load_print_meta: arch             = gemma
0.01.055.171 I llm_load_print_meta: vocab type       = SPM
0.01.055.173 I llm_load_print_meta: n_vocab          = 256000
0.01.055.175 I llm_load_print_meta: n_merges         = 0
0.01.055.175 I llm_load_print_meta: vocab_only       = 0
0.01.055.176 I llm_load_print_meta: n_ctx_train      = 8192
0.01.055.176 I llm_load_print_meta: n_embd           = 2048
0.01.055.177 I llm_load_print_meta: n_layer          = 18
0.01.055.256 I llm_load_print_meta: n_head           = 8
0.01.055.267 I llm_load_print_meta: n_head_kv        = 1
0.01.055.268 I llm_load_print_meta: n_rot            = 256
0.01.055.268 I llm_load_print_meta: n_swa            = 0
0.01.055.268 I llm_load_print_meta: n_embd_head_k    = 256
0.01.055.269 I llm_load_print_meta: n_embd_head_v    = 256
0.01.055.273 I llm_load_print_meta: n_gqa            = 8
0.01.055.279 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.055.283 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.055.285 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.055.289 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.055.290 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.055.290 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.055.291 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.055.295 I llm_load_print_meta: n_ff             = 16384
0.01.055.296 I llm_load_print_meta: n_expert         = 0
0.01.055.297 I llm_load_print_meta: n_expert_used    = 0
0.01.055.298 I llm_load_print_meta: causal attn      = 1
0.01.055.298 I llm_load_print_meta: pooling type     = 0
0.01.055.299 I llm_load_print_meta: rope type        = 2
0.01.055.299 I llm_load_print_meta: rope scaling     = linear
0.01.055.300 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.055.301 I llm_load_print_meta: freq_scale_train = 1
0.01.055.301 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.055.302 I llm_load_print_meta: rope_finetuned   = unknown
0.01.055.302 I llm_load_print_meta: ssm_d_conv       = 0
0.01.055.302 I llm_load_print_meta: ssm_d_inner      = 0
0.01.055.303 I llm_load_print_meta: ssm_d_state      = 0
0.01.055.303 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.055.304 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.055.308 I llm_load_print_meta: model type       = 2B
0.01.055.310 I llm_load_print_meta: model ftype      = Q8_0
0.01.055.319 I llm_load_print_meta: model params     = 2.51 B
0.01.055.320 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.055.321 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.055.322 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.055.322 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.055.323 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.055.324 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.055.324 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.055.325 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.055.331 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.055.333 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.055.333 I llm_load_print_meta: max token length = 93
0.01.134.102 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.134.108 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.134.109 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.134.110 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.134.110 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.134.111 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.141.193 I llama_new_context_with_model: n_seq_max     = 1
0.01.141.199 I llama_new_context_with_model: n_ctx         = 4096
0.01.141.199 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.141.200 I llama_new_context_with_model: n_batch       = 2048
0.01.141.200 I llama_new_context_with_model: n_ubatch      = 512
0.01.141.201 I llama_new_context_with_model: flash_attn    = 0
0.01.141.203 I llama_new_context_with_model: freq_base     = 10000.0
0.01.141.204 I llama_new_context_with_model: freq_scale    = 1
0.01.141.204 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.141.284 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.155.948 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.155.987 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.156.116 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.159.429 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.159.434 I llama_new_context_with_model: graph nodes  = 601
0.01.159.434 I llama_new_context_with_model: graph splits = 1
0.01.159.458 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.159.459 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.770.119 I main: llama threadpool init, n_threads = 4
0.01.770.134 I 
0.01.770.262 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.770.266 I 
0.01.770.493 I sampler seed: 4280059274
0.01.770.508 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.770.518 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.770.519 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.770.520 I 
 increasements of the 19th century.

The 19th century witnessed a remarkable flowering of scientific inquiry, with advancements in various fields such as

0.15.344.601 I llama_perf_sampler_print:    sampling time =      49.93 ms /    33 runs   (    1.51 ms per token,   660.93 tokens per second)
0.15.344.604 I llama_perf_context_print:        load time =    1769.19 ms
0.15.344.605 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.344.607 I llama_perf_context_print:        eval time =   13488.54 ms /    32 runs   (  421.52 ms per token,     2.37 tokens per second)
0.15.344.608 I llama_perf_context_print:       total time =   13574.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4441 (a3c1232c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.000.860 I main: load the model and apply lora adapter, if any
0.00.086.635 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.086.647 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.086.744 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.765 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.767 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.772 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.774 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.776 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.778 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.780 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.782 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.790 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.791 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.793 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.795 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.796 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.289.596 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.530 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.413.967 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.413.977 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.413.979 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.413.980 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.413.982 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.413.984 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.413.986 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.413.990 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.413.992 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.413.994 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.413.996 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.413.998 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.414.006 I llama_model_loader: - type  f32:   37 tensors
0.00.414.007 I llama_model_loader: - type q8_0:  127 tensors
0.00.668.074 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.791.745 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.792.719 I llm_load_vocab: special tokens cache size = 5
0.01.011.748 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.011.827 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.011.832 I llm_load_print_meta: arch             = gemma
0.01.011.833 I llm_load_print_meta: vocab type       = SPM
0.01.011.833 I llm_load_print_meta: n_vocab          = 256000
0.01.011.835 I llm_load_print_meta: n_merges         = 0
0.01.011.836 I llm_load_print_meta: vocab_only       = 0
0.01.011.836 I llm_load_print_meta: n_ctx_train      = 8192
0.01.011.837 I llm_load_print_meta: n_embd           = 2048
0.01.011.837 I llm_load_print_meta: n_layer          = 18
0.01.011.915 I llm_load_print_meta: n_head           = 8
0.01.011.926 I llm_load_print_meta: n_head_kv        = 1
0.01.011.926 I llm_load_print_meta: n_rot            = 256
0.01.011.927 I llm_load_print_meta: n_swa            = 0
0.01.011.927 I llm_load_print_meta: n_embd_head_k    = 256
0.01.011.927 I llm_load_print_meta: n_embd_head_v    = 256
0.01.011.932 I llm_load_print_meta: n_gqa            = 8
0.01.011.937 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.011.942 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.011.944 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.011.946 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.011.947 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.011.947 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.011.947 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.011.953 I llm_load_print_meta: n_ff             = 16384
0.01.011.953 I llm_load_print_meta: n_expert         = 0
0.01.011.954 I llm_load_print_meta: n_expert_used    = 0
0.01.011.955 I llm_load_print_meta: causal attn      = 1
0.01.011.966 I llm_load_print_meta: pooling type     = 0
0.01.011.966 I llm_load_print_meta: rope type        = 2
0.01.011.967 I llm_load_print_meta: rope scaling     = linear
0.01.011.969 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.011.970 I llm_load_print_meta: freq_scale_train = 1
0.01.011.970 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.011.973 I llm_load_print_meta: rope_finetuned   = unknown
0.01.011.973 I llm_load_print_meta: ssm_d_conv       = 0
0.01.011.974 I llm_load_print_meta: ssm_d_inner      = 0
0.01.011.974 I llm_load_print_meta: ssm_d_state      = 0
0.01.011.974 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.011.975 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.011.978 I llm_load_print_meta: model type       = 2B
0.01.011.979 I llm_load_print_meta: model ftype      = Q8_0
0.01.011.980 I llm_load_print_meta: model params     = 2.51 B
0.01.011.981 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.011.981 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.011.982 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.011.983 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.011.983 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.011.984 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.011.984 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.011.986 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.012.004 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.012.006 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.012.006 I llm_load_print_meta: max token length = 93
0.01.084.774 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.084.784 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.091.849 I llama_new_context_with_model: n_seq_max     = 1
0.01.091.854 I llama_new_context_with_model: n_ctx         = 4096
0.01.091.854 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.091.855 I llama_new_context_with_model: n_batch       = 2048
0.01.091.855 I llama_new_context_with_model: n_ubatch      = 512
0.01.091.856 I llama_new_context_with_model: flash_attn    = 0
0.01.091.858 I llama_new_context_with_model: freq_base     = 10000.0
0.01.091.858 I llama_new_context_with_model: freq_scale    = 1
0.01.091.859 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.091.938 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.106.151 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.106.189 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.106.308 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.109.844 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.109.848 I llama_new_context_with_model: graph nodes  = 601
0.01.109.849 I llama_new_context_with_model: graph splits = 1
0.01.109.872 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.109.875 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.722.499 I main: llama threadpool init, n_threads = 4
0.01.722.513 I 
0.01.722.634 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.722.638 I 
0.01.722.868 I sampler seed: 1428327282
0.01.722.882 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.722.891 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.722.895 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.722.895 I 
 increasities and other forms of harassment on the basis of gender identity, expression, and sexual orientation. [end of text]


0.10.699.433 I llama_perf_sampler_print:    sampling time =      32.65 ms /    22 runs   (    1.48 ms per token,   673.75 tokens per second)
0.10.699.435 I llama_perf_context_print:        load time =    1721.55 ms
0.10.699.449 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.699.451 I llama_perf_context_print:        eval time =    8920.64 ms /    21 runs   (  424.79 ms per token,     2.35 tokens per second)
0.10.699.452 I llama_perf_context_print:       total time =    8976.95 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m47.316s
user	2m13.223s
sys	0m9.299s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4441 (a3c1232c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 185873.32 ms
main:    total time = 185873.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 4441 (a3c1232c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.844 I main: load the model and apply lora adapter, if any
0.00.085.754 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.769 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.869 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.890 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.897 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.902 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.905 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.907 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.908 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.910 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.922 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.932 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.937 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.939 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.941 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.289.467 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.219 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.413.707 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.413.718 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.413.720 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.413.722 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.413.723 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.413.726 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.413.728 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.413.732 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.413.734 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.413.736 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.413.738 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.413.740 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.413.741 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.413.749 I llama_model_loader: - type  f32:   37 tensors
0.00.413.751 I llama_model_loader: - type q4_K:  108 tensors
0.00.413.752 I llama_model_loader: - type q6_K:   19 tensors
0.00.681.981 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.804.313 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.805.286 I llm_load_vocab: special tokens cache size = 5
0.01.025.331 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.025.412 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.025.417 I llm_load_print_meta: arch             = gemma
0.01.025.418 I llm_load_print_meta: vocab type       = SPM
0.01.025.419 I llm_load_print_meta: n_vocab          = 256000
0.01.025.422 I llm_load_print_meta: n_merges         = 0
0.01.025.423 I llm_load_print_meta: vocab_only       = 0
0.01.025.423 I llm_load_print_meta: n_ctx_train      = 8192
0.01.025.423 I llm_load_print_meta: n_embd           = 2048
0.01.025.424 I llm_load_print_meta: n_layer          = 18
0.01.025.504 I llm_load_print_meta: n_head           = 8
0.01.025.514 I llm_load_print_meta: n_head_kv        = 1
0.01.025.515 I llm_load_print_meta: n_rot            = 256
0.01.025.515 I llm_load_print_meta: n_swa            = 0
0.01.025.516 I llm_load_print_meta: n_embd_head_k    = 256
0.01.025.516 I llm_load_print_meta: n_embd_head_v    = 256
0.01.025.520 I llm_load_print_meta: n_gqa            = 8
0.01.025.525 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.025.530 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.025.532 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.025.534 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.025.534 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.025.535 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.025.536 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.025.542 I llm_load_print_meta: n_ff             = 16384
0.01.025.542 I llm_load_print_meta: n_expert         = 0
0.01.025.543 I llm_load_print_meta: n_expert_used    = 0
0.01.025.543 I llm_load_print_meta: causal attn      = 1
0.01.025.543 I llm_load_print_meta: pooling type     = 0
0.01.025.544 I llm_load_print_meta: rope type        = 2
0.01.025.545 I llm_load_print_meta: rope scaling     = linear
0.01.025.547 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.025.548 I llm_load_print_meta: freq_scale_train = 1
0.01.025.548 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.025.549 I llm_load_print_meta: rope_finetuned   = unknown
0.01.025.549 I llm_load_print_meta: ssm_d_conv       = 0
0.01.025.552 I llm_load_print_meta: ssm_d_inner      = 0
0.01.025.553 I llm_load_print_meta: ssm_d_state      = 0
0.01.025.553 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.025.553 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.025.557 I llm_load_print_meta: model type       = 2B
0.01.025.558 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.025.559 I llm_load_print_meta: model params     = 2.51 B
0.01.025.560 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.025.561 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.025.561 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.025.562 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.025.563 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.025.564 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.025.564 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.025.565 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.025.571 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.025.573 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.025.573 I llm_load_print_meta: max token length = 93
0.01.088.430 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.088.436 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.088.437 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.088.438 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.088.438 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.088.439 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.095.370 I llama_new_context_with_model: n_seq_max     = 1
0.01.095.375 I llama_new_context_with_model: n_ctx         = 4096
0.01.095.375 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.095.376 I llama_new_context_with_model: n_batch       = 2048
0.01.095.376 I llama_new_context_with_model: n_ubatch      = 512
0.01.095.377 I llama_new_context_with_model: flash_attn    = 0
0.01.095.379 I llama_new_context_with_model: freq_base     = 10000.0
0.01.095.380 I llama_new_context_with_model: freq_scale    = 1
0.01.095.381 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.095.462 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.109.760 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.109.796 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.109.918 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.113.128 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.113.132 I llama_new_context_with_model: graph nodes  = 601
0.01.113.132 I llama_new_context_with_model: graph splits = 1
0.01.113.157 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.113.160 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.693.328 I main: llama threadpool init, n_threads = 4
0.01.693.345 I 
0.01.693.468 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.693.472 I 
0.01.693.701 I sampler seed: 241534758
0.01.693.715 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.693.728 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.693.729 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.693.729 I 
 seconal and proximal phalanges articulate with the distal phalanx of the thumb.

What is the function of this articulation?

a) Support and stability


0.12.768.569 I llama_perf_sampler_print:    sampling time =      49.62 ms /    33 runs   (    1.50 ms per token,   665.08 tokens per second)
0.12.768.572 I llama_perf_context_print:        load time =    1692.40 ms
0.12.768.573 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.768.600 I llama_perf_context_print:        eval time =   10989.80 ms /    32 runs   (  343.43 ms per token,     2.91 tokens per second)
0.12.768.602 I llama_perf_context_print:       total time =   11075.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4441 (a3c1232c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186007.12 ms
main:    total time = 186007.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4441 (a3c1232c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.000.846 I main: load the model and apply lora adapter, if any
0.00.085.893 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.086.008 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.035 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.040 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.045 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.047 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.049 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.051 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.053 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.055 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.063 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.067 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.069 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.070 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.311.525 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.412.828 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.436.379 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.436.390 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.436.392 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.436.394 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.436.396 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.436.399 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.436.400 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.436.406 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.436.408 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.436.411 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.436.421 I llama_model_loader: - type  f32:   37 tensors
0.00.436.423 I llama_model_loader: - type q4_K:  108 tensors
0.00.436.424 I llama_model_loader: - type q6_K:   19 tensors
0.00.708.419 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.832.705 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.833.663 I llm_load_vocab: special tokens cache size = 5
0.01.047.777 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.047.859 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.047.863 I llm_load_print_meta: arch             = gemma
0.01.047.864 I llm_load_print_meta: vocab type       = SPM
0.01.047.865 I llm_load_print_meta: n_vocab          = 256000
0.01.047.867 I llm_load_print_meta: n_merges         = 0
0.01.047.868 I llm_load_print_meta: vocab_only       = 0
0.01.047.868 I llm_load_print_meta: n_ctx_train      = 8192
0.01.047.869 I llm_load_print_meta: n_embd           = 2048
0.01.047.869 I llm_load_print_meta: n_layer          = 18
0.01.047.947 I llm_load_print_meta: n_head           = 8
0.01.047.958 I llm_load_print_meta: n_head_kv        = 1
0.01.047.959 I llm_load_print_meta: n_rot            = 256
0.01.047.959 I llm_load_print_meta: n_swa            = 0
0.01.047.959 I llm_load_print_meta: n_embd_head_k    = 256
0.01.047.959 I llm_load_print_meta: n_embd_head_v    = 256
0.01.047.964 I llm_load_print_meta: n_gqa            = 8
0.01.047.970 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.047.974 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.047.976 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.047.977 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.047.977 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.047.978 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.047.979 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.047.984 I llm_load_print_meta: n_ff             = 16384
0.01.047.986 I llm_load_print_meta: n_expert         = 0
0.01.047.986 I llm_load_print_meta: n_expert_used    = 0
0.01.047.987 I llm_load_print_meta: causal attn      = 1
0.01.047.987 I llm_load_print_meta: pooling type     = 0
0.01.047.988 I llm_load_print_meta: rope type        = 2
0.01.047.989 I llm_load_print_meta: rope scaling     = linear
0.01.047.990 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.047.991 I llm_load_print_meta: freq_scale_train = 1
0.01.047.992 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.047.992 I llm_load_print_meta: rope_finetuned   = unknown
0.01.047.992 I llm_load_print_meta: ssm_d_conv       = 0
0.01.047.993 I llm_load_print_meta: ssm_d_inner      = 0
0.01.047.994 I llm_load_print_meta: ssm_d_state      = 0
0.01.047.994 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.047.994 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.047.998 I llm_load_print_meta: model type       = 2B
0.01.048.000 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.048.001 I llm_load_print_meta: model params     = 2.51 B
0.01.048.002 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.048.012 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.048.013 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.048.014 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.048.015 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.048.015 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.048.016 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.048.017 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.048.024 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.048.025 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.048.026 I llm_load_print_meta: max token length = 93
0.01.107.889 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.114.942 I llama_new_context_with_model: n_seq_max     = 1
0.01.114.949 I llama_new_context_with_model: n_ctx         = 4096
0.01.114.949 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.114.949 I llama_new_context_with_model: n_batch       = 2048
0.01.114.950 I llama_new_context_with_model: n_ubatch      = 512
0.01.114.950 I llama_new_context_with_model: flash_attn    = 0
0.01.114.954 I llama_new_context_with_model: freq_base     = 10000.0
0.01.114.955 I llama_new_context_with_model: freq_scale    = 1
0.01.114.955 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.115.041 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.129.723 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.129.765 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.129.888 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.133.074 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.133.078 I llama_new_context_with_model: graph nodes  = 601
0.01.133.078 I llama_new_context_with_model: graph splits = 1
0.01.133.102 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.133.105 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.716.806 I main: llama threadpool init, n_threads = 4
0.01.716.830 I 
0.01.716.998 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.717.002 I 
0.01.717.709 I sampler seed: 860904966
0.01.717.729 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.718.156 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.718.163 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.718.163 I 
 encompases with the following statements:

**a)** "We can find the eigenvalues and eigenvectors of a matrix by solving a system of linear equations."

**

0.12.823.958 I llama_perf_sampler_print:    sampling time =      49.55 ms /    33 runs   (    1.50 ms per token,   665.93 tokens per second)
0.12.823.962 I llama_perf_context_print:        load time =    1715.88 ms
0.12.823.964 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.823.976 I llama_perf_context_print:        eval time =   11020.96 ms /    32 runs   (  344.40 ms per token,     2.90 tokens per second)
0.12.823.978 I llama_perf_context_print:       total time =   11107.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.755s
user	46m43.329s
sys	0m6.224s
