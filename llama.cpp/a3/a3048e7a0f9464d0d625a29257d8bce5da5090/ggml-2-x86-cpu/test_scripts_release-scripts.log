+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.562 I build: 4223 (a3a3048e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.021.810 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.824 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.833 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.838 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.839 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.843 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.844 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.844 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.845 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.845 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.846 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.851 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.852 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.853 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.854 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.855 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.577 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.605 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.479 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.486 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.486 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.487 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.487 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.488 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.489 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.492 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.494 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.495 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.495 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.496 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.500 I llama_model_loader: - type  f32:   37 tensors
0.00.131.501 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.195 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.633 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.215 I llm_load_vocab: special tokens cache size = 5
0.00.273.266 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.282 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.282 I llm_load_print_meta: arch             = gemma
0.00.273.283 I llm_load_print_meta: vocab type       = SPM
0.00.273.284 I llm_load_print_meta: n_vocab          = 256000
0.00.273.284 I llm_load_print_meta: n_merges         = 0
0.00.273.285 I llm_load_print_meta: vocab_only       = 0
0.00.273.285 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.285 I llm_load_print_meta: n_embd           = 2048
0.00.273.286 I llm_load_print_meta: n_layer          = 18
0.00.273.299 I llm_load_print_meta: n_head           = 8
0.00.273.300 I llm_load_print_meta: n_head_kv        = 1
0.00.273.301 I llm_load_print_meta: n_rot            = 256
0.00.273.301 I llm_load_print_meta: n_swa            = 0
0.00.273.301 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.302 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.302 I llm_load_print_meta: n_gqa            = 8
0.00.273.303 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.304 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.305 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.306 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.307 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.307 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.307 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.308 I llm_load_print_meta: n_ff             = 16384
0.00.273.309 I llm_load_print_meta: n_expert         = 0
0.00.273.309 I llm_load_print_meta: n_expert_used    = 0
0.00.273.309 I llm_load_print_meta: causal attn      = 1
0.00.273.310 I llm_load_print_meta: pooling type     = 0
0.00.273.310 I llm_load_print_meta: rope type        = 2
0.00.273.310 I llm_load_print_meta: rope scaling     = linear
0.00.273.312 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.312 I llm_load_print_meta: freq_scale_train = 1
0.00.273.312 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.313 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.313 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.313 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.314 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.314 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.314 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.314 I llm_load_print_meta: model type       = 2B
0.00.273.315 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.316 I llm_load_print_meta: model params     = 2.51 B
0.00.273.317 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.317 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.318 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.318 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.319 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.319 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.319 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.320 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.320 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.321 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.321 I llm_load_print_meta: max token length = 93
0.00.372.748 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.372.756 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.372.757 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.372.758 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.372.758 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.372.759 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.378.195 I llama_new_context_with_model: n_seq_max     = 1
0.00.378.200 I llama_new_context_with_model: n_ctx         = 4096
0.00.378.200 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.378.201 I llama_new_context_with_model: n_batch       = 2048
0.00.378.201 I llama_new_context_with_model: n_ubatch      = 512
0.00.378.202 I llama_new_context_with_model: flash_attn    = 0
0.00.378.204 I llama_new_context_with_model: freq_base     = 10000.0
0.00.378.205 I llama_new_context_with_model: freq_scale    = 1
0.00.378.206 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.392.694 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.392.709 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.392.800 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.141 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.394.145 I llama_new_context_with_model: graph nodes  = 601
0.00.394.146 I llama_new_context_with_model: graph splits = 1
0.00.394.148 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.188 I main: llama threadpool init, n_threads = 4
0.00.480.203 I 
0.00.480.288 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.480.292 I 
0.00.480.348 I sampler seed: 2193487966
0.00.480.360 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.367 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.371 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.371 I 
 increasively through the forest, a symphony of rustling leaves and chirping insects filling the air. His path meandered through sun-dappled glades and

0.02.748.467 I llama_perf_sampler_print:    sampling time =       5.20 ms /    33 runs   (    0.16 ms per token,  6344.93 tokens per second)
0.02.748.469 I llama_perf_context_print:        load time =     479.40 ms
0.02.748.470 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.748.472 I llama_perf_context_print:        eval time =    2248.27 ms /    32 runs   (   70.26 ms per token,    14.23 tokens per second)
0.02.748.472 I llama_perf_context_print:       total time =    2268.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.556 I build: 4223 (a3a3048e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.782 I main: llama backend init
0.00.000.789 I main: load the model and apply lora adapter, if any
0.00.020.995 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.008 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.016 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.017 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.023 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.027 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.027 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.028 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.029 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.029 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.034 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.034 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.035 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.035 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.036 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.782 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.596 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.492 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.500 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.501 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.502 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.502 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.503 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.504 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.506 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.507 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.508 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.508 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.510 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.514 I llama_model_loader: - type  f32:   37 tensors
0.00.130.514 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.584 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.078 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.682 I llm_load_vocab: special tokens cache size = 5
0.00.281.724 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.742 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.743 I llm_load_print_meta: arch             = gemma
0.00.281.743 I llm_load_print_meta: vocab type       = SPM
0.00.281.744 I llm_load_print_meta: n_vocab          = 256000
0.00.281.745 I llm_load_print_meta: n_merges         = 0
0.00.281.745 I llm_load_print_meta: vocab_only       = 0
0.00.281.745 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.746 I llm_load_print_meta: n_embd           = 2048
0.00.281.746 I llm_load_print_meta: n_layer          = 18
0.00.281.759 I llm_load_print_meta: n_head           = 8
0.00.281.760 I llm_load_print_meta: n_head_kv        = 1
0.00.281.760 I llm_load_print_meta: n_rot            = 256
0.00.281.760 I llm_load_print_meta: n_swa            = 0
0.00.281.761 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.761 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.762 I llm_load_print_meta: n_gqa            = 8
0.00.281.763 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.764 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.764 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.766 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.766 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.766 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.767 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.768 I llm_load_print_meta: n_ff             = 16384
0.00.281.768 I llm_load_print_meta: n_expert         = 0
0.00.281.769 I llm_load_print_meta: n_expert_used    = 0
0.00.281.769 I llm_load_print_meta: causal attn      = 1
0.00.281.769 I llm_load_print_meta: pooling type     = 0
0.00.281.770 I llm_load_print_meta: rope type        = 2
0.00.281.770 I llm_load_print_meta: rope scaling     = linear
0.00.281.771 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.772 I llm_load_print_meta: freq_scale_train = 1
0.00.281.772 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.773 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.774 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.774 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.775 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.775 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.775 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.777 I llm_load_print_meta: model type       = 2B
0.00.281.777 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.778 I llm_load_print_meta: model params     = 2.51 B
0.00.281.779 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.779 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.780 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.781 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.781 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.781 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.782 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.782 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.783 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.783 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.783 I llm_load_print_meta: max token length = 93
0.00.377.119 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.382.166 I llama_new_context_with_model: n_seq_max     = 1
0.00.382.174 I llama_new_context_with_model: n_ctx         = 4096
0.00.382.174 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.382.175 I llama_new_context_with_model: n_batch       = 2048
0.00.382.175 I llama_new_context_with_model: n_ubatch      = 512
0.00.382.176 I llama_new_context_with_model: flash_attn    = 0
0.00.382.179 I llama_new_context_with_model: freq_base     = 10000.0
0.00.382.180 I llama_new_context_with_model: freq_scale    = 1
0.00.382.181 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.397.676 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.397.692 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.397.785 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.399.063 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.399.069 I llama_new_context_with_model: graph nodes  = 601
0.00.399.069 I llama_new_context_with_model: graph splits = 1
0.00.399.071 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.481.308 I main: llama threadpool init, n_threads = 4
0.00.481.323 I 
0.00.481.394 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.481.398 I 
0.00.481.441 I sampler seed: 4234129290
0.00.481.452 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.464 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.468 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.468 I 
 increably, but the system seems to be overloaded.

**Possible causes:**

* Increased traffic from holiday shoppers
* Unexpected high volume of customer inquiries


0.02.679.931 I llama_perf_sampler_print:    sampling time =       4.85 ms /    33 runs   (    0.15 ms per token,  6804.12 tokens per second)
0.02.679.933 I llama_perf_context_print:        load time =     480.50 ms
0.02.679.934 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.679.936 I llama_perf_context_print:        eval time =    2178.79 ms /    32 runs   (   68.09 ms per token,    14.69 tokens per second)
0.02.679.936 I llama_perf_context_print:       total time =    2198.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.173 I build: 4223 (a3a3048e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.365 I main: llama backend init
0.00.000.371 I main: load the model and apply lora adapter, if any
0.00.020.544 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.553 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.560 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.568 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.572 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.575 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.576 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.577 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.577 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.578 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.578 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.581 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.582 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.582 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.583 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.583 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.884 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.774 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.624 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.631 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.632 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.633 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.634 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.635 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.636 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.640 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.640 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.641 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.642 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.129.643 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.647 I llama_model_loader: - type  f32:   37 tensors
0.00.129.648 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.690 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.000 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.567 I llm_load_vocab: special tokens cache size = 5
0.00.262.582 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.599 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.600 I llm_load_print_meta: arch             = gemma
0.00.262.600 I llm_load_print_meta: vocab type       = SPM
0.00.262.601 I llm_load_print_meta: n_vocab          = 256000
0.00.262.601 I llm_load_print_meta: n_merges         = 0
0.00.262.602 I llm_load_print_meta: vocab_only       = 0
0.00.262.602 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.602 I llm_load_print_meta: n_embd           = 2048
0.00.262.603 I llm_load_print_meta: n_layer          = 18
0.00.262.615 I llm_load_print_meta: n_head           = 8
0.00.262.616 I llm_load_print_meta: n_head_kv        = 1
0.00.262.616 I llm_load_print_meta: n_rot            = 256
0.00.262.616 I llm_load_print_meta: n_swa            = 0
0.00.262.617 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.617 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.618 I llm_load_print_meta: n_gqa            = 8
0.00.262.619 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.620 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.621 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.622 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.622 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.623 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.623 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.624 I llm_load_print_meta: n_ff             = 16384
0.00.262.625 I llm_load_print_meta: n_expert         = 0
0.00.262.625 I llm_load_print_meta: n_expert_used    = 0
0.00.262.625 I llm_load_print_meta: causal attn      = 1
0.00.262.625 I llm_load_print_meta: pooling type     = 0
0.00.262.626 I llm_load_print_meta: rope type        = 2
0.00.262.626 I llm_load_print_meta: rope scaling     = linear
0.00.262.628 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.629 I llm_load_print_meta: freq_scale_train = 1
0.00.262.629 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.630 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.630 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.631 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.631 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.631 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.631 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.632 I llm_load_print_meta: model type       = 2B
0.00.262.632 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.633 I llm_load_print_meta: model params     = 2.51 B
0.00.262.634 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.634 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.635 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.635 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.636 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.636 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.636 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.637 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.637 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.638 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.638 I llm_load_print_meta: max token length = 93
0.00.335.564 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.335.571 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.335.572 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.335.573 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.335.573 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.335.574 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.340.788 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.795 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.795 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.796 I llama_new_context_with_model: n_batch       = 2048
0.00.340.796 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.797 I llama_new_context_with_model: flash_attn    = 0
0.00.340.800 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.801 I llama_new_context_with_model: freq_scale    = 1
0.00.340.802 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.396 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.411 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.505 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.753 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.758 I llama_new_context_with_model: graph nodes  = 601
0.00.357.759 I llama_new_context_with_model: graph splits = 1
0.00.357.760 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.687 I main: llama threadpool init, n_threads = 4
0.00.446.704 I 
0.00.446.778 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.446.781 I 
0.00.446.824 I sampler seed: 3418570155
0.00.446.836 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.847 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.851 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.851 I 
 increasities, and the general principles of etiquette and social interaction. [end of text]


0.01.458.555 I llama_perf_sampler_print:    sampling time =       2.06 ms /    15 runs   (    0.14 ms per token,  7270.96 tokens per second)
0.01.458.558 I llama_perf_context_print:        load time =     446.30 ms
0.01.458.559 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.458.561 I llama_perf_context_print:        eval time =    1003.21 ms /    14 runs   (   71.66 ms per token,    13.96 tokens per second)
0.01.458.561 I llama_perf_context_print:       total time =    1011.88 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.567 I build: 4223 (a3a3048e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.789 I main: llama backend init
0.00.000.797 I main: load the model and apply lora adapter, if any
0.00.021.415 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.426 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.434 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.444 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.446 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.451 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.452 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.453 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.454 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.455 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.456 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.462 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.463 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.464 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.465 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.466 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.945 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.040 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.892 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.898 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.899 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.900 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.900 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.902 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.903 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.905 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.906 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.907 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.907 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.908 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.913 I llama_model_loader: - type  f32:   37 tensors
0.00.130.916 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.325 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.182 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.753 I llm_load_vocab: special tokens cache size = 5
0.00.266.839 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.857 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.857 I llm_load_print_meta: arch             = gemma
0.00.266.858 I llm_load_print_meta: vocab type       = SPM
0.00.266.859 I llm_load_print_meta: n_vocab          = 256000
0.00.266.859 I llm_load_print_meta: n_merges         = 0
0.00.266.860 I llm_load_print_meta: vocab_only       = 0
0.00.266.860 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.861 I llm_load_print_meta: n_embd           = 2048
0.00.266.861 I llm_load_print_meta: n_layer          = 18
0.00.266.874 I llm_load_print_meta: n_head           = 8
0.00.266.875 I llm_load_print_meta: n_head_kv        = 1
0.00.266.875 I llm_load_print_meta: n_rot            = 256
0.00.266.875 I llm_load_print_meta: n_swa            = 0
0.00.266.876 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.876 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.877 I llm_load_print_meta: n_gqa            = 8
0.00.266.878 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.879 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.880 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.882 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.882 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.883 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.883 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.884 I llm_load_print_meta: n_ff             = 16384
0.00.266.884 I llm_load_print_meta: n_expert         = 0
0.00.266.884 I llm_load_print_meta: n_expert_used    = 0
0.00.266.885 I llm_load_print_meta: causal attn      = 1
0.00.266.885 I llm_load_print_meta: pooling type     = 0
0.00.266.885 I llm_load_print_meta: rope type        = 2
0.00.266.886 I llm_load_print_meta: rope scaling     = linear
0.00.266.887 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.888 I llm_load_print_meta: freq_scale_train = 1
0.00.266.888 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.889 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.889 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.889 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.889 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.890 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.890 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.890 I llm_load_print_meta: model type       = 2B
0.00.266.891 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.892 I llm_load_print_meta: model params     = 2.51 B
0.00.266.892 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.893 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.893 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.894 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.894 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.894 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.895 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.895 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.895 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.896 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.896 I llm_load_print_meta: max token length = 93
0.00.337.492 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.337.498 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.343.077 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.084 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.084 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.085 I llama_new_context_with_model: n_batch       = 2048
0.00.343.085 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.086 I llama_new_context_with_model: flash_attn    = 0
0.00.343.089 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.090 I llama_new_context_with_model: freq_scale    = 1
0.00.343.091 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.423 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.435 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.545 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.909 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.913 I llama_new_context_with_model: graph nodes  = 601
0.00.359.913 I llama_new_context_with_model: graph splits = 1
0.00.359.916 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.871 I main: llama threadpool init, n_threads = 4
0.00.448.886 I 
0.00.448.969 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.448.972 I 
0.00.449.020 I sampler seed: 3118670459
0.00.449.031 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.035 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.036 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.037 I 
 increamental in his speech.

I understand that the word "incremental" means "occurring in small doses or steps; gradual."

But I am unable

0.02.851.635 I llama_perf_sampler_print:    sampling time =       4.96 ms /    33 runs   (    0.15 ms per token,  6654.57 tokens per second)
0.02.851.637 I llama_perf_context_print:        load time =     448.05 ms
0.02.851.639 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.851.640 I llama_perf_context_print:        eval time =    2383.32 ms /    32 runs   (   74.48 ms per token,    13.43 tokens per second)
0.02.851.641 I llama_perf_context_print:       total time =    2402.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.333s
user	0m34.489s
sys	0m9.352s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4223 (a3a3048e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40198.52 ms
main:    total time = 40198.52 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.574 I build: 4223 (a3a3048e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.000.780 I main: load the model and apply lora adapter, if any
0.00.021.572 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.583 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.592 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.601 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.602 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.607 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.608 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.608 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.609 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.610 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.611 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.616 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.616 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.617 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.618 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.619 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.103 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.905 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.790 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.798 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.798 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.799 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.800 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.800 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.801 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.803 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.804 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.806 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.806 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.807 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.810 I llama_model_loader: - type  f32:   37 tensors
0.00.130.811 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.812 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.564 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.000 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.611 I llm_load_vocab: special tokens cache size = 5
0.00.271.715 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.731 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.731 I llm_load_print_meta: arch             = gemma
0.00.271.732 I llm_load_print_meta: vocab type       = SPM
0.00.271.732 I llm_load_print_meta: n_vocab          = 256000
0.00.271.733 I llm_load_print_meta: n_merges         = 0
0.00.271.733 I llm_load_print_meta: vocab_only       = 0
0.00.271.734 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.734 I llm_load_print_meta: n_embd           = 2048
0.00.271.736 I llm_load_print_meta: n_layer          = 18
0.00.271.748 I llm_load_print_meta: n_head           = 8
0.00.271.749 I llm_load_print_meta: n_head_kv        = 1
0.00.271.749 I llm_load_print_meta: n_rot            = 256
0.00.271.750 I llm_load_print_meta: n_swa            = 0
0.00.271.751 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.751 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.752 I llm_load_print_meta: n_gqa            = 8
0.00.271.753 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.754 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.758 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.759 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.760 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.760 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.760 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.761 I llm_load_print_meta: n_ff             = 16384
0.00.271.762 I llm_load_print_meta: n_expert         = 0
0.00.271.762 I llm_load_print_meta: n_expert_used    = 0
0.00.271.770 I llm_load_print_meta: causal attn      = 1
0.00.271.771 I llm_load_print_meta: pooling type     = 0
0.00.271.771 I llm_load_print_meta: rope type        = 2
0.00.271.772 I llm_load_print_meta: rope scaling     = linear
0.00.271.773 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.773 I llm_load_print_meta: freq_scale_train = 1
0.00.271.774 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.775 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.775 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.775 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.776 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.776 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.776 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.777 I llm_load_print_meta: model type       = 2B
0.00.271.777 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.778 I llm_load_print_meta: model params     = 2.51 B
0.00.271.779 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.779 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.780 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.780 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.781 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.781 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.781 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.782 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.782 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.782 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.783 I llm_load_print_meta: max token length = 93
0.00.331.544 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.331.550 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.331.551 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.331.552 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.331.552 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.331.553 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.336.671 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.677 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.678 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.678 I llama_new_context_with_model: n_batch       = 2048
0.00.336.678 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.679 I llama_new_context_with_model: flash_attn    = 0
0.00.336.681 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.682 I llama_new_context_with_model: freq_scale    = 1
0.00.336.684 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.997 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.011 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.101 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.441 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.445 I llama_new_context_with_model: graph nodes  = 601
0.00.352.446 I llama_new_context_with_model: graph splits = 1
0.00.352.448 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.426.901 I main: llama threadpool init, n_threads = 4
0.00.426.917 I 
0.00.426.995 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.426.999 I 
0.00.427.050 I sampler seed: 1826919547
0.00.427.063 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.066 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.067 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.068 I 
 strick with a captivating melody and poignant lyrics.

**Verse 1:**
The wind whispers secrets through rustling leaves,
A mournful melody that carries on its

0.02.009.559 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6502.46 tokens per second)
0.02.009.562 I llama_perf_context_print:        load time =     426.10 ms
0.02.009.563 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.009.564 I llama_perf_context_print:        eval time =    1564.12 ms /    32 runs   (   48.88 ms per token,    20.46 tokens per second)
0.02.009.565 I llama_perf_context_print:       total time =    1582.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4223 (a3a3048e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40174.25 ms
main:    total time = 40174.25 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.566 I build: 4223 (a3a3048e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.747 I main: load the model and apply lora adapter, if any
0.00.021.721 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.739 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.751 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.752 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.757 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.758 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.758 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.759 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.759 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.760 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.764 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.764 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.765 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.766 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.767 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.039 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.338 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.189 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.195 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.196 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.197 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.198 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.199 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.200 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.204 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.204 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.208 I llama_model_loader: - type  f32:   37 tensors
0.00.131.209 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.210 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.514 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.164 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.765 I llm_load_vocab: special tokens cache size = 5
0.00.264.800 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.813 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.813 I llm_load_print_meta: arch             = gemma
0.00.264.814 I llm_load_print_meta: vocab type       = SPM
0.00.264.815 I llm_load_print_meta: n_vocab          = 256000
0.00.264.815 I llm_load_print_meta: n_merges         = 0
0.00.264.816 I llm_load_print_meta: vocab_only       = 0
0.00.264.816 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.816 I llm_load_print_meta: n_embd           = 2048
0.00.264.817 I llm_load_print_meta: n_layer          = 18
0.00.264.829 I llm_load_print_meta: n_head           = 8
0.00.264.830 I llm_load_print_meta: n_head_kv        = 1
0.00.264.830 I llm_load_print_meta: n_rot            = 256
0.00.264.830 I llm_load_print_meta: n_swa            = 0
0.00.264.830 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.831 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.832 I llm_load_print_meta: n_gqa            = 8
0.00.264.833 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.834 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.834 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.836 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.836 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.836 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.837 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.838 I llm_load_print_meta: n_ff             = 16384
0.00.264.838 I llm_load_print_meta: n_expert         = 0
0.00.264.838 I llm_load_print_meta: n_expert_used    = 0
0.00.264.838 I llm_load_print_meta: causal attn      = 1
0.00.264.838 I llm_load_print_meta: pooling type     = 0
0.00.264.839 I llm_load_print_meta: rope type        = 2
0.00.264.839 I llm_load_print_meta: rope scaling     = linear
0.00.264.840 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.841 I llm_load_print_meta: freq_scale_train = 1
0.00.264.841 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.842 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.842 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.842 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.843 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.843 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.843 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.844 I llm_load_print_meta: model type       = 2B
0.00.264.844 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.845 I llm_load_print_meta: model params     = 2.51 B
0.00.264.846 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.846 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.846 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.846 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.847 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.848 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.848 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.848 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.849 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.849 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.850 I llm_load_print_meta: max token length = 93
0.00.318.503 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.323.690 I llama_new_context_with_model: n_seq_max     = 1
0.00.323.696 I llama_new_context_with_model: n_ctx         = 4096
0.00.323.696 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.323.697 I llama_new_context_with_model: n_batch       = 2048
0.00.323.697 I llama_new_context_with_model: n_ubatch      = 512
0.00.323.698 I llama_new_context_with_model: flash_attn    = 0
0.00.323.700 I llama_new_context_with_model: freq_base     = 10000.0
0.00.323.701 I llama_new_context_with_model: freq_scale    = 1
0.00.323.702 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.338.178 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.338.193 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.338.283 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.339.510 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.339.517 I llama_new_context_with_model: graph nodes  = 601
0.00.339.518 I llama_new_context_with_model: graph splits = 1
0.00.339.519 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.413.021 I main: llama threadpool init, n_threads = 4
0.00.413.035 I 
0.00.413.110 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.413.113 I 
0.00.413.162 I sampler seed: 2664462288
0.00.413.174 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.413.190 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.413.194 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.413.194 I 
 fufilling the needs of our diverse community.

This sentence is about a government initiative. Can you rephrase it in a more neutral and objective way?



0.01.969.880 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6535.95 tokens per second)
0.01.969.883 I llama_perf_context_print:        load time =     412.25 ms
0.01.969.884 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.969.886 I llama_perf_context_print:        eval time =    1537.62 ms /    32 runs   (   48.05 ms per token,    20.81 tokens per second)
0.01.969.887 I llama_perf_context_print:       total time =    1556.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.130s
user	10m24.135s
sys	0m6.952s
