+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 3911 (a34cde99) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.002.794 I main: load the model and apply lora adapter, if any
0.00.024.742 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.951 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.037 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.048 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.052 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.056 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.057 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.058 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.059 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.060 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.062 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.068 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.072 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.073 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.074 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.075 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.975 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.685 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.939 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.945 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.947 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.948 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.949 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.950 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.951 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.954 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.955 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.956 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.957 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.958 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.966 I llama_model_loader: - type  f32:   37 tensors
0.00.269.969 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.090 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.490.359 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.491.413 I llm_load_vocab: special tokens cache size = 5
0.00.585.992 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.586.060 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.586.061 I llm_load_print_meta: arch             = gemma
0.00.586.062 I llm_load_print_meta: vocab type       = SPM
0.00.586.063 I llm_load_print_meta: n_vocab          = 256000
0.00.586.065 I llm_load_print_meta: n_merges         = 0
0.00.586.066 I llm_load_print_meta: vocab_only       = 0
0.00.586.066 I llm_load_print_meta: n_ctx_train      = 8192
0.00.586.066 I llm_load_print_meta: n_embd           = 2048
0.00.586.067 I llm_load_print_meta: n_layer          = 18
0.00.586.128 I llm_load_print_meta: n_head           = 8
0.00.586.136 I llm_load_print_meta: n_head_kv        = 1
0.00.586.136 I llm_load_print_meta: n_rot            = 256
0.00.586.137 I llm_load_print_meta: n_swa            = 0
0.00.586.137 I llm_load_print_meta: n_embd_head_k    = 256
0.00.586.138 I llm_load_print_meta: n_embd_head_v    = 256
0.00.586.142 I llm_load_print_meta: n_gqa            = 8
0.00.586.147 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.586.152 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.586.153 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.586.154 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.586.155 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.586.156 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.586.156 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.586.161 I llm_load_print_meta: n_ff             = 16384
0.00.586.161 I llm_load_print_meta: n_expert         = 0
0.00.586.162 I llm_load_print_meta: n_expert_used    = 0
0.00.586.162 I llm_load_print_meta: causal attn      = 1
0.00.586.163 I llm_load_print_meta: pooling type     = 0
0.00.586.163 I llm_load_print_meta: rope type        = 2
0.00.586.164 I llm_load_print_meta: rope scaling     = linear
0.00.586.165 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.586.166 I llm_load_print_meta: freq_scale_train = 1
0.00.586.166 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.586.167 I llm_load_print_meta: rope_finetuned   = unknown
0.00.586.167 I llm_load_print_meta: ssm_d_conv       = 0
0.00.586.168 I llm_load_print_meta: ssm_d_inner      = 0
0.00.586.168 I llm_load_print_meta: ssm_d_state      = 0
0.00.586.168 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.586.169 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.586.170 I llm_load_print_meta: model type       = 2B
0.00.586.171 I llm_load_print_meta: model ftype      = Q8_0
0.00.586.171 I llm_load_print_meta: model params     = 2.51 B
0.00.586.172 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.586.172 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.586.173 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.586.174 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.586.175 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.586.175 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.586.176 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.586.176 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.586.182 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.586.183 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.586.183 I llm_load_print_meta: max token length = 93
0.00.586.346 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.687.654 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.687.661 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.687.662 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.687.663 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.687.664 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.687.664 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.693.243 I llama_new_context_with_model: n_ctx      = 8192
0.00.693.249 I llama_new_context_with_model: n_batch    = 2048
0.00.693.249 I llama_new_context_with_model: n_ubatch   = 512
0.00.693.250 I llama_new_context_with_model: flash_attn = 0
0.00.693.252 I llama_new_context_with_model: freq_base  = 10000.0
0.00.693.253 I llama_new_context_with_model: freq_scale = 1
0.00.721.790 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.721.833 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.721.956 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.396 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.723.401 I llama_new_context_with_model: graph nodes  = 601
0.00.723.401 I llama_new_context_with_model: graph splits = 1
0.00.723.417 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.336.856 I main: llama threadpool init, n_threads = 4
0.01.336.868 I 
0.01.336.977 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.336.980 I 
0.01.337.144 I sampler seed: 496564614
0.01.337.155 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.337.161 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.337.161 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.337.164 I 
 increasities. [end of text]


0.03.031.260 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   798.85 tokens per second)
0.03.031.263 I llama_perf_context_print:        load time =    1333.95 ms
0.03.031.265 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.031.267 I llama_perf_context_print:        eval time =    1682.52 ms /     4 runs   (  420.63 ms per token,     2.38 tokens per second)
0.03.031.268 I llama_perf_context_print:       total time =    1694.41 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 3911 (a34cde99) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.002.781 I main: load the model and apply lora adapter, if any
0.00.024.628 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.731 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.747 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.751 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.755 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.757 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.760 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.762 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.764 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.765 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.775 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.780 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.781 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.783 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.784 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.074 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.244 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.287 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.294 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.295 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.297 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.298 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.299 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.301 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.304 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.305 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.306 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.307 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.308 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.316 I llama_model_loader: - type  f32:   37 tensors
0.00.269.319 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.342 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.490.041 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.491.064 I llm_load_vocab: special tokens cache size = 5
0.00.585.638 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.585.708 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.585.709 I llm_load_print_meta: arch             = gemma
0.00.585.709 I llm_load_print_meta: vocab type       = SPM
0.00.585.710 I llm_load_print_meta: n_vocab          = 256000
0.00.585.712 I llm_load_print_meta: n_merges         = 0
0.00.585.713 I llm_load_print_meta: vocab_only       = 0
0.00.585.713 I llm_load_print_meta: n_ctx_train      = 8192
0.00.585.713 I llm_load_print_meta: n_embd           = 2048
0.00.585.714 I llm_load_print_meta: n_layer          = 18
0.00.585.777 I llm_load_print_meta: n_head           = 8
0.00.585.784 I llm_load_print_meta: n_head_kv        = 1
0.00.585.784 I llm_load_print_meta: n_rot            = 256
0.00.585.785 I llm_load_print_meta: n_swa            = 0
0.00.585.785 I llm_load_print_meta: n_embd_head_k    = 256
0.00.585.785 I llm_load_print_meta: n_embd_head_v    = 256
0.00.585.791 I llm_load_print_meta: n_gqa            = 8
0.00.585.797 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.585.804 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.585.806 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.585.808 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.585.808 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.585.810 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.585.811 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.585.817 I llm_load_print_meta: n_ff             = 16384
0.00.585.818 I llm_load_print_meta: n_expert         = 0
0.00.585.819 I llm_load_print_meta: n_expert_used    = 0
0.00.585.820 I llm_load_print_meta: causal attn      = 1
0.00.585.821 I llm_load_print_meta: pooling type     = 0
0.00.585.822 I llm_load_print_meta: rope type        = 2
0.00.585.823 I llm_load_print_meta: rope scaling     = linear
0.00.585.825 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.585.830 I llm_load_print_meta: freq_scale_train = 1
0.00.585.830 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.585.831 I llm_load_print_meta: rope_finetuned   = unknown
0.00.585.832 I llm_load_print_meta: ssm_d_conv       = 0
0.00.585.832 I llm_load_print_meta: ssm_d_inner      = 0
0.00.585.833 I llm_load_print_meta: ssm_d_state      = 0
0.00.585.833 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.585.834 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.585.835 I llm_load_print_meta: model type       = 2B
0.00.585.837 I llm_load_print_meta: model ftype      = Q8_0
0.00.585.838 I llm_load_print_meta: model params     = 2.51 B
0.00.585.839 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.585.840 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.585.841 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.585.842 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.585.843 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.585.844 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.585.845 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.585.846 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.585.853 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.585.855 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.585.856 I llm_load_print_meta: max token length = 93
0.00.586.031 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.681.915 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.687.792 I llama_new_context_with_model: n_ctx      = 8192
0.00.687.799 I llama_new_context_with_model: n_batch    = 2048
0.00.687.799 I llama_new_context_with_model: n_ubatch   = 512
0.00.687.800 I llama_new_context_with_model: flash_attn = 0
0.00.687.802 I llama_new_context_with_model: freq_base  = 10000.0
0.00.687.803 I llama_new_context_with_model: freq_scale = 1
0.00.716.784 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.716.831 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.716.961 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.718.329 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.718.334 I llama_new_context_with_model: graph nodes  = 601
0.00.718.334 I llama_new_context_with_model: graph splits = 1
0.00.718.350 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.332.211 I main: llama threadpool init, n_threads = 4
0.01.332.221 I 
0.01.332.334 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.332.339 I 
0.01.332.511 I sampler seed: 1132674744
0.01.332.522 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.332.528 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.332.529 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.332.537 I 
 maneurors for a variety of applications.

**Advantages:**
- High sensitivity
- Fast response time
- Low power consumption
- Wide operating temperature range

0.15.012.874 I llama_perf_sampler_print:    sampling time =      49.40 ms /    33 runs   (    1.50 ms per token,   668.00 tokens per second)
0.15.012.877 I llama_perf_context_print:        load time =    1329.34 ms
0.15.012.890 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.012.892 I llama_perf_context_print:        eval time =   13598.20 ms /    32 runs   (  424.94 ms per token,     2.35 tokens per second)
0.15.012.893 I llama_perf_context_print:       total time =   13680.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 3911 (a34cde99) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.884 I main: llama backend init
0.00.002.841 I main: load the model and apply lora adapter, if any
0.00.024.595 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.805 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.894 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.904 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.907 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.910 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.912 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.913 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.914 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.914 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.915 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.921 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.922 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.923 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.925 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.926 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.281 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.445 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.527 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.535 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.537 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.538 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.539 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.540 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.541 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.544 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.545 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.546 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.547 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.548 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.556 I llama_model_loader: - type  f32:   37 tensors
0.00.269.560 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.354 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.487.469 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.488.478 I llm_load_vocab: special tokens cache size = 5
0.00.583.200 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.583.266 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.583.267 I llm_load_print_meta: arch             = gemma
0.00.583.268 I llm_load_print_meta: vocab type       = SPM
0.00.583.269 I llm_load_print_meta: n_vocab          = 256000
0.00.583.271 I llm_load_print_meta: n_merges         = 0
0.00.583.271 I llm_load_print_meta: vocab_only       = 0
0.00.583.272 I llm_load_print_meta: n_ctx_train      = 8192
0.00.583.272 I llm_load_print_meta: n_embd           = 2048
0.00.583.273 I llm_load_print_meta: n_layer          = 18
0.00.583.335 I llm_load_print_meta: n_head           = 8
0.00.583.342 I llm_load_print_meta: n_head_kv        = 1
0.00.583.345 I llm_load_print_meta: n_rot            = 256
0.00.583.346 I llm_load_print_meta: n_swa            = 0
0.00.583.346 I llm_load_print_meta: n_embd_head_k    = 256
0.00.583.346 I llm_load_print_meta: n_embd_head_v    = 256
0.00.583.351 I llm_load_print_meta: n_gqa            = 8
0.00.583.356 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.583.361 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.583.365 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.583.366 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.583.366 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.583.367 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.583.367 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.583.372 I llm_load_print_meta: n_ff             = 16384
0.00.583.373 I llm_load_print_meta: n_expert         = 0
0.00.583.374 I llm_load_print_meta: n_expert_used    = 0
0.00.583.374 I llm_load_print_meta: causal attn      = 1
0.00.583.375 I llm_load_print_meta: pooling type     = 0
0.00.583.384 I llm_load_print_meta: rope type        = 2
0.00.583.385 I llm_load_print_meta: rope scaling     = linear
0.00.583.387 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.583.388 I llm_load_print_meta: freq_scale_train = 1
0.00.583.398 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.583.399 I llm_load_print_meta: rope_finetuned   = unknown
0.00.583.400 I llm_load_print_meta: ssm_d_conv       = 0
0.00.583.400 I llm_load_print_meta: ssm_d_inner      = 0
0.00.583.401 I llm_load_print_meta: ssm_d_state      = 0
0.00.583.404 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.583.404 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.583.405 I llm_load_print_meta: model type       = 2B
0.00.583.406 I llm_load_print_meta: model ftype      = Q8_0
0.00.583.407 I llm_load_print_meta: model params     = 2.51 B
0.00.583.408 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.583.408 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.583.409 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.583.410 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.583.410 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.583.410 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.583.411 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.583.412 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.583.418 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.583.420 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.583.420 I llm_load_print_meta: max token length = 93
0.00.583.588 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.661.417 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.661.426 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.661.427 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.661.428 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.661.428 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.661.429 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.667.076 I llama_new_context_with_model: n_ctx      = 8192
0.00.667.084 I llama_new_context_with_model: n_batch    = 2048
0.00.667.084 I llama_new_context_with_model: n_ubatch   = 512
0.00.667.085 I llama_new_context_with_model: flash_attn = 0
0.00.667.087 I llama_new_context_with_model: freq_base  = 10000.0
0.00.667.088 I llama_new_context_with_model: freq_scale = 1
0.00.695.406 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.695.449 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.695.563 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.696.932 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.696.937 I llama_new_context_with_model: graph nodes  = 601
0.00.696.938 I llama_new_context_with_model: graph splits = 1
0.00.696.954 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.309.841 I main: llama threadpool init, n_threads = 4
0.01.309.851 I 
0.01.309.954 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.309.954 I 
0.01.310.124 I sampler seed: 4218970287
0.01.310.137 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.310.143 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.310.144 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.310.145 I 
 increasities. It is important to be mindful of the potential consequences of your actions and to take responsibility for them.

**Question:** What are the potential consequences

0.14.847.744 I llama_perf_sampler_print:    sampling time =      49.12 ms /    33 runs   (    1.49 ms per token,   671.80 tokens per second)
0.14.847.748 I llama_perf_context_print:        load time =    1306.91 ms
0.14.847.750 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.847.752 I llama_perf_context_print:        eval time =   13456.03 ms /    32 runs   (  420.50 ms per token,     2.38 tokens per second)
0.14.847.757 I llama_perf_context_print:       total time =   13537.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 3911 (a34cde99) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.766 I main: load the model and apply lora adapter, if any
0.00.024.430 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.623 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.704 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.714 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.716 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.720 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.721 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.723 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.732 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.734 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.735 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.741 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.742 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.743 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.744 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.745 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.031 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.769 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.742 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.754 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.755 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.756 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.757 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.758 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.759 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.763 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.763 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.765 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.765 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.767 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.775 I llama_model_loader: - type  f32:   37 tensors
0.00.268.779 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.019 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.391 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.414 I llm_load_vocab: special tokens cache size = 5
0.00.593.730 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.593.811 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.593.813 I llm_load_print_meta: arch             = gemma
0.00.593.814 I llm_load_print_meta: vocab type       = SPM
0.00.593.815 I llm_load_print_meta: n_vocab          = 256000
0.00.593.817 I llm_load_print_meta: n_merges         = 0
0.00.593.817 I llm_load_print_meta: vocab_only       = 0
0.00.593.818 I llm_load_print_meta: n_ctx_train      = 8192
0.00.593.818 I llm_load_print_meta: n_embd           = 2048
0.00.593.818 I llm_load_print_meta: n_layer          = 18
0.00.593.880 I llm_load_print_meta: n_head           = 8
0.00.593.887 I llm_load_print_meta: n_head_kv        = 1
0.00.593.891 I llm_load_print_meta: n_rot            = 256
0.00.593.891 I llm_load_print_meta: n_swa            = 0
0.00.593.891 I llm_load_print_meta: n_embd_head_k    = 256
0.00.593.892 I llm_load_print_meta: n_embd_head_v    = 256
0.00.593.897 I llm_load_print_meta: n_gqa            = 8
0.00.593.902 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.593.907 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.593.909 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.593.910 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.593.910 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.593.911 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.593.911 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.593.916 I llm_load_print_meta: n_ff             = 16384
0.00.593.916 I llm_load_print_meta: n_expert         = 0
0.00.593.917 I llm_load_print_meta: n_expert_used    = 0
0.00.593.918 I llm_load_print_meta: causal attn      = 1
0.00.593.919 I llm_load_print_meta: pooling type     = 0
0.00.593.919 I llm_load_print_meta: rope type        = 2
0.00.593.920 I llm_load_print_meta: rope scaling     = linear
0.00.593.922 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.593.923 I llm_load_print_meta: freq_scale_train = 1
0.00.593.924 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.593.925 I llm_load_print_meta: rope_finetuned   = unknown
0.00.593.925 I llm_load_print_meta: ssm_d_conv       = 0
0.00.593.926 I llm_load_print_meta: ssm_d_inner      = 0
0.00.593.927 I llm_load_print_meta: ssm_d_state      = 0
0.00.593.927 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.593.927 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.593.928 I llm_load_print_meta: model type       = 2B
0.00.593.930 I llm_load_print_meta: model ftype      = Q8_0
0.00.593.930 I llm_load_print_meta: model params     = 2.51 B
0.00.593.931 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.593.932 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.593.933 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.593.934 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.593.935 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.593.935 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.593.935 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.593.936 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.593.943 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.593.944 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.593.944 I llm_load_print_meta: max token length = 93
0.00.594.112 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.665.354 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.665.365 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.671.204 I llama_new_context_with_model: n_ctx      = 8192
0.00.671.212 I llama_new_context_with_model: n_batch    = 2048
0.00.671.212 I llama_new_context_with_model: n_ubatch   = 512
0.00.671.213 I llama_new_context_with_model: flash_attn = 0
0.00.671.216 I llama_new_context_with_model: freq_base  = 10000.0
0.00.671.217 I llama_new_context_with_model: freq_scale = 1
0.00.699.452 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.699.496 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.699.617 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.700.994 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.700.999 I llama_new_context_with_model: graph nodes  = 601
0.00.701.000 I llama_new_context_with_model: graph splits = 1
0.00.701.015 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.316.212 I main: llama threadpool init, n_threads = 4
0.01.316.225 I 
0.01.316.333 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.316.333 I 
0.01.316.504 I sampler seed: 1885132070
0.01.316.517 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.316.522 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.316.523 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.316.523 I 
 increasities that often involve infidelity and emotional turmoil.

It is important to remember that infidelity and emotional turmoil are complex issues with no easy solutions. Healing from these

0.14.916.605 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.70 tokens per second)
0.14.916.629 I llama_perf_context_print:        load time =    1313.36 ms
0.14.916.631 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.916.636 I llama_perf_context_print:        eval time =   13518.55 ms /    32 runs   (  422.45 ms per token,     2.37 tokens per second)
0.14.916.637 I llama_perf_context_print:       total time =   13600.40 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.357s
user	3m2.649s
sys	0m9.342s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3911 (a34cde99)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198361.62 ms
main:    total time = 198361.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.613 I build: 3911 (a34cde99) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.806 I main: llama backend init
0.00.002.744 I main: load the model and apply lora adapter, if any
0.00.024.566 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.761 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.847 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.858 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.859 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.863 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.868 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.869 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.870 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.871 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.872 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.877 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.878 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.879 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.884 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.885 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.273 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.508 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.405 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.415 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.417 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.418 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.419 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.420 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.421 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.424 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.425 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.426 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.427 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.428 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.436 I llama_model_loader: - type  f32:   37 tensors
0.00.270.441 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.442 I llama_model_loader: - type q6_K:   19 tensors
0.00.442.722 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.451 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.493.451 I llm_load_vocab: special tokens cache size = 5
0.00.588.407 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.588.473 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.588.474 I llm_load_print_meta: arch             = gemma
0.00.588.474 I llm_load_print_meta: vocab type       = SPM
0.00.588.475 I llm_load_print_meta: n_vocab          = 256000
0.00.588.477 I llm_load_print_meta: n_merges         = 0
0.00.588.478 I llm_load_print_meta: vocab_only       = 0
0.00.588.478 I llm_load_print_meta: n_ctx_train      = 8192
0.00.588.479 I llm_load_print_meta: n_embd           = 2048
0.00.588.479 I llm_load_print_meta: n_layer          = 18
0.00.588.543 I llm_load_print_meta: n_head           = 8
0.00.588.550 I llm_load_print_meta: n_head_kv        = 1
0.00.588.551 I llm_load_print_meta: n_rot            = 256
0.00.588.553 I llm_load_print_meta: n_swa            = 0
0.00.588.553 I llm_load_print_meta: n_embd_head_k    = 256
0.00.588.554 I llm_load_print_meta: n_embd_head_v    = 256
0.00.588.558 I llm_load_print_meta: n_gqa            = 8
0.00.588.563 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.588.578 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.588.581 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.588.583 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.588.584 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.588.584 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.588.585 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.588.591 I llm_load_print_meta: n_ff             = 16384
0.00.588.595 I llm_load_print_meta: n_expert         = 0
0.00.588.596 I llm_load_print_meta: n_expert_used    = 0
0.00.588.596 I llm_load_print_meta: causal attn      = 1
0.00.588.596 I llm_load_print_meta: pooling type     = 0
0.00.588.597 I llm_load_print_meta: rope type        = 2
0.00.588.610 I llm_load_print_meta: rope scaling     = linear
0.00.588.612 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.588.613 I llm_load_print_meta: freq_scale_train = 1
0.00.588.613 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.588.613 I llm_load_print_meta: rope_finetuned   = unknown
0.00.588.614 I llm_load_print_meta: ssm_d_conv       = 0
0.00.588.615 I llm_load_print_meta: ssm_d_inner      = 0
0.00.588.615 I llm_load_print_meta: ssm_d_state      = 0
0.00.588.615 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.588.615 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.588.616 I llm_load_print_meta: model type       = 2B
0.00.588.617 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.588.618 I llm_load_print_meta: model params     = 2.51 B
0.00.588.619 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.588.619 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.588.620 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.588.620 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.588.621 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.588.621 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.588.621 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.588.622 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.588.629 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.588.630 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.588.630 I llm_load_print_meta: max token length = 93
0.00.588.794 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.649.585 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.649.596 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.649.598 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.649.598 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.649.599 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.649.600 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.656.279 I llama_new_context_with_model: n_ctx      = 8192
0.00.656.286 I llama_new_context_with_model: n_batch    = 2048
0.00.656.286 I llama_new_context_with_model: n_ubatch   = 512
0.00.656.287 I llama_new_context_with_model: flash_attn = 0
0.00.656.289 I llama_new_context_with_model: freq_base  = 10000.0
0.00.656.290 I llama_new_context_with_model: freq_scale = 1
0.00.686.198 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.686.245 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.686.360 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.687.810 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.687.815 I llama_new_context_with_model: graph nodes  = 601
0.00.687.816 I llama_new_context_with_model: graph splits = 1
0.00.687.832 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.266.175 I main: llama threadpool init, n_threads = 4
0.01.266.186 I 
0.01.266.294 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.266.298 I 
0.01.266.464 I sampler seed: 1370934661
0.01.266.475 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.266.481 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.266.482 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.266.493 I 
 maneuvled.

**Assistant**

I understand. I will assist you with your request. Please provide me with more details so I can provide you with

0.12.149.878 I llama_perf_sampler_print:    sampling time =      48.99 ms /    33 runs   (    1.48 ms per token,   673.59 tokens per second)
0.12.149.881 I llama_perf_context_print:        load time =    1263.35 ms
0.12.149.893 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.149.896 I llama_perf_context_print:        eval time =   10801.43 ms /    32 runs   (  337.54 ms per token,     2.96 tokens per second)
0.12.149.897 I llama_perf_context_print:       total time =   10883.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3911 (a34cde99)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198286.52 ms
main:    total time = 198286.52 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.624 I build: 3911 (a34cde99) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.002.781 I main: load the model and apply lora adapter, if any
0.00.024.806 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.902 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.916 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.921 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.925 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.927 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.928 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.930 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.944 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.945 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.951 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.955 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.956 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.957 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.958 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.917 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.092 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.166 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.173 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.175 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.176 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.177 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.178 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.180 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.183 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.184 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.192 I llama_model_loader: - type  f32:   37 tensors
0.00.269.196 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.197 I llama_model_loader: - type q6_K:   19 tensors
0.00.440.777 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.494.890 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.495.901 I llm_load_vocab: special tokens cache size = 5
0.00.591.718 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.786 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.790 I llm_load_print_meta: arch             = gemma
0.00.591.791 I llm_load_print_meta: vocab type       = SPM
0.00.591.792 I llm_load_print_meta: n_vocab          = 256000
0.00.591.794 I llm_load_print_meta: n_merges         = 0
0.00.591.795 I llm_load_print_meta: vocab_only       = 0
0.00.591.795 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.796 I llm_load_print_meta: n_embd           = 2048
0.00.591.796 I llm_load_print_meta: n_layer          = 18
0.00.591.859 I llm_load_print_meta: n_head           = 8
0.00.591.869 I llm_load_print_meta: n_head_kv        = 1
0.00.591.869 I llm_load_print_meta: n_rot            = 256
0.00.591.870 I llm_load_print_meta: n_swa            = 0
0.00.591.871 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.871 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.876 I llm_load_print_meta: n_gqa            = 8
0.00.591.881 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.886 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.889 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.891 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.891 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.891 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.892 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.897 I llm_load_print_meta: n_ff             = 16384
0.00.591.897 I llm_load_print_meta: n_expert         = 0
0.00.591.898 I llm_load_print_meta: n_expert_used    = 0
0.00.591.898 I llm_load_print_meta: causal attn      = 1
0.00.591.898 I llm_load_print_meta: pooling type     = 0
0.00.591.899 I llm_load_print_meta: rope type        = 2
0.00.591.899 I llm_load_print_meta: rope scaling     = linear
0.00.591.901 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.901 I llm_load_print_meta: freq_scale_train = 1
0.00.591.902 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.902 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.905 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.905 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.906 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.906 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.907 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.907 I llm_load_print_meta: model type       = 2B
0.00.591.908 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.591.909 I llm_load_print_meta: model params     = 2.51 B
0.00.591.910 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.591.910 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.911 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.911 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.913 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.591.913 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.914 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.915 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.921 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.591.924 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.591.925 I llm_load_print_meta: max token length = 93
0.00.592.088 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.651.016 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.656.607 I llama_new_context_with_model: n_ctx      = 8192
0.00.656.614 I llama_new_context_with_model: n_batch    = 2048
0.00.656.614 I llama_new_context_with_model: n_ubatch   = 512
0.00.656.615 I llama_new_context_with_model: flash_attn = 0
0.00.656.617 I llama_new_context_with_model: freq_base  = 10000.0
0.00.656.618 I llama_new_context_with_model: freq_scale = 1
0.00.686.446 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.686.492 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.686.612 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.687.923 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.687.928 I llama_new_context_with_model: graph nodes  = 601
0.00.687.929 I llama_new_context_with_model: graph splits = 1
0.00.687.943 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.265.511 I main: llama threadpool init, n_threads = 4
0.01.265.522 I 
0.01.265.626 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.265.630 I 
0.01.265.817 I sampler seed: 3724953454
0.01.265.828 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.265.835 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.265.836 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.265.838 I 
 seconded:

I'm so excited for our trip to the Bahamas! I'm ready to soak up the sun, swim in the crystal clear waters

0.12.168.063 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.65 tokens per second)
0.12.168.066 I llama_perf_context_print:        load time =    1262.64 ms
0.12.168.067 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.168.069 I llama_perf_context_print:        eval time =   10820.96 ms /    32 runs   (  338.16 ms per token,     2.96 tokens per second)
0.12.168.070 I llama_perf_context_print:       total time =   10902.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.803s
user	50m5.779s
sys	0m6.284s
