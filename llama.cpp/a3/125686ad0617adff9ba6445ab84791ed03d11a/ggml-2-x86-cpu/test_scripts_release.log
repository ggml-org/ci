+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.565 I build: 4327 (a3125686) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.000.753 I main: load the model and apply lora adapter, if any
0.00.022.238 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.250 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.257 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.265 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.269 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.273 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.274 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.275 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.275 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.276 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.276 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.281 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.281 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.282 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.282 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.283 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.733 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.512 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.516 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.524 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.526 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.527 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.528 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.529 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.531 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.534 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.535 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.535 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.536 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.538 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.543 I llama_model_loader: - type  f32:   37 tensors
0.00.134.545 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.091 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.673 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.208 I llm_load_vocab: special tokens cache size = 5
0.00.272.223 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.238 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.238 I llm_load_print_meta: arch             = gemma
0.00.272.239 I llm_load_print_meta: vocab type       = SPM
0.00.272.239 I llm_load_print_meta: n_vocab          = 256000
0.00.272.240 I llm_load_print_meta: n_merges         = 0
0.00.272.240 I llm_load_print_meta: vocab_only       = 0
0.00.272.240 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.241 I llm_load_print_meta: n_embd           = 2048
0.00.272.241 I llm_load_print_meta: n_layer          = 18
0.00.272.252 I llm_load_print_meta: n_head           = 8
0.00.272.253 I llm_load_print_meta: n_head_kv        = 1
0.00.272.254 I llm_load_print_meta: n_rot            = 256
0.00.272.254 I llm_load_print_meta: n_swa            = 0
0.00.272.254 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.255 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.255 I llm_load_print_meta: n_gqa            = 8
0.00.272.256 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.257 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.258 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.259 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.260 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.260 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.260 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.261 I llm_load_print_meta: n_ff             = 16384
0.00.272.262 I llm_load_print_meta: n_expert         = 0
0.00.272.262 I llm_load_print_meta: n_expert_used    = 0
0.00.272.262 I llm_load_print_meta: causal attn      = 1
0.00.272.262 I llm_load_print_meta: pooling type     = 0
0.00.272.263 I llm_load_print_meta: rope type        = 2
0.00.272.263 I llm_load_print_meta: rope scaling     = linear
0.00.272.265 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.266 I llm_load_print_meta: freq_scale_train = 1
0.00.272.266 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.266 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.266 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.267 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.267 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.267 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.267 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.268 I llm_load_print_meta: model type       = 2B
0.00.272.268 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.269 I llm_load_print_meta: model params     = 2.51 B
0.00.272.270 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.270 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.270 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.271 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.271 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.271 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.272 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.272 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.272 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.273 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.273 I llm_load_print_meta: max token length = 93
0.00.374.889 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.374.898 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.374.899 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.374.899 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.374.900 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.374.900 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.380.174 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.180 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.181 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.181 I llama_new_context_with_model: n_batch       = 2048
0.00.380.181 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.182 I llama_new_context_with_model: flash_attn    = 0
0.00.380.185 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.185 I llama_new_context_with_model: freq_scale    = 1
0.00.380.186 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.394.470 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.394.484 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.394.585 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.901 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.395.907 I llama_new_context_with_model: graph nodes  = 601
0.00.395.907 I llama_new_context_with_model: graph splits = 1
0.00.395.910 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.395.910 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.942 I main: llama threadpool init, n_threads = 4
0.00.480.956 I 
0.00.481.028 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.481.032 I 
0.00.481.072 I sampler seed: 3903132590
0.00.481.084 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.087 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.099 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.102 I 
 increamically.

I have a large dataset and I need to find the most relevant features to build a machine learning model. Feature selection is a crucial step in

0.02.750.062 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6526.90 tokens per second)
0.02.750.065 I llama_perf_context_print:        load time =     480.17 ms
0.02.750.066 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.750.067 I llama_perf_context_print:        eval time =    2250.23 ms /    32 runs   (   70.32 ms per token,    14.22 tokens per second)
0.02.750.068 I llama_perf_context_print:       total time =    2269.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.551 I build: 4327 (a3125686) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.000.752 I main: load the model and apply lora adapter, if any
0.00.021.421 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.437 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.444 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.445 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.449 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.450 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.450 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.451 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.451 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.452 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.456 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.457 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.457 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.458 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.458 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.891 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.197 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.155 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.162 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.163 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.164 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.165 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.166 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.167 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.171 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.172 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.173 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.173 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.174 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.178 I llama_model_loader: - type  f32:   37 tensors
0.00.132.179 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.901 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.267.936 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.571 I llm_load_vocab: special tokens cache size = 5
0.00.289.535 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.550 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.550 I llm_load_print_meta: arch             = gemma
0.00.289.551 I llm_load_print_meta: vocab type       = SPM
0.00.289.552 I llm_load_print_meta: n_vocab          = 256000
0.00.289.552 I llm_load_print_meta: n_merges         = 0
0.00.289.553 I llm_load_print_meta: vocab_only       = 0
0.00.289.553 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.553 I llm_load_print_meta: n_embd           = 2048
0.00.289.553 I llm_load_print_meta: n_layer          = 18
0.00.289.565 I llm_load_print_meta: n_head           = 8
0.00.289.566 I llm_load_print_meta: n_head_kv        = 1
0.00.289.566 I llm_load_print_meta: n_rot            = 256
0.00.289.566 I llm_load_print_meta: n_swa            = 0
0.00.289.567 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.567 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.568 I llm_load_print_meta: n_gqa            = 8
0.00.289.569 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.570 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.571 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.573 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.573 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.573 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.574 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.575 I llm_load_print_meta: n_ff             = 16384
0.00.289.575 I llm_load_print_meta: n_expert         = 0
0.00.289.575 I llm_load_print_meta: n_expert_used    = 0
0.00.289.576 I llm_load_print_meta: causal attn      = 1
0.00.289.576 I llm_load_print_meta: pooling type     = 0
0.00.289.577 I llm_load_print_meta: rope type        = 2
0.00.289.577 I llm_load_print_meta: rope scaling     = linear
0.00.289.580 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.582 I llm_load_print_meta: freq_scale_train = 1
0.00.289.582 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.583 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.584 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.584 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.584 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.584 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.585 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.586 I llm_load_print_meta: model type       = 2B
0.00.289.586 I llm_load_print_meta: model ftype      = Q8_0
0.00.289.587 I llm_load_print_meta: model params     = 2.51 B
0.00.289.588 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.289.589 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.589 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.590 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.590 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.591 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.591 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.591 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.592 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.592 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.592 I llm_load_print_meta: max token length = 93
0.00.384.990 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.390.321 I llama_new_context_with_model: n_seq_max     = 1
0.00.390.327 I llama_new_context_with_model: n_ctx         = 4096
0.00.390.328 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.390.328 I llama_new_context_with_model: n_batch       = 2048
0.00.390.329 I llama_new_context_with_model: n_ubatch      = 512
0.00.390.329 I llama_new_context_with_model: flash_attn    = 0
0.00.390.332 I llama_new_context_with_model: freq_base     = 10000.0
0.00.390.333 I llama_new_context_with_model: freq_scale    = 1
0.00.390.334 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.405.764 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.405.779 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.405.870 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.407.112 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.407.119 I llama_new_context_with_model: graph nodes  = 601
0.00.407.119 I llama_new_context_with_model: graph splits = 1
0.00.407.122 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.407.122 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.000 I main: llama threadpool init, n_threads = 4
0.00.489.015 I 
0.00.489.085 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.489.088 I 
0.00.489.130 I sampler seed: 1727279705
0.00.489.141 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.148 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.489.149 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.149 I 
 increasities and inconsistencies in the way the different branches of the Catholic Church interpret and apply Scripture.

**Solution:**

**1. Promote dialogue and understanding among

0.02.688.657 I llama_perf_sampler_print:    sampling time =       4.92 ms /    33 runs   (    0.15 ms per token,  6714.14 tokens per second)
0.02.688.659 I llama_perf_context_print:        load time =     488.23 ms
0.02.688.660 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.688.662 I llama_perf_context_print:        eval time =    2180.76 ms /    32 runs   (   68.15 ms per token,    14.67 tokens per second)
0.02.688.662 I llama_perf_context_print:       total time =    2199.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.552 I build: 4327 (a3125686) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.750 I main: load the model and apply lora adapter, if any
0.00.020.873 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.883 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.890 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.895 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.896 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.900 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.901 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.902 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.902 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.903 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.904 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.907 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.908 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.909 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.910 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.910 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.218 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.432 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.339 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.346 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.347 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.347 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.348 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.349 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.351 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.353 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.355 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.355 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.356 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.357 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.361 I llama_model_loader: - type  f32:   37 tensors
0.00.133.362 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.354 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.581 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.239 I llm_load_vocab: special tokens cache size = 5
0.00.274.101 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.118 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.118 I llm_load_print_meta: arch             = gemma
0.00.274.119 I llm_load_print_meta: vocab type       = SPM
0.00.274.119 I llm_load_print_meta: n_vocab          = 256000
0.00.274.120 I llm_load_print_meta: n_merges         = 0
0.00.274.120 I llm_load_print_meta: vocab_only       = 0
0.00.274.121 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.121 I llm_load_print_meta: n_embd           = 2048
0.00.274.121 I llm_load_print_meta: n_layer          = 18
0.00.274.133 I llm_load_print_meta: n_head           = 8
0.00.274.134 I llm_load_print_meta: n_head_kv        = 1
0.00.274.134 I llm_load_print_meta: n_rot            = 256
0.00.274.135 I llm_load_print_meta: n_swa            = 0
0.00.274.135 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.135 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.136 I llm_load_print_meta: n_gqa            = 8
0.00.274.137 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.138 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.139 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.141 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.141 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.141 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.142 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.143 I llm_load_print_meta: n_ff             = 16384
0.00.274.143 I llm_load_print_meta: n_expert         = 0
0.00.274.143 I llm_load_print_meta: n_expert_used    = 0
0.00.274.144 I llm_load_print_meta: causal attn      = 1
0.00.274.144 I llm_load_print_meta: pooling type     = 0
0.00.274.144 I llm_load_print_meta: rope type        = 2
0.00.274.145 I llm_load_print_meta: rope scaling     = linear
0.00.274.146 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.147 I llm_load_print_meta: freq_scale_train = 1
0.00.274.147 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.147 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.148 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.148 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.148 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.148 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.149 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.149 I llm_load_print_meta: model type       = 2B
0.00.274.149 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.150 I llm_load_print_meta: model params     = 2.51 B
0.00.274.151 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.151 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.152 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.152 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.153 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.153 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.153 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.154 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.154 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.154 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.155 I llm_load_print_meta: max token length = 93
0.00.352.466 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.352.473 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.474 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.352.475 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.352.476 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.476 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.357.704 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.710 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.711 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.711 I llama_new_context_with_model: n_batch       = 2048
0.00.357.712 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.712 I llama_new_context_with_model: flash_attn    = 0
0.00.357.714 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.715 I llama_new_context_with_model: freq_scale    = 1
0.00.357.716 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.880 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.371.896 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.987 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.213 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.373.220 I llama_new_context_with_model: graph nodes  = 601
0.00.373.220 I llama_new_context_with_model: graph splits = 1
0.00.373.222 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.373.223 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.040 I main: llama threadpool init, n_threads = 4
0.00.461.054 I 
0.00.461.130 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.461.133 I 
0.00.461.175 I sampler seed: 1479727887
0.00.461.185 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.188 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.189 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.191 I 
 increasities, and other forms of sexual harassment.

Sexual harassment is a pervasive issue that affects individuals of all genders, occupations, and ages. It is illegal

0.02.722.778 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6767.84 tokens per second)
0.02.722.781 I llama_perf_context_print:        load time =     460.27 ms
0.02.722.782 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.722.783 I llama_perf_context_print:        eval time =    2242.35 ms /    32 runs   (   70.07 ms per token,    14.27 tokens per second)
0.02.722.784 I llama_perf_context_print:       total time =    2261.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.178 I build: 4327 (a3125686) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.381 I main: llama backend init
0.00.000.388 I main: load the model and apply lora adapter, if any
0.00.020.394 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.405 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.412 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.422 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.427 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.432 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.433 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.434 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.435 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.436 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.437 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.442 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.443 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.444 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.445 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.446 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.075 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.426 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.403 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.410 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.410 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.411 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.412 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.413 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.414 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.416 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.416 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.417 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.418 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.419 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.425 I llama_model_loader: - type  f32:   37 tensors
0.00.130.426 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.403 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.382 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.023 I llm_load_vocab: special tokens cache size = 5
0.00.272.426 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.445 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.446 I llm_load_print_meta: arch             = gemma
0.00.272.446 I llm_load_print_meta: vocab type       = SPM
0.00.272.447 I llm_load_print_meta: n_vocab          = 256000
0.00.272.448 I llm_load_print_meta: n_merges         = 0
0.00.272.448 I llm_load_print_meta: vocab_only       = 0
0.00.272.448 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.449 I llm_load_print_meta: n_embd           = 2048
0.00.272.449 I llm_load_print_meta: n_layer          = 18
0.00.272.461 I llm_load_print_meta: n_head           = 8
0.00.272.461 I llm_load_print_meta: n_head_kv        = 1
0.00.272.462 I llm_load_print_meta: n_rot            = 256
0.00.272.462 I llm_load_print_meta: n_swa            = 0
0.00.272.462 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.463 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.464 I llm_load_print_meta: n_gqa            = 8
0.00.272.465 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.466 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.467 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.468 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.468 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.469 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.469 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.470 I llm_load_print_meta: n_ff             = 16384
0.00.272.470 I llm_load_print_meta: n_expert         = 0
0.00.272.470 I llm_load_print_meta: n_expert_used    = 0
0.00.272.471 I llm_load_print_meta: causal attn      = 1
0.00.272.471 I llm_load_print_meta: pooling type     = 0
0.00.272.471 I llm_load_print_meta: rope type        = 2
0.00.272.472 I llm_load_print_meta: rope scaling     = linear
0.00.272.473 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.473 I llm_load_print_meta: freq_scale_train = 1
0.00.272.474 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.474 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.474 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.475 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.475 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.475 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.475 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.476 I llm_load_print_meta: model type       = 2B
0.00.272.476 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.477 I llm_load_print_meta: model params     = 2.51 B
0.00.272.478 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.478 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.479 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.479 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.479 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.480 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.480 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.480 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.480 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.481 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.481 I llm_load_print_meta: max token length = 93
0.00.343.397 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.343.403 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.348.817 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.824 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.825 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.825 I llama_new_context_with_model: n_batch       = 2048
0.00.348.826 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.826 I llama_new_context_with_model: flash_attn    = 0
0.00.348.829 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.830 I llama_new_context_with_model: freq_scale    = 1
0.00.348.831 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.152 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.167 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.272 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.561 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.568 I llama_new_context_with_model: graph nodes  = 601
0.00.364.569 I llama_new_context_with_model: graph splits = 1
0.00.364.571 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.364.571 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.934 I main: llama threadpool init, n_threads = 4
0.00.453.949 I 
0.00.454.034 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.454.038 I 
0.00.454.085 I sampler seed: 2654895603
0.00.454.096 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.099 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.100 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.100 I 
 increamically, seeking to encapsulate the essence of the world within a single, monumental work.

This magnum opus must be a vast tapestry woven from the threads

0.02.890.283 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6855.01 tokens per second)
0.02.890.285 I llama_perf_context_print:        load time =     453.53 ms
0.02.890.286 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.890.288 I llama_perf_context_print:        eval time =    2416.54 ms /    32 runs   (   75.52 ms per token,    13.24 tokens per second)
0.02.890.290 I llama_perf_context_print:       total time =    2436.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.626s
user	0m39.625s
sys	0m9.362s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4327 (a3125686)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40210.45 ms
main:    total time = 40210.45 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.184 I build: 4327 (a3125686) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.380 I main: llama backend init
0.00.000.386 I main: load the model and apply lora adapter, if any
0.00.020.632 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.641 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.649 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.658 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.659 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.663 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.664 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.665 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.665 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.665 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.666 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.670 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.671 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.671 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.671 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.672 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.933 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.098 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.055 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.062 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.063 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.064 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.064 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.065 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.066 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.069 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.069 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.070 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.071 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.072 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.075 I llama_model_loader: - type  f32:   37 tensors
0.00.131.076 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.077 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.301 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.974 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.513 I llm_load_vocab: special tokens cache size = 5
0.00.270.512 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.530 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.531 I llm_load_print_meta: arch             = gemma
0.00.270.531 I llm_load_print_meta: vocab type       = SPM
0.00.270.532 I llm_load_print_meta: n_vocab          = 256000
0.00.270.533 I llm_load_print_meta: n_merges         = 0
0.00.270.533 I llm_load_print_meta: vocab_only       = 0
0.00.270.534 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.534 I llm_load_print_meta: n_embd           = 2048
0.00.270.534 I llm_load_print_meta: n_layer          = 18
0.00.270.549 I llm_load_print_meta: n_head           = 8
0.00.270.550 I llm_load_print_meta: n_head_kv        = 1
0.00.270.550 I llm_load_print_meta: n_rot            = 256
0.00.270.551 I llm_load_print_meta: n_swa            = 0
0.00.270.551 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.551 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.552 I llm_load_print_meta: n_gqa            = 8
0.00.270.553 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.554 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.555 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.556 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.557 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.557 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.557 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.558 I llm_load_print_meta: n_ff             = 16384
0.00.270.558 I llm_load_print_meta: n_expert         = 0
0.00.270.559 I llm_load_print_meta: n_expert_used    = 0
0.00.270.560 I llm_load_print_meta: causal attn      = 1
0.00.270.560 I llm_load_print_meta: pooling type     = 0
0.00.270.560 I llm_load_print_meta: rope type        = 2
0.00.270.561 I llm_load_print_meta: rope scaling     = linear
0.00.270.562 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.563 I llm_load_print_meta: freq_scale_train = 1
0.00.270.563 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.564 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.564 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.564 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.564 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.564 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.565 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.565 I llm_load_print_meta: model type       = 2B
0.00.270.566 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.566 I llm_load_print_meta: model params     = 2.51 B
0.00.270.567 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.567 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.568 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.568 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.568 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.569 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.569 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.569 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.569 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.570 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.570 I llm_load_print_meta: max token length = 93
0.00.332.033 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.332.040 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.332.041 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.332.042 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.332.042 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.332.043 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.337.090 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.096 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.096 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.097 I llama_new_context_with_model: n_batch       = 2048
0.00.337.097 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.098 I llama_new_context_with_model: flash_attn    = 0
0.00.337.100 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.101 I llama_new_context_with_model: freq_scale    = 1
0.00.337.102 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.571 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.586 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.679 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.934 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.938 I llama_new_context_with_model: graph nodes  = 601
0.00.352.939 I llama_new_context_with_model: graph splits = 1
0.00.352.941 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.352.941 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.304 I main: llama threadpool init, n_threads = 4
0.00.428.321 I 
0.00.428.394 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.428.397 I 
0.00.428.438 I sampler seed: 392366865
0.00.428.449 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.451 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.452 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.452 I 
 secon.jpg

I am unable to access the provided image. Could you please provide me with the image location or a description so I can assist you further?

0.02.034.610 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6483.30 tokens per second)
0.02.034.612 I llama_perf_context_print:        load time =     427.90 ms
0.02.034.614 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.034.615 I llama_perf_context_print:        eval time =    1587.55 ms /    32 runs   (   49.61 ms per token,    20.16 tokens per second)
0.02.034.616 I llama_perf_context_print:       total time =    1606.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4327 (a3125686)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40179.07 ms
main:    total time = 40179.08 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.549 I build: 4327 (a3125686) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.753 I main: load the model and apply lora adapter, if any
0.00.021.384 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.400 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.407 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.408 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.412 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.413 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.413 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.414 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.414 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.415 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.419 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.419 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.420 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.420 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.421 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.310 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.248 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.517 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.526 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.527 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.528 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.529 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.530 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.531 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.534 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.535 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.539 I llama_model_loader: - type  f32:   37 tensors
0.00.132.540 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.541 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.845 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.371 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.942 I llm_load_vocab: special tokens cache size = 5
0.00.269.859 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.874 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.875 I llm_load_print_meta: arch             = gemma
0.00.269.875 I llm_load_print_meta: vocab type       = SPM
0.00.269.876 I llm_load_print_meta: n_vocab          = 256000
0.00.269.876 I llm_load_print_meta: n_merges         = 0
0.00.269.877 I llm_load_print_meta: vocab_only       = 0
0.00.269.877 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.877 I llm_load_print_meta: n_embd           = 2048
0.00.269.878 I llm_load_print_meta: n_layer          = 18
0.00.269.889 I llm_load_print_meta: n_head           = 8
0.00.269.890 I llm_load_print_meta: n_head_kv        = 1
0.00.269.890 I llm_load_print_meta: n_rot            = 256
0.00.269.890 I llm_load_print_meta: n_swa            = 0
0.00.269.891 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.891 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.892 I llm_load_print_meta: n_gqa            = 8
0.00.269.893 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.894 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.894 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.896 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.897 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.897 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.897 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.898 I llm_load_print_meta: n_ff             = 16384
0.00.269.898 I llm_load_print_meta: n_expert         = 0
0.00.269.898 I llm_load_print_meta: n_expert_used    = 0
0.00.269.899 I llm_load_print_meta: causal attn      = 1
0.00.269.899 I llm_load_print_meta: pooling type     = 0
0.00.269.899 I llm_load_print_meta: rope type        = 2
0.00.269.900 I llm_load_print_meta: rope scaling     = linear
0.00.269.901 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.902 I llm_load_print_meta: freq_scale_train = 1
0.00.269.902 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.903 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.903 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.904 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.904 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.904 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.904 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.905 I llm_load_print_meta: model type       = 2B
0.00.269.905 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.906 I llm_load_print_meta: model params     = 2.51 B
0.00.269.906 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.907 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.908 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.908 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.908 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.908 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.909 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.909 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.909 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.910 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.910 I llm_load_print_meta: max token length = 93
0.00.328.137 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.333.212 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.218 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.219 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.219 I llama_new_context_with_model: n_batch       = 2048
0.00.333.220 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.221 I llama_new_context_with_model: flash_attn    = 0
0.00.333.223 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.224 I llama_new_context_with_model: freq_scale    = 1
0.00.333.225 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.979 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.993 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.082 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.376 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.382 I llama_new_context_with_model: graph nodes  = 601
0.00.349.383 I llama_new_context_with_model: graph splits = 1
0.00.349.385 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.349.385 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.974 I main: llama threadpool init, n_threads = 4
0.00.423.991 I 
0.00.424.066 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.424.070 I 
0.00.424.115 I sampler seed: 2437500555
0.00.424.124 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.126 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.424.127 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.424.127 I 
 seconded for its part in the film.

**Part of Speech (1999)** is a film that explores the themes of love, loss,

0.01.999.732 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6669.36 tokens per second)
0.01.999.734 I llama_perf_context_print:        load time =     423.20 ms
0.01.999.735 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.999.736 I llama_perf_context_print:        eval time =    1556.90 ms /    32 runs   (   48.65 ms per token,    20.55 tokens per second)
0.01.999.737 I llama_perf_context_print:       total time =    1575.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.306s
user	10m23.675s
sys	0m7.174s
