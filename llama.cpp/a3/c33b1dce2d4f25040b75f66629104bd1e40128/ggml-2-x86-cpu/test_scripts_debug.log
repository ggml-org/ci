+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.675 I build: 4363 (a3c33b1d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.892 I main: llama backend init
0.00.000.900 I main: load the model and apply lora adapter, if any
0.00.023.883 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.898 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.994 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.009 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.011 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.019 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.026 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.028 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.029 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.030 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.032 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.048 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.050 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.051 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.052 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.054 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.255 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.537 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.504 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.516 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.518 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.519 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.520 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.521 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.523 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.527 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.529 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.530 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.531 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.353.533 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.543 I llama_model_loader: - type  f32:   37 tensors
0.00.353.546 I llama_model_loader: - type q8_0:  127 tensors
0.00.579.642 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.643.316 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.644.300 I llm_load_vocab: special tokens cache size = 5
0.00.830.313 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.830.387 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.830.388 I llm_load_print_meta: arch             = gemma
0.00.830.390 I llm_load_print_meta: vocab type       = SPM
0.00.830.391 I llm_load_print_meta: n_vocab          = 256000
0.00.830.394 I llm_load_print_meta: n_merges         = 0
0.00.830.394 I llm_load_print_meta: vocab_only       = 0
0.00.830.395 I llm_load_print_meta: n_ctx_train      = 8192
0.00.830.395 I llm_load_print_meta: n_embd           = 2048
0.00.830.396 I llm_load_print_meta: n_layer          = 18
0.00.830.460 I llm_load_print_meta: n_head           = 8
0.00.830.468 I llm_load_print_meta: n_head_kv        = 1
0.00.830.471 I llm_load_print_meta: n_rot            = 256
0.00.830.471 I llm_load_print_meta: n_swa            = 0
0.00.830.471 I llm_load_print_meta: n_embd_head_k    = 256
0.00.830.472 I llm_load_print_meta: n_embd_head_v    = 256
0.00.830.476 I llm_load_print_meta: n_gqa            = 8
0.00.830.481 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.830.487 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.830.488 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.830.490 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.830.491 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.830.492 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.830.492 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.830.498 I llm_load_print_meta: n_ff             = 16384
0.00.830.499 I llm_load_print_meta: n_expert         = 0
0.00.830.509 I llm_load_print_meta: n_expert_used    = 0
0.00.830.510 I llm_load_print_meta: causal attn      = 1
0.00.830.510 I llm_load_print_meta: pooling type     = 0
0.00.830.511 I llm_load_print_meta: rope type        = 2
0.00.830.511 I llm_load_print_meta: rope scaling     = linear
0.00.830.513 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.830.514 I llm_load_print_meta: freq_scale_train = 1
0.00.830.514 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.830.515 I llm_load_print_meta: rope_finetuned   = unknown
0.00.830.516 I llm_load_print_meta: ssm_d_conv       = 0
0.00.830.517 I llm_load_print_meta: ssm_d_inner      = 0
0.00.830.518 I llm_load_print_meta: ssm_d_state      = 0
0.00.830.518 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.830.519 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.830.520 I llm_load_print_meta: model type       = 2B
0.00.830.533 I llm_load_print_meta: model ftype      = Q8_0
0.00.830.536 I llm_load_print_meta: model params     = 2.51 B
0.00.830.537 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.830.537 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.830.538 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.830.539 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.830.539 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.830.540 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.830.540 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.830.541 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.830.547 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.830.549 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.830.549 I llm_load_print_meta: max token length = 93
0.00.932.704 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.932.715 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.932.715 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.932.716 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.932.717 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.932.718 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.938.836 I llama_new_context_with_model: n_seq_max     = 1
0.00.938.843 I llama_new_context_with_model: n_ctx         = 4096
0.00.938.844 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.938.844 I llama_new_context_with_model: n_batch       = 2048
0.00.938.845 I llama_new_context_with_model: n_ubatch      = 512
0.00.938.845 I llama_new_context_with_model: flash_attn    = 0
0.00.938.849 I llama_new_context_with_model: freq_base     = 10000.0
0.00.938.849 I llama_new_context_with_model: freq_scale    = 1
0.00.938.850 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.938.944 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.953.453 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.953.492 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.953.618 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.956.247 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.956.251 I llama_new_context_with_model: graph nodes  = 601
0.00.956.251 I llama_new_context_with_model: graph splits = 1
0.00.956.276 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.956.279 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.567.950 I main: llama threadpool init, n_threads = 4
0.01.567.967 I 
0.01.568.088 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.568.092 I 
0.01.568.336 I sampler seed: 1241024908
0.01.568.350 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.568.359 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.568.363 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.568.363 I 
 increasities, and their effect on the host's microbiome.

**Answer:**

**Introduction:**

Microbiome refers to the collection of trillions

0.15.072.516 I llama_perf_sampler_print:    sampling time =      49.59 ms /    33 runs   (    1.50 ms per token,   665.40 tokens per second)
0.15.072.519 I llama_perf_context_print:        load time =    1566.93 ms
0.15.072.521 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.072.522 I llama_perf_context_print:        eval time =   13414.69 ms /    32 runs   (  419.21 ms per token,     2.39 tokens per second)
0.15.072.523 I llama_perf_context_print:       total time =   13504.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.738 I build: 4363 (a3c33b1d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.956 I main: llama backend init
0.00.000.965 I main: load the model and apply lora adapter, if any
0.00.024.003 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.107 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.124 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.129 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.137 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.138 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.140 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.141 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.142 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.144 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.152 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.154 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.155 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.157 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.158 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.611 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.661 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.627 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.641 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.642 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.643 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.645 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.646 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.647 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.651 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.653 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.654 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.655 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.354.657 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.667 I llama_model_loader: - type  f32:   37 tensors
0.00.354.669 I llama_model_loader: - type q8_0:  127 tensors
0.00.598.991 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.669.629 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.670.604 I llm_load_vocab: special tokens cache size = 5
0.00.857.454 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.857.532 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.857.534 I llm_load_print_meta: arch             = gemma
0.00.857.534 I llm_load_print_meta: vocab type       = SPM
0.00.857.535 I llm_load_print_meta: n_vocab          = 256000
0.00.857.537 I llm_load_print_meta: n_merges         = 0
0.00.857.538 I llm_load_print_meta: vocab_only       = 0
0.00.857.538 I llm_load_print_meta: n_ctx_train      = 8192
0.00.857.539 I llm_load_print_meta: n_embd           = 2048
0.00.857.539 I llm_load_print_meta: n_layer          = 18
0.00.857.604 I llm_load_print_meta: n_head           = 8
0.00.857.611 I llm_load_print_meta: n_head_kv        = 1
0.00.857.612 I llm_load_print_meta: n_rot            = 256
0.00.857.612 I llm_load_print_meta: n_swa            = 0
0.00.857.613 I llm_load_print_meta: n_embd_head_k    = 256
0.00.857.613 I llm_load_print_meta: n_embd_head_v    = 256
0.00.857.620 I llm_load_print_meta: n_gqa            = 8
0.00.857.625 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.857.630 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.857.630 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.857.632 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.857.632 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.857.632 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.857.633 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.857.638 I llm_load_print_meta: n_ff             = 16384
0.00.857.638 I llm_load_print_meta: n_expert         = 0
0.00.857.639 I llm_load_print_meta: n_expert_used    = 0
0.00.857.639 I llm_load_print_meta: causal attn      = 1
0.00.857.640 I llm_load_print_meta: pooling type     = 0
0.00.857.640 I llm_load_print_meta: rope type        = 2
0.00.857.640 I llm_load_print_meta: rope scaling     = linear
0.00.857.642 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.857.654 I llm_load_print_meta: freq_scale_train = 1
0.00.857.655 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.857.656 I llm_load_print_meta: rope_finetuned   = unknown
0.00.857.657 I llm_load_print_meta: ssm_d_conv       = 0
0.00.857.657 I llm_load_print_meta: ssm_d_inner      = 0
0.00.857.657 I llm_load_print_meta: ssm_d_state      = 0
0.00.857.658 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.857.659 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.857.660 I llm_load_print_meta: model type       = 2B
0.00.857.661 I llm_load_print_meta: model ftype      = Q8_0
0.00.857.662 I llm_load_print_meta: model params     = 2.51 B
0.00.857.680 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.857.681 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.857.682 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.857.689 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.857.690 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.857.691 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.857.691 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.857.692 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.857.698 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.857.699 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.857.700 I llm_load_print_meta: max token length = 93
0.00.952.523 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.958.702 I llama_new_context_with_model: n_seq_max     = 1
0.00.958.711 I llama_new_context_with_model: n_ctx         = 4096
0.00.958.712 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.958.712 I llama_new_context_with_model: n_batch       = 2048
0.00.958.713 I llama_new_context_with_model: n_ubatch      = 512
0.00.958.713 I llama_new_context_with_model: flash_attn    = 0
0.00.958.718 I llama_new_context_with_model: freq_base     = 10000.0
0.00.958.718 I llama_new_context_with_model: freq_scale    = 1
0.00.958.719 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.958.812 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.974.086 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.974.130 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.974.255 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.976.933 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.976.937 I llama_new_context_with_model: graph nodes  = 601
0.00.976.937 I llama_new_context_with_model: graph splits = 1
0.00.976.961 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.976.961 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.657.845 I main: llama threadpool init, n_threads = 4
0.01.657.861 I 
0.01.657.984 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.657.988 I 
0.01.658.225 I sampler seed: 1940459633
0.01.658.239 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.658.258 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.658.259 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.658.260 I 
 increasities in the current political landscape.

This question asks for a creative response that addresses the provided theme in a unique and insightful way.

**Response:**

0.15.164.837 I llama_perf_sampler_print:    sampling time =      49.82 ms /    33 runs   (    1.51 ms per token,   662.38 tokens per second)
0.15.164.840 I llama_perf_context_print:        load time =    1656.76 ms
0.15.164.841 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.164.866 I llama_perf_context_print:        eval time =   13416.48 ms /    32 runs   (  419.26 ms per token,     2.39 tokens per second)
0.15.164.867 I llama_perf_context_print:       total time =   13507.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.674 I build: 4363 (a3c33b1d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.889 I main: llama backend init
0.00.000.897 I main: load the model and apply lora adapter, if any
0.00.023.400 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.414 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.512 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.526 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.528 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.536 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.544 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.545 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.546 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.548 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.549 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.556 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.557 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.559 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.560 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.561 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.475 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.863 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.814 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.825 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.826 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.828 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.829 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.830 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.832 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.836 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.837 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.839 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.840 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.352.842 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.851 I llama_model_loader: - type  f32:   37 tensors
0.00.352.853 I llama_model_loader: - type q8_0:  127 tensors
0.00.599.270 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.670.208 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.671.214 I llm_load_vocab: special tokens cache size = 5
0.00.857.821 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.857.894 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.857.895 I llm_load_print_meta: arch             = gemma
0.00.857.896 I llm_load_print_meta: vocab type       = SPM
0.00.857.897 I llm_load_print_meta: n_vocab          = 256000
0.00.857.899 I llm_load_print_meta: n_merges         = 0
0.00.857.900 I llm_load_print_meta: vocab_only       = 0
0.00.857.900 I llm_load_print_meta: n_ctx_train      = 8192
0.00.857.901 I llm_load_print_meta: n_embd           = 2048
0.00.857.901 I llm_load_print_meta: n_layer          = 18
0.00.857.967 I llm_load_print_meta: n_head           = 8
0.00.857.975 I llm_load_print_meta: n_head_kv        = 1
0.00.857.975 I llm_load_print_meta: n_rot            = 256
0.00.857.976 I llm_load_print_meta: n_swa            = 0
0.00.857.976 I llm_load_print_meta: n_embd_head_k    = 256
0.00.857.977 I llm_load_print_meta: n_embd_head_v    = 256
0.00.857.982 I llm_load_print_meta: n_gqa            = 8
0.00.857.987 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.857.993 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.857.994 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.857.996 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.857.997 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.857.998 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.857.998 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.858.003 I llm_load_print_meta: n_ff             = 16384
0.00.858.004 I llm_load_print_meta: n_expert         = 0
0.00.858.005 I llm_load_print_meta: n_expert_used    = 0
0.00.858.006 I llm_load_print_meta: causal attn      = 1
0.00.858.007 I llm_load_print_meta: pooling type     = 0
0.00.858.007 I llm_load_print_meta: rope type        = 2
0.00.858.030 I llm_load_print_meta: rope scaling     = linear
0.00.858.032 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.858.033 I llm_load_print_meta: freq_scale_train = 1
0.00.858.033 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.858.034 I llm_load_print_meta: rope_finetuned   = unknown
0.00.858.034 I llm_load_print_meta: ssm_d_conv       = 0
0.00.858.044 I llm_load_print_meta: ssm_d_inner      = 0
0.00.858.044 I llm_load_print_meta: ssm_d_state      = 0
0.00.858.045 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.858.046 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.858.047 I llm_load_print_meta: model type       = 2B
0.00.858.049 I llm_load_print_meta: model ftype      = Q8_0
0.00.858.050 I llm_load_print_meta: model params     = 2.51 B
0.00.858.051 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.858.052 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.858.052 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.858.053 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.858.059 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.858.059 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.858.059 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.858.060 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.858.066 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.858.068 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.858.068 I llm_load_print_meta: max token length = 93
0.00.937.100 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.937.108 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.937.109 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.937.110 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.937.111 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.937.112 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.943.272 I llama_new_context_with_model: n_seq_max     = 1
0.00.943.283 I llama_new_context_with_model: n_ctx         = 4096
0.00.943.284 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.943.284 I llama_new_context_with_model: n_batch       = 2048
0.00.943.285 I llama_new_context_with_model: n_ubatch      = 512
0.00.943.285 I llama_new_context_with_model: flash_attn    = 0
0.00.943.290 I llama_new_context_with_model: freq_base     = 10000.0
0.00.943.291 I llama_new_context_with_model: freq_scale    = 1
0.00.943.292 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.943.393 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.960.168 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.960.215 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.960.340 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.963.079 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.963.082 I llama_new_context_with_model: graph nodes  = 601
0.00.963.083 I llama_new_context_with_model: graph splits = 1
0.00.963.108 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.963.111 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.574.670 I main: llama threadpool init, n_threads = 4
0.01.574.687 I 
0.01.574.809 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.574.813 I 
0.01.575.053 I sampler seed: 1971816893
0.01.575.067 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.575.077 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.575.078 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.575.079 I 
 increasities:

**Question:** What is the meaning of the phrase "a peacock's feathers and a woodpecker's heart"?

**Answer:** It

0.15.141.580 I llama_perf_sampler_print:    sampling time =      49.67 ms /    33 runs   (    1.51 ms per token,   664.36 tokens per second)
0.15.141.583 I llama_perf_context_print:        load time =    1573.67 ms
0.15.141.585 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.141.600 I llama_perf_context_print:        eval time =   13476.62 ms /    32 runs   (  421.14 ms per token,     2.37 tokens per second)
0.15.141.601 I llama_perf_context_print:       total time =   13566.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.684 I build: 4363 (a3c33b1d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.890 I main: llama backend init
0.00.000.898 I main: load the model and apply lora adapter, if any
0.00.023.579 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.593 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.689 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.703 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.705 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.714 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.718 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.720 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.721 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.722 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.723 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.732 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.734 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.735 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.736 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.738 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.623 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.842 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.808 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.820 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.822 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.823 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.824 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.826 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.827 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.831 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.832 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.834 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.835 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.354.837 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.847 I llama_model_loader: - type  f32:   37 tensors
0.00.354.849 I llama_model_loader: - type q8_0:  127 tensors
0.00.601.870 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.673.253 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.674.263 I llm_load_vocab: special tokens cache size = 5
0.00.862.733 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.862.810 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.862.814 I llm_load_print_meta: arch             = gemma
0.00.862.815 I llm_load_print_meta: vocab type       = SPM
0.00.862.816 I llm_load_print_meta: n_vocab          = 256000
0.00.862.819 I llm_load_print_meta: n_merges         = 0
0.00.862.820 I llm_load_print_meta: vocab_only       = 0
0.00.862.820 I llm_load_print_meta: n_ctx_train      = 8192
0.00.862.820 I llm_load_print_meta: n_embd           = 2048
0.00.862.821 I llm_load_print_meta: n_layer          = 18
0.00.862.884 I llm_load_print_meta: n_head           = 8
0.00.862.894 I llm_load_print_meta: n_head_kv        = 1
0.00.862.895 I llm_load_print_meta: n_rot            = 256
0.00.862.896 I llm_load_print_meta: n_swa            = 0
0.00.862.896 I llm_load_print_meta: n_embd_head_k    = 256
0.00.862.896 I llm_load_print_meta: n_embd_head_v    = 256
0.00.862.901 I llm_load_print_meta: n_gqa            = 8
0.00.862.906 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.862.911 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.862.912 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.862.914 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.862.914 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.862.915 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.862.916 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.862.921 I llm_load_print_meta: n_ff             = 16384
0.00.862.922 I llm_load_print_meta: n_expert         = 0
0.00.862.922 I llm_load_print_meta: n_expert_used    = 0
0.00.862.923 I llm_load_print_meta: causal attn      = 1
0.00.862.923 I llm_load_print_meta: pooling type     = 0
0.00.862.924 I llm_load_print_meta: rope type        = 2
0.00.862.925 I llm_load_print_meta: rope scaling     = linear
0.00.862.927 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.862.928 I llm_load_print_meta: freq_scale_train = 1
0.00.862.928 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.862.929 I llm_load_print_meta: rope_finetuned   = unknown
0.00.862.929 I llm_load_print_meta: ssm_d_conv       = 0
0.00.862.929 I llm_load_print_meta: ssm_d_inner      = 0
0.00.862.930 I llm_load_print_meta: ssm_d_state      = 0
0.00.862.931 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.862.931 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.862.932 I llm_load_print_meta: model type       = 2B
0.00.862.932 I llm_load_print_meta: model ftype      = Q8_0
0.00.862.933 I llm_load_print_meta: model params     = 2.51 B
0.00.862.934 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.862.934 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.862.935 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.862.936 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.862.936 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.862.936 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.862.937 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.862.937 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.862.943 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.862.944 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.862.945 I llm_load_print_meta: max token length = 93
0.00.936.414 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.936.422 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.942.409 I llama_new_context_with_model: n_seq_max     = 1
0.00.942.420 I llama_new_context_with_model: n_ctx         = 4096
0.00.942.420 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.942.420 I llama_new_context_with_model: n_batch       = 2048
0.00.942.421 I llama_new_context_with_model: n_ubatch      = 512
0.00.942.421 I llama_new_context_with_model: flash_attn    = 0
0.00.942.425 I llama_new_context_with_model: freq_base     = 10000.0
0.00.942.426 I llama_new_context_with_model: freq_scale    = 1
0.00.942.426 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.942.523 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.958.660 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.958.701 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.958.833 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.961.497 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.961.501 I llama_new_context_with_model: graph nodes  = 601
0.00.961.501 I llama_new_context_with_model: graph splits = 1
0.00.961.527 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.961.530 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.572.307 I main: llama threadpool init, n_threads = 4
0.01.572.322 I 
0.01.572.443 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.572.447 I 
0.01.572.681 I sampler seed: 496375274
0.01.572.695 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.572.704 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.572.707 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.572.708 I 
 increasels is an example of what type of communication?

a) Verbal
b) Non-verbal
c) Written
d) Sign language

The

0.15.098.813 I llama_perf_sampler_print:    sampling time =      49.79 ms /    33 runs   (    1.51 ms per token,   662.84 tokens per second)
0.15.098.832 I llama_perf_context_print:        load time =    1571.30 ms
0.15.098.833 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.098.835 I llama_perf_context_print:        eval time =   13435.78 ms /    32 runs   (  419.87 ms per token,     2.38 tokens per second)
0.15.098.836 I llama_perf_context_print:       total time =   13526.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m12.848s
user	3m50.428s
sys	0m9.540s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4363 (a3c33b1d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185805.47 ms
main:    total time = 185805.47 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.681 I build: 4363 (a3c33b1d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.914 I main: llama backend init
0.00.000.923 I main: load the model and apply lora adapter, if any
0.00.023.486 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.498 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.598 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.611 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.613 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.621 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.626 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.628 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.631 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.633 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.635 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.644 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.647 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.650 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.652 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.654 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.024 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.646 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.559 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.570 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.571 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.573 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.575 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.576 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.578 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.582 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.583 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.585 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.356.586 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.356.588 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.356.597 I llama_model_loader: - type  f32:   37 tensors
0.00.356.599 I llama_model_loader: - type q4_K:  108 tensors
0.00.356.600 I llama_model_loader: - type q6_K:   19 tensors
0.00.606.896 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.677.035 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.678.104 I llm_load_vocab: special tokens cache size = 5
0.00.867.428 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.867.507 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.867.508 I llm_load_print_meta: arch             = gemma
0.00.867.509 I llm_load_print_meta: vocab type       = SPM
0.00.867.510 I llm_load_print_meta: n_vocab          = 256000
0.00.867.513 I llm_load_print_meta: n_merges         = 0
0.00.867.514 I llm_load_print_meta: vocab_only       = 0
0.00.867.514 I llm_load_print_meta: n_ctx_train      = 8192
0.00.867.514 I llm_load_print_meta: n_embd           = 2048
0.00.867.515 I llm_load_print_meta: n_layer          = 18
0.00.867.583 I llm_load_print_meta: n_head           = 8
0.00.867.590 I llm_load_print_meta: n_head_kv        = 1
0.00.867.591 I llm_load_print_meta: n_rot            = 256
0.00.867.591 I llm_load_print_meta: n_swa            = 0
0.00.867.592 I llm_load_print_meta: n_embd_head_k    = 256
0.00.867.592 I llm_load_print_meta: n_embd_head_v    = 256
0.00.867.597 I llm_load_print_meta: n_gqa            = 8
0.00.867.602 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.867.607 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.867.608 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.867.609 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.867.610 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.867.610 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.867.611 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.867.616 I llm_load_print_meta: n_ff             = 16384
0.00.867.616 I llm_load_print_meta: n_expert         = 0
0.00.867.617 I llm_load_print_meta: n_expert_used    = 0
0.00.867.617 I llm_load_print_meta: causal attn      = 1
0.00.867.617 I llm_load_print_meta: pooling type     = 0
0.00.867.618 I llm_load_print_meta: rope type        = 2
0.00.867.618 I llm_load_print_meta: rope scaling     = linear
0.00.867.620 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.867.620 I llm_load_print_meta: freq_scale_train = 1
0.00.867.620 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.867.621 I llm_load_print_meta: rope_finetuned   = unknown
0.00.867.621 I llm_load_print_meta: ssm_d_conv       = 0
0.00.867.621 I llm_load_print_meta: ssm_d_inner      = 0
0.00.867.622 I llm_load_print_meta: ssm_d_state      = 0
0.00.867.622 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.867.622 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.867.623 I llm_load_print_meta: model type       = 2B
0.00.867.625 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.867.626 I llm_load_print_meta: model params     = 2.51 B
0.00.867.626 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.867.627 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.867.627 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.867.628 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.867.628 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.867.628 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.867.629 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.867.629 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.867.635 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.867.637 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.867.637 I llm_load_print_meta: max token length = 93
0.00.930.941 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.930.950 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.930.951 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.930.952 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.930.952 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.930.953 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.936.987 I llama_new_context_with_model: n_seq_max     = 1
0.00.936.998 I llama_new_context_with_model: n_ctx         = 4096
0.00.936.998 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.936.999 I llama_new_context_with_model: n_batch       = 2048
0.00.936.999 I llama_new_context_with_model: n_ubatch      = 512
0.00.937.000 I llama_new_context_with_model: flash_attn    = 0
0.00.937.003 I llama_new_context_with_model: freq_base     = 10000.0
0.00.937.004 I llama_new_context_with_model: freq_scale    = 1
0.00.937.005 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.937.114 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.952.897 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.952.939 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.953.063 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.955.837 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.955.841 I llama_new_context_with_model: graph nodes  = 601
0.00.955.842 I llama_new_context_with_model: graph splits = 1
0.00.955.868 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.955.872 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.536.778 I main: llama threadpool init, n_threads = 4
0.01.536.794 I 
0.01.536.928 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.536.932 I 
0.01.537.183 I sampler seed: 3942368618
0.01.537.197 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.537.208 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.537.210 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.537.211 I 
 seconally. 

**Assistant**

I am unable to provide medical advice or prescribe medications. I recommend that you consult a qualified healthcare professional for any medical

0.12.668.324 I llama_perf_sampler_print:    sampling time =      49.71 ms /    33 runs   (    1.51 ms per token,   663.80 tokens per second)
0.12.668.328 I llama_perf_context_print:        load time =    1535.74 ms
0.12.668.329 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.668.331 I llama_perf_context_print:        eval time =   11040.80 ms /    32 runs   (  345.03 ms per token,     2.90 tokens per second)
0.12.668.332 I llama_perf_context_print:       total time =   11131.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4363 (a3c33b1d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185698.48 ms
main:    total time = 185698.48 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4363 (a3c33b1d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.000.857 I main: load the model and apply lora adapter, if any
0.00.023.258 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.364 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.381 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.386 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.393 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.395 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.396 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.398 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.402 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.403 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.410 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.412 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.414 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.415 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.417 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.178 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.011 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.936 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.948 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.949 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.950 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.952 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.953 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.954 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.958 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.959 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.968 I llama_model_loader: - type  f32:   37 tensors
0.00.353.970 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.971 I llama_model_loader: - type q6_K:   19 tensors
0.00.589.272 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.655.863 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.656.781 I llm_load_vocab: special tokens cache size = 5
0.00.845.263 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.845.339 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.845.340 I llm_load_print_meta: arch             = gemma
0.00.845.341 I llm_load_print_meta: vocab type       = SPM
0.00.845.342 I llm_load_print_meta: n_vocab          = 256000
0.00.845.345 I llm_load_print_meta: n_merges         = 0
0.00.845.345 I llm_load_print_meta: vocab_only       = 0
0.00.845.346 I llm_load_print_meta: n_ctx_train      = 8192
0.00.845.346 I llm_load_print_meta: n_embd           = 2048
0.00.845.347 I llm_load_print_meta: n_layer          = 18
0.00.845.416 I llm_load_print_meta: n_head           = 8
0.00.845.423 I llm_load_print_meta: n_head_kv        = 1
0.00.845.423 I llm_load_print_meta: n_rot            = 256
0.00.845.424 I llm_load_print_meta: n_swa            = 0
0.00.845.424 I llm_load_print_meta: n_embd_head_k    = 256
0.00.845.425 I llm_load_print_meta: n_embd_head_v    = 256
0.00.845.429 I llm_load_print_meta: n_gqa            = 8
0.00.845.434 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.845.439 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.845.442 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.845.443 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.845.444 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.845.445 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.845.446 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.845.451 I llm_load_print_meta: n_ff             = 16384
0.00.845.452 I llm_load_print_meta: n_expert         = 0
0.00.845.453 I llm_load_print_meta: n_expert_used    = 0
0.00.845.454 I llm_load_print_meta: causal attn      = 1
0.00.845.454 I llm_load_print_meta: pooling type     = 0
0.00.845.454 I llm_load_print_meta: rope type        = 2
0.00.845.455 I llm_load_print_meta: rope scaling     = linear
0.00.845.470 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.845.475 I llm_load_print_meta: freq_scale_train = 1
0.00.845.475 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.845.476 I llm_load_print_meta: rope_finetuned   = unknown
0.00.845.492 I llm_load_print_meta: ssm_d_conv       = 0
0.00.845.493 I llm_load_print_meta: ssm_d_inner      = 0
0.00.845.494 I llm_load_print_meta: ssm_d_state      = 0
0.00.845.495 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.845.495 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.845.496 I llm_load_print_meta: model type       = 2B
0.00.845.501 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.845.502 I llm_load_print_meta: model params     = 2.51 B
0.00.845.502 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.845.503 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.845.504 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.845.505 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.845.505 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.845.506 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.845.506 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.845.507 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.845.512 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.845.514 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.845.515 I llm_load_print_meta: max token length = 93
0.00.905.427 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.911.351 I llama_new_context_with_model: n_seq_max     = 1
0.00.911.358 I llama_new_context_with_model: n_ctx         = 4096
0.00.911.359 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.911.359 I llama_new_context_with_model: n_batch       = 2048
0.00.911.359 I llama_new_context_with_model: n_ubatch      = 512
0.00.911.360 I llama_new_context_with_model: flash_attn    = 0
0.00.911.363 I llama_new_context_with_model: freq_base     = 10000.0
0.00.911.364 I llama_new_context_with_model: freq_scale    = 1
0.00.911.365 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.911.458 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.926.334 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.926.381 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.926.505 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.929.187 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.929.191 I llama_new_context_with_model: graph nodes  = 601
0.00.929.192 I llama_new_context_with_model: graph splits = 1
0.00.929.214 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.929.217 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.509.427 I main: llama threadpool init, n_threads = 4
0.01.509.444 I 
0.01.509.566 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.509.570 I 
0.01.509.805 I sampler seed: 594691113
0.01.509.819 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.509.828 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.509.832 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.509.832 I 
 seconded the text.

The provided text contains a passage discussing the importance of time management. It highlights the challenges individuals face in prioritizing tasks, managing time effectively

0.12.677.906 I llama_perf_sampler_print:    sampling time =      49.76 ms /    33 runs   (    1.51 ms per token,   663.18 tokens per second)
0.12.677.910 I llama_perf_context_print:        load time =    1508.47 ms
0.12.677.911 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.677.927 I llama_perf_context_print:        eval time =   11079.31 ms /    32 runs   (  346.23 ms per token,     2.89 tokens per second)
0.12.677.928 I llama_perf_context_print:       total time =   11168.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.845s
user	46m43.303s
sys	0m6.444s
