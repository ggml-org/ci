+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.607 I build: 3932 (21942002) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.808 I main: llama backend init
0.00.002.719 I main: load the model and apply lora adapter, if any
0.00.024.721 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.934 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.023 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.034 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.036 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.040 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.041 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.042 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.043 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.044 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.045 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.052 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.053 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.055 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.057 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.058 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.557 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.768 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.765 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.774 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.775 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.776 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.777 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.778 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.781 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.784 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.785 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.794 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.796 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.797 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.806 I llama_model_loader: - type  f32:   37 tensors
0.00.266.811 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.910 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.480.982 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.482.831 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.488.350 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.500.286 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.259 I llm_load_vocab: special tokens cache size = 5
0.00.594.645 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.718 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.719 I llm_load_print_meta: arch             = gemma
0.00.594.720 I llm_load_print_meta: vocab type       = SPM
0.00.594.721 I llm_load_print_meta: n_vocab          = 256000
0.00.594.723 I llm_load_print_meta: n_merges         = 0
0.00.594.724 I llm_load_print_meta: vocab_only       = 0
0.00.594.724 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.725 I llm_load_print_meta: n_embd           = 2048
0.00.594.725 I llm_load_print_meta: n_layer          = 18
0.00.594.786 I llm_load_print_meta: n_head           = 8
0.00.594.793 I llm_load_print_meta: n_head_kv        = 1
0.00.594.794 I llm_load_print_meta: n_rot            = 256
0.00.594.794 I llm_load_print_meta: n_swa            = 0
0.00.594.794 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.795 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.799 I llm_load_print_meta: n_gqa            = 8
0.00.594.804 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.809 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.810 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.811 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.812 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.812 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.812 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.817 I llm_load_print_meta: n_ff             = 16384
0.00.594.818 I llm_load_print_meta: n_expert         = 0
0.00.594.818 I llm_load_print_meta: n_expert_used    = 0
0.00.594.818 I llm_load_print_meta: causal attn      = 1
0.00.594.819 I llm_load_print_meta: pooling type     = 0
0.00.594.819 I llm_load_print_meta: rope type        = 2
0.00.594.820 I llm_load_print_meta: rope scaling     = linear
0.00.594.821 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.822 I llm_load_print_meta: freq_scale_train = 1
0.00.594.822 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.822 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.822 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.823 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.823 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.823 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.824 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.824 I llm_load_print_meta: model type       = 2B
0.00.594.825 I llm_load_print_meta: model ftype      = Q8_0
0.00.594.826 I llm_load_print_meta: model params     = 2.51 B
0.00.594.826 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.594.827 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.827 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.841 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.842 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.842 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.843 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.843 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.849 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.851 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.851 I llm_load_print_meta: max token length = 93
0.00.595.017 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.695.233 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.695.242 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.695.243 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.695.244 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.695.244 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.695.245 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.700.849 I llama_new_context_with_model: n_ctx      = 8192
0.00.700.856 I llama_new_context_with_model: n_batch    = 2048
0.00.700.857 I llama_new_context_with_model: n_ubatch   = 512
0.00.700.857 I llama_new_context_with_model: flash_attn = 0
0.00.700.860 I llama_new_context_with_model: freq_base  = 10000.0
0.00.700.861 I llama_new_context_with_model: freq_scale = 1
0.00.729.473 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.514 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.729.631 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.051 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.731.056 I llama_new_context_with_model: graph nodes  = 601
0.00.731.057 I llama_new_context_with_model: graph splits = 1
0.00.731.073 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.342.200 I main: llama threadpool init, n_threads = 4
0.01.342.213 I 
0.01.342.315 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.342.319 I 
0.01.342.499 I sampler seed: 1338854396
0.01.342.512 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.342.519 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.342.522 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.342.522 I 
 increasively.

I'm not sure how to spell it, but it has a rhythmic and musical quality.

[Answer]

The word you'

0.14.774.880 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.02 tokens per second)
0.14.774.883 I llama_perf_context_print:        load time =    1339.39 ms
0.14.774.884 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.774.885 I llama_perf_context_print:        eval time =   13350.28 ms /    32 runs   (  417.20 ms per token,     2.40 tokens per second)
0.14.774.900 I llama_perf_context_print:       total time =   13432.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.701 I build: 3932 (21942002) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.905 I main: llama backend init
0.00.002.846 I main: load the model and apply lora adapter, if any
0.00.025.216 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.315 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.330 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.332 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.337 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.338 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.339 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.340 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.341 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.342 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.350 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.351 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.352 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.353 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.354 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.053 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.737 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.695 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.704 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.705 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.706 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.707 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.708 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.709 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.730 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.733 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.734 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.735 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.737 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.746 I llama_model_loader: - type  f32:   37 tensors
0.00.266.750 I llama_model_loader: - type q8_0:  127 tensors
0.00.434.795 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.478.017 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.479.931 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.485.709 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.498.167 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.147 I llm_load_vocab: special tokens cache size = 5
0.00.601.455 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.525 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.526 I llm_load_print_meta: arch             = gemma
0.00.601.526 I llm_load_print_meta: vocab type       = SPM
0.00.601.527 I llm_load_print_meta: n_vocab          = 256000
0.00.601.529 I llm_load_print_meta: n_merges         = 0
0.00.601.530 I llm_load_print_meta: vocab_only       = 0
0.00.601.530 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.531 I llm_load_print_meta: n_embd           = 2048
0.00.601.532 I llm_load_print_meta: n_layer          = 18
0.00.601.597 I llm_load_print_meta: n_head           = 8
0.00.601.603 I llm_load_print_meta: n_head_kv        = 1
0.00.601.604 I llm_load_print_meta: n_rot            = 256
0.00.601.604 I llm_load_print_meta: n_swa            = 0
0.00.601.604 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.605 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.611 I llm_load_print_meta: n_gqa            = 8
0.00.601.615 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.620 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.621 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.623 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.623 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.624 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.624 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.629 I llm_load_print_meta: n_ff             = 16384
0.00.601.629 I llm_load_print_meta: n_expert         = 0
0.00.601.630 I llm_load_print_meta: n_expert_used    = 0
0.00.601.630 I llm_load_print_meta: causal attn      = 1
0.00.601.631 I llm_load_print_meta: pooling type     = 0
0.00.601.631 I llm_load_print_meta: rope type        = 2
0.00.601.632 I llm_load_print_meta: rope scaling     = linear
0.00.601.633 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.634 I llm_load_print_meta: freq_scale_train = 1
0.00.601.634 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.634 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.635 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.635 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.635 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.635 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.636 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.636 I llm_load_print_meta: model type       = 2B
0.00.601.638 I llm_load_print_meta: model ftype      = Q8_0
0.00.601.639 I llm_load_print_meta: model params     = 2.51 B
0.00.601.640 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.601.640 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.654 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.655 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.656 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.657 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.657 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.669 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.675 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.677 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.685 I llm_load_print_meta: max token length = 93
0.00.601.855 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.697.044 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.702.740 I llama_new_context_with_model: n_ctx      = 8192
0.00.702.748 I llama_new_context_with_model: n_batch    = 2048
0.00.702.748 I llama_new_context_with_model: n_ubatch   = 512
0.00.702.749 I llama_new_context_with_model: flash_attn = 0
0.00.702.751 I llama_new_context_with_model: freq_base  = 10000.0
0.00.702.752 I llama_new_context_with_model: freq_scale = 1
0.00.732.151 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.732.197 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.732.310 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.673 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.733.678 I llama_new_context_with_model: graph nodes  = 601
0.00.733.679 I llama_new_context_with_model: graph splits = 1
0.00.733.695 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.343.156 I main: llama threadpool init, n_threads = 4
0.01.343.169 I 
0.01.343.277 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.343.282 I 
0.01.343.465 I sampler seed: 1764670637
0.01.343.476 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.483 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.343.484 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.484 I 
 increasities.

I am unable to generate text that violates our policies. [end of text]


0.08.090.797 I llama_perf_sampler_print:    sampling time =      24.81 ms /    17 runs   (    1.46 ms per token,   685.18 tokens per second)
0.08.090.800 I llama_perf_context_print:        load time =    1340.21 ms
0.08.090.802 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.090.804 I llama_perf_context_print:        eval time =    6704.73 ms /    16 runs   (  419.05 ms per token,     2.39 tokens per second)
0.08.090.805 I llama_perf_context_print:       total time =    6747.65 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 3932 (21942002) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.763 I main: load the model and apply lora adapter, if any
0.00.024.704 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.910 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.997 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.007 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.009 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.013 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.015 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.016 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.017 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.018 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.019 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.027 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.030 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.031 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.032 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.033 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.163.259 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.270.315 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.288.528 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.288.536 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.288.537 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.288.538 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.288.539 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.288.540 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.288.541 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.288.545 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.288.546 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.288.547 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.288.548 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.288.550 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.288.558 I llama_model_loader: - type  f32:   37 tensors
0.00.288.561 I llama_model_loader: - type q8_0:  127 tensors
0.00.483.635 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.530.244 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.532.246 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.538.149 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.550.649 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.551.627 I llm_load_vocab: special tokens cache size = 5
0.00.663.892 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.663.981 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.663.985 I llm_load_print_meta: arch             = gemma
0.00.663.986 I llm_load_print_meta: vocab type       = SPM
0.00.663.987 I llm_load_print_meta: n_vocab          = 256000
0.00.663.990 I llm_load_print_meta: n_merges         = 0
0.00.663.990 I llm_load_print_meta: vocab_only       = 0
0.00.663.991 I llm_load_print_meta: n_ctx_train      = 8192
0.00.663.992 I llm_load_print_meta: n_embd           = 2048
0.00.663.992 I llm_load_print_meta: n_layer          = 18
0.00.664.061 I llm_load_print_meta: n_head           = 8
0.00.664.073 I llm_load_print_meta: n_head_kv        = 1
0.00.664.074 I llm_load_print_meta: n_rot            = 256
0.00.664.074 I llm_load_print_meta: n_swa            = 0
0.00.664.075 I llm_load_print_meta: n_embd_head_k    = 256
0.00.664.075 I llm_load_print_meta: n_embd_head_v    = 256
0.00.664.083 I llm_load_print_meta: n_gqa            = 8
0.00.664.090 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.664.100 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.664.102 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.664.103 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.664.104 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.664.105 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.664.106 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.664.114 I llm_load_print_meta: n_ff             = 16384
0.00.664.115 I llm_load_print_meta: n_expert         = 0
0.00.664.117 I llm_load_print_meta: n_expert_used    = 0
0.00.664.118 I llm_load_print_meta: causal attn      = 1
0.00.664.118 I llm_load_print_meta: pooling type     = 0
0.00.664.118 I llm_load_print_meta: rope type        = 2
0.00.664.119 I llm_load_print_meta: rope scaling     = linear
0.00.664.121 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.664.123 I llm_load_print_meta: freq_scale_train = 1
0.00.664.124 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.664.125 I llm_load_print_meta: rope_finetuned   = unknown
0.00.664.126 I llm_load_print_meta: ssm_d_conv       = 0
0.00.664.126 I llm_load_print_meta: ssm_d_inner      = 0
0.00.664.127 I llm_load_print_meta: ssm_d_state      = 0
0.00.664.128 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.664.129 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.664.131 I llm_load_print_meta: model type       = 2B
0.00.664.133 I llm_load_print_meta: model ftype      = Q8_0
0.00.664.134 I llm_load_print_meta: model params     = 2.51 B
0.00.664.135 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.664.136 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.664.137 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.664.137 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.664.139 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.664.139 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.664.140 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.664.141 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.664.147 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.664.149 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.664.150 I llm_load_print_meta: max token length = 93
0.00.664.338 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.743.592 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.743.605 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.743.606 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.743.607 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.743.608 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.743.609 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.749.483 I llama_new_context_with_model: n_ctx      = 8192
0.00.749.491 I llama_new_context_with_model: n_batch    = 2048
0.00.749.492 I llama_new_context_with_model: n_ubatch   = 512
0.00.749.492 I llama_new_context_with_model: flash_attn = 0
0.00.749.496 I llama_new_context_with_model: freq_base  = 10000.0
0.00.749.497 I llama_new_context_with_model: freq_scale = 1
0.00.778.176 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.778.229 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.778.348 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.779.779 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.779.785 I llama_new_context_with_model: graph nodes  = 601
0.00.779.785 I llama_new_context_with_model: graph splits = 1
0.00.779.804 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.423.415 I main: llama threadpool init, n_threads = 4
0.01.423.430 I 
0.01.423.550 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.423.554 I 
0.01.423.736 I sampler seed: 3349760025
0.01.423.758 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.423.770 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.423.775 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.423.777 I 
 increasities and anxieties are rooted in the need to feel safe and secure.

This statement is consistent with:

a) Cognitive theory
b) Biological theory

0.14.932.113 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.70 tokens per second)
0.14.932.126 I llama_perf_context_print:        load time =    1420.56 ms
0.14.932.129 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.932.131 I llama_perf_context_print:        eval time =   13426.87 ms /    32 runs   (  419.59 ms per token,     2.38 tokens per second)
0.14.932.132 I llama_perf_context_print:       total time =   13508.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 3932 (21942002) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.002.822 I main: load the model and apply lora adapter, if any
0.00.025.059 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.276 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.368 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.381 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.383 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.387 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.391 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.392 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.393 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.394 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.395 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.403 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.404 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.405 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.406 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.407 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.204 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.783 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.773 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.782 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.783 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.784 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.785 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.786 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.787 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.791 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.792 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.793 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.794 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.795 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.804 I llama_model_loader: - type  f32:   37 tensors
0.00.266.807 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.105 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.491.577 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.493.410 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.498.867 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.511.085 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.054 I llm_load_vocab: special tokens cache size = 5
0.00.608.288 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.364 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.364 I llm_load_print_meta: arch             = gemma
0.00.608.365 I llm_load_print_meta: vocab type       = SPM
0.00.608.366 I llm_load_print_meta: n_vocab          = 256000
0.00.608.368 I llm_load_print_meta: n_merges         = 0
0.00.608.368 I llm_load_print_meta: vocab_only       = 0
0.00.608.369 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.369 I llm_load_print_meta: n_embd           = 2048
0.00.608.370 I llm_load_print_meta: n_layer          = 18
0.00.608.432 I llm_load_print_meta: n_head           = 8
0.00.608.440 I llm_load_print_meta: n_head_kv        = 1
0.00.608.441 I llm_load_print_meta: n_rot            = 256
0.00.608.441 I llm_load_print_meta: n_swa            = 0
0.00.608.442 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.442 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.447 I llm_load_print_meta: n_gqa            = 8
0.00.608.451 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.456 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.457 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.458 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.459 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.459 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.459 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.464 I llm_load_print_meta: n_ff             = 16384
0.00.608.465 I llm_load_print_meta: n_expert         = 0
0.00.608.465 I llm_load_print_meta: n_expert_used    = 0
0.00.608.466 I llm_load_print_meta: causal attn      = 1
0.00.608.466 I llm_load_print_meta: pooling type     = 0
0.00.608.466 I llm_load_print_meta: rope type        = 2
0.00.608.467 I llm_load_print_meta: rope scaling     = linear
0.00.608.469 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.469 I llm_load_print_meta: freq_scale_train = 1
0.00.608.470 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.470 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.470 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.471 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.471 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.471 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.471 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.472 I llm_load_print_meta: model type       = 2B
0.00.608.473 I llm_load_print_meta: model ftype      = Q8_0
0.00.608.474 I llm_load_print_meta: model params     = 2.51 B
0.00.608.474 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.608.475 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.475 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.476 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.476 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.477 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.477 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.477 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.483 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.485 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.485 I llm_load_print_meta: max token length = 93
0.00.608.652 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.679.882 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.679.892 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.685.661 I llama_new_context_with_model: n_ctx      = 8192
0.00.685.671 I llama_new_context_with_model: n_batch    = 2048
0.00.685.671 I llama_new_context_with_model: n_ubatch   = 512
0.00.685.672 I llama_new_context_with_model: flash_attn = 0
0.00.685.677 I llama_new_context_with_model: freq_base  = 10000.0
0.00.685.678 I llama_new_context_with_model: freq_scale = 1
0.00.715.061 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.715.108 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.715.222 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.577 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.716.582 I llama_new_context_with_model: graph nodes  = 601
0.00.716.583 I llama_new_context_with_model: graph splits = 1
0.00.716.600 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.325.604 I main: llama threadpool init, n_threads = 4
0.01.325.617 I 
0.01.325.721 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.325.724 I 
0.01.325.905 I sampler seed: 3419243662
0.01.325.916 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.325.923 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.325.924 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.325.925 I 
 increasities, and sexual harassment. [end of text]


0.04.715.480 I llama_perf_sampler_print:    sampling time =      12.41 ms /     9 runs   (    1.38 ms per token,   725.22 tokens per second)
0.04.715.482 I llama_perf_context_print:        load time =    1322.68 ms
0.04.715.484 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.715.485 I llama_perf_context_print:        eval time =    3368.14 ms /     8 runs   (  421.02 ms per token,     2.38 tokens per second)
0.04.715.486 I llama_perf_context_print:       total time =    3389.89 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m52.190s
user	2m41.104s
sys	0m9.494s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3932 (21942002)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 197900.39 ms
main:    total time = 197900.39 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 3932 (21942002) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.025.378 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.587 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.670 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.680 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.681 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.685 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.687 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.687 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.689 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.689 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.690 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.696 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.697 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.698 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.699 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.701 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.199 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.557 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.559 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.567 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.568 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.569 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.570 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.571 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.574 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.577 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.578 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.579 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.580 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.581 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.599 I llama_model_loader: - type  f32:   37 tensors
0.00.267.604 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.618 I llama_model_loader: - type q6_K:   19 tensors
0.00.438.792 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.482.451 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.484.211 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.489.426 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.500.659 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.632 I llm_load_vocab: special tokens cache size = 5
0.00.612.491 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.559 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.563 I llm_load_print_meta: arch             = gemma
0.00.612.564 I llm_load_print_meta: vocab type       = SPM
0.00.612.565 I llm_load_print_meta: n_vocab          = 256000
0.00.612.567 I llm_load_print_meta: n_merges         = 0
0.00.612.568 I llm_load_print_meta: vocab_only       = 0
0.00.612.568 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.568 I llm_load_print_meta: n_embd           = 2048
0.00.612.569 I llm_load_print_meta: n_layer          = 18
0.00.612.630 I llm_load_print_meta: n_head           = 8
0.00.612.640 I llm_load_print_meta: n_head_kv        = 1
0.00.612.640 I llm_load_print_meta: n_rot            = 256
0.00.612.642 I llm_load_print_meta: n_swa            = 0
0.00.612.642 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.642 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.647 I llm_load_print_meta: n_gqa            = 8
0.00.612.652 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.657 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.661 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.662 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.663 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.663 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.664 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.668 I llm_load_print_meta: n_ff             = 16384
0.00.612.669 I llm_load_print_meta: n_expert         = 0
0.00.612.669 I llm_load_print_meta: n_expert_used    = 0
0.00.612.670 I llm_load_print_meta: causal attn      = 1
0.00.612.670 I llm_load_print_meta: pooling type     = 0
0.00.612.671 I llm_load_print_meta: rope type        = 2
0.00.612.671 I llm_load_print_meta: rope scaling     = linear
0.00.612.672 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.673 I llm_load_print_meta: freq_scale_train = 1
0.00.612.673 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.674 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.674 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.674 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.674 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.675 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.677 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.677 I llm_load_print_meta: model type       = 2B
0.00.612.679 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.612.679 I llm_load_print_meta: model params     = 2.51 B
0.00.612.680 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.612.680 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.681 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.681 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.682 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.683 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.683 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.683 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.698 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.699 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.712 I llm_load_print_meta: max token length = 93
0.00.612.882 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.673.714 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.673.724 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.673.725 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.673.726 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.673.726 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.673.727 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.679.452 I llama_new_context_with_model: n_ctx      = 8192
0.00.679.461 I llama_new_context_with_model: n_batch    = 2048
0.00.679.461 I llama_new_context_with_model: n_ubatch   = 512
0.00.679.462 I llama_new_context_with_model: flash_attn = 0
0.00.679.466 I llama_new_context_with_model: freq_base  = 10000.0
0.00.679.466 I llama_new_context_with_model: freq_scale = 1
0.00.710.512 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.710.553 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.710.666 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.078 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.712.083 I llama_new_context_with_model: graph nodes  = 601
0.00.712.083 I llama_new_context_with_model: graph splits = 1
0.00.712.099 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.291.704 I main: llama threadpool init, n_threads = 4
0.01.291.718 I 
0.01.291.823 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.291.828 I 
0.01.292.006 I sampler seed: 3787913855
0.01.292.018 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.292.026 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.292.026 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.292.026 I 
 seconally!

I am unable to generate a response that is both informative and humorous. [end of text]


0.07.775.553 I llama_perf_sampler_print:    sampling time =      29.17 ms /    20 runs   (    1.46 ms per token,   685.66 tokens per second)
0.07.775.556 I llama_perf_context_print:        load time =    1288.84 ms
0.07.775.557 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.775.559 I llama_perf_context_print:        eval time =    6434.40 ms /    19 runs   (  338.65 ms per token,     2.95 tokens per second)
0.07.775.572 I llama_perf_context_print:       total time =    6483.86 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3932 (21942002)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 197727.79 ms
main:    total time = 197727.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.697 I build: 3932 (21942002) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.892 I main: llama backend init
0.00.002.829 I main: load the model and apply lora adapter, if any
0.00.024.812 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.903 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.916 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.918 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.922 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.926 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.927 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.928 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.929 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.930 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.936 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.937 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.938 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.940 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.941 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.586 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.109 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.054 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.062 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.063 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.064 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.065 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.066 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.068 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.071 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.072 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.081 I llama_model_loader: - type  f32:   37 tensors
0.00.267.085 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.086 I llama_model_loader: - type q6_K:   19 tensors
0.00.453.598 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.643 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.497.312 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.502.333 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.513.353 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.270 I llm_load_vocab: special tokens cache size = 5
0.00.615.697 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.771 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.772 I llm_load_print_meta: arch             = gemma
0.00.615.773 I llm_load_print_meta: vocab type       = SPM
0.00.615.774 I llm_load_print_meta: n_vocab          = 256000
0.00.615.776 I llm_load_print_meta: n_merges         = 0
0.00.615.776 I llm_load_print_meta: vocab_only       = 0
0.00.615.777 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.777 I llm_load_print_meta: n_embd           = 2048
0.00.615.777 I llm_load_print_meta: n_layer          = 18
0.00.615.841 I llm_load_print_meta: n_head           = 8
0.00.615.848 I llm_load_print_meta: n_head_kv        = 1
0.00.615.849 I llm_load_print_meta: n_rot            = 256
0.00.615.849 I llm_load_print_meta: n_swa            = 0
0.00.615.850 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.850 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.855 I llm_load_print_meta: n_gqa            = 8
0.00.615.859 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.864 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.865 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.867 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.867 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.868 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.868 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.873 I llm_load_print_meta: n_ff             = 16384
0.00.615.873 I llm_load_print_meta: n_expert         = 0
0.00.615.874 I llm_load_print_meta: n_expert_used    = 0
0.00.615.875 I llm_load_print_meta: causal attn      = 1
0.00.615.875 I llm_load_print_meta: pooling type     = 0
0.00.615.876 I llm_load_print_meta: rope type        = 2
0.00.615.877 I llm_load_print_meta: rope scaling     = linear
0.00.615.879 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.880 I llm_load_print_meta: freq_scale_train = 1
0.00.615.881 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.881 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.882 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.883 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.883 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.883 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.884 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.884 I llm_load_print_meta: model type       = 2B
0.00.615.885 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.615.886 I llm_load_print_meta: model params     = 2.51 B
0.00.615.887 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.615.887 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.888 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.889 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.890 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.890 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.890 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.891 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.897 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.898 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.898 I llm_load_print_meta: max token length = 93
0.00.616.066 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.674.409 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.680.063 I llama_new_context_with_model: n_ctx      = 8192
0.00.680.071 I llama_new_context_with_model: n_batch    = 2048
0.00.680.072 I llama_new_context_with_model: n_ubatch   = 512
0.00.680.072 I llama_new_context_with_model: flash_attn = 0
0.00.680.076 I llama_new_context_with_model: freq_base  = 10000.0
0.00.680.077 I llama_new_context_with_model: freq_scale = 1
0.00.710.009 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.710.053 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.710.173 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.711.578 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.711.583 I llama_new_context_with_model: graph nodes  = 601
0.00.711.583 I llama_new_context_with_model: graph splits = 1
0.00.711.600 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.290.337 I main: llama threadpool init, n_threads = 4
0.01.290.349 I 
0.01.290.455 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.290.459 I 
0.01.290.641 I sampler seed: 2241490955
0.01.290.652 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.290.659 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.290.660 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.290.660 I 
 squaRED text. The text is obfuscated and contains hidden clues.

I have heard whispers of a hidden chamber beneath the ancient oak tree.

The whispers

0.12.218.656 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.32 tokens per second)
0.12.218.660 I llama_perf_context_print:        load time =    1287.42 ms
0.12.218.661 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.218.663 I llama_perf_context_print:        eval time =   10846.62 ms /    32 runs   (  338.96 ms per token,     2.95 tokens per second)
0.12.218.664 I llama_perf_context_print:       total time =   10928.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m58.472s
user	49m35.632s
sys	0m6.284s
