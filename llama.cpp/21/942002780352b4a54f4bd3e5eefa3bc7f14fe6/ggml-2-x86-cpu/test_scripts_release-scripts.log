+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.579 I build: 3932 (21942002) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.001.906 I main: load the model and apply lora adapter, if any
0.00.022.369 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.419 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.430 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.436 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.440 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.443 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.444 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.445 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.445 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.446 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.447 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.452 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.452 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.453 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.453 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.454 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.103 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.339 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.206 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.212 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.213 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.214 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.215 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.215 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.216 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.219 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.219 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.220 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.220 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.221 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.223 I llama_model_loader: - type  f32:   37 tensors
0.00.132.228 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.509 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.230.897 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.231.984 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.235.233 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.241.762 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.231 I llm_load_vocab: special tokens cache size = 5
0.00.262.644 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.661 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.662 I llm_load_print_meta: arch             = gemma
0.00.262.663 I llm_load_print_meta: vocab type       = SPM
0.00.262.663 I llm_load_print_meta: n_vocab          = 256000
0.00.262.664 I llm_load_print_meta: n_merges         = 0
0.00.262.664 I llm_load_print_meta: vocab_only       = 0
0.00.262.664 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.664 I llm_load_print_meta: n_embd           = 2048
0.00.262.665 I llm_load_print_meta: n_layer          = 18
0.00.262.676 I llm_load_print_meta: n_head           = 8
0.00.262.677 I llm_load_print_meta: n_head_kv        = 1
0.00.262.678 I llm_load_print_meta: n_rot            = 256
0.00.262.678 I llm_load_print_meta: n_swa            = 0
0.00.262.678 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.678 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.679 I llm_load_print_meta: n_gqa            = 8
0.00.262.680 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.681 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.682 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.683 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.684 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.684 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.684 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.685 I llm_load_print_meta: n_ff             = 16384
0.00.262.686 I llm_load_print_meta: n_expert         = 0
0.00.262.686 I llm_load_print_meta: n_expert_used    = 0
0.00.262.686 I llm_load_print_meta: causal attn      = 1
0.00.262.686 I llm_load_print_meta: pooling type     = 0
0.00.262.687 I llm_load_print_meta: rope type        = 2
0.00.262.687 I llm_load_print_meta: rope scaling     = linear
0.00.262.688 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.689 I llm_load_print_meta: freq_scale_train = 1
0.00.262.690 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.690 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.690 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.690 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.690 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.691 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.691 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.691 I llm_load_print_meta: model type       = 2B
0.00.262.692 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.693 I llm_load_print_meta: model params     = 2.51 B
0.00.262.694 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.694 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.695 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.695 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.696 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.696 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.696 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.696 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.697 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.697 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.697 I llm_load_print_meta: max token length = 93
0.00.262.716 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.362.239 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.362.248 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.362.249 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.362.249 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.362.250 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.362.251 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.367.386 I llama_new_context_with_model: n_ctx      = 8192
0.00.367.392 I llama_new_context_with_model: n_batch    = 2048
0.00.367.393 I llama_new_context_with_model: n_ubatch   = 512
0.00.367.393 I llama_new_context_with_model: flash_attn = 0
0.00.367.396 I llama_new_context_with_model: freq_base  = 10000.0
0.00.367.397 I llama_new_context_with_model: freq_scale = 1
0.00.396.562 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.396.579 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.396.682 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.572 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.397.580 I llama_new_context_with_model: graph nodes  = 601
0.00.397.580 I llama_new_context_with_model: graph splits = 1
0.00.397.582 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.487.957 I main: llama threadpool init, n_threads = 4
0.00.487.972 I 
0.00.488.049 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.488.052 I 
0.00.488.091 I sampler seed: 2939461255
0.00.488.100 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.488.104 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.488.104 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.488.104 I 
 increasities. [end of text]


0.00.768.948 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7898.89 tokens per second)
0.00.768.950 I llama_perf_context_print:        load time =     486.03 ms
0.00.768.952 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.768.953 I llama_perf_context_print:        eval time =     277.56 ms /     4 runs   (   69.39 ms per token,    14.41 tokens per second)
0.00.768.954 I llama_perf_context_print:       total time =     281.00 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.570 I build: 3932 (21942002) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.793 I main: llama backend init
0.00.001.892 I main: load the model and apply lora adapter, if any
0.00.021.963 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.978 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.985 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.986 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.990 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.991 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.991 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.992 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.993 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.993 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.998 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.999 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.999 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.000 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.001 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.211 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.297 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.128 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.134 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.135 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.135 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.136 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.137 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.137 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.139 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.140 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.140 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.141 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.142 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.145 I llama_model_loader: - type  f32:   37 tensors
0.00.131.147 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.979 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.229.933 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.231.074 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.234.455 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.241.008 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.473 I llm_load_vocab: special tokens cache size = 5
0.00.261.936 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.950 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.950 I llm_load_print_meta: arch             = gemma
0.00.261.951 I llm_load_print_meta: vocab type       = SPM
0.00.261.951 I llm_load_print_meta: n_vocab          = 256000
0.00.261.952 I llm_load_print_meta: n_merges         = 0
0.00.261.952 I llm_load_print_meta: vocab_only       = 0
0.00.261.952 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.953 I llm_load_print_meta: n_embd           = 2048
0.00.261.954 I llm_load_print_meta: n_layer          = 18
0.00.261.964 I llm_load_print_meta: n_head           = 8
0.00.261.965 I llm_load_print_meta: n_head_kv        = 1
0.00.261.966 I llm_load_print_meta: n_rot            = 256
0.00.261.966 I llm_load_print_meta: n_swa            = 0
0.00.261.966 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.967 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.968 I llm_load_print_meta: n_gqa            = 8
0.00.261.969 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.969 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.970 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.972 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.972 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.972 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.973 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.973 I llm_load_print_meta: n_ff             = 16384
0.00.261.974 I llm_load_print_meta: n_expert         = 0
0.00.261.974 I llm_load_print_meta: n_expert_used    = 0
0.00.261.974 I llm_load_print_meta: causal attn      = 1
0.00.261.975 I llm_load_print_meta: pooling type     = 0
0.00.261.975 I llm_load_print_meta: rope type        = 2
0.00.261.975 I llm_load_print_meta: rope scaling     = linear
0.00.261.977 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.977 I llm_load_print_meta: freq_scale_train = 1
0.00.261.978 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.978 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.978 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.979 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.979 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.979 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.979 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.980 I llm_load_print_meta: model type       = 2B
0.00.261.980 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.981 I llm_load_print_meta: model params     = 2.51 B
0.00.261.982 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.983 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.983 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.983 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.984 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.984 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.984 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.984 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.985 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.985 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.985 I llm_load_print_meta: max token length = 93
0.00.262.005 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.355.780 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.360.811 I llama_new_context_with_model: n_ctx      = 8192
0.00.360.817 I llama_new_context_with_model: n_batch    = 2048
0.00.360.817 I llama_new_context_with_model: n_ubatch   = 512
0.00.360.817 I llama_new_context_with_model: flash_attn = 0
0.00.360.820 I llama_new_context_with_model: freq_base  = 10000.0
0.00.360.820 I llama_new_context_with_model: freq_scale = 1
0.00.389.393 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.389.409 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.389.503 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.366 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.390.374 I llama_new_context_with_model: graph nodes  = 601
0.00.390.374 I llama_new_context_with_model: graph splits = 1
0.00.390.376 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.153 I main: llama threadpool init, n_threads = 4
0.00.477.168 I 
0.00.477.243 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.477.246 I 
0.00.477.284 I sampler seed: 1770804484
0.00.477.294 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.296 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.477.297 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.297 I 
 seconary rule, also known as the quotient rule, states that if a function is continuous at a point x and the limit of the function's values as

0.02.637.700 I llama_perf_sampler_print:    sampling time =       4.58 ms /    33 runs   (    0.14 ms per token,  7197.38 tokens per second)
0.02.637.703 I llama_perf_context_print:        load time =     475.24 ms
0.02.637.704 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.637.705 I llama_perf_context_print:        eval time =    2142.88 ms /    32 runs   (   66.97 ms per token,    14.93 tokens per second)
0.02.637.706 I llama_perf_context_print:       total time =    2160.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.519 I build: 3932 (21942002) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.001.825 I main: load the model and apply lora adapter, if any
0.00.021.681 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.727 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.737 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.742 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.743 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.746 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.748 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.748 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.749 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.750 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.751 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.754 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.755 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.755 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.756 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.756 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.352 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.952 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.788 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.794 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.795 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.796 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.797 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.798 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.799 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.802 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.803 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.804 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.804 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.805 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.808 I llama_model_loader: - type  f32:   37 tensors
0.00.130.811 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.277 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.915 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.244.124 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.247.738 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.255.079 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.620 I llm_load_vocab: special tokens cache size = 5
0.00.276.133 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.150 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.150 I llm_load_print_meta: arch             = gemma
0.00.276.151 I llm_load_print_meta: vocab type       = SPM
0.00.276.151 I llm_load_print_meta: n_vocab          = 256000
0.00.276.152 I llm_load_print_meta: n_merges         = 0
0.00.276.152 I llm_load_print_meta: vocab_only       = 0
0.00.276.152 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.153 I llm_load_print_meta: n_embd           = 2048
0.00.276.153 I llm_load_print_meta: n_layer          = 18
0.00.276.165 I llm_load_print_meta: n_head           = 8
0.00.276.166 I llm_load_print_meta: n_head_kv        = 1
0.00.276.167 I llm_load_print_meta: n_rot            = 256
0.00.276.168 I llm_load_print_meta: n_swa            = 0
0.00.276.168 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.169 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.170 I llm_load_print_meta: n_gqa            = 8
0.00.276.171 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.172 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.173 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.175 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.175 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.176 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.176 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.177 I llm_load_print_meta: n_ff             = 16384
0.00.276.177 I llm_load_print_meta: n_expert         = 0
0.00.276.177 I llm_load_print_meta: n_expert_used    = 0
0.00.276.178 I llm_load_print_meta: causal attn      = 1
0.00.276.178 I llm_load_print_meta: pooling type     = 0
0.00.276.179 I llm_load_print_meta: rope type        = 2
0.00.276.180 I llm_load_print_meta: rope scaling     = linear
0.00.276.181 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.182 I llm_load_print_meta: freq_scale_train = 1
0.00.276.182 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.183 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.183 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.183 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.183 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.184 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.184 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.185 I llm_load_print_meta: model type       = 2B
0.00.276.185 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.186 I llm_load_print_meta: model params     = 2.51 B
0.00.276.187 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.188 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.189 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.190 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.190 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.191 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.191 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.191 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.192 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.193 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.193 I llm_load_print_meta: max token length = 93
0.00.276.212 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.351.794 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.351.801 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.351.803 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.351.803 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.351.804 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.351.805 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.356.741 I llama_new_context_with_model: n_ctx      = 8192
0.00.356.747 I llama_new_context_with_model: n_batch    = 2048
0.00.356.748 I llama_new_context_with_model: n_ubatch   = 512
0.00.356.748 I llama_new_context_with_model: flash_attn = 0
0.00.356.750 I llama_new_context_with_model: freq_base  = 10000.0
0.00.356.752 I llama_new_context_with_model: freq_scale = 1
0.00.385.503 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.385.518 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.385.610 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.493 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.386.502 I llama_new_context_with_model: graph nodes  = 601
0.00.386.502 I llama_new_context_with_model: graph splits = 1
0.00.386.504 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.000 I main: llama threadpool init, n_threads = 4
0.00.478.015 I 
0.00.478.089 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.478.093 I 
0.00.478.132 I sampler seed: 1591259079
0.00.478.142 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.146 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.478.147 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.147 I 
 increasities!

I cannot answer this question because it contains sexually suggestive language that is inappropriate for me to respond to. [end of text]


0.02.261.906 I llama_perf_sampler_print:    sampling time =       3.74 ms /    26 runs   (    0.14 ms per token,  6946.30 tokens per second)
0.02.261.909 I llama_perf_context_print:        load time =     476.15 ms
0.02.261.911 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.261.912 I llama_perf_context_print:        eval time =    1769.02 ms /    25 runs   (   70.76 ms per token,    14.13 tokens per second)
0.02.261.914 I llama_perf_context_print:       total time =    1783.91 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.555 I build: 3932 (21942002) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.001.848 I main: load the model and apply lora adapter, if any
0.00.021.807 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.854 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.864 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.869 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.869 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.873 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.874 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.874 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.875 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.875 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.876 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.881 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.881 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.882 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.882 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.883 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.566 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.236 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.111 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.118 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.118 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.119 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.119 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.120 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.121 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.124 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.124 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.125 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.125 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.126 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.129 I llama_model_loader: - type  f32:   37 tensors
0.00.132.133 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.094 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.230.281 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.231.284 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.234.331 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.240.276 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.732 I llm_load_vocab: special tokens cache size = 5
0.00.261.166 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.182 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.183 I llm_load_print_meta: arch             = gemma
0.00.261.183 I llm_load_print_meta: vocab type       = SPM
0.00.261.184 I llm_load_print_meta: n_vocab          = 256000
0.00.261.184 I llm_load_print_meta: n_merges         = 0
0.00.261.185 I llm_load_print_meta: vocab_only       = 0
0.00.261.185 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.185 I llm_load_print_meta: n_embd           = 2048
0.00.261.186 I llm_load_print_meta: n_layer          = 18
0.00.261.196 I llm_load_print_meta: n_head           = 8
0.00.261.197 I llm_load_print_meta: n_head_kv        = 1
0.00.261.198 I llm_load_print_meta: n_rot            = 256
0.00.261.198 I llm_load_print_meta: n_swa            = 0
0.00.261.198 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.198 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.199 I llm_load_print_meta: n_gqa            = 8
0.00.261.200 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.201 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.202 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.204 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.204 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.204 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.205 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.206 I llm_load_print_meta: n_ff             = 16384
0.00.261.206 I llm_load_print_meta: n_expert         = 0
0.00.261.206 I llm_load_print_meta: n_expert_used    = 0
0.00.261.206 I llm_load_print_meta: causal attn      = 1
0.00.261.207 I llm_load_print_meta: pooling type     = 0
0.00.261.207 I llm_load_print_meta: rope type        = 2
0.00.261.207 I llm_load_print_meta: rope scaling     = linear
0.00.261.209 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.209 I llm_load_print_meta: freq_scale_train = 1
0.00.261.210 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.210 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.210 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.211 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.211 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.212 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.212 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.213 I llm_load_print_meta: model type       = 2B
0.00.261.213 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.214 I llm_load_print_meta: model params     = 2.51 B
0.00.261.215 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.215 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.216 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.216 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.217 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.217 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.217 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.218 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.218 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.219 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.219 I llm_load_print_meta: max token length = 93
0.00.261.238 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.331.402 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.331.410 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.336.359 I llama_new_context_with_model: n_ctx      = 8192
0.00.336.364 I llama_new_context_with_model: n_batch    = 2048
0.00.336.365 I llama_new_context_with_model: n_ubatch   = 512
0.00.336.365 I llama_new_context_with_model: flash_attn = 0
0.00.336.367 I llama_new_context_with_model: freq_base  = 10000.0
0.00.336.368 I llama_new_context_with_model: freq_scale = 1
0.00.364.770 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.364.784 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.364.875 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.732 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.365.740 I llama_new_context_with_model: graph nodes  = 601
0.00.365.740 I llama_new_context_with_model: graph splits = 1
0.00.365.742 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.295 I main: llama threadpool init, n_threads = 4
0.00.460.309 I 
0.00.460.400 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.460.405 I 
0.00.460.446 I sampler seed: 49557317
0.00.460.456 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.459 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.460.460 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.460 I 
 increasities in their quest for dominance and survival.

The answer is competition.

Competition is a natural phenomenon that drives individuals and organizations to strive for excellence and

0.02.873.172 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7007.86 tokens per second)
0.02.873.174 I llama_perf_context_print:        load time =     458.43 ms
0.02.873.175 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.873.177 I llama_perf_context_print:        eval time =    2395.02 ms /    32 runs   (   74.84 ms per token,    13.36 tokens per second)
0.02.873.177 I llama_perf_context_print:       total time =    2412.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.959s
user	0m29.337s
sys	0m9.380s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3932 (21942002)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32029.04 ms
main:    total time = 32029.04 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.530 I build: 3932 (21942002) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.718 I main: llama backend init
0.00.001.832 I main: load the model and apply lora adapter, if any
0.00.021.996 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.044 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.052 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.057 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.058 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.060 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.061 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.061 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.062 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.062 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.063 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.066 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.067 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.067 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.068 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.068 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.672 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.841 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.728 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.734 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.734 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.735 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.736 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.737 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.737 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.739 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.740 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.740 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.741 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.743 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.746 I llama_model_loader: - type  f32:   37 tensors
0.00.131.749 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.751 I llama_model_loader: - type q6_K:   19 tensors
0.00.220.114 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.240 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.254.677 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.259.142 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.268.145 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.758 I llm_load_vocab: special tokens cache size = 5
0.00.289.320 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.336 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.337 I llm_load_print_meta: arch             = gemma
0.00.289.337 I llm_load_print_meta: vocab type       = SPM
0.00.289.338 I llm_load_print_meta: n_vocab          = 256000
0.00.289.339 I llm_load_print_meta: n_merges         = 0
0.00.289.339 I llm_load_print_meta: vocab_only       = 0
0.00.289.339 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.340 I llm_load_print_meta: n_embd           = 2048
0.00.289.340 I llm_load_print_meta: n_layer          = 18
0.00.289.352 I llm_load_print_meta: n_head           = 8
0.00.289.353 I llm_load_print_meta: n_head_kv        = 1
0.00.289.354 I llm_load_print_meta: n_rot            = 256
0.00.289.354 I llm_load_print_meta: n_swa            = 0
0.00.289.354 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.355 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.356 I llm_load_print_meta: n_gqa            = 8
0.00.289.357 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.358 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.359 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.360 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.360 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.361 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.361 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.362 I llm_load_print_meta: n_ff             = 16384
0.00.289.362 I llm_load_print_meta: n_expert         = 0
0.00.289.362 I llm_load_print_meta: n_expert_used    = 0
0.00.289.363 I llm_load_print_meta: causal attn      = 1
0.00.289.364 I llm_load_print_meta: pooling type     = 0
0.00.289.364 I llm_load_print_meta: rope type        = 2
0.00.289.364 I llm_load_print_meta: rope scaling     = linear
0.00.289.365 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.366 I llm_load_print_meta: freq_scale_train = 1
0.00.289.366 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.367 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.367 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.367 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.367 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.368 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.368 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.368 I llm_load_print_meta: model type       = 2B
0.00.289.369 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.289.370 I llm_load_print_meta: model params     = 2.51 B
0.00.289.370 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.289.371 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.371 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.371 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.371 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.372 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.372 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.372 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.373 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.373 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.374 I llm_load_print_meta: max token length = 93
0.00.289.395 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.348.372 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.348.378 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.348.379 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.348.380 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.348.380 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.348.381 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.353.483 I llama_new_context_with_model: n_ctx      = 8192
0.00.353.490 I llama_new_context_with_model: n_batch    = 2048
0.00.353.490 I llama_new_context_with_model: n_ubatch   = 512
0.00.353.491 I llama_new_context_with_model: flash_attn = 0
0.00.353.493 I llama_new_context_with_model: freq_base  = 10000.0
0.00.353.494 I llama_new_context_with_model: freq_scale = 1
0.00.381.725 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.381.740 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.381.833 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.745 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.382.751 I llama_new_context_with_model: graph nodes  = 601
0.00.382.751 I llama_new_context_with_model: graph splits = 1
0.00.382.753 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.142 I main: llama threadpool init, n_threads = 4
0.00.464.156 I 
0.00.464.230 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.464.234 I 
0.00.464.274 I sampler seed: 3452842209
0.00.464.285 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.291 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.464.291 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.291 I 
 squaRED text.

I am unable to provide information regarding sensitive or private data. [end of text]


0.01.352.414 I llama_perf_sampler_print:    sampling time =       2.92 ms /    19 runs   (    0.15 ms per token,  6504.62 tokens per second)
0.01.352.416 I llama_perf_context_print:        load time =     462.28 ms
0.01.352.417 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.352.419 I llama_perf_context_print:        eval time =     877.63 ms /    18 runs   (   48.76 ms per token,    20.51 tokens per second)
0.01.352.419 I llama_perf_context_print:       total time =     888.28 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3932 (21942002)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32135.21 ms
main:    total time = 32135.21 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.609 I build: 3932 (21942002) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.799 I main: llama backend init
0.00.001.937 I main: load the model and apply lora adapter, if any
0.00.022.295 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.310 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.317 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.317 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.321 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.322 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.323 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.323 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.324 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.324 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.328 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.328 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.329 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.329 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.330 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.279 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.996 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.258 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.266 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.267 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.268 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.269 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.270 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.271 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.275 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.276 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.280 I llama_model_loader: - type  f32:   37 tensors
0.00.134.283 I llama_model_loader: - type q4_K:  108 tensors
0.00.134.284 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.209 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.234.447 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.235.631 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.239.236 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.246.800 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.367 I llm_load_vocab: special tokens cache size = 5
0.00.267.824 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.839 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.839 I llm_load_print_meta: arch             = gemma
0.00.267.840 I llm_load_print_meta: vocab type       = SPM
0.00.267.841 I llm_load_print_meta: n_vocab          = 256000
0.00.267.841 I llm_load_print_meta: n_merges         = 0
0.00.267.841 I llm_load_print_meta: vocab_only       = 0
0.00.267.842 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.842 I llm_load_print_meta: n_embd           = 2048
0.00.267.842 I llm_load_print_meta: n_layer          = 18
0.00.267.853 I llm_load_print_meta: n_head           = 8
0.00.267.854 I llm_load_print_meta: n_head_kv        = 1
0.00.267.855 I llm_load_print_meta: n_rot            = 256
0.00.267.855 I llm_load_print_meta: n_swa            = 0
0.00.267.856 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.856 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.857 I llm_load_print_meta: n_gqa            = 8
0.00.267.858 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.859 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.860 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.862 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.862 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.862 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.863 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.863 I llm_load_print_meta: n_ff             = 16384
0.00.267.864 I llm_load_print_meta: n_expert         = 0
0.00.267.864 I llm_load_print_meta: n_expert_used    = 0
0.00.267.864 I llm_load_print_meta: causal attn      = 1
0.00.267.865 I llm_load_print_meta: pooling type     = 0
0.00.267.865 I llm_load_print_meta: rope type        = 2
0.00.267.865 I llm_load_print_meta: rope scaling     = linear
0.00.267.867 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.867 I llm_load_print_meta: freq_scale_train = 1
0.00.267.868 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.868 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.868 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.868 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.869 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.869 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.869 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.869 I llm_load_print_meta: model type       = 2B
0.00.267.870 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.871 I llm_load_print_meta: model params     = 2.51 B
0.00.267.872 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.873 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.873 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.873 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.874 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.874 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.874 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.875 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.875 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.875 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.876 I llm_load_print_meta: max token length = 93
0.00.267.895 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.324.396 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.329.419 I llama_new_context_with_model: n_ctx      = 8192
0.00.329.424 I llama_new_context_with_model: n_batch    = 2048
0.00.329.425 I llama_new_context_with_model: n_ubatch   = 512
0.00.329.425 I llama_new_context_with_model: flash_attn = 0
0.00.329.427 I llama_new_context_with_model: freq_base  = 10000.0
0.00.329.428 I llama_new_context_with_model: freq_scale = 1
0.00.359.025 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.359.041 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.359.131 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.975 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.359.983 I llama_new_context_with_model: graph nodes  = 601
0.00.359.983 I llama_new_context_with_model: graph splits = 1
0.00.359.985 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.439.995 I main: llama threadpool init, n_threads = 4
0.00.440.008 I 
0.00.440.085 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.440.089 I 
0.00.440.131 I sampler seed: 2486797332
0.00.440.142 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.440.145 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.440.146 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.440.146 I 
 increasively.

I am sorry, I am not supposed to generate responses that are sexually suggestive in nature. Would you like me to try generating something different?

0.02.009.086 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6741.57 tokens per second)
0.02.009.088 I llama_perf_context_print:        load time =     438.04 ms
0.02.009.089 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.009.092 I llama_perf_context_print:        eval time =    1551.42 ms /    32 runs   (   48.48 ms per token,    20.63 tokens per second)
0.02.009.093 I llama_perf_context_print:       total time =    1569.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.781s
user	8m11.520s
sys	0m6.840s
