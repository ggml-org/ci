+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 3985 (484984c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.002.815 I main: load the model and apply lora adapter, if any
0.00.024.892 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.105 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.197 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.208 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.210 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.214 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.218 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.219 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.220 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.221 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.221 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.231 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.232 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.234 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.235 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.237 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.728 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.726 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.160 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.168 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.169 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.170 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.171 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.173 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.174 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.177 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.178 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.179 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.180 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.181 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.191 I llama_model_loader: - type  f32:   37 tensors
0.00.270.194 I llama_model_loader: - type q8_0:  127 tensors
0.00.459.775 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.531.973 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.532.959 I llm_load_vocab: special tokens cache size = 5
0.00.626.508 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.626.582 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.626.583 I llm_load_print_meta: arch             = gemma
0.00.626.584 I llm_load_print_meta: vocab type       = SPM
0.00.626.585 I llm_load_print_meta: n_vocab          = 256000
0.00.626.587 I llm_load_print_meta: n_merges         = 0
0.00.626.588 I llm_load_print_meta: vocab_only       = 0
0.00.626.588 I llm_load_print_meta: n_ctx_train      = 8192
0.00.626.588 I llm_load_print_meta: n_embd           = 2048
0.00.626.589 I llm_load_print_meta: n_layer          = 18
0.00.626.651 I llm_load_print_meta: n_head           = 8
0.00.626.662 I llm_load_print_meta: n_head_kv        = 1
0.00.626.663 I llm_load_print_meta: n_rot            = 256
0.00.626.664 I llm_load_print_meta: n_swa            = 0
0.00.626.664 I llm_load_print_meta: n_embd_head_k    = 256
0.00.626.664 I llm_load_print_meta: n_embd_head_v    = 256
0.00.626.669 I llm_load_print_meta: n_gqa            = 8
0.00.626.674 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.626.679 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.626.683 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.626.684 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.626.685 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.626.685 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.626.685 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.626.691 I llm_load_print_meta: n_ff             = 16384
0.00.626.692 I llm_load_print_meta: n_expert         = 0
0.00.626.692 I llm_load_print_meta: n_expert_used    = 0
0.00.626.693 I llm_load_print_meta: causal attn      = 1
0.00.626.693 I llm_load_print_meta: pooling type     = 0
0.00.626.695 I llm_load_print_meta: rope type        = 2
0.00.626.695 I llm_load_print_meta: rope scaling     = linear
0.00.626.697 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.626.698 I llm_load_print_meta: freq_scale_train = 1
0.00.626.698 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.626.698 I llm_load_print_meta: rope_finetuned   = unknown
0.00.626.699 I llm_load_print_meta: ssm_d_conv       = 0
0.00.626.699 I llm_load_print_meta: ssm_d_inner      = 0
0.00.626.700 I llm_load_print_meta: ssm_d_state      = 0
0.00.626.701 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.626.701 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.626.702 I llm_load_print_meta: model type       = 2B
0.00.626.703 I llm_load_print_meta: model ftype      = Q8_0
0.00.626.704 I llm_load_print_meta: model params     = 2.51 B
0.00.626.705 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.626.706 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.626.708 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.626.708 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.626.709 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.626.710 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.626.710 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.626.711 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.626.737 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.626.739 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.626.740 I llm_load_print_meta: max token length = 93
0.00.738.502 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.738.511 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.738.512 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.738.513 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.738.513 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.738.514 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.744.325 I llama_new_context_with_model: n_ctx      = 8192
0.00.744.334 I llama_new_context_with_model: n_batch    = 2048
0.00.744.334 I llama_new_context_with_model: n_ubatch   = 512
0.00.744.335 I llama_new_context_with_model: flash_attn = 0
0.00.744.338 I llama_new_context_with_model: freq_base  = 10000.0
0.00.744.338 I llama_new_context_with_model: freq_scale = 1
0.00.774.851 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.774.897 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.775.017 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.778.289 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.778.294 I llama_new_context_with_model: graph nodes  = 601
0.00.778.294 I llama_new_context_with_model: graph splits = 1
0.00.778.310 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.389.177 I main: llama threadpool init, n_threads = 4
0.01.389.191 I 
0.01.389.295 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.389.299 I 
0.01.389.534 I sampler seed: 2720967582
0.01.389.546 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.389.553 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.389.555 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.389.555 I 
 increasively and carelessly, leaping from one task to another. 

His mind was a whirlwind of confusion and disarray, flitting from one thought to another

0.14.811.870 I llama_perf_sampler_print:    sampling time =      48.78 ms /    33 runs   (    1.48 ms per token,   676.55 tokens per second)
0.14.811.874 I llama_perf_context_print:        load time =    1386.26 ms
0.14.811.876 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.811.878 I llama_perf_context_print:        eval time =   13327.41 ms /    32 runs   (  416.48 ms per token,     2.40 tokens per second)
0.14.811.879 I llama_perf_context_print:       total time =   13422.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.663 I build: 3985 (484984c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.002.823 I main: load the model and apply lora adapter, if any
0.00.024.996 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.103 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.119 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.123 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.129 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.130 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.132 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.133 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.142 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.145 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.156 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.160 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.161 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.162 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.164 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.098 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.592 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.136 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.145 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.146 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.147 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.148 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.149 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.150 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.154 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.155 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.156 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.157 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.272.158 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.168 I llama_model_loader: - type  f32:   37 tensors
0.00.272.172 I llama_model_loader: - type q8_0:  127 tensors
0.00.471.609 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.541.931 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.542.894 I llm_load_vocab: special tokens cache size = 5
0.00.636.546 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.636.615 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.636.619 I llm_load_print_meta: arch             = gemma
0.00.636.619 I llm_load_print_meta: vocab type       = SPM
0.00.636.620 I llm_load_print_meta: n_vocab          = 256000
0.00.636.622 I llm_load_print_meta: n_merges         = 0
0.00.636.623 I llm_load_print_meta: vocab_only       = 0
0.00.636.623 I llm_load_print_meta: n_ctx_train      = 8192
0.00.636.623 I llm_load_print_meta: n_embd           = 2048
0.00.636.624 I llm_load_print_meta: n_layer          = 18
0.00.636.705 I llm_load_print_meta: n_head           = 8
0.00.636.716 I llm_load_print_meta: n_head_kv        = 1
0.00.636.718 I llm_load_print_meta: n_rot            = 256
0.00.636.718 I llm_load_print_meta: n_swa            = 0
0.00.636.718 I llm_load_print_meta: n_embd_head_k    = 256
0.00.636.719 I llm_load_print_meta: n_embd_head_v    = 256
0.00.636.723 I llm_load_print_meta: n_gqa            = 8
0.00.636.728 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.636.733 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.636.734 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.636.736 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.636.736 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.636.737 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.636.747 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.636.757 I llm_load_print_meta: n_ff             = 16384
0.00.636.758 I llm_load_print_meta: n_expert         = 0
0.00.636.758 I llm_load_print_meta: n_expert_used    = 0
0.00.636.759 I llm_load_print_meta: causal attn      = 1
0.00.636.759 I llm_load_print_meta: pooling type     = 0
0.00.636.760 I llm_load_print_meta: rope type        = 2
0.00.636.770 I llm_load_print_meta: rope scaling     = linear
0.00.636.772 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.636.773 I llm_load_print_meta: freq_scale_train = 1
0.00.636.773 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.636.774 I llm_load_print_meta: rope_finetuned   = unknown
0.00.636.777 I llm_load_print_meta: ssm_d_conv       = 0
0.00.636.786 I llm_load_print_meta: ssm_d_inner      = 0
0.00.636.786 I llm_load_print_meta: ssm_d_state      = 0
0.00.636.787 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.636.790 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.636.791 I llm_load_print_meta: model type       = 2B
0.00.636.792 I llm_load_print_meta: model ftype      = Q8_0
0.00.636.793 I llm_load_print_meta: model params     = 2.51 B
0.00.636.794 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.636.794 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.636.795 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.636.795 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.636.796 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.636.796 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.636.797 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.636.805 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.636.812 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.636.814 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.636.822 I llm_load_print_meta: max token length = 93
0.00.737.139 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.742.751 I llama_new_context_with_model: n_ctx      = 8192
0.00.742.758 I llama_new_context_with_model: n_batch    = 2048
0.00.742.758 I llama_new_context_with_model: n_ubatch   = 512
0.00.742.759 I llama_new_context_with_model: flash_attn = 0
0.00.742.761 I llama_new_context_with_model: freq_base  = 10000.0
0.00.742.762 I llama_new_context_with_model: freq_scale = 1
0.00.772.627 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.772.698 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.772.810 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.775.808 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.775.812 I llama_new_context_with_model: graph nodes  = 601
0.00.775.813 I llama_new_context_with_model: graph splits = 1
0.00.775.831 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.385.961 I main: llama threadpool init, n_threads = 4
0.01.385.974 I 
0.01.386.086 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.386.090 I 
0.01.386.334 I sampler seed: 1085429595
0.01.386.348 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.386.359 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.386.361 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.386.361 I 
 increadibly complex, and the complexity has made it difficult to understand, analyze, and implement solutions.

**Solution:**
* **Identify and prioritize the most

0.15.030.918 I llama_perf_sampler_print:    sampling time =      48.79 ms /    33 runs   (    1.48 ms per token,   676.41 tokens per second)
0.15.030.921 I llama_perf_context_print:        load time =    1383.04 ms
0.15.030.922 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.030.938 I llama_perf_context_print:        eval time =   13550.21 ms /    32 runs   (  423.44 ms per token,     2.36 tokens per second)
0.15.030.939 I llama_perf_context_print:       total time =   13644.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.684 I build: 3985 (484984c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.895 I main: llama backend init
0.00.002.829 I main: load the model and apply lora adapter, if any
0.00.024.648 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.860 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.954 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.965 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.967 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.971 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.973 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.974 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.975 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.976 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.977 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.986 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.987 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.988 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.989 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.990 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.851 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.120 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.445 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.453 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.454 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.455 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.456 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.457 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.458 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.462 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.463 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.464 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.465 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.466 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.474 I llama_model_loader: - type  f32:   37 tensors
0.00.270.479 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.475 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.968 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.871 I llm_load_vocab: special tokens cache size = 5
0.00.610.822 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.891 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.892 I llm_load_print_meta: arch             = gemma
0.00.610.893 I llm_load_print_meta: vocab type       = SPM
0.00.610.894 I llm_load_print_meta: n_vocab          = 256000
0.00.610.896 I llm_load_print_meta: n_merges         = 0
0.00.610.896 I llm_load_print_meta: vocab_only       = 0
0.00.610.897 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.897 I llm_load_print_meta: n_embd           = 2048
0.00.610.898 I llm_load_print_meta: n_layer          = 18
0.00.610.962 I llm_load_print_meta: n_head           = 8
0.00.610.969 I llm_load_print_meta: n_head_kv        = 1
0.00.610.978 I llm_load_print_meta: n_rot            = 256
0.00.610.979 I llm_load_print_meta: n_swa            = 0
0.00.610.979 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.979 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.984 I llm_load_print_meta: n_gqa            = 8
0.00.610.989 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.994 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.995 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.996 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.997 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.005 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.006 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.011 I llm_load_print_meta: n_ff             = 16384
0.00.611.012 I llm_load_print_meta: n_expert         = 0
0.00.611.012 I llm_load_print_meta: n_expert_used    = 0
0.00.611.025 I llm_load_print_meta: causal attn      = 1
0.00.611.026 I llm_load_print_meta: pooling type     = 0
0.00.611.027 I llm_load_print_meta: rope type        = 2
0.00.611.027 I llm_load_print_meta: rope scaling     = linear
0.00.611.029 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.029 I llm_load_print_meta: freq_scale_train = 1
0.00.611.030 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.030 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.030 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.039 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.040 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.041 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.041 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.042 I llm_load_print_meta: model type       = 2B
0.00.611.043 I llm_load_print_meta: model ftype      = Q8_0
0.00.611.044 I llm_load_print_meta: model params     = 2.51 B
0.00.611.044 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.611.045 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.053 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.054 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.055 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.055 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.056 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.056 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.062 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.075 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.076 I llm_load_print_meta: max token length = 93
0.00.710.597 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.710.607 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.710.608 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.710.609 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.710.610 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.710.610 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.716.297 I llama_new_context_with_model: n_ctx      = 8192
0.00.716.304 I llama_new_context_with_model: n_batch    = 2048
0.00.716.304 I llama_new_context_with_model: n_ubatch   = 512
0.00.716.305 I llama_new_context_with_model: flash_attn = 0
0.00.716.307 I llama_new_context_with_model: freq_base  = 10000.0
0.00.716.308 I llama_new_context_with_model: freq_scale = 1
0.00.745.337 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.745.376 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.745.490 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.748.542 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.748.546 I llama_new_context_with_model: graph nodes  = 601
0.00.748.546 I llama_new_context_with_model: graph splits = 1
0.00.748.564 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.389 I main: llama threadpool init, n_threads = 4
0.01.359.402 I 
0.01.359.507 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.359.511 I 
0.01.359.743 I sampler seed: 2342586822
0.01.359.755 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.359.762 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.359.762 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.359.764 I 
 increasities are a significant issue in many regions, affecting both people and property. 

**Problem statement:**

* The increasing number of increasities is causing

0.14.878.689 I llama_perf_sampler_print:    sampling time =      48.19 ms /    33 runs   (    1.46 ms per token,   684.78 tokens per second)
0.14.878.693 I llama_perf_context_print:        load time =    1356.46 ms
0.14.878.706 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.878.708 I llama_perf_context_print:        eval time =   13425.71 ms /    32 runs   (  419.55 ms per token,     2.38 tokens per second)
0.14.878.709 I llama_perf_context_print:       total time =   13519.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 3985 (484984c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.002.785 I main: load the model and apply lora adapter, if any
0.00.024.855 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.072 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.168 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.179 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.181 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.185 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.189 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.190 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.191 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.192 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.193 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.203 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.207 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.208 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.209 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.210 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.341 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.817 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.486 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.494 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.495 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.496 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.497 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.498 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.499 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.503 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.504 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.505 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.506 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.508 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.517 I llama_model_loader: - type  f32:   37 tensors
0.00.271.521 I llama_model_loader: - type q8_0:  127 tensors
0.00.439.032 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.554 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.631 I llm_load_vocab: special tokens cache size = 5
0.00.601.709 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.782 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.783 I llm_load_print_meta: arch             = gemma
0.00.601.783 I llm_load_print_meta: vocab type       = SPM
0.00.601.784 I llm_load_print_meta: n_vocab          = 256000
0.00.601.787 I llm_load_print_meta: n_merges         = 0
0.00.601.787 I llm_load_print_meta: vocab_only       = 0
0.00.601.787 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.788 I llm_load_print_meta: n_embd           = 2048
0.00.601.788 I llm_load_print_meta: n_layer          = 18
0.00.601.851 I llm_load_print_meta: n_head           = 8
0.00.601.858 I llm_load_print_meta: n_head_kv        = 1
0.00.601.858 I llm_load_print_meta: n_rot            = 256
0.00.601.859 I llm_load_print_meta: n_swa            = 0
0.00.601.859 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.860 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.865 I llm_load_print_meta: n_gqa            = 8
0.00.601.869 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.874 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.876 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.877 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.877 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.878 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.878 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.883 I llm_load_print_meta: n_ff             = 16384
0.00.601.884 I llm_load_print_meta: n_expert         = 0
0.00.601.885 I llm_load_print_meta: n_expert_used    = 0
0.00.601.885 I llm_load_print_meta: causal attn      = 1
0.00.601.886 I llm_load_print_meta: pooling type     = 0
0.00.601.887 I llm_load_print_meta: rope type        = 2
0.00.601.887 I llm_load_print_meta: rope scaling     = linear
0.00.601.889 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.889 I llm_load_print_meta: freq_scale_train = 1
0.00.601.890 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.890 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.891 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.895 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.895 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.895 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.896 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.896 I llm_load_print_meta: model type       = 2B
0.00.601.898 I llm_load_print_meta: model ftype      = Q8_0
0.00.601.899 I llm_load_print_meta: model params     = 2.51 B
0.00.601.900 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.601.904 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.904 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.905 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.905 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.906 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.906 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.906 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.912 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.913 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.914 I llm_load_print_meta: max token length = 93
0.00.694.262 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.694.272 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.699.874 I llama_new_context_with_model: n_ctx      = 8192
0.00.699.882 I llama_new_context_with_model: n_batch    = 2048
0.00.699.882 I llama_new_context_with_model: n_ubatch   = 512
0.00.699.883 I llama_new_context_with_model: flash_attn = 0
0.00.699.885 I llama_new_context_with_model: freq_base  = 10000.0
0.00.699.886 I llama_new_context_with_model: freq_scale = 1
0.00.729.283 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.322 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.729.435 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.732.510 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.732.514 I llama_new_context_with_model: graph nodes  = 601
0.00.732.514 I llama_new_context_with_model: graph splits = 1
0.00.732.531 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.341.391 I main: llama threadpool init, n_threads = 4
0.01.341.404 I 
0.01.341.511 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.341.515 I 
0.01.341.742 I sampler seed: 3322252706
0.01.341.755 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.341.762 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.341.763 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.341.763 I 
 increasities.

I'm not sure if I understand the question. Could you please rephrase it? [end of text]


0.11.062.841 I llama_perf_sampler_print:    sampling time =      34.63 ms /    24 runs   (    1.44 ms per token,   693.12 tokens per second)
0.11.062.844 I llama_perf_context_print:        load time =    1338.50 ms
0.11.062.846 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.062.862 I llama_perf_context_print:        eval time =    9653.61 ms /    23 runs   (  419.72 ms per token,     2.38 tokens per second)
0.11.062.863 I llama_perf_context_print:       total time =    9721.46 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.794s
user	3m33.930s
sys	0m9.817s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3985 (484984c8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199974.76 ms
main:    total time = 199974.76 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.677 I build: 3985 (484984c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.881 I main: llama backend init
0.00.002.819 I main: load the model and apply lora adapter, if any
0.00.025.057 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.278 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.382 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.394 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.397 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.402 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.406 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.407 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.408 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.409 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.410 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.421 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.422 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.423 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.424 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.425 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.355 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.001 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.463 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.474 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.476 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.477 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.478 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.479 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.480 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.484 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.485 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.486 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.487 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.488 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.497 I llama_model_loader: - type  f32:   37 tensors
0.00.269.502 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.503 I llama_model_loader: - type q6_K:   19 tensors
0.00.456.752 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.220 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.244 I llm_load_vocab: special tokens cache size = 5
0.00.623.848 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.917 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.921 I llm_load_print_meta: arch             = gemma
0.00.623.921 I llm_load_print_meta: vocab type       = SPM
0.00.623.922 I llm_load_print_meta: n_vocab          = 256000
0.00.623.924 I llm_load_print_meta: n_merges         = 0
0.00.623.925 I llm_load_print_meta: vocab_only       = 0
0.00.623.925 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.926 I llm_load_print_meta: n_embd           = 2048
0.00.623.926 I llm_load_print_meta: n_layer          = 18
0.00.623.988 I llm_load_print_meta: n_head           = 8
0.00.623.999 I llm_load_print_meta: n_head_kv        = 1
0.00.624.000 I llm_load_print_meta: n_rot            = 256
0.00.624.000 I llm_load_print_meta: n_swa            = 0
0.00.624.001 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.002 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.006 I llm_load_print_meta: n_gqa            = 8
0.00.624.011 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.017 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.020 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.022 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.022 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.023 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.023 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.028 I llm_load_print_meta: n_ff             = 16384
0.00.624.029 I llm_load_print_meta: n_expert         = 0
0.00.624.030 I llm_load_print_meta: n_expert_used    = 0
0.00.624.030 I llm_load_print_meta: causal attn      = 1
0.00.624.031 I llm_load_print_meta: pooling type     = 0
0.00.624.031 I llm_load_print_meta: rope type        = 2
0.00.624.032 I llm_load_print_meta: rope scaling     = linear
0.00.624.034 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.035 I llm_load_print_meta: freq_scale_train = 1
0.00.624.035 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.036 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.036 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.037 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.037 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.037 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.038 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.040 I llm_load_print_meta: model type       = 2B
0.00.624.041 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.624.042 I llm_load_print_meta: model params     = 2.51 B
0.00.624.043 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.624.043 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.044 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.044 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.045 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.046 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.046 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.047 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.053 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.055 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.055 I llm_load_print_meta: max token length = 93
0.00.687.201 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.687.213 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.687.214 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.687.215 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.687.215 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.687.216 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.693.087 I llama_new_context_with_model: n_ctx      = 8192
0.00.693.094 I llama_new_context_with_model: n_batch    = 2048
0.00.693.095 I llama_new_context_with_model: n_ubatch   = 512
0.00.693.095 I llama_new_context_with_model: flash_attn = 0
0.00.693.097 I llama_new_context_with_model: freq_base  = 10000.0
0.00.693.098 I llama_new_context_with_model: freq_scale = 1
0.00.722.721 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.722.759 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.722.869 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.725.880 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.725.885 I llama_new_context_with_model: graph nodes  = 601
0.00.725.885 I llama_new_context_with_model: graph splits = 1
0.00.725.902 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.301.775 I main: llama threadpool init, n_threads = 4
0.01.301.789 I 
0.01.301.898 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.301.901 I 
0.01.302.142 I sampler seed: 1033061893
0.01.302.154 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.302.160 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.302.163 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.302.163 I 
 maneupher.
**Assistant**

I am unable to access or process personal or sensitive information, including personally identifiable information (PII), as it violates my safety

0.12.169.122 I llama_perf_sampler_print:    sampling time =      48.31 ms /    33 runs   (    1.46 ms per token,   683.07 tokens per second)
0.12.169.125 I llama_perf_context_print:        load time =    1298.84 ms
0.12.169.126 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.169.141 I llama_perf_context_print:        eval time =   10772.38 ms /    32 runs   (  336.64 ms per token,     2.97 tokens per second)
0.12.169.142 I llama_perf_context_print:       total time =   10867.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3985 (484984c8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199182.11 ms
main:    total time = 199182.11 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 3985 (484984c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.805 I main: load the model and apply lora adapter, if any
0.00.024.971 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.080 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.096 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.101 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.106 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.107 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.108 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.109 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.110 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.111 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.122 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.124 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.125 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.126 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.127 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.297 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.173 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.644 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.654 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.655 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.657 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.657 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.659 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.660 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.664 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.665 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.674 I llama_model_loader: - type  f32:   37 tensors
0.00.274.679 I llama_model_loader: - type q4_K:  108 tensors
0.00.274.680 I llama_model_loader: - type q6_K:   19 tensors
0.00.472.289 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.543.495 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.544.581 I llm_load_vocab: special tokens cache size = 5
0.00.650.250 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.650.319 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.650.323 I llm_load_print_meta: arch             = gemma
0.00.650.324 I llm_load_print_meta: vocab type       = SPM
0.00.650.325 I llm_load_print_meta: n_vocab          = 256000
0.00.650.327 I llm_load_print_meta: n_merges         = 0
0.00.650.327 I llm_load_print_meta: vocab_only       = 0
0.00.650.328 I llm_load_print_meta: n_ctx_train      = 8192
0.00.650.328 I llm_load_print_meta: n_embd           = 2048
0.00.650.328 I llm_load_print_meta: n_layer          = 18
0.00.650.392 I llm_load_print_meta: n_head           = 8
0.00.650.403 I llm_load_print_meta: n_head_kv        = 1
0.00.650.404 I llm_load_print_meta: n_rot            = 256
0.00.650.405 I llm_load_print_meta: n_swa            = 0
0.00.650.405 I llm_load_print_meta: n_embd_head_k    = 256
0.00.650.405 I llm_load_print_meta: n_embd_head_v    = 256
0.00.650.410 I llm_load_print_meta: n_gqa            = 8
0.00.650.415 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.650.420 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.650.423 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.650.424 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.650.425 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.650.426 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.650.426 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.650.431 I llm_load_print_meta: n_ff             = 16384
0.00.650.432 I llm_load_print_meta: n_expert         = 0
0.00.650.433 I llm_load_print_meta: n_expert_used    = 0
0.00.650.433 I llm_load_print_meta: causal attn      = 1
0.00.650.434 I llm_load_print_meta: pooling type     = 0
0.00.650.434 I llm_load_print_meta: rope type        = 2
0.00.650.435 I llm_load_print_meta: rope scaling     = linear
0.00.650.437 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.650.438 I llm_load_print_meta: freq_scale_train = 1
0.00.650.438 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.650.439 I llm_load_print_meta: rope_finetuned   = unknown
0.00.650.440 I llm_load_print_meta: ssm_d_conv       = 0
0.00.650.440 I llm_load_print_meta: ssm_d_inner      = 0
0.00.650.440 I llm_load_print_meta: ssm_d_state      = 0
0.00.650.440 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.650.441 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.650.442 I llm_load_print_meta: model type       = 2B
0.00.650.443 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.650.444 I llm_load_print_meta: model params     = 2.51 B
0.00.650.445 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.650.445 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.650.447 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.650.447 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.650.447 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.650.448 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.650.448 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.650.449 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.650.456 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.650.458 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.650.458 I llm_load_print_meta: max token length = 93
0.00.712.886 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.718.376 I llama_new_context_with_model: n_ctx      = 8192
0.00.718.382 I llama_new_context_with_model: n_batch    = 2048
0.00.718.383 I llama_new_context_with_model: n_ubatch   = 512
0.00.718.383 I llama_new_context_with_model: flash_attn = 0
0.00.718.386 I llama_new_context_with_model: freq_base  = 10000.0
0.00.718.387 I llama_new_context_with_model: freq_scale = 1
0.00.749.335 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.749.372 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.749.484 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.752.677 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.752.682 I llama_new_context_with_model: graph nodes  = 601
0.00.752.682 I llama_new_context_with_model: graph splits = 1
0.00.752.698 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.326.820 I main: llama threadpool init, n_threads = 4
0.01.326.834 I 
0.01.326.943 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.326.947 I 
0.01.327.180 I sampler seed: 526300138
0.01.327.193 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.327.200 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.327.204 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.327.204 I 
 seconally. The word "seconde" means:

a) Second in rank
b) Second in time
c) Second in importance
d)

0.12.199.167 I llama_perf_sampler_print:    sampling time =      48.17 ms /    33 runs   (    1.46 ms per token,   685.13 tokens per second)
0.12.199.170 I llama_perf_context_print:        load time =    1323.91 ms
0.12.199.173 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.199.176 I llama_perf_context_print:        eval time =   10778.75 ms /    32 runs   (  336.84 ms per token,     2.97 tokens per second)
0.12.199.177 I llama_perf_context_print:       total time =   10872.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.520s
user	50m24.730s
sys	0m6.601s
