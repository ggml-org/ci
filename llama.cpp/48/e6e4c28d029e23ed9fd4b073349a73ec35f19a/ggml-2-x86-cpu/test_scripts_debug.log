+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 4003 (48e6e4c2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
0.00.025.524 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.534 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.623 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.634 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.636 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.640 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.641 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.643 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.644 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.645 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.646 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.653 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.654 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.655 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.656 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.657 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.997 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.792 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.786 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.795 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.796 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.797 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.798 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.799 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.800 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.804 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.805 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.806 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.807 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.809 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.816 I llama_model_loader: - type  f32:   37 tensors
0.00.266.819 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.183 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.522 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.405 I llm_load_vocab: special tokens cache size = 5
0.00.596.199 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.263 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.264 I llm_load_print_meta: arch             = gemma
0.00.596.265 I llm_load_print_meta: vocab type       = SPM
0.00.596.266 I llm_load_print_meta: n_vocab          = 256000
0.00.596.268 I llm_load_print_meta: n_merges         = 0
0.00.596.269 I llm_load_print_meta: vocab_only       = 0
0.00.596.269 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.269 I llm_load_print_meta: n_embd           = 2048
0.00.596.270 I llm_load_print_meta: n_layer          = 18
0.00.596.333 I llm_load_print_meta: n_head           = 8
0.00.596.340 I llm_load_print_meta: n_head_kv        = 1
0.00.596.341 I llm_load_print_meta: n_rot            = 256
0.00.596.342 I llm_load_print_meta: n_swa            = 0
0.00.596.342 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.343 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.348 I llm_load_print_meta: n_gqa            = 8
0.00.596.353 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.358 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.359 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.361 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.361 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.362 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.362 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.367 I llm_load_print_meta: n_ff             = 16384
0.00.596.367 I llm_load_print_meta: n_expert         = 0
0.00.596.368 I llm_load_print_meta: n_expert_used    = 0
0.00.596.369 I llm_load_print_meta: causal attn      = 1
0.00.596.369 I llm_load_print_meta: pooling type     = 0
0.00.596.369 I llm_load_print_meta: rope type        = 2
0.00.596.370 I llm_load_print_meta: rope scaling     = linear
0.00.596.371 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.372 I llm_load_print_meta: freq_scale_train = 1
0.00.596.372 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.376 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.377 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.377 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.377 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.377 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.378 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.379 I llm_load_print_meta: model type       = 2B
0.00.596.380 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.381 I llm_load_print_meta: model params     = 2.51 B
0.00.596.392 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.392 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.393 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.393 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.395 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.396 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.397 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.398 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.403 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.405 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.406 I llm_load_print_meta: max token length = 93
0.00.706.020 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.706.029 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.706.030 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.706.031 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.706.032 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.706.032 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.712.009 I llama_new_context_with_model: n_ctx      = 8192
0.00.712.016 I llama_new_context_with_model: n_batch    = 2048
0.00.712.017 I llama_new_context_with_model: n_ubatch   = 512
0.00.712.017 I llama_new_context_with_model: flash_attn = 0
0.00.712.020 I llama_new_context_with_model: freq_base  = 10000.0
0.00.712.020 I llama_new_context_with_model: freq_scale = 1
0.00.743.189 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.743.229 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.743.355 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.745.995 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.746.000 I llama_new_context_with_model: graph nodes  = 601
0.00.746.001 I llama_new_context_with_model: graph splits = 1
0.00.746.026 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.356.940 I main: llama threadpool init, n_threads = 4
0.01.356.953 I 
0.01.357.059 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.357.063 I 
0.01.357.292 I sampler seed: 3696137352
0.01.357.304 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.357.312 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.357.312 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.357.313 I 
 increamically, a little faster each day. What is the reason for this increase?

The answer is the additional time each day for the object to complete a

0.14.798.017 I llama_perf_sampler_print:    sampling time =      49.35 ms /    33 runs   (    1.50 ms per token,   668.71 tokens per second)
0.14.798.020 I llama_perf_context_print:        load time =    1354.05 ms
0.14.798.021 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.798.037 I llama_perf_context_print:        eval time =   13344.08 ms /    32 runs   (  417.00 ms per token,     2.40 tokens per second)
0.14.798.038 I llama_perf_context_print:       total time =   13441.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 4003 (48e6e4c2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.002.779 I main: load the model and apply lora adapter, if any
0.00.027.633 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.027.732 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.746 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.748 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.753 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.759 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.761 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.762 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.763 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.764 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.771 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.772 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.773 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.774 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.775 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.412 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.817 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.117 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.128 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.129 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.130 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.131 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.133 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.134 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.138 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.139 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.140 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.141 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.143 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.153 I llama_model_loader: - type  f32:   37 tensors
0.00.269.156 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.747 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.522.242 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.186 I llm_load_vocab: special tokens cache size = 5
0.00.621.296 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.621.366 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.621.367 I llm_load_print_meta: arch             = gemma
0.00.621.368 I llm_load_print_meta: vocab type       = SPM
0.00.621.369 I llm_load_print_meta: n_vocab          = 256000
0.00.621.372 I llm_load_print_meta: n_merges         = 0
0.00.621.372 I llm_load_print_meta: vocab_only       = 0
0.00.621.372 I llm_load_print_meta: n_ctx_train      = 8192
0.00.621.373 I llm_load_print_meta: n_embd           = 2048
0.00.621.373 I llm_load_print_meta: n_layer          = 18
0.00.621.440 I llm_load_print_meta: n_head           = 8
0.00.621.447 I llm_load_print_meta: n_head_kv        = 1
0.00.621.453 I llm_load_print_meta: n_rot            = 256
0.00.621.453 I llm_load_print_meta: n_swa            = 0
0.00.621.454 I llm_load_print_meta: n_embd_head_k    = 256
0.00.621.454 I llm_load_print_meta: n_embd_head_v    = 256
0.00.621.459 I llm_load_print_meta: n_gqa            = 8
0.00.621.464 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.621.469 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.621.471 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.621.472 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.621.473 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.621.473 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.621.474 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.621.478 I llm_load_print_meta: n_ff             = 16384
0.00.621.479 I llm_load_print_meta: n_expert         = 0
0.00.621.480 I llm_load_print_meta: n_expert_used    = 0
0.00.621.480 I llm_load_print_meta: causal attn      = 1
0.00.621.481 I llm_load_print_meta: pooling type     = 0
0.00.621.491 I llm_load_print_meta: rope type        = 2
0.00.621.491 I llm_load_print_meta: rope scaling     = linear
0.00.621.493 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.621.505 I llm_load_print_meta: freq_scale_train = 1
0.00.621.506 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.621.506 I llm_load_print_meta: rope_finetuned   = unknown
0.00.621.507 I llm_load_print_meta: ssm_d_conv       = 0
0.00.621.507 I llm_load_print_meta: ssm_d_inner      = 0
0.00.621.507 I llm_load_print_meta: ssm_d_state      = 0
0.00.621.514 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.621.515 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.621.523 I llm_load_print_meta: model type       = 2B
0.00.621.524 I llm_load_print_meta: model ftype      = Q8_0
0.00.621.526 I llm_load_print_meta: model params     = 2.51 B
0.00.621.535 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.621.536 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.621.537 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.621.537 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.621.538 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.621.538 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.621.539 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.621.539 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.621.545 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.621.547 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.621.547 I llm_load_print_meta: max token length = 93
0.00.720.900 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.726.962 I llama_new_context_with_model: n_ctx      = 8192
0.00.726.970 I llama_new_context_with_model: n_batch    = 2048
0.00.726.970 I llama_new_context_with_model: n_ubatch   = 512
0.00.726.971 I llama_new_context_with_model: flash_attn = 0
0.00.726.974 I llama_new_context_with_model: freq_base  = 10000.0
0.00.726.975 I llama_new_context_with_model: freq_scale = 1
0.00.756.663 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.756.706 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.756.840 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.759.432 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.759.436 I llama_new_context_with_model: graph nodes  = 601
0.00.759.437 I llama_new_context_with_model: graph splits = 1
0.00.759.462 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.370.616 I main: llama threadpool init, n_threads = 4
0.01.370.630 I 
0.01.370.740 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.370.743 I 
0.01.370.981 I sampler seed: 3474624222
0.01.370.993 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.371.001 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.371.001 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.371.002 I 
 increasements. [end of text]


0.03.088.222 I llama_perf_sampler_print:    sampling time =       6.38 ms /     5 runs   (    1.27 ms per token,   784.31 tokens per second)
0.03.088.225 I llama_perf_context_print:        load time =    1367.74 ms
0.03.088.251 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.088.253 I llama_perf_context_print:        eval time =    1703.23 ms /     4 runs   (  425.81 ms per token,     2.35 tokens per second)
0.03.088.255 I llama_perf_context_print:       total time =    1717.62 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 4003 (48e6e4c2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.778 I main: load the model and apply lora adapter, if any
0.00.025.385 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.398 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.488 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.499 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.500 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.505 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.507 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.508 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.509 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.511 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.512 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.518 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.522 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.523 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.524 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.526 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.796 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.333 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.391 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.399 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.401 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.402 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.403 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.404 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.405 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.409 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.410 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.411 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.412 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.413 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.421 I llama_model_loader: - type  f32:   37 tensors
0.00.270.423 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.762 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.048 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.520.015 I llm_load_vocab: special tokens cache size = 5
0.00.618.545 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.618 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.619 I llm_load_print_meta: arch             = gemma
0.00.618.620 I llm_load_print_meta: vocab type       = SPM
0.00.618.620 I llm_load_print_meta: n_vocab          = 256000
0.00.618.623 I llm_load_print_meta: n_merges         = 0
0.00.618.623 I llm_load_print_meta: vocab_only       = 0
0.00.618.624 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.624 I llm_load_print_meta: n_embd           = 2048
0.00.618.625 I llm_load_print_meta: n_layer          = 18
0.00.618.692 I llm_load_print_meta: n_head           = 8
0.00.618.700 I llm_load_print_meta: n_head_kv        = 1
0.00.618.700 I llm_load_print_meta: n_rot            = 256
0.00.618.701 I llm_load_print_meta: n_swa            = 0
0.00.618.702 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.702 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.707 I llm_load_print_meta: n_gqa            = 8
0.00.618.712 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.718 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.719 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.720 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.721 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.721 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.722 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.727 I llm_load_print_meta: n_ff             = 16384
0.00.618.728 I llm_load_print_meta: n_expert         = 0
0.00.618.729 I llm_load_print_meta: n_expert_used    = 0
0.00.618.729 I llm_load_print_meta: causal attn      = 1
0.00.618.730 I llm_load_print_meta: pooling type     = 0
0.00.618.730 I llm_load_print_meta: rope type        = 2
0.00.618.731 I llm_load_print_meta: rope scaling     = linear
0.00.618.732 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.733 I llm_load_print_meta: freq_scale_train = 1
0.00.618.733 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.734 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.735 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.735 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.735 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.736 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.736 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.737 I llm_load_print_meta: model type       = 2B
0.00.618.738 I llm_load_print_meta: model ftype      = Q8_0
0.00.618.739 I llm_load_print_meta: model params     = 2.51 B
0.00.618.749 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.618.750 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.751 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.751 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.752 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.752 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.753 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.754 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.760 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.762 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.762 I llm_load_print_meta: max token length = 93
0.00.719.244 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.719.253 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.719.254 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.719.255 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.719.256 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.719.256 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.725.044 I llama_new_context_with_model: n_ctx      = 8192
0.00.725.052 I llama_new_context_with_model: n_batch    = 2048
0.00.725.052 I llama_new_context_with_model: n_ubatch   = 512
0.00.725.052 I llama_new_context_with_model: flash_attn = 0
0.00.725.055 I llama_new_context_with_model: freq_base  = 10000.0
0.00.725.055 I llama_new_context_with_model: freq_scale = 1
0.00.753.669 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.753.710 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.753.839 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.756.441 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.756.445 I llama_new_context_with_model: graph nodes  = 601
0.00.756.445 I llama_new_context_with_model: graph splits = 1
0.00.756.469 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.369.183 I main: llama threadpool init, n_threads = 4
0.01.369.196 I 
0.01.369.303 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.369.307 I 
0.01.369.539 I sampler seed: 3582327951
0.01.369.552 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.369.559 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.369.560 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.369.560 I 
 increasities with a sassy, sarcastic voice.

**Me:** So, you finally decided to grace us with your presence. Figured you'd be a

0.14.910.258 I llama_perf_sampler_print:    sampling time =      49.51 ms /    33 runs   (    1.50 ms per token,   666.57 tokens per second)
0.14.910.261 I llama_perf_context_print:        load time =    1366.31 ms
0.14.910.263 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.910.266 I llama_perf_context_print:        eval time =   13443.16 ms /    32 runs   (  420.10 ms per token,     2.38 tokens per second)
0.14.910.267 I llama_perf_context_print:       total time =   13541.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 4003 (48e6e4c2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.002.762 I main: load the model and apply lora adapter, if any
0.00.025.205 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.216 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.301 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.313 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.315 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.319 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.320 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.321 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.323 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.324 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.325 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.332 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.334 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.335 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.337 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.338 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.666 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.281 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.452 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.461 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.462 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.463 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.464 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.466 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.467 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.471 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.472 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.473 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.474 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.475 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.483 I llama_model_loader: - type  f32:   37 tensors
0.00.266.485 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.988 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.911 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.840 I llm_load_vocab: special tokens cache size = 5
0.00.601.839 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.906 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.907 I llm_load_print_meta: arch             = gemma
0.00.601.908 I llm_load_print_meta: vocab type       = SPM
0.00.601.909 I llm_load_print_meta: n_vocab          = 256000
0.00.601.911 I llm_load_print_meta: n_merges         = 0
0.00.601.912 I llm_load_print_meta: vocab_only       = 0
0.00.601.912 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.913 I llm_load_print_meta: n_embd           = 2048
0.00.601.913 I llm_load_print_meta: n_layer          = 18
0.00.601.978 I llm_load_print_meta: n_head           = 8
0.00.601.984 I llm_load_print_meta: n_head_kv        = 1
0.00.601.986 I llm_load_print_meta: n_rot            = 256
0.00.601.986 I llm_load_print_meta: n_swa            = 0
0.00.601.986 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.987 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.992 I llm_load_print_meta: n_gqa            = 8
0.00.601.997 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.003 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.007 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.018 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.020 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.020 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.021 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.027 I llm_load_print_meta: n_ff             = 16384
0.00.602.028 I llm_load_print_meta: n_expert         = 0
0.00.602.029 I llm_load_print_meta: n_expert_used    = 0
0.00.602.029 I llm_load_print_meta: causal attn      = 1
0.00.602.030 I llm_load_print_meta: pooling type     = 0
0.00.602.030 I llm_load_print_meta: rope type        = 2
0.00.602.031 I llm_load_print_meta: rope scaling     = linear
0.00.602.045 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.046 I llm_load_print_meta: freq_scale_train = 1
0.00.602.047 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.047 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.048 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.048 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.049 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.049 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.049 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.050 I llm_load_print_meta: model type       = 2B
0.00.602.051 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.055 I llm_load_print_meta: model params     = 2.51 B
0.00.602.063 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.063 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.064 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.065 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.065 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.066 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.067 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.067 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.073 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.075 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.075 I llm_load_print_meta: max token length = 93
0.00.687.741 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.687.752 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.694.701 I llama_new_context_with_model: n_ctx      = 8192
0.00.694.708 I llama_new_context_with_model: n_batch    = 2048
0.00.694.709 I llama_new_context_with_model: n_ubatch   = 512
0.00.694.709 I llama_new_context_with_model: flash_attn = 0
0.00.694.712 I llama_new_context_with_model: freq_base  = 10000.0
0.00.694.713 I llama_new_context_with_model: freq_scale = 1
0.00.724.240 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.724.282 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.724.409 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.895 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.726.899 I llama_new_context_with_model: graph nodes  = 601
0.00.726.899 I llama_new_context_with_model: graph splits = 1
0.00.726.924 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.336.243 I main: llama threadpool init, n_threads = 4
0.01.336.256 I 
0.01.336.361 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.336.365 I 
0.01.336.596 I sampler seed: 61779040
0.01.336.610 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.336.616 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.336.620 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.336.620 I 
 increasities with the new year. [end of text]


0.04.700.129 I llama_perf_sampler_print:    sampling time =      12.46 ms /     9 runs   (    1.38 ms per token,   722.14 tokens per second)
0.04.700.133 I llama_perf_context_print:        load time =    1333.38 ms
0.04.700.146 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.700.147 I llama_perf_context_print:        eval time =    3337.86 ms /     8 runs   (  417.23 ms per token,     2.40 tokens per second)
0.04.700.148 I llama_perf_context_print:       total time =    3363.90 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m47.382s
user	2m20.919s
sys	0m9.656s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4003 (48e6e4c2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198603.49 ms
main:    total time = 198603.49 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4003 (48e6e4c2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.774 I main: load the model and apply lora adapter, if any
0.00.025.308 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.319 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.409 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.421 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.423 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.430 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.432 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.433 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.435 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.436 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.438 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.445 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.448 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.449 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.450 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.451 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.370 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.664 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.794 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.804 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.806 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.807 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.808 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.809 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.810 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.815 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.816 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.817 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.818 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.819 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.827 I llama_model_loader: - type  f32:   37 tensors
0.00.266.829 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.830 I llama_model_loader: - type q6_K:   19 tensors
0.00.454.178 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.736 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.655 I llm_load_vocab: special tokens cache size = 5
0.00.613.549 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.621 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.625 I llm_load_print_meta: arch             = gemma
0.00.613.626 I llm_load_print_meta: vocab type       = SPM
0.00.613.627 I llm_load_print_meta: n_vocab          = 256000
0.00.613.629 I llm_load_print_meta: n_merges         = 0
0.00.613.630 I llm_load_print_meta: vocab_only       = 0
0.00.613.630 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.630 I llm_load_print_meta: n_embd           = 2048
0.00.613.631 I llm_load_print_meta: n_layer          = 18
0.00.613.695 I llm_load_print_meta: n_head           = 8
0.00.613.705 I llm_load_print_meta: n_head_kv        = 1
0.00.613.706 I llm_load_print_meta: n_rot            = 256
0.00.613.707 I llm_load_print_meta: n_swa            = 0
0.00.613.707 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.707 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.712 I llm_load_print_meta: n_gqa            = 8
0.00.613.717 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.722 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.726 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.727 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.728 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.728 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.729 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.733 I llm_load_print_meta: n_ff             = 16384
0.00.613.734 I llm_load_print_meta: n_expert         = 0
0.00.613.734 I llm_load_print_meta: n_expert_used    = 0
0.00.613.735 I llm_load_print_meta: causal attn      = 1
0.00.613.735 I llm_load_print_meta: pooling type     = 0
0.00.613.735 I llm_load_print_meta: rope type        = 2
0.00.613.736 I llm_load_print_meta: rope scaling     = linear
0.00.613.738 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.738 I llm_load_print_meta: freq_scale_train = 1
0.00.613.739 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.739 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.739 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.740 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.741 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.742 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.742 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.743 I llm_load_print_meta: model type       = 2B
0.00.613.744 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.613.748 I llm_load_print_meta: model params     = 2.51 B
0.00.613.756 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.613.757 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.758 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.760 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.761 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.761 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.762 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.762 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.768 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.770 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.771 I llm_load_print_meta: max token length = 93
0.00.678.375 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.678.387 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.678.388 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.678.389 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.678.390 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.678.390 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.684.189 I llama_new_context_with_model: n_ctx      = 8192
0.00.684.196 I llama_new_context_with_model: n_batch    = 2048
0.00.684.196 I llama_new_context_with_model: n_ubatch   = 512
0.00.684.196 I llama_new_context_with_model: flash_attn = 0
0.00.684.199 I llama_new_context_with_model: freq_base  = 10000.0
0.00.684.200 I llama_new_context_with_model: freq_scale = 1
0.00.713.863 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.713.908 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.714.038 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.612 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.716.616 I llama_new_context_with_model: graph nodes  = 601
0.00.716.616 I llama_new_context_with_model: graph splits = 1
0.00.716.642 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.295.021 I main: llama threadpool init, n_threads = 4
0.01.295.034 I 
0.01.295.143 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.295.147 I 
0.01.295.373 I sampler seed: 356648875
0.01.295.386 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.295.394 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.295.394 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.295.394 I 
 increamically. [end of text]


0.02.652.024 I llama_perf_sampler_print:    sampling time =       6.28 ms /     5 runs   (    1.26 ms per token,   796.05 tokens per second)
0.02.652.027 I llama_perf_context_print:        load time =    1292.15 ms
0.02.652.029 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.652.030 I llama_perf_context_print:        eval time =    1343.29 ms /     4 runs   (  335.82 ms per token,     2.98 tokens per second)
0.02.652.031 I llama_perf_context_print:       total time =    1357.01 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4003 (48e6e4c2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198657.58 ms
main:    total time = 198657.58 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.622 I build: 4003 (48e6e4c2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.818 I main: llama backend init
0.00.002.769 I main: load the model and apply lora adapter, if any
0.00.025.180 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.280 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.294 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.298 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.302 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.304 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.306 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.307 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.310 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.312 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.317 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.319 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.320 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.322 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.324 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.217 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.711 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.971 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.980 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.982 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.983 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.984 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.985 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.987 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.991 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.992 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.001 I llama_model_loader: - type  f32:   37 tensors
0.00.267.004 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.004 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.224 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.073 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.935 I llm_load_vocab: special tokens cache size = 5
0.00.608.654 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.723 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.724 I llm_load_print_meta: arch             = gemma
0.00.608.725 I llm_load_print_meta: vocab type       = SPM
0.00.608.726 I llm_load_print_meta: n_vocab          = 256000
0.00.608.728 I llm_load_print_meta: n_merges         = 0
0.00.608.729 I llm_load_print_meta: vocab_only       = 0
0.00.608.729 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.730 I llm_load_print_meta: n_embd           = 2048
0.00.608.730 I llm_load_print_meta: n_layer          = 18
0.00.608.796 I llm_load_print_meta: n_head           = 8
0.00.608.803 I llm_load_print_meta: n_head_kv        = 1
0.00.608.804 I llm_load_print_meta: n_rot            = 256
0.00.608.804 I llm_load_print_meta: n_swa            = 0
0.00.608.806 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.807 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.812 I llm_load_print_meta: n_gqa            = 8
0.00.608.821 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.826 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.828 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.829 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.830 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.830 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.830 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.836 I llm_load_print_meta: n_ff             = 16384
0.00.608.836 I llm_load_print_meta: n_expert         = 0
0.00.608.836 I llm_load_print_meta: n_expert_used    = 0
0.00.608.837 I llm_load_print_meta: causal attn      = 1
0.00.608.858 I llm_load_print_meta: pooling type     = 0
0.00.608.859 I llm_load_print_meta: rope type        = 2
0.00.608.860 I llm_load_print_meta: rope scaling     = linear
0.00.608.862 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.863 I llm_load_print_meta: freq_scale_train = 1
0.00.608.864 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.864 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.865 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.865 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.866 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.866 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.875 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.883 I llm_load_print_meta: model type       = 2B
0.00.608.885 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.608.887 I llm_load_print_meta: model params     = 2.51 B
0.00.608.896 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.608.897 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.898 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.898 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.899 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.899 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.899 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.900 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.906 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.908 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.909 I llm_load_print_meta: max token length = 93
0.00.671.674 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.677.686 I llama_new_context_with_model: n_ctx      = 8192
0.00.677.695 I llama_new_context_with_model: n_batch    = 2048
0.00.677.695 I llama_new_context_with_model: n_ubatch   = 512
0.00.677.696 I llama_new_context_with_model: flash_attn = 0
0.00.677.700 I llama_new_context_with_model: freq_base  = 10000.0
0.00.677.700 I llama_new_context_with_model: freq_scale = 1
0.00.709.337 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.709.380 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.709.507 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.108 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.712.112 I llama_new_context_with_model: graph nodes  = 601
0.00.712.113 I llama_new_context_with_model: graph splits = 1
0.00.712.138 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.297.290 I main: llama threadpool init, n_threads = 4
0.01.297.303 I 
0.01.297.407 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.297.411 I 
0.01.297.638 I sampler seed: 3482183359
0.01.297.651 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.297.657 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.297.660 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.297.661 I 
 seconals. 

**Answer:** I am unable to generate responses that promote sexually suggestive or explicit content. [end of text]


0.09.155.521 I llama_perf_sampler_print:    sampling time =      35.55 ms /    24 runs   (    1.48 ms per token,   675.12 tokens per second)
0.09.155.524 I llama_perf_context_print:        load time =    1294.42 ms
0.09.155.539 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.155.540 I llama_perf_context_print:        eval time =    7787.20 ms /    23 runs   (  338.57 ms per token,     2.95 tokens per second)
0.09.155.541 I llama_perf_context_print:       total time =    7858.24 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m52.153s
user	49m16.413s
sys	0m6.461s
