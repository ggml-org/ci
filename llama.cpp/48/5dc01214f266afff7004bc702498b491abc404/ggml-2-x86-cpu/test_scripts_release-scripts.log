+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.534 I build: 4383 (485dc012) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.712 I main: llama backend init
0.00.000.719 I main: load the model and apply lora adapter, if any
0.00.020.973 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.982 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.993 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.997 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.998 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.002 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.005 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.006 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.006 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.007 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.007 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.010 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.011 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.012 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.012 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.013 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.108 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.269 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.068 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.074 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.075 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.076 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.076 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.077 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.078 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.080 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.080 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.081 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.081 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.082 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.086 I llama_model_loader: - type  f32:   37 tensors
0.00.130.087 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.297 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.542 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.142 I llm_load_vocab: special tokens cache size = 5
0.00.266.057 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.072 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.073 I llm_load_print_meta: arch             = gemma
0.00.266.073 I llm_load_print_meta: vocab type       = SPM
0.00.266.074 I llm_load_print_meta: n_vocab          = 256000
0.00.266.074 I llm_load_print_meta: n_merges         = 0
0.00.266.075 I llm_load_print_meta: vocab_only       = 0
0.00.266.075 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.075 I llm_load_print_meta: n_embd           = 2048
0.00.266.076 I llm_load_print_meta: n_layer          = 18
0.00.266.086 I llm_load_print_meta: n_head           = 8
0.00.266.087 I llm_load_print_meta: n_head_kv        = 1
0.00.266.087 I llm_load_print_meta: n_rot            = 256
0.00.266.087 I llm_load_print_meta: n_swa            = 0
0.00.266.088 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.088 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.089 I llm_load_print_meta: n_gqa            = 8
0.00.266.090 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.091 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.091 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.093 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.094 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.094 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.094 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.095 I llm_load_print_meta: n_ff             = 16384
0.00.266.095 I llm_load_print_meta: n_expert         = 0
0.00.266.096 I llm_load_print_meta: n_expert_used    = 0
0.00.266.096 I llm_load_print_meta: causal attn      = 1
0.00.266.096 I llm_load_print_meta: pooling type     = 0
0.00.266.097 I llm_load_print_meta: rope type        = 2
0.00.266.097 I llm_load_print_meta: rope scaling     = linear
0.00.266.098 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.099 I llm_load_print_meta: freq_scale_train = 1
0.00.266.099 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.100 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.100 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.100 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.101 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.101 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.101 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.102 I llm_load_print_meta: model type       = 2B
0.00.266.102 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.103 I llm_load_print_meta: model params     = 2.51 B
0.00.266.104 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.104 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.105 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.105 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.105 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.106 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.106 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.106 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.107 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.107 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.108 I llm_load_print_meta: max token length = 93
0.00.366.835 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.366.840 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.366.840 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.366.841 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.366.842 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.366.842 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.371.965 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.971 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.971 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.972 I llama_new_context_with_model: n_batch       = 2048
0.00.371.972 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.973 I llama_new_context_with_model: flash_attn    = 0
0.00.371.975 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.976 I llama_new_context_with_model: freq_scale    = 1
0.00.371.977 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.995 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.385.804 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.815 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.904 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.287 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.291 I llama_new_context_with_model: graph nodes  = 601
0.00.387.291 I llama_new_context_with_model: graph splits = 1
0.00.387.294 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.387.295 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.312 I main: llama threadpool init, n_threads = 4
0.00.472.328 I 
0.00.472.404 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.472.408 I 
0.00.472.451 I sampler seed: 1689781332
0.00.472.464 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.474 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.475 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.475 I 
 maneuvled, the young squire of the manor, crept through the overgrown hedges, his eyes wide with a mixture of fear and excitement.

The manor,

0.02.728.542 I llama_perf_sampler_print:    sampling time =       5.44 ms /    33 runs   (    0.16 ms per token,  6063.95 tokens per second)
0.02.728.545 I llama_perf_context_print:        load time =     471.58 ms
0.02.728.546 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.728.548 I llama_perf_context_print:        eval time =    2236.23 ms /    32 runs   (   69.88 ms per token,    14.31 tokens per second)
0.02.728.548 I llama_perf_context_print:       total time =    2256.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.531 I build: 4383 (485dc012) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.750 I main: load the model and apply lora adapter, if any
0.00.021.015 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.033 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.043 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.049 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.053 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.053 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.054 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.054 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.055 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.055 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.059 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.060 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.060 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.061 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.062 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.670 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.564 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.346 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.351 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.352 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.352 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.353 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.354 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.354 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.356 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.357 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.357 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.358 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.359 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.363 I llama_model_loader: - type  f32:   37 tensors
0.00.130.364 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.244 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.988 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.436 I llm_load_vocab: special tokens cache size = 5
0.00.262.214 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.228 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.228 I llm_load_print_meta: arch             = gemma
0.00.262.229 I llm_load_print_meta: vocab type       = SPM
0.00.262.229 I llm_load_print_meta: n_vocab          = 256000
0.00.262.230 I llm_load_print_meta: n_merges         = 0
0.00.262.230 I llm_load_print_meta: vocab_only       = 0
0.00.262.230 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.231 I llm_load_print_meta: n_embd           = 2048
0.00.262.231 I llm_load_print_meta: n_layer          = 18
0.00.262.241 I llm_load_print_meta: n_head           = 8
0.00.262.242 I llm_load_print_meta: n_head_kv        = 1
0.00.262.243 I llm_load_print_meta: n_rot            = 256
0.00.262.243 I llm_load_print_meta: n_swa            = 0
0.00.262.243 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.243 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.244 I llm_load_print_meta: n_gqa            = 8
0.00.262.245 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.246 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.247 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.248 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.249 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.249 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.250 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.250 I llm_load_print_meta: n_ff             = 16384
0.00.262.251 I llm_load_print_meta: n_expert         = 0
0.00.262.251 I llm_load_print_meta: n_expert_used    = 0
0.00.262.251 I llm_load_print_meta: causal attn      = 1
0.00.262.251 I llm_load_print_meta: pooling type     = 0
0.00.262.252 I llm_load_print_meta: rope type        = 2
0.00.262.252 I llm_load_print_meta: rope scaling     = linear
0.00.262.253 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.254 I llm_load_print_meta: freq_scale_train = 1
0.00.262.254 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.255 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.255 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.255 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.255 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.256 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.256 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.256 I llm_load_print_meta: model type       = 2B
0.00.262.257 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.257 I llm_load_print_meta: model params     = 2.51 B
0.00.262.259 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.259 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.259 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.260 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.260 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.260 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.261 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.261 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.261 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.262 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.262 I llm_load_print_meta: max token length = 93
0.00.358.014 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.363.054 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.059 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.059 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.060 I llama_new_context_with_model: n_batch       = 2048
0.00.363.061 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.061 I llama_new_context_with_model: flash_attn    = 0
0.00.363.063 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.065 I llama_new_context_with_model: freq_scale    = 1
0.00.363.066 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.086 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.377.515 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.529 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.616 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.829 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.835 I llama_new_context_with_model: graph nodes  = 601
0.00.378.836 I llama_new_context_with_model: graph splits = 1
0.00.378.838 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.378.839 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.028 I main: llama threadpool init, n_threads = 4
0.00.460.044 I 
0.00.460.120 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.460.123 I 
0.00.460.163 I sampler seed: 3440805566
0.00.460.174 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.185 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.188 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.188 I 
 increasities of the past?

I understand that the question is about exploring the similarities and differences between the medieval and modern worlds. However, it appears to specifically

0.02.636.364 I llama_perf_sampler_print:    sampling time =       5.48 ms /    33 runs   (    0.17 ms per token,  6026.30 tokens per second)
0.02.636.367 I llama_perf_context_print:        load time =     459.26 ms
0.02.636.368 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.636.369 I llama_perf_context_print:        eval time =    2157.41 ms /    32 runs   (   67.42 ms per token,    14.83 tokens per second)
0.02.636.372 I llama_perf_context_print:       total time =    2176.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.568 I build: 4383 (485dc012) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.803 I main: llama backend init
0.00.000.810 I main: load the model and apply lora adapter, if any
0.00.021.338 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.351 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.363 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.368 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.370 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.374 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.376 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.376 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.377 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.377 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.378 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.383 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.383 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.384 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.385 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.385 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.196 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.673 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.500 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.507 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.508 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.508 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.509 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.510 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.512 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.515 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.515 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.516 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.516 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.517 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.520 I llama_model_loader: - type  f32:   37 tensors
0.00.131.522 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.692 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.196 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.792 I llm_load_vocab: special tokens cache size = 5
0.00.269.893 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.910 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.910 I llm_load_print_meta: arch             = gemma
0.00.269.911 I llm_load_print_meta: vocab type       = SPM
0.00.269.912 I llm_load_print_meta: n_vocab          = 256000
0.00.269.912 I llm_load_print_meta: n_merges         = 0
0.00.269.913 I llm_load_print_meta: vocab_only       = 0
0.00.269.913 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.913 I llm_load_print_meta: n_embd           = 2048
0.00.269.913 I llm_load_print_meta: n_layer          = 18
0.00.269.925 I llm_load_print_meta: n_head           = 8
0.00.269.926 I llm_load_print_meta: n_head_kv        = 1
0.00.269.926 I llm_load_print_meta: n_rot            = 256
0.00.269.926 I llm_load_print_meta: n_swa            = 0
0.00.269.926 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.927 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.928 I llm_load_print_meta: n_gqa            = 8
0.00.269.929 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.930 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.930 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.931 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.932 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.932 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.932 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.933 I llm_load_print_meta: n_ff             = 16384
0.00.269.933 I llm_load_print_meta: n_expert         = 0
0.00.269.934 I llm_load_print_meta: n_expert_used    = 0
0.00.269.934 I llm_load_print_meta: causal attn      = 1
0.00.269.934 I llm_load_print_meta: pooling type     = 0
0.00.269.934 I llm_load_print_meta: rope type        = 2
0.00.269.935 I llm_load_print_meta: rope scaling     = linear
0.00.269.936 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.937 I llm_load_print_meta: freq_scale_train = 1
0.00.269.937 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.937 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.938 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.938 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.938 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.938 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.939 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.939 I llm_load_print_meta: model type       = 2B
0.00.269.939 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.940 I llm_load_print_meta: model params     = 2.51 B
0.00.269.941 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.941 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.942 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.942 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.943 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.943 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.943 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.944 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.944 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.945 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.945 I llm_load_print_meta: max token length = 93
0.00.348.359 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.348.365 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.348.367 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.348.367 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.348.368 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.348.368 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.353.701 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.706 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.706 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.707 I llama_new_context_with_model: n_batch       = 2048
0.00.353.707 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.708 I llama_new_context_with_model: flash_attn    = 0
0.00.353.710 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.711 I llama_new_context_with_model: freq_scale    = 1
0.00.353.712 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.731 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.367.915 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.367.928 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.026 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.289 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.296 I llama_new_context_with_model: graph nodes  = 601
0.00.369.296 I llama_new_context_with_model: graph splits = 1
0.00.369.299 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.369.300 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.619 I main: llama threadpool init, n_threads = 4
0.00.455.633 I 
0.00.455.711 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.455.716 I 
0.00.455.770 I sampler seed: 4122760215
0.00.455.781 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.801 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.805 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.805 I 
 increasities in a bustling metropolis like New York City.

The rumbling bass reverberated through the subway tunnels, the rhythmic thrumming barely audible over the ca

0.02.715.563 I llama_perf_sampler_print:    sampling time =       5.87 ms /    33 runs   (    0.18 ms per token,  5625.64 tokens per second)
0.02.715.566 I llama_perf_context_print:        load time =     454.79 ms
0.02.715.567 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.715.568 I llama_perf_context_print:        eval time =    2240.40 ms /    32 runs   (   70.01 ms per token,    14.28 tokens per second)
0.02.715.569 I llama_perf_context_print:       total time =    2259.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.551 I build: 4383 (485dc012) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.841 I main: llama backend init
0.00.000.850 I main: load the model and apply lora adapter, if any
0.00.028.323 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.028.333 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.028.346 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.355 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.356 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.361 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.365 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.366 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.367 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.368 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.369 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.374 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.375 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.376 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.377 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.028.378 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.082 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.138.796 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.145.710 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.145.717 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.145.723 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.145.724 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.145.725 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.145.726 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.145.727 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.145.730 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.145.737 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.145.738 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.145.739 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.145.741 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.145.745 I llama_model_loader: - type  f32:   37 tensors
0.00.145.747 I llama_model_loader: - type q8_0:  127 tensors
0.00.224.160 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.271.021 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.271.803 I llm_load_vocab: special tokens cache size = 5
0.00.292.913 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.292.934 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.292.934 I llm_load_print_meta: arch             = gemma
0.00.292.935 I llm_load_print_meta: vocab type       = SPM
0.00.292.936 I llm_load_print_meta: n_vocab          = 256000
0.00.292.936 I llm_load_print_meta: n_merges         = 0
0.00.292.936 I llm_load_print_meta: vocab_only       = 0
0.00.292.937 I llm_load_print_meta: n_ctx_train      = 8192
0.00.292.937 I llm_load_print_meta: n_embd           = 2048
0.00.292.937 I llm_load_print_meta: n_layer          = 18
0.00.292.949 I llm_load_print_meta: n_head           = 8
0.00.292.950 I llm_load_print_meta: n_head_kv        = 1
0.00.292.951 I llm_load_print_meta: n_rot            = 256
0.00.292.951 I llm_load_print_meta: n_swa            = 0
0.00.292.951 I llm_load_print_meta: n_embd_head_k    = 256
0.00.292.952 I llm_load_print_meta: n_embd_head_v    = 256
0.00.292.953 I llm_load_print_meta: n_gqa            = 8
0.00.292.954 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.292.955 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.292.955 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.292.956 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.292.957 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.292.957 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.292.958 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.292.958 I llm_load_print_meta: n_ff             = 16384
0.00.292.959 I llm_load_print_meta: n_expert         = 0
0.00.292.959 I llm_load_print_meta: n_expert_used    = 0
0.00.292.959 I llm_load_print_meta: causal attn      = 1
0.00.292.959 I llm_load_print_meta: pooling type     = 0
0.00.292.960 I llm_load_print_meta: rope type        = 2
0.00.292.960 I llm_load_print_meta: rope scaling     = linear
0.00.292.961 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.292.962 I llm_load_print_meta: freq_scale_train = 1
0.00.292.962 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.292.963 I llm_load_print_meta: rope_finetuned   = unknown
0.00.292.963 I llm_load_print_meta: ssm_d_conv       = 0
0.00.292.963 I llm_load_print_meta: ssm_d_inner      = 0
0.00.292.963 I llm_load_print_meta: ssm_d_state      = 0
0.00.292.964 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.292.964 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.292.964 I llm_load_print_meta: model type       = 2B
0.00.292.965 I llm_load_print_meta: model ftype      = Q8_0
0.00.292.966 I llm_load_print_meta: model params     = 2.51 B
0.00.292.966 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.292.967 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.292.967 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.292.968 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.292.968 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.292.968 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.292.969 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.292.969 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.292.969 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.292.970 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.292.970 I llm_load_print_meta: max token length = 93
0.00.370.814 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.370.823 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.376.054 I llama_new_context_with_model: n_seq_max     = 1
0.00.376.061 I llama_new_context_with_model: n_ctx         = 4096
0.00.376.061 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.376.062 I llama_new_context_with_model: n_batch       = 2048
0.00.376.062 I llama_new_context_with_model: n_ubatch      = 512
0.00.376.063 I llama_new_context_with_model: flash_attn    = 0
0.00.376.065 I llama_new_context_with_model: freq_base     = 10000.0
0.00.376.066 I llama_new_context_with_model: freq_scale    = 1
0.00.376.067 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.091 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.390.177 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.191 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.282 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.544 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.550 I llama_new_context_with_model: graph nodes  = 601
0.00.391.551 I llama_new_context_with_model: graph splits = 1
0.00.391.553 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.391.554 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.386 I main: llama threadpool init, n_threads = 4
0.00.480.402 I 
0.00.480.494 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.480.497 I 
0.00.480.548 I sampler seed: 3131235723
0.00.480.559 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.563 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.564 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.564 I 
 increasities, it is not possible to answer this question. [end of text]


0.01.464.050 I llama_perf_sampler_print:    sampling time =       2.55 ms /    14 runs   (    0.18 ms per token,  5490.20 tokens per second)
0.01.464.053 I llama_perf_context_print:        load time =     479.51 ms
0.01.464.054 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.464.055 I llama_perf_context_print:        eval time =     974.26 ms /    13 runs   (   74.94 ms per token,    13.34 tokens per second)
0.01.464.055 I llama_perf_context_print:       total time =     983.67 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.183s
user	0m33.604s
sys	0m9.350s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4383 (485dc012)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40237.23 ms
main:    total time = 40237.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 4383 (485dc012) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.021.535 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.542 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.550 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.555 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.558 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.562 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.563 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.564 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.564 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.565 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.566 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.569 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.570 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.571 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.571 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.572 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.898 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.026 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.832 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.839 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.840 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.841 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.842 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.843 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.844 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.847 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.848 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.848 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.849 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.851 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.854 I llama_model_loader: - type  f32:   37 tensors
0.00.130.856 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.856 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.114 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.009 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.559 I llm_load_vocab: special tokens cache size = 5
0.00.265.374 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.388 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.389 I llm_load_print_meta: arch             = gemma
0.00.265.390 I llm_load_print_meta: vocab type       = SPM
0.00.265.390 I llm_load_print_meta: n_vocab          = 256000
0.00.265.391 I llm_load_print_meta: n_merges         = 0
0.00.265.391 I llm_load_print_meta: vocab_only       = 0
0.00.265.391 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.392 I llm_load_print_meta: n_embd           = 2048
0.00.265.392 I llm_load_print_meta: n_layer          = 18
0.00.265.402 I llm_load_print_meta: n_head           = 8
0.00.265.403 I llm_load_print_meta: n_head_kv        = 1
0.00.265.404 I llm_load_print_meta: n_rot            = 256
0.00.265.404 I llm_load_print_meta: n_swa            = 0
0.00.265.404 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.405 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.406 I llm_load_print_meta: n_gqa            = 8
0.00.265.407 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.408 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.409 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.411 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.411 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.411 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.412 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.413 I llm_load_print_meta: n_ff             = 16384
0.00.265.413 I llm_load_print_meta: n_expert         = 0
0.00.265.414 I llm_load_print_meta: n_expert_used    = 0
0.00.265.414 I llm_load_print_meta: causal attn      = 1
0.00.265.414 I llm_load_print_meta: pooling type     = 0
0.00.265.414 I llm_load_print_meta: rope type        = 2
0.00.265.415 I llm_load_print_meta: rope scaling     = linear
0.00.265.416 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.417 I llm_load_print_meta: freq_scale_train = 1
0.00.265.417 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.417 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.418 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.418 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.418 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.418 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.419 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.419 I llm_load_print_meta: model type       = 2B
0.00.265.420 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.420 I llm_load_print_meta: model params     = 2.51 B
0.00.265.421 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.422 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.422 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.422 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.423 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.423 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.423 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.424 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.424 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.425 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.425 I llm_load_print_meta: max token length = 93
0.00.326.425 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.326.431 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.326.431 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.326.432 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.326.433 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.326.433 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.573 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.580 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.580 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.581 I llama_new_context_with_model: n_batch       = 2048
0.00.331.581 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.582 I llama_new_context_with_model: flash_attn    = 0
0.00.331.584 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.585 I llama_new_context_with_model: freq_scale    = 1
0.00.331.586 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.331.604 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.345.717 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.732 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.819 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.060 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.065 I llama_new_context_with_model: graph nodes  = 601
0.00.347.066 I llama_new_context_with_model: graph splits = 1
0.00.347.068 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.347.069 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.125 I main: llama threadpool init, n_threads = 4
0.00.422.140 I 
0.00.422.212 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.422.215 I 
0.00.422.257 I sampler seed: 3536936060
0.00.422.268 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.275 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.278 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.278 I 
 seconally in the heart of the forest, nestled amongst fallen leaves and tangled roots.

The small, weathered cabin stood defiant against the encroaching shadows. Its

0.02.015.206 I llama_perf_sampler_print:    sampling time =       5.61 ms /    33 runs   (    0.17 ms per token,  5879.21 tokens per second)
0.02.015.209 I llama_perf_context_print:        load time =     421.34 ms
0.02.015.210 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.015.211 I llama_perf_context_print:        eval time =    1574.08 ms /    32 runs   (   49.19 ms per token,    20.33 tokens per second)
0.02.015.212 I llama_perf_context_print:       total time =    1593.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4383 (485dc012)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40221.02 ms
main:    total time = 40221.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.517 I build: 4383 (485dc012) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.021.238 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.255 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.264 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.268 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.272 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.272 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.273 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.274 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.274 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.275 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.278 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.279 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.279 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.280 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.281 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.583 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.822 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.627 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.634 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.636 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.637 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.638 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.639 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.640 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.644 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.645 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.650 I llama_model_loader: - type  f32:   37 tensors
0.00.130.652 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.652 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.607 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.680 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.199 I llm_load_vocab: special tokens cache size = 5
0.00.273.890 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.906 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.906 I llm_load_print_meta: arch             = gemma
0.00.273.907 I llm_load_print_meta: vocab type       = SPM
0.00.273.907 I llm_load_print_meta: n_vocab          = 256000
0.00.273.908 I llm_load_print_meta: n_merges         = 0
0.00.273.908 I llm_load_print_meta: vocab_only       = 0
0.00.273.908 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.908 I llm_load_print_meta: n_embd           = 2048
0.00.273.909 I llm_load_print_meta: n_layer          = 18
0.00.273.921 I llm_load_print_meta: n_head           = 8
0.00.273.922 I llm_load_print_meta: n_head_kv        = 1
0.00.273.922 I llm_load_print_meta: n_rot            = 256
0.00.273.922 I llm_load_print_meta: n_swa            = 0
0.00.273.923 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.923 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.924 I llm_load_print_meta: n_gqa            = 8
0.00.273.925 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.926 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.927 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.928 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.928 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.929 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.929 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.930 I llm_load_print_meta: n_ff             = 16384
0.00.273.930 I llm_load_print_meta: n_expert         = 0
0.00.273.930 I llm_load_print_meta: n_expert_used    = 0
0.00.273.931 I llm_load_print_meta: causal attn      = 1
0.00.273.931 I llm_load_print_meta: pooling type     = 0
0.00.273.931 I llm_load_print_meta: rope type        = 2
0.00.273.932 I llm_load_print_meta: rope scaling     = linear
0.00.273.933 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.934 I llm_load_print_meta: freq_scale_train = 1
0.00.273.935 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.935 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.935 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.936 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.936 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.936 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.936 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.937 I llm_load_print_meta: model type       = 2B
0.00.273.937 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.938 I llm_load_print_meta: model params     = 2.51 B
0.00.273.939 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.939 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.940 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.940 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.941 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.941 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.941 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.942 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.942 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.943 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.943 I llm_load_print_meta: max token length = 93
0.00.332.219 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.337.451 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.458 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.458 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.458 I llama_new_context_with_model: n_batch       = 2048
0.00.337.459 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.459 I llama_new_context_with_model: flash_attn    = 0
0.00.337.462 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.463 I llama_new_context_with_model: freq_scale    = 1
0.00.337.464 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.337.488 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.352.355 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.371 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.462 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.732 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.738 I llama_new_context_with_model: graph nodes  = 601
0.00.353.739 I llama_new_context_with_model: graph splits = 1
0.00.353.741 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.353.742 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.236 I main: llama threadpool init, n_threads = 4
0.00.427.252 I 
0.00.427.345 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.427.349 I 
0.00.427.397 I sampler seed: 3004875510
0.00.427.410 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.413 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.414 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.415 I 
 squaRED, 21 August 2023

The government of Tanzania has confirmed the establishment of the Tanzania Electronic System (TES) to manage and

0.01.998.859 I llama_perf_sampler_print:    sampling time =       6.11 ms /    33 runs   (    0.19 ms per token,  5398.33 tokens per second)
0.01.998.862 I llama_perf_context_print:        load time =     426.47 ms
0.01.998.863 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.998.864 I llama_perf_context_print:        eval time =    1551.74 ms /    32 runs   (   48.49 ms per token,    20.62 tokens per second)
0.01.998.865 I llama_perf_context_print:       total time =    1571.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.247s
user	10m24.118s
sys	0m6.864s
