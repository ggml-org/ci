+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 3983 (48d5a1f8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.789 I main: load the model and apply lora adapter, if any
0.00.024.704 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.910 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.993 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.004 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.006 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.009 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.011 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.012 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.013 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.014 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.014 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.020 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.024 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.025 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.026 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.027 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.487 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.211 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.775 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.783 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.784 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.785 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.786 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.787 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.788 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.792 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.793 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.794 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.795 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.797 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.805 I llama_model_loader: - type  f32:   37 tensors
0.00.266.809 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.812 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.644 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.679 I llm_load_vocab: special tokens cache size = 5
0.00.614.933 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.001 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.005 I llm_load_print_meta: arch             = gemma
0.00.615.006 I llm_load_print_meta: vocab type       = SPM
0.00.615.007 I llm_load_print_meta: n_vocab          = 256000
0.00.615.009 I llm_load_print_meta: n_merges         = 0
0.00.615.010 I llm_load_print_meta: vocab_only       = 0
0.00.615.010 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.011 I llm_load_print_meta: n_embd           = 2048
0.00.615.011 I llm_load_print_meta: n_layer          = 18
0.00.615.073 I llm_load_print_meta: n_head           = 8
0.00.615.083 I llm_load_print_meta: n_head_kv        = 1
0.00.615.084 I llm_load_print_meta: n_rot            = 256
0.00.615.085 I llm_load_print_meta: n_swa            = 0
0.00.615.085 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.085 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.090 I llm_load_print_meta: n_gqa            = 8
0.00.615.094 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.099 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.101 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.103 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.103 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.104 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.104 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.109 I llm_load_print_meta: n_ff             = 16384
0.00.615.109 I llm_load_print_meta: n_expert         = 0
0.00.615.110 I llm_load_print_meta: n_expert_used    = 0
0.00.615.110 I llm_load_print_meta: causal attn      = 1
0.00.615.111 I llm_load_print_meta: pooling type     = 0
0.00.615.111 I llm_load_print_meta: rope type        = 2
0.00.615.111 I llm_load_print_meta: rope scaling     = linear
0.00.615.113 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.114 I llm_load_print_meta: freq_scale_train = 1
0.00.615.115 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.116 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.116 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.116 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.117 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.117 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.120 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.120 I llm_load_print_meta: model type       = 2B
0.00.615.121 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.122 I llm_load_print_meta: model params     = 2.51 B
0.00.615.123 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.123 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.123 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.124 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.124 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.125 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.125 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.126 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.132 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.134 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.135 I llm_load_print_meta: max token length = 93
0.00.615.298 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.715.861 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.715.871 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.715.872 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.715.872 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.715.873 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.715.874 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.721.638 I llama_new_context_with_model: n_ctx      = 8192
0.00.721.645 I llama_new_context_with_model: n_batch    = 2048
0.00.721.645 I llama_new_context_with_model: n_ubatch   = 512
0.00.721.646 I llama_new_context_with_model: flash_attn = 0
0.00.721.648 I llama_new_context_with_model: freq_base  = 10000.0
0.00.721.649 I llama_new_context_with_model: freq_scale = 1
0.00.751.107 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.751.151 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.751.262 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.752.621 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.752.626 I llama_new_context_with_model: graph nodes  = 601
0.00.752.626 I llama_new_context_with_model: graph splits = 1
0.00.752.642 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.366.936 I main: llama threadpool init, n_threads = 4
0.01.366.949 I 
0.01.367.056 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.367.060 I 
0.01.367.290 I sampler seed: 3791889822
0.01.367.302 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.367.311 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.367.312 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.367.312 I 
 increasively and is no longer under my control. [end of text]


0.05.996.231 I llama_perf_sampler_print:    sampling time =      16.97 ms /    12 runs   (    1.41 ms per token,   706.96 tokens per second)
0.05.996.247 I llama_perf_context_print:        load time =    1364.06 ms
0.05.996.249 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.996.250 I llama_perf_context_print:        eval time =    4595.62 ms /    11 runs   (  417.78 ms per token,     2.39 tokens per second)
0.05.996.251 I llama_perf_context_print:       total time =    4629.31 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 3983 (48d5a1f8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.002.787 I main: load the model and apply lora adapter, if any
0.00.024.741 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.831 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.844 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.848 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.853 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.855 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.856 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.857 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.858 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.859 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.865 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.866 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.868 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.869 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.871 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.593 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.220 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.907 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.918 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.919 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.920 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.921 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.923 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.924 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.929 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.930 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.931 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.932 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.265.934 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.944 I llama_model_loader: - type  f32:   37 tensors
0.00.265.948 I llama_model_loader: - type q8_0:  127 tensors
0.00.439.009 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.839 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.776 I llm_load_vocab: special tokens cache size = 5
0.00.594.841 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.906 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.907 I llm_load_print_meta: arch             = gemma
0.00.594.907 I llm_load_print_meta: vocab type       = SPM
0.00.594.908 I llm_load_print_meta: n_vocab          = 256000
0.00.594.910 I llm_load_print_meta: n_merges         = 0
0.00.594.910 I llm_load_print_meta: vocab_only       = 0
0.00.594.911 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.911 I llm_load_print_meta: n_embd           = 2048
0.00.594.912 I llm_load_print_meta: n_layer          = 18
0.00.594.977 I llm_load_print_meta: n_head           = 8
0.00.594.984 I llm_load_print_meta: n_head_kv        = 1
0.00.594.988 I llm_load_print_meta: n_rot            = 256
0.00.594.988 I llm_load_print_meta: n_swa            = 0
0.00.594.988 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.989 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.993 I llm_load_print_meta: n_gqa            = 8
0.00.594.998 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.595.005 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.595.007 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.595.008 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.595.010 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.595.010 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.595.011 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.595.016 I llm_load_print_meta: n_ff             = 16384
0.00.595.018 I llm_load_print_meta: n_expert         = 0
0.00.595.019 I llm_load_print_meta: n_expert_used    = 0
0.00.595.019 I llm_load_print_meta: causal attn      = 1
0.00.595.019 I llm_load_print_meta: pooling type     = 0
0.00.595.019 I llm_load_print_meta: rope type        = 2
0.00.595.020 I llm_load_print_meta: rope scaling     = linear
0.00.595.021 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.022 I llm_load_print_meta: freq_scale_train = 1
0.00.595.022 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.022 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.024 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.024 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.024 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.025 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.025 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.026 I llm_load_print_meta: model type       = 2B
0.00.595.027 I llm_load_print_meta: model ftype      = Q8_0
0.00.595.028 I llm_load_print_meta: model params     = 2.51 B
0.00.595.029 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.595.029 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.030 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.031 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.031 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.031 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.032 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.033 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.038 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.040 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.041 I llm_load_print_meta: max token length = 93
0.00.595.200 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.690.041 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.695.654 I llama_new_context_with_model: n_ctx      = 8192
0.00.695.661 I llama_new_context_with_model: n_batch    = 2048
0.00.695.662 I llama_new_context_with_model: n_ubatch   = 512
0.00.695.662 I llama_new_context_with_model: flash_attn = 0
0.00.695.665 I llama_new_context_with_model: freq_base  = 10000.0
0.00.695.665 I llama_new_context_with_model: freq_scale = 1
0.00.725.005 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.725.051 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.725.164 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.553 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.726.558 I llama_new_context_with_model: graph nodes  = 601
0.00.726.558 I llama_new_context_with_model: graph splits = 1
0.00.726.574 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.375.281 I main: llama threadpool init, n_threads = 4
0.01.375.293 I 
0.01.375.400 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.375.405 I 
0.01.375.643 I sampler seed: 3817867894
0.01.375.659 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.375.668 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.375.670 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.375.671 I 
 increasities
I am unable to generate a response as the context provided contains sexually suggestive and inappropriate content. My purpose is to assist with tasks that are within the

0.14.965.632 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.78 tokens per second)
0.14.965.635 I llama_perf_context_print:        load time =    1372.40 ms
0.14.965.637 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.965.642 I llama_perf_context_print:        eval time =   13494.42 ms /    32 runs   (  421.70 ms per token,     2.37 tokens per second)
0.14.965.643 I llama_perf_context_print:       total time =   13590.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 3983 (48d5a1f8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.002.785 I main: load the model and apply lora adapter, if any
0.00.024.720 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.931 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.018 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.030 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.031 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.036 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.039 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.040 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.041 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.042 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.044 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.054 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.055 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.056 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.057 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.058 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.644 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.094 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.670 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.678 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.679 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.680 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.681 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.682 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.683 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.688 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.689 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.691 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.692 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.693 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.701 I llama_model_loader: - type  f32:   37 tensors
0.00.266.705 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.654 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.952 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.841 I llm_load_vocab: special tokens cache size = 5
0.00.602.753 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.822 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.823 I llm_load_print_meta: arch             = gemma
0.00.602.824 I llm_load_print_meta: vocab type       = SPM
0.00.602.825 I llm_load_print_meta: n_vocab          = 256000
0.00.602.826 I llm_load_print_meta: n_merges         = 0
0.00.602.827 I llm_load_print_meta: vocab_only       = 0
0.00.602.827 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.828 I llm_load_print_meta: n_embd           = 2048
0.00.602.828 I llm_load_print_meta: n_layer          = 18
0.00.602.891 I llm_load_print_meta: n_head           = 8
0.00.602.898 I llm_load_print_meta: n_head_kv        = 1
0.00.602.898 I llm_load_print_meta: n_rot            = 256
0.00.602.899 I llm_load_print_meta: n_swa            = 0
0.00.602.900 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.901 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.905 I llm_load_print_meta: n_gqa            = 8
0.00.602.911 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.917 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.918 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.919 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.920 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.932 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.933 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.951 I llm_load_print_meta: n_ff             = 16384
0.00.602.955 I llm_load_print_meta: n_expert         = 0
0.00.602.955 I llm_load_print_meta: n_expert_used    = 0
0.00.602.956 I llm_load_print_meta: causal attn      = 1
0.00.602.956 I llm_load_print_meta: pooling type     = 0
0.00.602.956 I llm_load_print_meta: rope type        = 2
0.00.602.957 I llm_load_print_meta: rope scaling     = linear
0.00.602.958 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.959 I llm_load_print_meta: freq_scale_train = 1
0.00.602.959 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.960 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.960 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.960 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.961 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.961 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.961 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.971 I llm_load_print_meta: model type       = 2B
0.00.602.973 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.973 I llm_load_print_meta: model params     = 2.51 B
0.00.602.974 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.975 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.975 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.976 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.976 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.977 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.978 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.978 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.984 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.985 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.986 I llm_load_print_meta: max token length = 93
0.00.603.149 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.681.679 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.681.688 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.681.690 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.681.690 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.681.691 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.681.692 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.687.464 I llama_new_context_with_model: n_ctx      = 8192
0.00.687.472 I llama_new_context_with_model: n_batch    = 2048
0.00.687.472 I llama_new_context_with_model: n_ubatch   = 512
0.00.687.473 I llama_new_context_with_model: flash_attn = 0
0.00.687.476 I llama_new_context_with_model: freq_base  = 10000.0
0.00.687.477 I llama_new_context_with_model: freq_scale = 1
0.00.716.666 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.716.706 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.716.818 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.718.260 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.718.265 I llama_new_context_with_model: graph nodes  = 601
0.00.718.266 I llama_new_context_with_model: graph splits = 1
0.00.718.282 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.368.635 I main: llama threadpool init, n_threads = 4
0.01.368.646 I 
0.01.368.751 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.368.755 I 
0.01.368.984 I sampler seed: 3020187874
0.01.368.998 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.369.005 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.369.007 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.369.007 I 
 increasities with a penchant for the scandalous.

This is an example of:

a. Descriptive writing
b. Narrative writing
c. Dramatic writing


0.14.877.383 I llama_perf_sampler_print:    sampling time =      48.94 ms /    33 runs   (    1.48 ms per token,   674.32 tokens per second)
0.14.877.407 I llama_perf_context_print:        load time =    1365.76 ms
0.14.877.409 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.877.412 I llama_perf_context_print:        eval time =   13413.23 ms /    32 runs   (  419.16 ms per token,     2.39 tokens per second)
0.14.877.416 I llama_perf_context_print:       total time =   13508.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 3983 (48d5a1f8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.817 I main: llama backend init
0.00.002.751 I main: load the model and apply lora adapter, if any
0.00.024.511 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.722 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.810 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.820 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.822 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.826 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.827 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.829 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.830 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.831 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.832 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.839 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.843 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.844 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.845 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.845 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.986 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.852 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.488 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.497 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.498 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.499 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.500 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.501 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.503 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.508 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.509 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.510 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.511 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.513 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.521 I llama_model_loader: - type  f32:   37 tensors
0.00.266.525 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.732 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.287 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.355 I llm_load_vocab: special tokens cache size = 5
0.00.608.787 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.856 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.858 I llm_load_print_meta: arch             = gemma
0.00.608.858 I llm_load_print_meta: vocab type       = SPM
0.00.608.859 I llm_load_print_meta: n_vocab          = 256000
0.00.608.861 I llm_load_print_meta: n_merges         = 0
0.00.608.862 I llm_load_print_meta: vocab_only       = 0
0.00.608.862 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.862 I llm_load_print_meta: n_embd           = 2048
0.00.608.863 I llm_load_print_meta: n_layer          = 18
0.00.608.923 I llm_load_print_meta: n_head           = 8
0.00.608.930 I llm_load_print_meta: n_head_kv        = 1
0.00.608.930 I llm_load_print_meta: n_rot            = 256
0.00.608.931 I llm_load_print_meta: n_swa            = 0
0.00.608.931 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.931 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.936 I llm_load_print_meta: n_gqa            = 8
0.00.608.941 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.946 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.968 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.970 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.970 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.971 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.971 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.976 I llm_load_print_meta: n_ff             = 16384
0.00.608.977 I llm_load_print_meta: n_expert         = 0
0.00.608.981 I llm_load_print_meta: n_expert_used    = 0
0.00.608.982 I llm_load_print_meta: causal attn      = 1
0.00.608.982 I llm_load_print_meta: pooling type     = 0
0.00.608.983 I llm_load_print_meta: rope type        = 2
0.00.608.983 I llm_load_print_meta: rope scaling     = linear
0.00.608.988 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.988 I llm_load_print_meta: freq_scale_train = 1
0.00.608.989 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.990 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.990 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.990 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.991 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.991 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.992 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.992 I llm_load_print_meta: model type       = 2B
0.00.608.993 I llm_load_print_meta: model ftype      = Q8_0
0.00.609.001 I llm_load_print_meta: model params     = 2.51 B
0.00.609.003 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.609.003 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.004 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.004 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.005 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.005 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.006 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.007 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.012 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.014 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.014 I llm_load_print_meta: max token length = 93
0.00.609.179 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.680.325 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.680.334 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.685.926 I llama_new_context_with_model: n_ctx      = 8192
0.00.685.933 I llama_new_context_with_model: n_batch    = 2048
0.00.685.933 I llama_new_context_with_model: n_ubatch   = 512
0.00.685.934 I llama_new_context_with_model: flash_attn = 0
0.00.685.937 I llama_new_context_with_model: freq_base  = 10000.0
0.00.685.937 I llama_new_context_with_model: freq_scale = 1
0.00.714.933 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.714.975 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.715.089 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.516 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.716.521 I llama_new_context_with_model: graph nodes  = 601
0.00.716.521 I llama_new_context_with_model: graph splits = 1
0.00.716.536 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.329.645 I main: llama threadpool init, n_threads = 4
0.01.329.658 I 
0.01.329.762 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.329.766 I 
0.01.329.994 I sampler seed: 4112330618
0.01.330.006 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.330.013 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.330.016 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.330.016 I 
 increasities can occur in a variety of settings, including hospitals, clinics, and other healthcare facilities.

**Causes of Nursing-Related Injuries**

* Patient

0.14.815.892 I llama_perf_sampler_print:    sampling time =      49.29 ms /    33 runs   (    1.49 ms per token,   669.47 tokens per second)
0.14.815.895 I llama_perf_context_print:        load time =    1326.81 ms
0.14.815.897 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.815.899 I llama_perf_context_print:        eval time =   13390.18 ms /    32 runs   (  418.44 ms per token,     2.39 tokens per second)
0.14.815.900 I llama_perf_context_print:       total time =   13486.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m0.687s
user	3m13.712s
sys	0m9.408s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3983 (48d5a1f8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198564.24 ms
main:    total time = 198564.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 3983 (48d5a1f8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.764 I main: load the model and apply lora adapter, if any
0.00.024.614 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.816 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.901 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.914 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.916 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.920 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.922 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.924 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.925 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.926 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.927 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.933 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.934 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.935 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.937 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.938 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.644 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.897 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.508 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.515 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.517 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.518 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.519 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.520 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.521 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.525 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.526 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.527 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.528 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.530 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.537 I llama_model_loader: - type  f32:   37 tensors
0.00.265.541 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.542 I llama_model_loader: - type q6_K:   19 tensors
0.00.441.630 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.123 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.965 I llm_load_vocab: special tokens cache size = 5
0.00.596.273 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.341 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.342 I llm_load_print_meta: arch             = gemma
0.00.596.343 I llm_load_print_meta: vocab type       = SPM
0.00.596.343 I llm_load_print_meta: n_vocab          = 256000
0.00.596.346 I llm_load_print_meta: n_merges         = 0
0.00.596.346 I llm_load_print_meta: vocab_only       = 0
0.00.596.347 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.347 I llm_load_print_meta: n_embd           = 2048
0.00.596.347 I llm_load_print_meta: n_layer          = 18
0.00.596.410 I llm_load_print_meta: n_head           = 8
0.00.596.417 I llm_load_print_meta: n_head_kv        = 1
0.00.596.418 I llm_load_print_meta: n_rot            = 256
0.00.596.418 I llm_load_print_meta: n_swa            = 0
0.00.596.419 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.419 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.424 I llm_load_print_meta: n_gqa            = 8
0.00.596.428 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.434 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.435 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.436 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.437 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.438 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.438 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.443 I llm_load_print_meta: n_ff             = 16384
0.00.596.443 I llm_load_print_meta: n_expert         = 0
0.00.596.444 I llm_load_print_meta: n_expert_used    = 0
0.00.596.444 I llm_load_print_meta: causal attn      = 1
0.00.596.444 I llm_load_print_meta: pooling type     = 0
0.00.596.444 I llm_load_print_meta: rope type        = 2
0.00.596.446 I llm_load_print_meta: rope scaling     = linear
0.00.596.447 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.449 I llm_load_print_meta: freq_scale_train = 1
0.00.596.449 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.450 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.450 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.455 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.455 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.455 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.456 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.456 I llm_load_print_meta: model type       = 2B
0.00.596.457 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.596.458 I llm_load_print_meta: model params     = 2.51 B
0.00.596.469 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.596.470 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.470 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.484 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.485 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.485 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.486 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.487 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.493 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.495 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.495 I llm_load_print_meta: max token length = 93
0.00.596.654 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.658.150 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.658.160 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.658.161 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.658.162 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.658.163 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.658.163 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.663.727 I llama_new_context_with_model: n_ctx      = 8192
0.00.663.748 I llama_new_context_with_model: n_batch    = 2048
0.00.663.748 I llama_new_context_with_model: n_ubatch   = 512
0.00.663.749 I llama_new_context_with_model: flash_attn = 0
0.00.663.751 I llama_new_context_with_model: freq_base  = 10000.0
0.00.663.752 I llama_new_context_with_model: freq_scale = 1
0.00.692.339 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.692.380 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.692.487 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.693.859 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.693.864 I llama_new_context_with_model: graph nodes  = 601
0.00.693.864 I llama_new_context_with_model: graph splits = 1
0.00.693.881 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.497 I main: llama threadpool init, n_threads = 4
0.01.271.509 I 
0.01.271.618 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.271.621 I 
0.01.271.871 I sampler seed: 384024394
0.01.271.884 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.271.891 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.271.895 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.271.895 I 
 seconally in the first sentence of the second paragraph, suggesting the reader is not to believe the narrator's claims.

**The narrator's claims about

0.12.281.755 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.58 tokens per second)
0.12.281.770 I llama_perf_context_print:        load time =    1268.65 ms
0.12.281.771 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.281.773 I llama_perf_context_print:        eval time =   10915.39 ms /    32 runs   (  341.11 ms per token,     2.93 tokens per second)
0.12.281.774 I llama_perf_context_print:       total time =   11010.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3983 (48d5a1f8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198539.35 ms
main:    total time = 198539.35 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.556 I build: 3983 (48d5a1f8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.758 I main: llama backend init
0.00.002.701 I main: load the model and apply lora adapter, if any
0.00.024.582 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.669 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.682 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.684 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.688 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.689 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.691 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.694 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.695 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.696 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.701 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.702 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.703 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.704 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.706 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.616 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.332 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.932 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.939 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.940 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.941 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.942 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.944 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.945 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.949 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.949 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.957 I llama_model_loader: - type  f32:   37 tensors
0.00.265.961 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.961 I llama_model_loader: - type q6_K:   19 tensors
0.00.454.162 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.212 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.139 I llm_load_vocab: special tokens cache size = 5
0.00.629.198 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.629.271 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.629.272 I llm_load_print_meta: arch             = gemma
0.00.629.273 I llm_load_print_meta: vocab type       = SPM
0.00.629.274 I llm_load_print_meta: n_vocab          = 256000
0.00.629.276 I llm_load_print_meta: n_merges         = 0
0.00.629.277 I llm_load_print_meta: vocab_only       = 0
0.00.629.277 I llm_load_print_meta: n_ctx_train      = 8192
0.00.629.277 I llm_load_print_meta: n_embd           = 2048
0.00.629.278 I llm_load_print_meta: n_layer          = 18
0.00.629.342 I llm_load_print_meta: n_head           = 8
0.00.629.350 I llm_load_print_meta: n_head_kv        = 1
0.00.629.350 I llm_load_print_meta: n_rot            = 256
0.00.629.350 I llm_load_print_meta: n_swa            = 0
0.00.629.352 I llm_load_print_meta: n_embd_head_k    = 256
0.00.629.357 I llm_load_print_meta: n_embd_head_v    = 256
0.00.629.378 I llm_load_print_meta: n_gqa            = 8
0.00.629.383 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.629.389 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.629.391 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.629.392 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.629.395 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.629.396 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.629.396 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.629.401 I llm_load_print_meta: n_ff             = 16384
0.00.629.402 I llm_load_print_meta: n_expert         = 0
0.00.629.414 I llm_load_print_meta: n_expert_used    = 0
0.00.629.414 I llm_load_print_meta: causal attn      = 1
0.00.629.415 I llm_load_print_meta: pooling type     = 0
0.00.629.416 I llm_load_print_meta: rope type        = 2
0.00.629.417 I llm_load_print_meta: rope scaling     = linear
0.00.629.418 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.629.419 I llm_load_print_meta: freq_scale_train = 1
0.00.629.420 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.629.421 I llm_load_print_meta: rope_finetuned   = unknown
0.00.629.421 I llm_load_print_meta: ssm_d_conv       = 0
0.00.629.422 I llm_load_print_meta: ssm_d_inner      = 0
0.00.629.422 I llm_load_print_meta: ssm_d_state      = 0
0.00.629.422 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.629.430 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.629.432 I llm_load_print_meta: model type       = 2B
0.00.629.433 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.629.434 I llm_load_print_meta: model params     = 2.51 B
0.00.629.442 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.629.442 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.629.443 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.629.444 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.629.445 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.629.445 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.629.445 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.629.446 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.629.452 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.629.454 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.629.454 I llm_load_print_meta: max token length = 93
0.00.629.620 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.687.140 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.692.797 I llama_new_context_with_model: n_ctx      = 8192
0.00.692.804 I llama_new_context_with_model: n_batch    = 2048
0.00.692.804 I llama_new_context_with_model: n_ubatch   = 512
0.00.692.805 I llama_new_context_with_model: flash_attn = 0
0.00.692.808 I llama_new_context_with_model: freq_base  = 10000.0
0.00.692.808 I llama_new_context_with_model: freq_scale = 1
0.00.722.419 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.722.465 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.722.584 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.724.015 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.724.020 I llama_new_context_with_model: graph nodes  = 601
0.00.724.020 I llama_new_context_with_model: graph splits = 1
0.00.724.036 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.304.899 I main: llama threadpool init, n_threads = 4
0.01.304.912 I 
0.01.305.020 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.305.024 I 
0.01.305.254 I sampler seed: 2233885446
0.01.305.267 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.305.275 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.305.276 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.305.276 I 
 squaRE-C, a novel strategy for the control of qubits in superconducting circuits, is proposed. SquASE-C offers advantages such as scalability, robustness

0.12.313.377 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.41 tokens per second)
0.12.313.382 I llama_perf_context_print:        load time =    1302.11 ms
0.12.313.384 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.313.386 I llama_perf_context_print:        eval time =   10913.72 ms /    32 runs   (  341.05 ms per token,     2.93 tokens per second)
0.12.313.387 I llama_perf_context_print:       total time =   11008.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.572s
user	50m9.059s
sys	0m6.474s
