+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.553 I build: 3983 (48d5a1f8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.001.887 I main: load the model and apply lora adapter, if any
0.00.023.440 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.488 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.499 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.504 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.507 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.512 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.513 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.514 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.515 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.515 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.516 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.520 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.521 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.522 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.522 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.523 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.482 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.115 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.990 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.996 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.996 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.997 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.997 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.998 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.999 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.001 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.002 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.002 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.003 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.005 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.008 I llama_model_loader: - type  f32:   37 tensors
0.00.134.012 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.189 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.058 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.650 I llm_load_vocab: special tokens cache size = 5
0.00.272.445 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.461 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.461 I llm_load_print_meta: arch             = gemma
0.00.272.462 I llm_load_print_meta: vocab type       = SPM
0.00.272.463 I llm_load_print_meta: n_vocab          = 256000
0.00.272.463 I llm_load_print_meta: n_merges         = 0
0.00.272.463 I llm_load_print_meta: vocab_only       = 0
0.00.272.464 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.464 I llm_load_print_meta: n_embd           = 2048
0.00.272.464 I llm_load_print_meta: n_layer          = 18
0.00.272.475 I llm_load_print_meta: n_head           = 8
0.00.272.476 I llm_load_print_meta: n_head_kv        = 1
0.00.272.476 I llm_load_print_meta: n_rot            = 256
0.00.272.476 I llm_load_print_meta: n_swa            = 0
0.00.272.477 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.477 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.478 I llm_load_print_meta: n_gqa            = 8
0.00.272.479 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.480 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.481 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.483 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.483 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.484 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.484 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.485 I llm_load_print_meta: n_ff             = 16384
0.00.272.485 I llm_load_print_meta: n_expert         = 0
0.00.272.486 I llm_load_print_meta: n_expert_used    = 0
0.00.272.486 I llm_load_print_meta: causal attn      = 1
0.00.272.486 I llm_load_print_meta: pooling type     = 0
0.00.272.486 I llm_load_print_meta: rope type        = 2
0.00.272.487 I llm_load_print_meta: rope scaling     = linear
0.00.272.488 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.488 I llm_load_print_meta: freq_scale_train = 1
0.00.272.489 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.489 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.490 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.490 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.490 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.490 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.491 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.491 I llm_load_print_meta: model type       = 2B
0.00.272.492 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.492 I llm_load_print_meta: model params     = 2.51 B
0.00.272.493 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.493 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.494 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.494 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.494 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.495 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.495 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.495 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.496 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.497 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.497 I llm_load_print_meta: max token length = 93
0.00.272.516 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.369.726 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.369.733 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.369.734 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.369.734 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.369.735 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.369.736 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.374.885 I llama_new_context_with_model: n_ctx      = 8192
0.00.374.894 I llama_new_context_with_model: n_batch    = 2048
0.00.374.895 I llama_new_context_with_model: n_ubatch   = 512
0.00.374.895 I llama_new_context_with_model: flash_attn = 0
0.00.374.898 I llama_new_context_with_model: freq_base  = 10000.0
0.00.374.899 I llama_new_context_with_model: freq_scale = 1
0.00.404.542 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.404.559 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.404.656 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.554 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.405.560 I llama_new_context_with_model: graph nodes  = 601
0.00.405.560 I llama_new_context_with_model: graph splits = 1
0.00.405.562 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.496.214 I main: llama threadpool init, n_threads = 4
0.00.496.229 I 
0.00.496.315 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.496.319 I 
0.00.496.368 I sampler seed: 1121773219
0.00.496.379 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.496.383 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.496.383 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.496.384 I 
 increably, and I can't help but smile.

I am unable to generate the requested response due to safety restrictions. [end of text]


0.02.382.108 I llama_perf_sampler_print:    sampling time =       4.08 ms /    28 runs   (    0.15 ms per token,  6854.35 tokens per second)
0.02.382.110 I llama_perf_context_print:        load time =     494.30 ms
0.02.382.111 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.382.112 I llama_perf_context_print:        eval time =    1869.69 ms /    27 runs   (   69.25 ms per token,    14.44 tokens per second)
0.02.382.113 I llama_perf_context_print:       total time =    1885.90 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.546 I build: 3983 (48d5a1f8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.001.841 I main: load the model and apply lora adapter, if any
0.00.021.909 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.920 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.930 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.931 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.935 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.935 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.936 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.937 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.937 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.938 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.942 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.942 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.943 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.944 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.944 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.486 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.911 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.757 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.764 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.764 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.765 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.765 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.766 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.767 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.769 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.770 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.771 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.772 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.773 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.776 I llama_model_loader: - type  f32:   37 tensors
0.00.131.778 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.819 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.965 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.403 I llm_load_vocab: special tokens cache size = 5
0.00.260.143 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.158 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.159 I llm_load_print_meta: arch             = gemma
0.00.260.159 I llm_load_print_meta: vocab type       = SPM
0.00.260.160 I llm_load_print_meta: n_vocab          = 256000
0.00.260.160 I llm_load_print_meta: n_merges         = 0
0.00.260.160 I llm_load_print_meta: vocab_only       = 0
0.00.260.161 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.161 I llm_load_print_meta: n_embd           = 2048
0.00.260.161 I llm_load_print_meta: n_layer          = 18
0.00.260.173 I llm_load_print_meta: n_head           = 8
0.00.260.174 I llm_load_print_meta: n_head_kv        = 1
0.00.260.174 I llm_load_print_meta: n_rot            = 256
0.00.260.174 I llm_load_print_meta: n_swa            = 0
0.00.260.175 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.175 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.176 I llm_load_print_meta: n_gqa            = 8
0.00.260.177 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.178 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.178 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.180 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.180 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.181 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.181 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.182 I llm_load_print_meta: n_ff             = 16384
0.00.260.182 I llm_load_print_meta: n_expert         = 0
0.00.260.183 I llm_load_print_meta: n_expert_used    = 0
0.00.260.183 I llm_load_print_meta: causal attn      = 1
0.00.260.183 I llm_load_print_meta: pooling type     = 0
0.00.260.183 I llm_load_print_meta: rope type        = 2
0.00.260.183 I llm_load_print_meta: rope scaling     = linear
0.00.260.185 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.186 I llm_load_print_meta: freq_scale_train = 1
0.00.260.186 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.186 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.187 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.187 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.187 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.188 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.188 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.189 I llm_load_print_meta: model type       = 2B
0.00.260.189 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.190 I llm_load_print_meta: model params     = 2.51 B
0.00.260.191 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.192 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.192 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.192 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.193 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.193 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.193 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.194 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.194 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.194 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.195 I llm_load_print_meta: max token length = 93
0.00.260.213 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.356.157 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.361.187 I llama_new_context_with_model: n_ctx      = 8192
0.00.361.192 I llama_new_context_with_model: n_batch    = 2048
0.00.361.193 I llama_new_context_with_model: n_ubatch   = 512
0.00.361.193 I llama_new_context_with_model: flash_attn = 0
0.00.361.196 I llama_new_context_with_model: freq_base  = 10000.0
0.00.361.196 I llama_new_context_with_model: freq_scale = 1
0.00.389.651 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.389.667 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.389.759 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.620 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.390.628 I llama_new_context_with_model: graph nodes  = 601
0.00.390.628 I llama_new_context_with_model: graph splits = 1
0.00.390.630 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.084 I main: llama threadpool init, n_threads = 4
0.00.477.096 I 
0.00.477.171 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.477.175 I 
0.00.477.215 I sampler seed: 2820270612
0.00.477.225 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.228 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.228 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.228 I 
 increably.

I am unable to generate text that is sexually suggestive in nature. [end of text]


0.01.696.175 I llama_perf_sampler_print:    sampling time =       2.85 ms /    19 runs   (    0.15 ms per token,  6661.99 tokens per second)
0.01.696.178 I llama_perf_context_print:        load time =     475.22 ms
0.01.696.179 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.696.181 I llama_perf_context_print:        eval time =    1207.72 ms /    18 runs   (   67.10 ms per token,    14.90 tokens per second)
0.01.696.182 I llama_perf_context_print:       total time =    1219.10 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.554 I build: 3983 (48d5a1f8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.782 I main: llama backend init
0.00.001.926 I main: load the model and apply lora adapter, if any
0.00.021.841 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.896 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.910 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.916 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.920 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.924 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.925 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.926 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.927 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.928 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.929 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.934 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.935 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.936 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.937 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.938 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.632 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.627 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.610 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.620 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.621 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.621 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.622 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.623 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.624 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.626 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.628 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.628 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.629 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.630 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.634 I llama_model_loader: - type  f32:   37 tensors
0.00.132.637 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.599 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.920 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.534 I llm_load_vocab: special tokens cache size = 5
0.00.268.323 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.347 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.347 I llm_load_print_meta: arch             = gemma
0.00.268.348 I llm_load_print_meta: vocab type       = SPM
0.00.268.348 I llm_load_print_meta: n_vocab          = 256000
0.00.268.349 I llm_load_print_meta: n_merges         = 0
0.00.268.349 I llm_load_print_meta: vocab_only       = 0
0.00.268.349 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.350 I llm_load_print_meta: n_embd           = 2048
0.00.268.350 I llm_load_print_meta: n_layer          = 18
0.00.268.362 I llm_load_print_meta: n_head           = 8
0.00.268.363 I llm_load_print_meta: n_head_kv        = 1
0.00.268.363 I llm_load_print_meta: n_rot            = 256
0.00.268.364 I llm_load_print_meta: n_swa            = 0
0.00.268.364 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.364 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.365 I llm_load_print_meta: n_gqa            = 8
0.00.268.366 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.367 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.367 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.369 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.370 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.370 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.370 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.371 I llm_load_print_meta: n_ff             = 16384
0.00.268.371 I llm_load_print_meta: n_expert         = 0
0.00.268.372 I llm_load_print_meta: n_expert_used    = 0
0.00.268.372 I llm_load_print_meta: causal attn      = 1
0.00.268.372 I llm_load_print_meta: pooling type     = 0
0.00.268.372 I llm_load_print_meta: rope type        = 2
0.00.268.373 I llm_load_print_meta: rope scaling     = linear
0.00.268.374 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.375 I llm_load_print_meta: freq_scale_train = 1
0.00.268.375 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.375 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.376 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.376 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.376 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.377 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.377 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.378 I llm_load_print_meta: model type       = 2B
0.00.268.378 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.379 I llm_load_print_meta: model params     = 2.51 B
0.00.268.380 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.380 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.380 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.380 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.381 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.381 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.381 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.382 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.382 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.383 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.383 I llm_load_print_meta: max token length = 93
0.00.268.405 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.346.336 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.346.344 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.346.345 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.346.345 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.346.346 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.346.346 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.351.369 I llama_new_context_with_model: n_ctx      = 8192
0.00.351.376 I llama_new_context_with_model: n_batch    = 2048
0.00.351.377 I llama_new_context_with_model: n_ubatch   = 512
0.00.351.377 I llama_new_context_with_model: flash_attn = 0
0.00.351.380 I llama_new_context_with_model: freq_base  = 10000.0
0.00.351.381 I llama_new_context_with_model: freq_scale = 1
0.00.380.664 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.380.679 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.380.772 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.671 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.381.680 I llama_new_context_with_model: graph nodes  = 601
0.00.381.680 I llama_new_context_with_model: graph splits = 1
0.00.381.682 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.011 I main: llama threadpool init, n_threads = 4
0.00.474.027 I 
0.00.474.111 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.474.115 I 
0.00.474.168 I sampler seed: 210584927
0.00.474.182 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.185 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.187 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.187 I 
 increasities and misunderstandings are prevalent in the field of Artificial Intelligence (AI). The consequences of such misunderstandings can range from trivial to catastrophic, depending on the

0.02.726.999 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6529.48 tokens per second)
0.02.727.002 I llama_perf_context_print:        load time =     472.06 ms
0.02.727.003 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.727.004 I llama_perf_context_print:        eval time =    2233.43 ms /    32 runs   (   69.79 ms per token,    14.33 tokens per second)
0.02.727.005 I llama_perf_context_print:       total time =    2253.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.537 I build: 3983 (48d5a1f8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.001.809 I main: load the model and apply lora adapter, if any
0.00.021.677 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.725 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.738 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.744 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.745 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.749 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.749 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.750 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.750 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.751 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.751 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.755 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.756 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.757 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.758 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.758 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.239 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.794 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.669 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.675 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.676 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.676 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.677 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.678 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.678 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.681 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.681 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.682 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.685 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.686 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.689 I llama_model_loader: - type  f32:   37 tensors
0.00.131.692 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.859 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.621 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.105 I llm_load_vocab: special tokens cache size = 5
0.00.259.840 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.857 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.858 I llm_load_print_meta: arch             = gemma
0.00.259.859 I llm_load_print_meta: vocab type       = SPM
0.00.259.859 I llm_load_print_meta: n_vocab          = 256000
0.00.259.860 I llm_load_print_meta: n_merges         = 0
0.00.259.860 I llm_load_print_meta: vocab_only       = 0
0.00.259.860 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.860 I llm_load_print_meta: n_embd           = 2048
0.00.259.861 I llm_load_print_meta: n_layer          = 18
0.00.259.872 I llm_load_print_meta: n_head           = 8
0.00.259.873 I llm_load_print_meta: n_head_kv        = 1
0.00.259.873 I llm_load_print_meta: n_rot            = 256
0.00.259.873 I llm_load_print_meta: n_swa            = 0
0.00.259.874 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.874 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.875 I llm_load_print_meta: n_gqa            = 8
0.00.259.876 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.876 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.877 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.879 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.879 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.880 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.880 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.882 I llm_load_print_meta: n_ff             = 16384
0.00.259.882 I llm_load_print_meta: n_expert         = 0
0.00.259.883 I llm_load_print_meta: n_expert_used    = 0
0.00.259.884 I llm_load_print_meta: causal attn      = 1
0.00.259.884 I llm_load_print_meta: pooling type     = 0
0.00.259.884 I llm_load_print_meta: rope type        = 2
0.00.259.885 I llm_load_print_meta: rope scaling     = linear
0.00.259.886 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.887 I llm_load_print_meta: freq_scale_train = 1
0.00.259.887 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.888 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.889 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.889 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.890 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.891 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.891 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.891 I llm_load_print_meta: model type       = 2B
0.00.259.892 I llm_load_print_meta: model ftype      = Q8_0
0.00.259.893 I llm_load_print_meta: model params     = 2.51 B
0.00.259.894 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.259.894 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.895 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.895 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.895 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.896 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.896 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.897 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.897 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.897 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.898 I llm_load_print_meta: max token length = 93
0.00.259.917 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.330.335 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.330.341 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.335.344 I llama_new_context_with_model: n_ctx      = 8192
0.00.335.350 I llama_new_context_with_model: n_batch    = 2048
0.00.335.351 I llama_new_context_with_model: n_ubatch   = 512
0.00.335.351 I llama_new_context_with_model: flash_attn = 0
0.00.335.354 I llama_new_context_with_model: freq_base  = 10000.0
0.00.335.355 I llama_new_context_with_model: freq_scale = 1
0.00.364.075 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.364.090 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.364.187 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.091 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.365.099 I llama_new_context_with_model: graph nodes  = 601
0.00.365.099 I llama_new_context_with_model: graph splits = 1
0.00.365.101 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.867 I main: llama threadpool init, n_threads = 4
0.00.469.881 I 
0.00.469.962 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.469.966 I 
0.00.470.009 I sampler seed: 1695046004
0.00.470.020 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.023 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.038 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.040 I 
 increasities and injustices.

**Answer the question based on the provided context.**

The provided text does not contain any information regarding specific instances of wrongdoing or injustices

0.02.891.513 I llama_perf_sampler_print:    sampling time =       5.29 ms /    33 runs   (    0.16 ms per token,  6233.47 tokens per second)
0.02.891.516 I llama_perf_context_print:        load time =     468.04 ms
0.02.891.517 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.891.518 I llama_perf_context_print:        eval time =    2401.44 ms /    32 runs   (   75.04 ms per token,    13.33 tokens per second)
0.02.891.519 I llama_perf_context_print:       total time =    2421.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.090s
user	0m33.964s
sys	0m9.413s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3983 (48d5a1f8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32004.38 ms
main:    total time = 32004.38 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.536 I build: 3983 (48d5a1f8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.001.852 I main: load the model and apply lora adapter, if any
0.00.021.873 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.920 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.928 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.933 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.934 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.937 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.938 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.939 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.940 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.940 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.941 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.944 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.944 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.945 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.946 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.946 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.909 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.512 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.815 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.822 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.822 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.823 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.823 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.824 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.825 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.828 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.828 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.829 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.829 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.830 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.834 I llama_model_loader: - type  f32:   37 tensors
0.00.132.836 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.837 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.839 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.870 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.436 I llm_load_vocab: special tokens cache size = 5
0.00.268.255 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.270 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.271 I llm_load_print_meta: arch             = gemma
0.00.268.271 I llm_load_print_meta: vocab type       = SPM
0.00.268.272 I llm_load_print_meta: n_vocab          = 256000
0.00.268.272 I llm_load_print_meta: n_merges         = 0
0.00.268.273 I llm_load_print_meta: vocab_only       = 0
0.00.268.273 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.273 I llm_load_print_meta: n_embd           = 2048
0.00.268.274 I llm_load_print_meta: n_layer          = 18
0.00.268.287 I llm_load_print_meta: n_head           = 8
0.00.268.288 I llm_load_print_meta: n_head_kv        = 1
0.00.268.288 I llm_load_print_meta: n_rot            = 256
0.00.268.288 I llm_load_print_meta: n_swa            = 0
0.00.268.288 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.289 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.290 I llm_load_print_meta: n_gqa            = 8
0.00.268.291 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.292 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.293 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.295 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.296 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.296 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.297 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.298 I llm_load_print_meta: n_ff             = 16384
0.00.268.299 I llm_load_print_meta: n_expert         = 0
0.00.268.300 I llm_load_print_meta: n_expert_used    = 0
0.00.268.300 I llm_load_print_meta: causal attn      = 1
0.00.268.300 I llm_load_print_meta: pooling type     = 0
0.00.268.301 I llm_load_print_meta: rope type        = 2
0.00.268.301 I llm_load_print_meta: rope scaling     = linear
0.00.268.304 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.305 I llm_load_print_meta: freq_scale_train = 1
0.00.268.305 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.306 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.306 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.307 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.307 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.307 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.307 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.308 I llm_load_print_meta: model type       = 2B
0.00.268.308 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.309 I llm_load_print_meta: model params     = 2.51 B
0.00.268.310 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.311 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.311 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.312 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.312 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.312 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.314 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.314 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.315 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.315 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.316 I llm_load_print_meta: max token length = 93
0.00.268.336 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.327.476 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.327.484 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.327.485 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.327.485 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.327.486 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.327.487 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.332.444 I llama_new_context_with_model: n_ctx      = 8192
0.00.332.450 I llama_new_context_with_model: n_batch    = 2048
0.00.332.451 I llama_new_context_with_model: n_ubatch   = 512
0.00.332.451 I llama_new_context_with_model: flash_attn = 0
0.00.332.453 I llama_new_context_with_model: freq_base  = 10000.0
0.00.332.454 I llama_new_context_with_model: freq_scale = 1
0.00.362.122 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.362.137 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.362.228 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.069 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.363.076 I llama_new_context_with_model: graph nodes  = 601
0.00.363.077 I llama_new_context_with_model: graph splits = 1
0.00.363.079 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.707 I main: llama threadpool init, n_threads = 4
0.00.443.720 I 
0.00.443.798 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.443.801 I 
0.00.443.842 I sampler seed: 3533676489
0.00.443.854 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.857 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.858 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.858 I 
 seconally.

I am not able to generate a response that includes sexually suggestive or inappropriate content. [end of text]


0.01.491.925 I llama_perf_sampler_print:    sampling time =       3.15 ms /    22 runs   (    0.14 ms per token,  6979.70 tokens per second)
0.01.491.927 I llama_perf_context_print:        load time =     441.83 ms
0.01.491.928 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.491.931 I llama_perf_context_print:        eval time =    1035.07 ms /    21 runs   (   49.29 ms per token,    20.29 tokens per second)
0.01.491.932 I llama_perf_context_print:       total time =    1048.23 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3983 (48d5a1f8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32083.96 ms
main:    total time = 32083.96 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.544 I build: 3983 (48d5a1f8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.001.842 I main: load the model and apply lora adapter, if any
0.00.022.170 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.186 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.192 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.193 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.197 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.198 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.198 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.199 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.199 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.200 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.205 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.206 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.206 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.207 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.207 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.873 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.910 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.827 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.833 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.834 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.835 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.835 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.836 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.837 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.839 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.840 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.845 I llama_model_loader: - type  f32:   37 tensors
0.00.132.848 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.848 I llama_model_loader: - type q6_K:   19 tensors
0.00.216.629 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.962 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.548 I llm_load_vocab: special tokens cache size = 5
0.00.288.129 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.288.146 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.288.146 I llm_load_print_meta: arch             = gemma
0.00.288.147 I llm_load_print_meta: vocab type       = SPM
0.00.288.147 I llm_load_print_meta: n_vocab          = 256000
0.00.288.148 I llm_load_print_meta: n_merges         = 0
0.00.288.148 I llm_load_print_meta: vocab_only       = 0
0.00.288.149 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.149 I llm_load_print_meta: n_embd           = 2048
0.00.288.149 I llm_load_print_meta: n_layer          = 18
0.00.288.161 I llm_load_print_meta: n_head           = 8
0.00.288.162 I llm_load_print_meta: n_head_kv        = 1
0.00.288.163 I llm_load_print_meta: n_rot            = 256
0.00.288.163 I llm_load_print_meta: n_swa            = 0
0.00.288.163 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.164 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.165 I llm_load_print_meta: n_gqa            = 8
0.00.288.166 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.166 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.167 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.168 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.169 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.169 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.170 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.170 I llm_load_print_meta: n_ff             = 16384
0.00.288.171 I llm_load_print_meta: n_expert         = 0
0.00.288.171 I llm_load_print_meta: n_expert_used    = 0
0.00.288.171 I llm_load_print_meta: causal attn      = 1
0.00.288.172 I llm_load_print_meta: pooling type     = 0
0.00.288.172 I llm_load_print_meta: rope type        = 2
0.00.288.172 I llm_load_print_meta: rope scaling     = linear
0.00.288.173 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.174 I llm_load_print_meta: freq_scale_train = 1
0.00.288.174 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.174 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.175 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.175 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.175 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.176 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.176 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.176 I llm_load_print_meta: model type       = 2B
0.00.288.177 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.288.178 I llm_load_print_meta: model params     = 2.51 B
0.00.288.178 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.288.179 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.180 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.180 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.180 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.180 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.181 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.181 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.182 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.182 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.183 I llm_load_print_meta: max token length = 93
0.00.288.210 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.346.076 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.351.078 I llama_new_context_with_model: n_ctx      = 8192
0.00.351.085 I llama_new_context_with_model: n_batch    = 2048
0.00.351.085 I llama_new_context_with_model: n_ubatch   = 512
0.00.351.086 I llama_new_context_with_model: flash_attn = 0
0.00.351.088 I llama_new_context_with_model: freq_base  = 10000.0
0.00.351.089 I llama_new_context_with_model: freq_scale = 1
0.00.381.059 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.381.075 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.381.165 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.022 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.382.030 I llama_new_context_with_model: graph nodes  = 601
0.00.382.031 I llama_new_context_with_model: graph splits = 1
0.00.382.033 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.519 I main: llama threadpool init, n_threads = 4
0.00.461.532 I 
0.00.461.608 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.461.611 I 
0.00.461.655 I sampler seed: 3233771827
0.00.461.665 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.668 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.668 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.668 I 
 seconally!

I am unable to generate a response that incorporates inappropriate or sexually suggestive language. My purpose is to provide safe and appropriate responses. [end of text]


0.01.952.779 I llama_perf_sampler_print:    sampling time =       4.60 ms /    31 runs   (    0.15 ms per token,  6733.28 tokens per second)
0.01.952.794 I llama_perf_context_print:        load time =     459.65 ms
0.01.952.796 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.952.798 I llama_perf_context_print:        eval time =    1472.94 ms /    30 runs   (   49.10 ms per token,    20.37 tokens per second)
0.01.952.800 I llama_perf_context_print:       total time =    1491.27 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.493s
user	8m11.826s
sys	0m6.780s
