+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.572 I build: 4210 (e90688ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.794 I main: llama backend init
0.00.000.801 I main: load the model and apply lora adapter, if any
0.00.021.338 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.347 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.354 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.359 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.360 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.364 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.365 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.365 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.367 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.367 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.369 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.373 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.374 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.374 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.375 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.376 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.142 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.268 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.104 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.110 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.111 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.111 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.112 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.113 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.113 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.116 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.117 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.118 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.119 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.119 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.123 I llama_model_loader: - type  f32:   37 tensors
0.00.132.124 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.306 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.891 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.447 I llm_load_vocab: special tokens cache size = 5
0.00.263.407 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.423 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.424 I llm_load_print_meta: arch             = gemma
0.00.263.424 I llm_load_print_meta: vocab type       = SPM
0.00.263.425 I llm_load_print_meta: n_vocab          = 256000
0.00.263.425 I llm_load_print_meta: n_merges         = 0
0.00.263.425 I llm_load_print_meta: vocab_only       = 0
0.00.263.426 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.426 I llm_load_print_meta: n_embd           = 2048
0.00.263.426 I llm_load_print_meta: n_layer          = 18
0.00.263.437 I llm_load_print_meta: n_head           = 8
0.00.263.438 I llm_load_print_meta: n_head_kv        = 1
0.00.263.438 I llm_load_print_meta: n_rot            = 256
0.00.263.438 I llm_load_print_meta: n_swa            = 0
0.00.263.439 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.439 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.440 I llm_load_print_meta: n_gqa            = 8
0.00.263.441 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.442 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.442 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.444 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.444 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.444 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.445 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.446 I llm_load_print_meta: n_ff             = 16384
0.00.263.446 I llm_load_print_meta: n_expert         = 0
0.00.263.446 I llm_load_print_meta: n_expert_used    = 0
0.00.263.447 I llm_load_print_meta: causal attn      = 1
0.00.263.447 I llm_load_print_meta: pooling type     = 0
0.00.263.447 I llm_load_print_meta: rope type        = 2
0.00.263.448 I llm_load_print_meta: rope scaling     = linear
0.00.263.449 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.449 I llm_load_print_meta: freq_scale_train = 1
0.00.263.450 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.450 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.450 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.451 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.451 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.451 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.451 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.452 I llm_load_print_meta: model type       = 2B
0.00.263.452 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.453 I llm_load_print_meta: model params     = 2.51 B
0.00.263.454 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.455 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.455 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.455 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.456 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.456 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.457 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.457 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.457 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.458 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.458 I llm_load_print_meta: max token length = 93
0.00.363.507 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.363.515 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.363.516 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.363.517 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.363.517 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.363.518 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.368.871 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.877 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.877 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.877 I llama_new_context_with_model: n_batch       = 2048
0.00.368.878 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.878 I llama_new_context_with_model: flash_attn    = 0
0.00.368.881 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.882 I llama_new_context_with_model: freq_scale    = 1
0.00.368.883 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.932 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.946 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.037 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.371 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.376 I llama_new_context_with_model: graph nodes  = 601
0.00.384.376 I llama_new_context_with_model: graph splits = 1
0.00.384.378 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.330 I main: llama threadpool init, n_threads = 4
0.00.469.345 I 
0.00.469.426 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.469.430 I 
0.00.469.481 I sampler seed: 2571442895
0.00.469.492 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.502 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.506 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.507 I 
 maneuvously!

I'm so excited for the opportunity to learn about the stock market and invest my money. I've been doing some research,

0.02.743.554 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6692.35 tokens per second)
0.02.743.556 I llama_perf_context_print:        load time =     468.51 ms
0.02.743.557 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.743.559 I llama_perf_context_print:        eval time =    2255.01 ms /    32 runs   (   70.47 ms per token,    14.19 tokens per second)
0.02.743.560 I llama_perf_context_print:       total time =    2274.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.491 I build: 4210 (e90688ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.696 I main: llama backend init
0.00.000.703 I main: load the model and apply lora adapter, if any
0.00.021.212 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.227 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.233 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.235 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.239 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.240 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.241 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.241 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.242 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.243 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.247 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.248 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.248 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.249 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.249 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.038 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.425 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.358 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.365 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.366 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.367 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.368 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.369 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.371 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.374 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.375 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.376 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.377 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.378 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.382 I llama_model_loader: - type  f32:   37 tensors
0.00.132.383 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.550 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.719 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.307 I llm_load_vocab: special tokens cache size = 5
0.00.274.439 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.456 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.456 I llm_load_print_meta: arch             = gemma
0.00.274.457 I llm_load_print_meta: vocab type       = SPM
0.00.274.458 I llm_load_print_meta: n_vocab          = 256000
0.00.274.459 I llm_load_print_meta: n_merges         = 0
0.00.274.460 I llm_load_print_meta: vocab_only       = 0
0.00.274.460 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.460 I llm_load_print_meta: n_embd           = 2048
0.00.274.461 I llm_load_print_meta: n_layer          = 18
0.00.274.472 I llm_load_print_meta: n_head           = 8
0.00.274.473 I llm_load_print_meta: n_head_kv        = 1
0.00.274.473 I llm_load_print_meta: n_rot            = 256
0.00.274.474 I llm_load_print_meta: n_swa            = 0
0.00.274.474 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.474 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.475 I llm_load_print_meta: n_gqa            = 8
0.00.274.476 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.477 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.478 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.479 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.480 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.480 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.481 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.481 I llm_load_print_meta: n_ff             = 16384
0.00.274.482 I llm_load_print_meta: n_expert         = 0
0.00.274.482 I llm_load_print_meta: n_expert_used    = 0
0.00.274.482 I llm_load_print_meta: causal attn      = 1
0.00.274.483 I llm_load_print_meta: pooling type     = 0
0.00.274.483 I llm_load_print_meta: rope type        = 2
0.00.274.483 I llm_load_print_meta: rope scaling     = linear
0.00.274.484 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.485 I llm_load_print_meta: freq_scale_train = 1
0.00.274.485 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.486 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.486 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.486 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.487 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.487 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.487 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.487 I llm_load_print_meta: model type       = 2B
0.00.274.488 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.489 I llm_load_print_meta: model params     = 2.51 B
0.00.274.490 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.490 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.490 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.491 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.491 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.492 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.492 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.492 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.493 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.493 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.494 I llm_load_print_meta: max token length = 93
0.00.368.729 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.373.985 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.992 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.992 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.993 I llama_new_context_with_model: n_batch       = 2048
0.00.373.993 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.993 I llama_new_context_with_model: flash_attn    = 0
0.00.373.995 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.996 I llama_new_context_with_model: freq_scale    = 1
0.00.373.997 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.091 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.108 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.207 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.520 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.527 I llama_new_context_with_model: graph nodes  = 601
0.00.390.527 I llama_new_context_with_model: graph splits = 1
0.00.390.529 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.859 I main: llama threadpool init, n_threads = 4
0.00.471.874 I 
0.00.471.956 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.471.960 I 
0.00.472.016 I sampler seed: 1197187336
0.00.472.028 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.040 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.045 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.046 I 
 increably.

I am unable to generate the requested response due to limitations in my programming capabilities. [end of text]


0.01.914.213 I llama_perf_sampler_print:    sampling time =       3.33 ms /    22 runs   (    0.15 ms per token,  6596.70 tokens per second)
0.01.914.215 I llama_perf_context_print:        load time =     471.14 ms
0.01.914.216 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.914.218 I llama_perf_context_print:        eval time =    1428.88 ms /    21 runs   (   68.04 ms per token,    14.70 tokens per second)
0.01.914.218 I llama_perf_context_print:       total time =    1442.36 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.561 I build: 4210 (e90688ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.761 I main: load the model and apply lora adapter, if any
0.00.021.551 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.561 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.569 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.575 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.577 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.580 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.581 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.581 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.582 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.583 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.583 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.588 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.588 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.589 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.590 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.590 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.767 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.302 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.199 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.206 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.207 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.207 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.208 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.209 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.209 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.212 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.213 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.214 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.215 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.216 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.220 I llama_model_loader: - type  f32:   37 tensors
0.00.133.221 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.908 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.334 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.001 I llm_load_vocab: special tokens cache size = 5
0.00.272.211 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.230 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.231 I llm_load_print_meta: arch             = gemma
0.00.272.232 I llm_load_print_meta: vocab type       = SPM
0.00.272.232 I llm_load_print_meta: n_vocab          = 256000
0.00.272.232 I llm_load_print_meta: n_merges         = 0
0.00.272.233 I llm_load_print_meta: vocab_only       = 0
0.00.272.233 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.233 I llm_load_print_meta: n_embd           = 2048
0.00.272.234 I llm_load_print_meta: n_layer          = 18
0.00.272.245 I llm_load_print_meta: n_head           = 8
0.00.272.246 I llm_load_print_meta: n_head_kv        = 1
0.00.272.246 I llm_load_print_meta: n_rot            = 256
0.00.272.247 I llm_load_print_meta: n_swa            = 0
0.00.272.247 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.247 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.248 I llm_load_print_meta: n_gqa            = 8
0.00.272.249 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.250 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.251 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.252 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.253 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.253 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.254 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.254 I llm_load_print_meta: n_ff             = 16384
0.00.272.255 I llm_load_print_meta: n_expert         = 0
0.00.272.255 I llm_load_print_meta: n_expert_used    = 0
0.00.272.255 I llm_load_print_meta: causal attn      = 1
0.00.272.256 I llm_load_print_meta: pooling type     = 0
0.00.272.256 I llm_load_print_meta: rope type        = 2
0.00.272.256 I llm_load_print_meta: rope scaling     = linear
0.00.272.258 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.259 I llm_load_print_meta: freq_scale_train = 1
0.00.272.259 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.259 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.260 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.260 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.260 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.261 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.261 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.261 I llm_load_print_meta: model type       = 2B
0.00.272.262 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.263 I llm_load_print_meta: model params     = 2.51 B
0.00.272.264 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.264 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.265 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.265 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.265 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.266 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.266 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.267 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.267 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.268 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.268 I llm_load_print_meta: max token length = 93
0.00.347.929 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.347.936 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.347.937 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.347.937 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.347.938 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.347.938 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.353.155 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.162 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.162 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.162 I llama_new_context_with_model: n_batch       = 2048
0.00.353.163 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.163 I llama_new_context_with_model: flash_attn    = 0
0.00.353.166 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.166 I llama_new_context_with_model: freq_scale    = 1
0.00.353.167 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.334 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.368.349 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.449 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.733 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.739 I llama_new_context_with_model: graph nodes  = 601
0.00.369.739 I llama_new_context_with_model: graph splits = 1
0.00.369.742 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.697 I main: llama threadpool init, n_threads = 4
0.00.456.714 I 
0.00.456.787 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.456.790 I 
0.00.456.833 I sampler seed: 993570312
0.00.456.844 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.846 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.847 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.850 I 
 maneuvously.

I'm not sure what you're trying to say. Could you please rephrase your question? [end of text]


0.02.358.223 I llama_perf_sampler_print:    sampling time =       3.99 ms /    28 runs   (    0.14 ms per token,  7015.79 tokens per second)
0.02.358.225 I llama_perf_context_print:        load time =     455.92 ms
0.02.358.227 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.358.228 I llama_perf_context_print:        eval time =    1885.03 ms /    27 runs   (   69.82 ms per token,    14.32 tokens per second)
0.02.358.229 I llama_perf_context_print:       total time =    1901.53 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.550 I build: 4210 (e90688ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.776 I main: load the model and apply lora adapter, if any
0.00.021.459 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.469 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.477 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.482 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.484 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.487 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.488 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.488 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.489 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.489 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.490 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.494 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.494 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.495 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.495 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.496 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.206 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.320 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.321 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.327 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.328 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.329 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.329 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.330 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.331 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.333 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.334 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.336 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.336 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.134.337 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.341 I llama_model_loader: - type  f32:   37 tensors
0.00.134.342 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.962 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.901 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.553 I llm_load_vocab: special tokens cache size = 5
0.00.270.753 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.770 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.771 I llm_load_print_meta: arch             = gemma
0.00.270.771 I llm_load_print_meta: vocab type       = SPM
0.00.270.772 I llm_load_print_meta: n_vocab          = 256000
0.00.270.772 I llm_load_print_meta: n_merges         = 0
0.00.270.773 I llm_load_print_meta: vocab_only       = 0
0.00.270.773 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.773 I llm_load_print_meta: n_embd           = 2048
0.00.270.774 I llm_load_print_meta: n_layer          = 18
0.00.270.786 I llm_load_print_meta: n_head           = 8
0.00.270.787 I llm_load_print_meta: n_head_kv        = 1
0.00.270.788 I llm_load_print_meta: n_rot            = 256
0.00.270.788 I llm_load_print_meta: n_swa            = 0
0.00.270.788 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.789 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.789 I llm_load_print_meta: n_gqa            = 8
0.00.270.791 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.792 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.792 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.794 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.794 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.794 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.795 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.796 I llm_load_print_meta: n_ff             = 16384
0.00.270.796 I llm_load_print_meta: n_expert         = 0
0.00.270.796 I llm_load_print_meta: n_expert_used    = 0
0.00.270.796 I llm_load_print_meta: causal attn      = 1
0.00.270.797 I llm_load_print_meta: pooling type     = 0
0.00.270.797 I llm_load_print_meta: rope type        = 2
0.00.270.797 I llm_load_print_meta: rope scaling     = linear
0.00.270.799 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.799 I llm_load_print_meta: freq_scale_train = 1
0.00.270.800 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.801 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.801 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.801 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.801 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.802 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.802 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.802 I llm_load_print_meta: model type       = 2B
0.00.270.803 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.804 I llm_load_print_meta: model params     = 2.51 B
0.00.270.805 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.805 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.806 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.806 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.806 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.807 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.807 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.807 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.808 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.808 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.809 I llm_load_print_meta: max token length = 93
0.00.342.098 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.342.107 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.347.371 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.378 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.379 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.379 I llama_new_context_with_model: n_batch       = 2048
0.00.347.380 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.380 I llama_new_context_with_model: flash_attn    = 0
0.00.347.384 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.385 I llama_new_context_with_model: freq_scale    = 1
0.00.347.386 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.883 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.899 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.996 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.329 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.335 I llama_new_context_with_model: graph nodes  = 601
0.00.364.335 I llama_new_context_with_model: graph splits = 1
0.00.364.337 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.295 I main: llama threadpool init, n_threads = 4
0.00.453.312 I 
0.00.453.384 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.453.388 I 
0.00.453.430 I sampler seed: 2696437919
0.00.453.442 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.453 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.457 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.457 I 
 increasities, and other sexually suggestive content are not appropriate for this platform. [end of text]


0.01.661.716 I llama_perf_sampler_print:    sampling time =       2.55 ms /    17 runs   (    0.15 ms per token,  6677.14 tokens per second)
0.01.661.718 I llama_perf_context_print:        load time =     452.50 ms
0.01.661.719 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.661.721 I llama_perf_context_print:        eval time =    1198.00 ms /    16 runs   (   74.87 ms per token,    13.36 tokens per second)
0.01.661.722 I llama_perf_context_print:       total time =    1208.43 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.242s
user	0m30.155s
sys	0m9.421s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4210 (e90688ed)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40222.94 ms
main:    total time = 40222.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.524 I build: 4210 (e90688ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.723 I main: llama backend init
0.00.000.729 I main: load the model and apply lora adapter, if any
0.00.021.245 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.255 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.264 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.269 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.273 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.277 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.278 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.278 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.279 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.279 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.280 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.283 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.284 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.285 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.285 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.286 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.125 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.479 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.369 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.375 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.376 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.377 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.377 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.378 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.379 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.381 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.382 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.383 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.384 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.385 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.390 I llama_model_loader: - type  f32:   37 tensors
0.00.132.390 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.391 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.965 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.102 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.681 I llm_load_vocab: special tokens cache size = 5
0.00.271.145 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.169 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.170 I llm_load_print_meta: arch             = gemma
0.00.271.171 I llm_load_print_meta: vocab type       = SPM
0.00.271.171 I llm_load_print_meta: n_vocab          = 256000
0.00.271.172 I llm_load_print_meta: n_merges         = 0
0.00.271.172 I llm_load_print_meta: vocab_only       = 0
0.00.271.173 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.173 I llm_load_print_meta: n_embd           = 2048
0.00.271.173 I llm_load_print_meta: n_layer          = 18
0.00.271.185 I llm_load_print_meta: n_head           = 8
0.00.271.186 I llm_load_print_meta: n_head_kv        = 1
0.00.271.187 I llm_load_print_meta: n_rot            = 256
0.00.271.187 I llm_load_print_meta: n_swa            = 0
0.00.271.187 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.187 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.188 I llm_load_print_meta: n_gqa            = 8
0.00.271.189 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.190 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.191 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.193 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.193 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.194 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.194 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.195 I llm_load_print_meta: n_ff             = 16384
0.00.271.195 I llm_load_print_meta: n_expert         = 0
0.00.271.195 I llm_load_print_meta: n_expert_used    = 0
0.00.271.196 I llm_load_print_meta: causal attn      = 1
0.00.271.196 I llm_load_print_meta: pooling type     = 0
0.00.271.196 I llm_load_print_meta: rope type        = 2
0.00.271.196 I llm_load_print_meta: rope scaling     = linear
0.00.271.198 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.199 I llm_load_print_meta: freq_scale_train = 1
0.00.271.199 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.199 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.200 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.200 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.201 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.201 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.201 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.201 I llm_load_print_meta: model type       = 2B
0.00.271.202 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.203 I llm_load_print_meta: model params     = 2.51 B
0.00.271.203 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.204 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.204 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.205 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.205 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.205 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.206 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.206 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.206 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.207 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.207 I llm_load_print_meta: max token length = 93
0.00.331.543 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.331.552 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.331.552 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.331.553 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.331.553 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.331.554 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.336.858 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.864 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.865 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.865 I llama_new_context_with_model: n_batch       = 2048
0.00.336.866 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.866 I llama_new_context_with_model: flash_attn    = 0
0.00.336.869 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.870 I llama_new_context_with_model: freq_scale    = 1
0.00.336.870 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.326 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.340 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.429 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.758 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.765 I llama_new_context_with_model: graph nodes  = 601
0.00.352.766 I llama_new_context_with_model: graph splits = 1
0.00.352.768 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.021 I main: llama threadpool init, n_threads = 4
0.00.428.036 I 
0.00.428.110 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.428.113 I 
0.00.428.156 I sampler seed: 3375522058
0.00.428.167 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.180 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.184 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.184 I 
 seconally.

I am unable to generate the requested output due to the limitations of my current programming capabilities. I am unable to generate responses that violate the principles

0.02.038.397 I llama_perf_sampler_print:    sampling time =       5.20 ms /    33 runs   (    0.16 ms per token,  6346.15 tokens per second)
0.02.038.399 I llama_perf_context_print:        load time =     427.27 ms
0.02.038.400 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.038.402 I llama_perf_context_print:        eval time =    1591.48 ms /    32 runs   (   49.73 ms per token,    20.11 tokens per second)
0.02.038.403 I llama_perf_context_print:       total time =    1610.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4210 (e90688ed)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40214.47 ms
main:    total time = 40214.47 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.550 I build: 4210 (e90688ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.749 I main: load the model and apply lora adapter, if any
0.00.020.985 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.999 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.009 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.010 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.015 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.015 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.016 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.016 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.017 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.017 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.021 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.022 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.022 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.023 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.023 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.086 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.000 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.829 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.836 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.837 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.837 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.838 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.839 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.839 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.842 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.842 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.845 I llama_model_loader: - type  f32:   37 tensors
0.00.131.846 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.847 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.352 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.360 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.816 I llm_load_vocab: special tokens cache size = 5
0.00.263.772 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.789 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.790 I llm_load_print_meta: arch             = gemma
0.00.263.790 I llm_load_print_meta: vocab type       = SPM
0.00.263.791 I llm_load_print_meta: n_vocab          = 256000
0.00.263.792 I llm_load_print_meta: n_merges         = 0
0.00.263.792 I llm_load_print_meta: vocab_only       = 0
0.00.263.792 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.793 I llm_load_print_meta: n_embd           = 2048
0.00.263.793 I llm_load_print_meta: n_layer          = 18
0.00.263.804 I llm_load_print_meta: n_head           = 8
0.00.263.805 I llm_load_print_meta: n_head_kv        = 1
0.00.263.806 I llm_load_print_meta: n_rot            = 256
0.00.263.806 I llm_load_print_meta: n_swa            = 0
0.00.263.806 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.807 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.808 I llm_load_print_meta: n_gqa            = 8
0.00.263.809 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.809 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.810 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.812 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.813 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.813 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.814 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.814 I llm_load_print_meta: n_ff             = 16384
0.00.263.815 I llm_load_print_meta: n_expert         = 0
0.00.263.816 I llm_load_print_meta: n_expert_used    = 0
0.00.263.816 I llm_load_print_meta: causal attn      = 1
0.00.263.816 I llm_load_print_meta: pooling type     = 0
0.00.263.817 I llm_load_print_meta: rope type        = 2
0.00.263.817 I llm_load_print_meta: rope scaling     = linear
0.00.263.818 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.819 I llm_load_print_meta: freq_scale_train = 1
0.00.263.820 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.820 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.820 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.821 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.821 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.821 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.821 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.822 I llm_load_print_meta: model type       = 2B
0.00.263.823 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.823 I llm_load_print_meta: model params     = 2.51 B
0.00.263.825 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.825 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.825 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.826 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.827 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.828 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.828 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.829 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.829 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.829 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.830 I llm_load_print_meta: max token length = 93
0.00.320.130 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.325.217 I llama_new_context_with_model: n_seq_max     = 1
0.00.325.222 I llama_new_context_with_model: n_ctx         = 4096
0.00.325.223 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.325.223 I llama_new_context_with_model: n_batch       = 2048
0.00.325.224 I llama_new_context_with_model: n_ubatch      = 512
0.00.325.224 I llama_new_context_with_model: flash_attn    = 0
0.00.325.226 I llama_new_context_with_model: freq_base     = 10000.0
0.00.325.227 I llama_new_context_with_model: freq_scale    = 1
0.00.325.228 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.708 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.339.723 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.339.814 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.341.041 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.341.045 I llama_new_context_with_model: graph nodes  = 601
0.00.341.046 I llama_new_context_with_model: graph splits = 1
0.00.341.048 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.415.284 I main: llama threadpool init, n_threads = 4
0.00.415.301 I 
0.00.415.370 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.415.373 I 
0.00.415.416 I sampler seed: 2273476104
0.00.415.426 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.415.429 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.415.430 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.415.431 I 
 seconded?

I am unable to generate a response that is safe and appropriate due to the sensitive nature of the prompt. I am programmed to provide safe and

0.01.982.244 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6538.54 tokens per second)
0.01.982.248 I llama_perf_context_print:        load time =     414.52 ms
0.01.982.249 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.982.251 I llama_perf_context_print:        eval time =    1547.70 ms /    32 runs   (   48.37 ms per token,    20.68 tokens per second)
0.01.982.252 I llama_perf_context_print:       total time =    1566.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.221s
user	10m23.993s
sys	0m7.082s
