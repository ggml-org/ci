+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.551 I build: 4171 (e908ace7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.021.293 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.303 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.311 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.320 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.324 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.327 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.328 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.328 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.329 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.330 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.330 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.335 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.335 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.336 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.337 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.337 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.371 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.749 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.643 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.651 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.651 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.652 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.652 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.653 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.654 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.657 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.658 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.659 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.660 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.661 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.664 I llama_model_loader: - type  f32:   37 tensors
0.00.132.665 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.851 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.554 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.136 I llm_load_vocab: special tokens cache size = 5
0.00.276.371 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.391 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.392 I llm_load_print_meta: arch             = gemma
0.00.276.392 I llm_load_print_meta: vocab type       = SPM
0.00.276.393 I llm_load_print_meta: n_vocab          = 256000
0.00.276.394 I llm_load_print_meta: n_merges         = 0
0.00.276.394 I llm_load_print_meta: vocab_only       = 0
0.00.276.394 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.394 I llm_load_print_meta: n_embd           = 2048
0.00.276.395 I llm_load_print_meta: n_layer          = 18
0.00.276.407 I llm_load_print_meta: n_head           = 8
0.00.276.408 I llm_load_print_meta: n_head_kv        = 1
0.00.276.408 I llm_load_print_meta: n_rot            = 256
0.00.276.409 I llm_load_print_meta: n_swa            = 0
0.00.276.409 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.409 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.410 I llm_load_print_meta: n_gqa            = 8
0.00.276.411 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.412 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.413 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.415 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.415 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.415 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.416 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.416 I llm_load_print_meta: n_ff             = 16384
0.00.276.417 I llm_load_print_meta: n_expert         = 0
0.00.276.417 I llm_load_print_meta: n_expert_used    = 0
0.00.276.417 I llm_load_print_meta: causal attn      = 1
0.00.276.418 I llm_load_print_meta: pooling type     = 0
0.00.276.418 I llm_load_print_meta: rope type        = 2
0.00.276.418 I llm_load_print_meta: rope scaling     = linear
0.00.276.420 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.420 I llm_load_print_meta: freq_scale_train = 1
0.00.276.421 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.421 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.422 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.422 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.422 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.423 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.423 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.423 I llm_load_print_meta: model type       = 2B
0.00.276.424 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.425 I llm_load_print_meta: model params     = 2.51 B
0.00.276.425 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.426 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.426 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.427 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.427 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.428 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.428 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.429 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.429 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.430 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.430 I llm_load_print_meta: max token length = 93
0.00.376.992 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.377.002 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.377.003 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.377.003 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.377.004 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.377.004 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.382.209 I llama_new_context_with_model: n_seq_max     = 1
0.00.382.215 I llama_new_context_with_model: n_ctx         = 4096
0.00.382.215 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.382.216 I llama_new_context_with_model: n_batch       = 2048
0.00.382.216 I llama_new_context_with_model: n_ubatch      = 512
0.00.382.216 I llama_new_context_with_model: flash_attn    = 0
0.00.382.218 I llama_new_context_with_model: freq_base     = 10000.0
0.00.382.219 I llama_new_context_with_model: freq_scale    = 1
0.00.382.220 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.396.409 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.423 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.524 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.846 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.397.853 I llama_new_context_with_model: graph nodes  = 601
0.00.397.853 I llama_new_context_with_model: graph splits = 1
0.00.397.856 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.372 I main: llama threadpool init, n_threads = 4
0.00.484.388 I 
0.00.484.461 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.484.465 I 
0.00.484.505 I sampler seed: 2643626500
0.00.484.516 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.528 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.531 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.531 I 
 increably!

I am unable to generate responses that contain potentially harmful or dangerous content. [end of text]


0.01.846.222 I llama_perf_sampler_print:    sampling time =       2.97 ms /    20 runs   (    0.15 ms per token,  6740.82 tokens per second)
0.01.846.225 I llama_perf_context_print:        load time =     483.61 ms
0.01.846.226 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.846.228 I llama_perf_context_print:        eval time =    1350.02 ms /    19 runs   (   71.05 ms per token,    14.07 tokens per second)
0.01.846.229 I llama_perf_context_print:       total time =    1361.86 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.578 I build: 4171 (e908ace7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.774 I main: llama backend init
0.00.000.780 I main: load the model and apply lora adapter, if any
0.00.021.721 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.735 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.743 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.744 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.749 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.750 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.752 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.753 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.753 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.754 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.759 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.759 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.760 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.760 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.761 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.586 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.512 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.445 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.452 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.453 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.453 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.454 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.455 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.455 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.458 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.459 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.459 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.461 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.462 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.465 I llama_model_loader: - type  f32:   37 tensors
0.00.133.466 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.587 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.527 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.243 I llm_load_vocab: special tokens cache size = 5
0.00.280.467 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.485 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.486 I llm_load_print_meta: arch             = gemma
0.00.280.486 I llm_load_print_meta: vocab type       = SPM
0.00.280.487 I llm_load_print_meta: n_vocab          = 256000
0.00.280.487 I llm_load_print_meta: n_merges         = 0
0.00.280.487 I llm_load_print_meta: vocab_only       = 0
0.00.280.488 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.488 I llm_load_print_meta: n_embd           = 2048
0.00.280.488 I llm_load_print_meta: n_layer          = 18
0.00.280.501 I llm_load_print_meta: n_head           = 8
0.00.280.502 I llm_load_print_meta: n_head_kv        = 1
0.00.280.502 I llm_load_print_meta: n_rot            = 256
0.00.280.503 I llm_load_print_meta: n_swa            = 0
0.00.280.503 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.503 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.504 I llm_load_print_meta: n_gqa            = 8
0.00.280.505 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.506 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.507 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.508 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.508 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.509 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.509 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.510 I llm_load_print_meta: n_ff             = 16384
0.00.280.510 I llm_load_print_meta: n_expert         = 0
0.00.280.510 I llm_load_print_meta: n_expert_used    = 0
0.00.280.511 I llm_load_print_meta: causal attn      = 1
0.00.280.511 I llm_load_print_meta: pooling type     = 0
0.00.280.511 I llm_load_print_meta: rope type        = 2
0.00.280.512 I llm_load_print_meta: rope scaling     = linear
0.00.280.513 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.513 I llm_load_print_meta: freq_scale_train = 1
0.00.280.514 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.514 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.514 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.514 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.515 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.515 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.515 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.516 I llm_load_print_meta: model type       = 2B
0.00.280.516 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.517 I llm_load_print_meta: model params     = 2.51 B
0.00.280.518 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.518 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.519 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.519 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.520 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.520 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.520 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.521 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.521 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.522 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.522 I llm_load_print_meta: max token length = 93
0.00.375.202 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.380.623 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.630 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.630 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.631 I llama_new_context_with_model: n_batch       = 2048
0.00.380.631 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.632 I llama_new_context_with_model: flash_attn    = 0
0.00.380.635 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.636 I llama_new_context_with_model: freq_scale    = 1
0.00.380.637 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.396.070 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.086 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.180 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.483 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.397.488 I llama_new_context_with_model: graph nodes  = 601
0.00.397.488 I llama_new_context_with_model: graph splits = 1
0.00.397.490 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.020 I main: llama threadpool init, n_threads = 4
0.00.480.036 I 
0.00.480.110 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.480.113 I 
0.00.480.154 I sampler seed: 2864491764
0.00.480.165 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.168 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.169 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.169 I 
 increably, a majestic creature of pure magic and wonder. [end of text]


0.01.377.492 I llama_perf_sampler_print:    sampling time =       2.07 ms /    14 runs   (    0.15 ms per token,  6750.24 tokens per second)
0.01.377.494 I llama_perf_context_print:        load time =     479.22 ms
0.01.377.495 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.377.497 I llama_perf_context_print:        eval time =     889.06 ms /    13 runs   (   68.39 ms per token,    14.62 tokens per second)
0.01.377.497 I llama_perf_context_print:       total time =     897.48 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.527 I build: 4171 (e908ace7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.000.753 I main: load the model and apply lora adapter, if any
0.00.021.831 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.844 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.853 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.859 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.864 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.868 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.869 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.870 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.872 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.873 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.873 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.879 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.880 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.881 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.882 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.883 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.575 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.038 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.002 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.010 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.010 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.011 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.012 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.013 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.014 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.018 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.019 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.020 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.021 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.022 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.027 I llama_model_loader: - type  f32:   37 tensors
0.00.133.028 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.424 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.001 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.601 I llm_load_vocab: special tokens cache size = 5
0.00.282.773 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.792 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.793 I llm_load_print_meta: arch             = gemma
0.00.282.794 I llm_load_print_meta: vocab type       = SPM
0.00.282.794 I llm_load_print_meta: n_vocab          = 256000
0.00.282.795 I llm_load_print_meta: n_merges         = 0
0.00.282.795 I llm_load_print_meta: vocab_only       = 0
0.00.282.796 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.796 I llm_load_print_meta: n_embd           = 2048
0.00.282.796 I llm_load_print_meta: n_layer          = 18
0.00.282.808 I llm_load_print_meta: n_head           = 8
0.00.282.809 I llm_load_print_meta: n_head_kv        = 1
0.00.282.810 I llm_load_print_meta: n_rot            = 256
0.00.282.810 I llm_load_print_meta: n_swa            = 0
0.00.282.810 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.811 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.812 I llm_load_print_meta: n_gqa            = 8
0.00.282.813 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.814 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.815 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.816 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.817 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.817 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.818 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.819 I llm_load_print_meta: n_ff             = 16384
0.00.282.820 I llm_load_print_meta: n_expert         = 0
0.00.282.820 I llm_load_print_meta: n_expert_used    = 0
0.00.282.820 I llm_load_print_meta: causal attn      = 1
0.00.282.821 I llm_load_print_meta: pooling type     = 0
0.00.282.822 I llm_load_print_meta: rope type        = 2
0.00.282.823 I llm_load_print_meta: rope scaling     = linear
0.00.282.825 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.825 I llm_load_print_meta: freq_scale_train = 1
0.00.282.826 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.827 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.827 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.828 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.829 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.829 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.830 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.831 I llm_load_print_meta: model type       = 2B
0.00.282.832 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.833 I llm_load_print_meta: model params     = 2.51 B
0.00.282.834 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.835 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.835 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.836 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.836 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.837 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.838 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.838 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.838 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.839 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.840 I llm_load_print_meta: max token length = 93
0.00.357.726 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.357.733 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.357.734 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.357.735 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.357.735 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.357.736 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.363.386 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.392 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.393 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.393 I llama_new_context_with_model: n_batch       = 2048
0.00.363.394 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.394 I llama_new_context_with_model: flash_attn    = 0
0.00.363.397 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.398 I llama_new_context_with_model: freq_scale    = 1
0.00.363.399 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.273 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.287 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.381 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.668 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.673 I llama_new_context_with_model: graph nodes  = 601
0.00.379.673 I llama_new_context_with_model: graph splits = 1
0.00.379.675 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.730 I main: llama threadpool init, n_threads = 4
0.00.464.746 I 
0.00.464.834 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.464.837 I 
0.00.464.890 I sampler seed: 2666899156
0.00.464.903 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.907 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.908 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.909 I 
 increably. [end of text]


0.00.757.267 I llama_perf_sampler_print:    sampling time =       0.66 ms /     5 runs   (    0.13 ms per token,  7587.25 tokens per second)
0.00.757.269 I llama_perf_context_print:        load time =     463.96 ms
0.00.757.270 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.757.272 I llama_perf_context_print:        eval time =     288.90 ms /     4 runs   (   72.22 ms per token,    13.85 tokens per second)
0.00.757.272 I llama_perf_context_print:       total time =     292.54 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.181 I build: 4171 (e908ace7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.383 I main: llama backend init
0.00.000.390 I main: load the model and apply lora adapter, if any
0.00.021.057 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.069 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.077 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.082 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.083 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.088 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.089 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.090 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.091 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.092 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.093 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.100 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.101 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.102 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.103 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.104 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.369 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.167 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.066 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.073 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.074 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.074 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.075 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.075 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.076 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.080 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.081 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.082 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.082 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.083 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.088 I llama_model_loader: - type  f32:   37 tensors
0.00.133.090 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.526 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.566 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.210 I llm_load_vocab: special tokens cache size = 5
0.00.273.516 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.536 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.536 I llm_load_print_meta: arch             = gemma
0.00.273.537 I llm_load_print_meta: vocab type       = SPM
0.00.273.538 I llm_load_print_meta: n_vocab          = 256000
0.00.273.539 I llm_load_print_meta: n_merges         = 0
0.00.273.539 I llm_load_print_meta: vocab_only       = 0
0.00.273.539 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.540 I llm_load_print_meta: n_embd           = 2048
0.00.273.540 I llm_load_print_meta: n_layer          = 18
0.00.273.551 I llm_load_print_meta: n_head           = 8
0.00.273.552 I llm_load_print_meta: n_head_kv        = 1
0.00.273.552 I llm_load_print_meta: n_rot            = 256
0.00.273.553 I llm_load_print_meta: n_swa            = 0
0.00.273.553 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.553 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.555 I llm_load_print_meta: n_gqa            = 8
0.00.273.556 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.557 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.558 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.559 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.560 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.560 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.560 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.561 I llm_load_print_meta: n_ff             = 16384
0.00.273.561 I llm_load_print_meta: n_expert         = 0
0.00.273.562 I llm_load_print_meta: n_expert_used    = 0
0.00.273.562 I llm_load_print_meta: causal attn      = 1
0.00.273.562 I llm_load_print_meta: pooling type     = 0
0.00.273.562 I llm_load_print_meta: rope type        = 2
0.00.273.563 I llm_load_print_meta: rope scaling     = linear
0.00.273.564 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.565 I llm_load_print_meta: freq_scale_train = 1
0.00.273.565 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.566 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.566 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.566 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.566 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.567 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.567 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.567 I llm_load_print_meta: model type       = 2B
0.00.273.568 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.569 I llm_load_print_meta: model params     = 2.51 B
0.00.273.569 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.570 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.570 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.571 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.571 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.572 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.572 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.572 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.573 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.573 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.574 I llm_load_print_meta: max token length = 93
0.00.345.279 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.345.287 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.350.633 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.640 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.640 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.641 I llama_new_context_with_model: n_batch       = 2048
0.00.350.641 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.642 I llama_new_context_with_model: flash_attn    = 0
0.00.350.645 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.646 I llama_new_context_with_model: freq_scale    = 1
0.00.350.647 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.697 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.712 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.807 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.120 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.127 I llama_new_context_with_model: graph nodes  = 601
0.00.367.127 I llama_new_context_with_model: graph splits = 1
0.00.367.129 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.365 I main: llama threadpool init, n_threads = 4
0.00.455.382 I 
0.00.455.477 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.455.480 I 
0.00.455.530 I sampler seed: 507893810
0.00.455.541 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.544 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.545 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.546 I 
 increasively with each iteration.

```
a = 1
b = 2
c = a + b
c = a + c
```

0.02.886.540 I llama_perf_sampler_print:    sampling time =       4.97 ms /    33 runs   (    0.15 ms per token,  6638.50 tokens per second)
0.02.886.543 I llama_perf_context_print:        load time =     454.95 ms
0.02.886.544 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.886.546 I llama_perf_context_print:        eval time =    2411.55 ms /    32 runs   (   75.36 ms per token,    13.27 tokens per second)
0.02.886.547 I llama_perf_context_print:       total time =    2431.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.557s
user	0m22.879s
sys	0m9.488s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4171 (e908ace7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40244.80 ms
main:    total time = 40244.80 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.171 I build: 4171 (e908ace7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.392 I main: llama backend init
0.00.000.398 I main: load the model and apply lora adapter, if any
0.00.020.381 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.391 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.400 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.406 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.407 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.410 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.411 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.412 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.412 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.413 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.413 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.418 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.419 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.420 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.420 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.421 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.803 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.469 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.682 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.688 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.689 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.689 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.690 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.691 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.692 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.694 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.695 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.696 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.697 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.698 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.702 I llama_model_loader: - type  f32:   37 tensors
0.00.132.704 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.704 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.387 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.926 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.487 I llm_load_vocab: special tokens cache size = 5
0.00.270.434 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.451 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.452 I llm_load_print_meta: arch             = gemma
0.00.270.452 I llm_load_print_meta: vocab type       = SPM
0.00.270.453 I llm_load_print_meta: n_vocab          = 256000
0.00.270.453 I llm_load_print_meta: n_merges         = 0
0.00.270.454 I llm_load_print_meta: vocab_only       = 0
0.00.270.454 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.454 I llm_load_print_meta: n_embd           = 2048
0.00.270.454 I llm_load_print_meta: n_layer          = 18
0.00.270.466 I llm_load_print_meta: n_head           = 8
0.00.270.467 I llm_load_print_meta: n_head_kv        = 1
0.00.270.467 I llm_load_print_meta: n_rot            = 256
0.00.270.468 I llm_load_print_meta: n_swa            = 0
0.00.270.469 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.469 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.470 I llm_load_print_meta: n_gqa            = 8
0.00.270.471 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.472 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.474 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.476 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.476 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.477 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.477 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.478 I llm_load_print_meta: n_ff             = 16384
0.00.270.479 I llm_load_print_meta: n_expert         = 0
0.00.270.479 I llm_load_print_meta: n_expert_used    = 0
0.00.270.479 I llm_load_print_meta: causal attn      = 1
0.00.270.479 I llm_load_print_meta: pooling type     = 0
0.00.270.480 I llm_load_print_meta: rope type        = 2
0.00.270.480 I llm_load_print_meta: rope scaling     = linear
0.00.270.483 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.483 I llm_load_print_meta: freq_scale_train = 1
0.00.270.484 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.485 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.485 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.485 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.486 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.486 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.487 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.487 I llm_load_print_meta: model type       = 2B
0.00.270.488 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.489 I llm_load_print_meta: model params     = 2.51 B
0.00.270.491 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.491 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.492 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.493 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.493 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.494 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.494 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.494 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.495 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.496 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.496 I llm_load_print_meta: max token length = 93
0.00.329.511 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.329.519 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.329.519 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.329.520 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.329.520 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.329.521 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.334.626 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.632 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.632 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.633 I llama_new_context_with_model: n_batch       = 2048
0.00.334.633 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.634 I llama_new_context_with_model: flash_attn    = 0
0.00.334.637 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.638 I llama_new_context_with_model: freq_scale    = 1
0.00.334.639 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.349.388 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.349.403 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.349.497 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.807 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.814 I llama_new_context_with_model: graph nodes  = 601
0.00.350.814 I llama_new_context_with_model: graph splits = 1
0.00.350.817 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.645 I main: llama threadpool init, n_threads = 4
0.00.427.663 I 
0.00.427.739 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.427.742 I 
0.00.427.790 I sampler seed: 2612561954
0.00.427.804 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.813 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.814 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.814 I 
 fufilling and laughter.

This is the song that played during the wedding ceremony of my dear friend.

**Title:** "My Best Friend's Song

0.02.062.063 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6662.63 tokens per second)
0.02.062.065 I llama_perf_context_print:        load time =     427.23 ms
0.02.062.067 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.062.069 I llama_perf_context_print:        eval time =    1615.35 ms /    32 runs   (   50.48 ms per token,    19.81 tokens per second)
0.02.062.069 I llama_perf_context_print:       total time =    1634.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4171 (e908ace7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40214.20 ms
main:    total time = 40214.20 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.653 I build: 4171 (e908ace7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.870 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.021.514 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.531 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.544 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.545 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.551 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.556 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.557 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.557 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.558 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.559 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.566 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.567 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.568 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.569 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.570 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.813 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.486 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.397 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.404 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.405 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.405 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.406 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.407 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.407 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.410 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.410 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.414 I llama_model_loader: - type  f32:   37 tensors
0.00.133.415 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.415 I llama_model_loader: - type q6_K:   19 tensors
0.00.212.492 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.849 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.533 I llm_load_vocab: special tokens cache size = 5
0.00.286.286 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.305 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.305 I llm_load_print_meta: arch             = gemma
0.00.286.306 I llm_load_print_meta: vocab type       = SPM
0.00.286.307 I llm_load_print_meta: n_vocab          = 256000
0.00.286.307 I llm_load_print_meta: n_merges         = 0
0.00.286.308 I llm_load_print_meta: vocab_only       = 0
0.00.286.308 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.308 I llm_load_print_meta: n_embd           = 2048
0.00.286.309 I llm_load_print_meta: n_layer          = 18
0.00.286.321 I llm_load_print_meta: n_head           = 8
0.00.286.322 I llm_load_print_meta: n_head_kv        = 1
0.00.286.322 I llm_load_print_meta: n_rot            = 256
0.00.286.323 I llm_load_print_meta: n_swa            = 0
0.00.286.323 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.323 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.324 I llm_load_print_meta: n_gqa            = 8
0.00.286.325 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.326 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.327 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.328 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.329 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.329 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.329 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.330 I llm_load_print_meta: n_ff             = 16384
0.00.286.330 I llm_load_print_meta: n_expert         = 0
0.00.286.330 I llm_load_print_meta: n_expert_used    = 0
0.00.286.331 I llm_load_print_meta: causal attn      = 1
0.00.286.331 I llm_load_print_meta: pooling type     = 0
0.00.286.331 I llm_load_print_meta: rope type        = 2
0.00.286.332 I llm_load_print_meta: rope scaling     = linear
0.00.286.333 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.334 I llm_load_print_meta: freq_scale_train = 1
0.00.286.334 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.335 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.335 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.335 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.336 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.336 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.336 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.337 I llm_load_print_meta: model type       = 2B
0.00.286.337 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.286.338 I llm_load_print_meta: model params     = 2.51 B
0.00.286.339 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.286.339 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.339 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.340 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.340 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.341 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.341 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.341 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.342 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.342 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.343 I llm_load_print_meta: max token length = 93
0.00.341.689 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.347.087 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.095 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.095 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.096 I llama_new_context_with_model: n_batch       = 2048
0.00.347.096 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.097 I llama_new_context_with_model: flash_attn    = 0
0.00.347.101 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.102 I llama_new_context_with_model: freq_scale    = 1
0.00.347.103 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.105 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.125 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.230 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.497 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.503 I llama_new_context_with_model: graph nodes  = 601
0.00.363.503 I llama_new_context_with_model: graph splits = 1
0.00.363.505 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.438.152 I main: llama threadpool init, n_threads = 4
0.00.438.167 I 
0.00.438.263 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.438.266 I 
0.00.438.313 I sampler seed: 3532265570
0.00.438.324 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.438.328 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.438.329 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.438.330 I 
 guaranteing the right to refuse treatment for medically necessary purposes?

[Answer]

**The right to refuse treatment for medically necessary purposes is a complex legal issue

0.02.029.657 I llama_perf_sampler_print:    sampling time =       5.57 ms /    33 runs   (    0.17 ms per token,  5920.34 tokens per second)
0.02.029.659 I llama_perf_context_print:        load time =     437.25 ms
0.02.029.660 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.029.662 I llama_perf_context_print:        eval time =    1571.85 ms /    32 runs   (   49.12 ms per token,    20.36 tokens per second)
0.02.029.663 I llama_perf_context_print:       total time =    1591.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.376s
user	10m24.659s
sys	0m7.168s
