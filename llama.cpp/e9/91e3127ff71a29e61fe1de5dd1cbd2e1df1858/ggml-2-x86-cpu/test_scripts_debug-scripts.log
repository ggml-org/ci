+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4010 (e991e312) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.784 I main: load the model and apply lora adapter, if any
0.00.025.507 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.517 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.609 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.621 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.622 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.627 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.629 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.630 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.631 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.633 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.634 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.641 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.645 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.646 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.647 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.648 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.919 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.752 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.139 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.150 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.151 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.152 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.153 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.155 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.156 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.160 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.161 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.163 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.165 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.166 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.175 I llama_model_loader: - type  f32:   37 tensors
0.00.266.178 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.887 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.526.564 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.527.470 I llm_load_vocab: special tokens cache size = 5
0.00.627.169 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.627.236 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.627.237 I llm_load_print_meta: arch             = gemma
0.00.627.238 I llm_load_print_meta: vocab type       = SPM
0.00.627.239 I llm_load_print_meta: n_vocab          = 256000
0.00.627.241 I llm_load_print_meta: n_merges         = 0
0.00.627.241 I llm_load_print_meta: vocab_only       = 0
0.00.627.242 I llm_load_print_meta: n_ctx_train      = 8192
0.00.627.242 I llm_load_print_meta: n_embd           = 2048
0.00.627.242 I llm_load_print_meta: n_layer          = 18
0.00.627.308 I llm_load_print_meta: n_head           = 8
0.00.627.315 I llm_load_print_meta: n_head_kv        = 1
0.00.627.316 I llm_load_print_meta: n_rot            = 256
0.00.627.316 I llm_load_print_meta: n_swa            = 0
0.00.627.317 I llm_load_print_meta: n_embd_head_k    = 256
0.00.627.317 I llm_load_print_meta: n_embd_head_v    = 256
0.00.627.322 I llm_load_print_meta: n_gqa            = 8
0.00.627.327 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.627.332 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.627.333 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.627.335 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.627.335 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.627.335 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.627.336 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.627.341 I llm_load_print_meta: n_ff             = 16384
0.00.627.342 I llm_load_print_meta: n_expert         = 0
0.00.627.342 I llm_load_print_meta: n_expert_used    = 0
0.00.627.342 I llm_load_print_meta: causal attn      = 1
0.00.627.344 I llm_load_print_meta: pooling type     = 0
0.00.627.344 I llm_load_print_meta: rope type        = 2
0.00.627.345 I llm_load_print_meta: rope scaling     = linear
0.00.627.347 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.627.348 I llm_load_print_meta: freq_scale_train = 1
0.00.627.348 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.627.349 I llm_load_print_meta: rope_finetuned   = unknown
0.00.627.349 I llm_load_print_meta: ssm_d_conv       = 0
0.00.627.350 I llm_load_print_meta: ssm_d_inner      = 0
0.00.627.350 I llm_load_print_meta: ssm_d_state      = 0
0.00.627.351 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.627.351 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.627.352 I llm_load_print_meta: model type       = 2B
0.00.627.358 I llm_load_print_meta: model ftype      = Q8_0
0.00.627.359 I llm_load_print_meta: model params     = 2.51 B
0.00.627.369 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.627.369 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.627.370 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.627.371 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.627.372 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.627.375 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.627.376 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.627.376 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.627.382 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.627.384 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.627.384 I llm_load_print_meta: max token length = 93
0.00.732.128 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.732.140 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.732.141 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.732.142 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.732.142 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.732.143 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.738.016 I llama_new_context_with_model: n_ctx      = 8192
0.00.738.024 I llama_new_context_with_model: n_batch    = 2048
0.00.738.024 I llama_new_context_with_model: n_ubatch   = 512
0.00.738.025 I llama_new_context_with_model: flash_attn = 0
0.00.738.028 I llama_new_context_with_model: freq_base  = 10000.0
0.00.738.028 I llama_new_context_with_model: freq_scale = 1
0.00.767.588 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.767.628 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.767.754 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.770.348 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.770.351 I llama_new_context_with_model: graph nodes  = 601
0.00.770.352 I llama_new_context_with_model: graph splits = 1
0.00.770.376 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.380.521 I main: llama threadpool init, n_threads = 4
0.01.380.535 I 
0.01.380.639 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.380.643 I 
0.01.380.888 I sampler seed: 4220565275
0.01.380.900 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.380.907 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.380.916 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.380.918 I 
 increasities by highlighting the power of the female voice in challenging patriarchal structures.

**Answer:**

**The power of the female voice in challenging patriarchal structures is

0.14.844.093 I llama_perf_sampler_print:    sampling time =      49.54 ms /    33 runs   (    1.50 ms per token,   666.18 tokens per second)
0.14.844.095 I llama_perf_context_print:        load time =    1377.64 ms
0.14.844.097 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.844.098 I llama_perf_context_print:        eval time =   13365.61 ms /    32 runs   (  417.68 ms per token,     2.39 tokens per second)
0.14.844.099 I llama_perf_context_print:       total time =   13463.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4010 (e991e312) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.002.767 I main: load the model and apply lora adapter, if any
0.00.025.653 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.750 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.763 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.765 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.769 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.771 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.773 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.774 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.775 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.784 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.799 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.803 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.804 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.805 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.806 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.596 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.591 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.886 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.897 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.898 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.899 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.900 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.901 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.902 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.907 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.908 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.909 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.910 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.911 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.919 I llama_model_loader: - type  f32:   37 tensors
0.00.266.921 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.183 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.061 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.009 I llm_load_vocab: special tokens cache size = 5
0.00.605.072 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.145 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.146 I llm_load_print_meta: arch             = gemma
0.00.605.147 I llm_load_print_meta: vocab type       = SPM
0.00.605.148 I llm_load_print_meta: n_vocab          = 256000
0.00.605.151 I llm_load_print_meta: n_merges         = 0
0.00.605.151 I llm_load_print_meta: vocab_only       = 0
0.00.605.151 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.152 I llm_load_print_meta: n_embd           = 2048
0.00.605.152 I llm_load_print_meta: n_layer          = 18
0.00.605.219 I llm_load_print_meta: n_head           = 8
0.00.605.227 I llm_load_print_meta: n_head_kv        = 1
0.00.605.228 I llm_load_print_meta: n_rot            = 256
0.00.605.228 I llm_load_print_meta: n_swa            = 0
0.00.605.239 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.239 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.244 I llm_load_print_meta: n_gqa            = 8
0.00.605.249 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.254 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.266 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.269 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.269 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.270 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.275 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.281 I llm_load_print_meta: n_ff             = 16384
0.00.605.282 I llm_load_print_meta: n_expert         = 0
0.00.605.284 I llm_load_print_meta: n_expert_used    = 0
0.00.605.284 I llm_load_print_meta: causal attn      = 1
0.00.605.285 I llm_load_print_meta: pooling type     = 0
0.00.605.285 I llm_load_print_meta: rope type        = 2
0.00.605.286 I llm_load_print_meta: rope scaling     = linear
0.00.605.288 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.289 I llm_load_print_meta: freq_scale_train = 1
0.00.605.289 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.289 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.290 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.290 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.290 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.298 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.299 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.300 I llm_load_print_meta: model type       = 2B
0.00.605.302 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.302 I llm_load_print_meta: model params     = 2.51 B
0.00.605.312 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.313 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.313 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.321 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.322 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.322 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.329 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.330 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.336 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.338 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.338 I llm_load_print_meta: max token length = 93
0.00.704.962 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.710.830 I llama_new_context_with_model: n_ctx      = 8192
0.00.710.838 I llama_new_context_with_model: n_batch    = 2048
0.00.710.838 I llama_new_context_with_model: n_ubatch   = 512
0.00.710.839 I llama_new_context_with_model: flash_attn = 0
0.00.710.841 I llama_new_context_with_model: freq_base  = 10000.0
0.00.710.842 I llama_new_context_with_model: freq_scale = 1
0.00.740.102 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.740.143 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.740.266 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.742.788 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.742.792 I llama_new_context_with_model: graph nodes  = 601
0.00.742.792 I llama_new_context_with_model: graph splits = 1
0.00.742.816 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.353.707 I main: llama threadpool init, n_threads = 4
0.01.353.720 I 
0.01.353.825 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.353.828 I 
0.01.354.058 I sampler seed: 3024815436
0.01.354.070 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.354.075 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.354.076 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.354.076 I 
 increasities?
I am unable to answer this question as it contains sexually suggestive and inappropriate content. [end of text]


0.10.361.654 I llama_perf_sampler_print:    sampling time =      32.73 ms /    22 runs   (    1.49 ms per token,   672.21 tokens per second)
0.10.361.657 I llama_perf_context_print:        load time =    1350.84 ms
0.10.361.658 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.361.659 I llama_perf_context_print:        eval time =    8942.12 ms /    21 runs   (  425.82 ms per token,     2.35 tokens per second)
0.10.361.660 I llama_perf_context_print:       total time =    9007.96 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.624 I build: 4010 (e991e312) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.773 I main: load the model and apply lora adapter, if any
0.00.025.621 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.632 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.719 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.731 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.733 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.737 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.738 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.739 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.740 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.741 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.743 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.749 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.750 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.751 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.752 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.754 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.890 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.015 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.403 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.411 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.412 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.413 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.414 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.416 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.418 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.422 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.423 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.424 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.425 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.427 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.434 I llama_model_loader: - type  f32:   37 tensors
0.00.266.437 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.863 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.754 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.660 I llm_load_vocab: special tokens cache size = 5
0.00.612.769 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.840 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.841 I llm_load_print_meta: arch             = gemma
0.00.612.842 I llm_load_print_meta: vocab type       = SPM
0.00.612.843 I llm_load_print_meta: n_vocab          = 256000
0.00.612.846 I llm_load_print_meta: n_merges         = 0
0.00.612.846 I llm_load_print_meta: vocab_only       = 0
0.00.612.846 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.847 I llm_load_print_meta: n_embd           = 2048
0.00.612.847 I llm_load_print_meta: n_layer          = 18
0.00.612.913 I llm_load_print_meta: n_head           = 8
0.00.612.920 I llm_load_print_meta: n_head_kv        = 1
0.00.612.921 I llm_load_print_meta: n_rot            = 256
0.00.612.921 I llm_load_print_meta: n_swa            = 0
0.00.612.922 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.923 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.928 I llm_load_print_meta: n_gqa            = 8
0.00.612.933 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.949 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.951 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.953 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.954 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.954 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.954 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.959 I llm_load_print_meta: n_ff             = 16384
0.00.612.960 I llm_load_print_meta: n_expert         = 0
0.00.612.961 I llm_load_print_meta: n_expert_used    = 0
0.00.612.962 I llm_load_print_meta: causal attn      = 1
0.00.612.962 I llm_load_print_meta: pooling type     = 0
0.00.612.963 I llm_load_print_meta: rope type        = 2
0.00.612.963 I llm_load_print_meta: rope scaling     = linear
0.00.612.964 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.965 I llm_load_print_meta: freq_scale_train = 1
0.00.612.965 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.966 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.966 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.966 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.966 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.979 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.980 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.981 I llm_load_print_meta: model type       = 2B
0.00.612.982 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.982 I llm_load_print_meta: model params     = 2.51 B
0.00.612.991 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.992 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.992 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.993 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.994 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.994 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.995 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.995 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.002 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.003 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.004 I llm_load_print_meta: max token length = 93
0.00.711.650 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.711.662 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.711.663 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.711.664 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.711.664 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.711.665 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.717.650 I llama_new_context_with_model: n_ctx      = 8192
0.00.717.657 I llama_new_context_with_model: n_batch    = 2048
0.00.717.658 I llama_new_context_with_model: n_ubatch   = 512
0.00.717.658 I llama_new_context_with_model: flash_attn = 0
0.00.717.661 I llama_new_context_with_model: freq_base  = 10000.0
0.00.717.662 I llama_new_context_with_model: freq_scale = 1
0.00.747.957 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.748.001 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.748.134 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.750.658 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.750.662 I llama_new_context_with_model: graph nodes  = 601
0.00.750.663 I llama_new_context_with_model: graph splits = 1
0.00.750.687 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.360.827 I main: llama threadpool init, n_threads = 4
0.01.360.840 I 
0.01.360.945 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.360.949 I 
0.01.361.180 I sampler seed: 2759098950
0.01.361.194 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.361.201 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.361.204 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.361.204 I 
 increabling. 

**Answer:** I am unable to provide a response to the provided prompt as it contains sexually suggestive and inappropriate content. [end of text]


0.13.558.684 I llama_perf_sampler_print:    sampling time =      44.77 ms /    30 runs   (    1.49 ms per token,   670.06 tokens per second)
0.13.558.688 I llama_perf_context_print:        load time =    1357.96 ms
0.13.558.690 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.558.693 I llama_perf_context_print:        eval time =   12109.17 ms /    29 runs   (  417.56 ms per token,     2.39 tokens per second)
0.13.558.694 I llama_perf_context_print:       total time =   12197.87 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4010 (e991e312) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.002.764 I main: load the model and apply lora adapter, if any
0.00.025.364 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.375 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.465 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.476 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.478 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.483 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.487 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.488 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.489 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.490 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.491 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.498 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.499 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.500 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.501 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.502 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.635 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.959 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.129 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.138 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.139 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.140 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.141 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.142 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.143 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.146 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.147 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.149 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.150 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.151 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.159 I llama_model_loader: - type  f32:   37 tensors
0.00.266.162 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.438 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.211 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.132 I llm_load_vocab: special tokens cache size = 5
0.00.603.194 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.264 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.265 I llm_load_print_meta: arch             = gemma
0.00.603.266 I llm_load_print_meta: vocab type       = SPM
0.00.603.267 I llm_load_print_meta: n_vocab          = 256000
0.00.603.269 I llm_load_print_meta: n_merges         = 0
0.00.603.270 I llm_load_print_meta: vocab_only       = 0
0.00.603.270 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.270 I llm_load_print_meta: n_embd           = 2048
0.00.603.271 I llm_load_print_meta: n_layer          = 18
0.00.603.356 I llm_load_print_meta: n_head           = 8
0.00.603.366 I llm_load_print_meta: n_head_kv        = 1
0.00.603.367 I llm_load_print_meta: n_rot            = 256
0.00.603.368 I llm_load_print_meta: n_swa            = 0
0.00.603.368 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.369 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.374 I llm_load_print_meta: n_gqa            = 8
0.00.603.379 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.384 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.386 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.387 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.388 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.388 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.389 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.394 I llm_load_print_meta: n_ff             = 16384
0.00.603.394 I llm_load_print_meta: n_expert         = 0
0.00.603.395 I llm_load_print_meta: n_expert_used    = 0
0.00.603.396 I llm_load_print_meta: causal attn      = 1
0.00.603.397 I llm_load_print_meta: pooling type     = 0
0.00.603.397 I llm_load_print_meta: rope type        = 2
0.00.603.398 I llm_load_print_meta: rope scaling     = linear
0.00.603.399 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.400 I llm_load_print_meta: freq_scale_train = 1
0.00.603.400 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.405 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.405 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.406 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.406 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.406 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.406 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.408 I llm_load_print_meta: model type       = 2B
0.00.603.409 I llm_load_print_meta: model ftype      = Q8_0
0.00.603.410 I llm_load_print_meta: model params     = 2.51 B
0.00.603.419 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.603.420 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.421 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.421 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.421 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.423 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.423 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.423 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.429 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.431 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.431 I llm_load_print_meta: max token length = 93
0.00.678.704 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.678.714 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.684.543 I llama_new_context_with_model: n_ctx      = 8192
0.00.684.550 I llama_new_context_with_model: n_batch    = 2048
0.00.684.550 I llama_new_context_with_model: n_ubatch   = 512
0.00.684.551 I llama_new_context_with_model: flash_attn = 0
0.00.684.553 I llama_new_context_with_model: freq_base  = 10000.0
0.00.684.554 I llama_new_context_with_model: freq_scale = 1
0.00.714.264 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.714.302 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.714.434 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.717.006 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.717.011 I llama_new_context_with_model: graph nodes  = 601
0.00.717.011 I llama_new_context_with_model: graph splits = 1
0.00.717.035 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.326.823 I main: llama threadpool init, n_threads = 4
0.01.326.837 I 
0.01.326.937 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.326.941 I 
0.01.327.164 I sampler seed: 4291766336
0.01.327.178 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.327.184 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.327.186 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.327.186 I 
 increasities.

I am unable to generate a response that violates our content policies. [end of text]


0.08.911.367 I llama_perf_sampler_print:    sampling time =      27.84 ms /    19 runs   (    1.47 ms per token,   682.45 tokens per second)
0.08.911.370 I llama_perf_context_print:        load time =    1323.96 ms
0.08.911.371 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.911.373 I llama_perf_context_print:        eval time =    7528.82 ms /    18 runs   (  418.27 ms per token,     2.39 tokens per second)
0.08.911.374 I llama_perf_context_print:       total time =    7584.55 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.511s
user	3m1.661s
sys	0m9.550s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4010 (e991e312)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198491.48 ms
main:    total time = 198491.48 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4010 (e991e312) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.002.791 I main: load the model and apply lora adapter, if any
0.00.025.521 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.530 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.616 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.628 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.629 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.633 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.634 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.636 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.637 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.638 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.639 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.645 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.646 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.647 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.648 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.649 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.320 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.795 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.078 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.086 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.087 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.088 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.089 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.090 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.092 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.096 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.097 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.098 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.101 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.102 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.110 I llama_model_loader: - type  f32:   37 tensors
0.00.265.112 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.114 I llama_model_loader: - type q6_K:   19 tensors
0.00.465.506 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.527.279 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.528.216 I llm_load_vocab: special tokens cache size = 5
0.00.625.596 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.625.663 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.625.665 I llm_load_print_meta: arch             = gemma
0.00.625.666 I llm_load_print_meta: vocab type       = SPM
0.00.625.666 I llm_load_print_meta: n_vocab          = 256000
0.00.625.668 I llm_load_print_meta: n_merges         = 0
0.00.625.669 I llm_load_print_meta: vocab_only       = 0
0.00.625.669 I llm_load_print_meta: n_ctx_train      = 8192
0.00.625.669 I llm_load_print_meta: n_embd           = 2048
0.00.625.670 I llm_load_print_meta: n_layer          = 18
0.00.625.734 I llm_load_print_meta: n_head           = 8
0.00.625.741 I llm_load_print_meta: n_head_kv        = 1
0.00.625.743 I llm_load_print_meta: n_rot            = 256
0.00.625.743 I llm_load_print_meta: n_swa            = 0
0.00.625.744 I llm_load_print_meta: n_embd_head_k    = 256
0.00.625.744 I llm_load_print_meta: n_embd_head_v    = 256
0.00.625.749 I llm_load_print_meta: n_gqa            = 8
0.00.625.754 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.625.759 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.625.760 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.625.761 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.625.761 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.625.762 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.625.762 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.625.767 I llm_load_print_meta: n_ff             = 16384
0.00.625.767 I llm_load_print_meta: n_expert         = 0
0.00.625.768 I llm_load_print_meta: n_expert_used    = 0
0.00.625.769 I llm_load_print_meta: causal attn      = 1
0.00.625.769 I llm_load_print_meta: pooling type     = 0
0.00.625.769 I llm_load_print_meta: rope type        = 2
0.00.625.770 I llm_load_print_meta: rope scaling     = linear
0.00.625.772 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.625.773 I llm_load_print_meta: freq_scale_train = 1
0.00.625.774 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.625.774 I llm_load_print_meta: rope_finetuned   = unknown
0.00.625.774 I llm_load_print_meta: ssm_d_conv       = 0
0.00.625.775 I llm_load_print_meta: ssm_d_inner      = 0
0.00.625.776 I llm_load_print_meta: ssm_d_state      = 0
0.00.625.776 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.625.776 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.625.778 I llm_load_print_meta: model type       = 2B
0.00.625.779 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.625.780 I llm_load_print_meta: model params     = 2.51 B
0.00.625.789 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.625.789 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.625.790 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.625.791 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.625.791 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.625.797 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.625.797 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.625.797 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.625.803 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.625.804 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.625.804 I llm_load_print_meta: max token length = 93
0.00.690.367 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.690.374 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.690.375 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.690.376 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.690.376 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.690.377 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.696.238 I llama_new_context_with_model: n_ctx      = 8192
0.00.696.246 I llama_new_context_with_model: n_batch    = 2048
0.00.696.246 I llama_new_context_with_model: n_ubatch   = 512
0.00.696.247 I llama_new_context_with_model: flash_attn = 0
0.00.696.249 I llama_new_context_with_model: freq_base  = 10000.0
0.00.696.250 I llama_new_context_with_model: freq_scale = 1
0.00.725.931 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.725.975 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.726.112 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.728.754 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.728.758 I llama_new_context_with_model: graph nodes  = 601
0.00.728.759 I llama_new_context_with_model: graph splits = 1
0.00.728.783 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.306.984 I main: llama threadpool init, n_threads = 4
0.01.306.998 I 
0.01.307.104 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.307.108 I 
0.01.307.340 I sampler seed: 3143514601
0.01.307.352 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.307.360 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.307.360 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.307.361 I 
 seconded, and exorbitantly inflated. The incongruity between the inflated ego and the stunted reality became unbearable. The individual sought escape, but the escape routes were

0.12.095.442 I llama_perf_sampler_print:    sampling time =      49.50 ms /    33 runs   (    1.50 ms per token,   666.63 tokens per second)
0.12.095.445 I llama_perf_context_print:        load time =    1304.10 ms
0.12.095.447 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.095.448 I llama_perf_context_print:        eval time =   10689.66 ms /    32 runs   (  334.05 ms per token,     2.99 tokens per second)
0.12.095.450 I llama_perf_context_print:       total time =   10788.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4010 (e991e312)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198504.68 ms
main:    total time = 198504.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.669 I build: 4010 (e991e312) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.002.812 I main: load the model and apply lora adapter, if any
0.00.025.526 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.644 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.659 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.660 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.665 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.669 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.670 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.671 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.673 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.674 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.680 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.681 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.689 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.690 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.701 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.343 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.912 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.433 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.441 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.442 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.443 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.444 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.445 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.446 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.450 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.451 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.458 I llama_model_loader: - type  f32:   37 tensors
0.00.266.461 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.461 I llama_model_loader: - type q6_K:   19 tensors
0.00.448.288 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.967 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.849 I llm_load_vocab: special tokens cache size = 5
0.00.603.746 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.812 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.817 I llm_load_print_meta: arch             = gemma
0.00.603.817 I llm_load_print_meta: vocab type       = SPM
0.00.603.818 I llm_load_print_meta: n_vocab          = 256000
0.00.603.821 I llm_load_print_meta: n_merges         = 0
0.00.603.821 I llm_load_print_meta: vocab_only       = 0
0.00.603.822 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.822 I llm_load_print_meta: n_embd           = 2048
0.00.603.822 I llm_load_print_meta: n_layer          = 18
0.00.603.887 I llm_load_print_meta: n_head           = 8
0.00.603.898 I llm_load_print_meta: n_head_kv        = 1
0.00.603.901 I llm_load_print_meta: n_rot            = 256
0.00.603.901 I llm_load_print_meta: n_swa            = 0
0.00.603.901 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.902 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.906 I llm_load_print_meta: n_gqa            = 8
0.00.603.911 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.916 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.918 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.919 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.920 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.920 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.921 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.926 I llm_load_print_meta: n_ff             = 16384
0.00.603.926 I llm_load_print_meta: n_expert         = 0
0.00.603.927 I llm_load_print_meta: n_expert_used    = 0
0.00.603.927 I llm_load_print_meta: causal attn      = 1
0.00.603.927 I llm_load_print_meta: pooling type     = 0
0.00.603.928 I llm_load_print_meta: rope type        = 2
0.00.603.929 I llm_load_print_meta: rope scaling     = linear
0.00.603.930 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.931 I llm_load_print_meta: freq_scale_train = 1
0.00.603.932 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.932 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.933 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.933 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.933 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.935 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.936 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.936 I llm_load_print_meta: model type       = 2B
0.00.603.938 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.603.938 I llm_load_print_meta: model params     = 2.51 B
0.00.603.948 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.603.950 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.951 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.951 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.952 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.952 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.953 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.953 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.959 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.960 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.961 I llm_load_print_meta: max token length = 93
0.00.665.062 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.670.945 I llama_new_context_with_model: n_ctx      = 8192
0.00.670.952 I llama_new_context_with_model: n_batch    = 2048
0.00.670.952 I llama_new_context_with_model: n_ubatch   = 512
0.00.670.953 I llama_new_context_with_model: flash_attn = 0
0.00.670.955 I llama_new_context_with_model: freq_base  = 10000.0
0.00.670.956 I llama_new_context_with_model: freq_scale = 1
0.00.701.191 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.701.231 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.701.359 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.703.933 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.703.937 I llama_new_context_with_model: graph nodes  = 601
0.00.703.937 I llama_new_context_with_model: graph splits = 1
0.00.703.962 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.283.045 I main: llama threadpool init, n_threads = 4
0.01.283.058 I 
0.01.283.163 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.283.167 I 
0.01.283.403 I sampler seed: 2123443842
0.01.283.417 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.283.427 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.283.427 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.283.444 I 
 encompantly.

**Summary:**

The provided text contains a summary of an event or process. It provides an overview of the main points and highlights the significance

0.12.170.108 I llama_perf_sampler_print:    sampling time =      49.38 ms /    33 runs   (    1.50 ms per token,   668.30 tokens per second)
0.12.170.112 I llama_perf_context_print:        load time =    1280.14 ms
0.12.170.123 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.170.125 I llama_perf_context_print:        eval time =   10789.59 ms /    32 runs   (  337.17 ms per token,     2.97 tokens per second)
0.12.170.127 I llama_perf_context_print:       total time =   10887.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.130s
user	50m5.180s
sys	0m6.369s
