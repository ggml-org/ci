+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.541 I build: 3797 (e948a7da) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.001.841 I main: load the model and apply lora adapter, if any
0.00.022.025 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.073 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.083 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.088 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.089 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.092 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.093 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.094 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.095 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.096 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.096 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.100 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.100 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.101 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.102 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.103 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.624 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.743 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.679 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.684 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.685 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.685 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.686 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.687 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.687 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.689 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.690 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.691 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.691 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.692 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.695 I llama_model_loader: - type  f32:   37 tensors
0.00.131.698 I llama_model_loader: - type q8_0:  127 tensors
0.00.194.269 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.194.892 I llm_load_vocab: special tokens cache size = 5
0.00.213.455 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.213.468 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.213.468 I llm_load_print_meta: arch             = gemma
0.00.213.469 I llm_load_print_meta: vocab type       = SPM
0.00.213.470 I llm_load_print_meta: n_vocab          = 256000
0.00.213.470 I llm_load_print_meta: n_merges         = 0
0.00.213.471 I llm_load_print_meta: vocab_only       = 0
0.00.213.471 I llm_load_print_meta: n_ctx_train      = 8192
0.00.213.471 I llm_load_print_meta: n_embd           = 2048
0.00.213.472 I llm_load_print_meta: n_layer          = 18
0.00.213.483 I llm_load_print_meta: n_head           = 8
0.00.213.484 I llm_load_print_meta: n_head_kv        = 1
0.00.213.485 I llm_load_print_meta: n_rot            = 256
0.00.213.485 I llm_load_print_meta: n_swa            = 0
0.00.213.485 I llm_load_print_meta: n_embd_head_k    = 256
0.00.213.485 I llm_load_print_meta: n_embd_head_v    = 256
0.00.213.486 I llm_load_print_meta: n_gqa            = 8
0.00.213.487 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.213.488 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.213.489 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.213.490 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.213.490 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.213.491 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.213.491 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.213.492 I llm_load_print_meta: n_ff             = 16384
0.00.213.492 I llm_load_print_meta: n_expert         = 0
0.00.213.493 I llm_load_print_meta: n_expert_used    = 0
0.00.213.493 I llm_load_print_meta: causal attn      = 1
0.00.213.493 I llm_load_print_meta: pooling type     = 0
0.00.213.494 I llm_load_print_meta: rope type        = 2
0.00.213.494 I llm_load_print_meta: rope scaling     = linear
0.00.213.495 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.213.496 I llm_load_print_meta: freq_scale_train = 1
0.00.213.496 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.213.496 I llm_load_print_meta: rope_finetuned   = unknown
0.00.213.497 I llm_load_print_meta: ssm_d_conv       = 0
0.00.213.497 I llm_load_print_meta: ssm_d_inner      = 0
0.00.213.497 I llm_load_print_meta: ssm_d_state      = 0
0.00.213.498 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.213.498 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.213.499 I llm_load_print_meta: model type       = 2B
0.00.213.499 I llm_load_print_meta: model ftype      = Q8_0
0.00.213.500 I llm_load_print_meta: model params     = 2.51 B
0.00.213.501 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.213.502 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.213.502 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.213.502 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.213.503 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.213.503 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.213.503 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.213.504 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.213.504 I llm_load_print_meta: max token length = 93
0.00.213.520 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.311.094 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.311.101 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.311.102 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.311.102 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.311.103 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.311.104 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.316.121 I llama_new_context_with_model: n_ctx      = 8192
0.00.316.127 I llama_new_context_with_model: n_batch    = 2048
0.00.316.128 I llama_new_context_with_model: n_ubatch   = 512
0.00.316.128 I llama_new_context_with_model: flash_attn = 0
0.00.316.131 I llama_new_context_with_model: freq_base  = 10000.0
0.00.316.131 I llama_new_context_with_model: freq_scale = 1
0.00.344.751 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.344.765 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.344.855 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.731 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.345.738 I llama_new_context_with_model: graph nodes  = 601
0.00.345.739 I llama_new_context_with_model: graph splits = 1
0.00.345.740 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.435.973 I main: llama threadpool init, n_threads = 4
0.00.435.985 I 
0.00.436.058 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.436.061 I 
0.00.436.088 I sampler seed: 2804758448
0.00.436.098 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.436.101 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.436.102 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively, adding more and more adjectives to describe the person.

The professor, an imposing figure with a regal bearing and piercing blue eyes, captivated his students

0.02.654.118 I llama_perf_sampler_print:    sampling time =       5.18 ms /    33 runs   (    0.16 ms per token,  6368.20 tokens per second)
0.02.654.120 I llama_perf_context_print:        load time =     434.11 ms
0.02.654.122 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.654.124 I llama_perf_context_print:        eval time =    2200.17 ms /    32 runs   (   68.76 ms per token,    14.54 tokens per second)
0.02.654.125 I llama_perf_context_print:       total time =    2218.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.555 I build: 3797 (e948a7da) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.001.852 I main: load the model and apply lora adapter, if any
0.00.021.907 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.917 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.923 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.924 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.927 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.928 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.929 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.929 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.930 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.930 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.935 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.936 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.937 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.937 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.938 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.503 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.318 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.248 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.254 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.255 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.256 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.256 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.257 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.258 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.261 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.261 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.262 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.262 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.264 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.267 I llama_model_loader: - type  f32:   37 tensors
0.00.132.271 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.421 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.199.164 I llm_load_vocab: special tokens cache size = 5
0.00.217.666 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.678 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.679 I llm_load_print_meta: arch             = gemma
0.00.217.679 I llm_load_print_meta: vocab type       = SPM
0.00.217.680 I llm_load_print_meta: n_vocab          = 256000
0.00.217.680 I llm_load_print_meta: n_merges         = 0
0.00.217.681 I llm_load_print_meta: vocab_only       = 0
0.00.217.681 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.681 I llm_load_print_meta: n_embd           = 2048
0.00.217.682 I llm_load_print_meta: n_layer          = 18
0.00.217.693 I llm_load_print_meta: n_head           = 8
0.00.217.694 I llm_load_print_meta: n_head_kv        = 1
0.00.217.694 I llm_load_print_meta: n_rot            = 256
0.00.217.695 I llm_load_print_meta: n_swa            = 0
0.00.217.695 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.695 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.696 I llm_load_print_meta: n_gqa            = 8
0.00.217.697 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.698 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.699 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.700 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.700 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.701 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.701 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.702 I llm_load_print_meta: n_ff             = 16384
0.00.217.702 I llm_load_print_meta: n_expert         = 0
0.00.217.703 I llm_load_print_meta: n_expert_used    = 0
0.00.217.703 I llm_load_print_meta: causal attn      = 1
0.00.217.703 I llm_load_print_meta: pooling type     = 0
0.00.217.704 I llm_load_print_meta: rope type        = 2
0.00.217.704 I llm_load_print_meta: rope scaling     = linear
0.00.217.706 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.706 I llm_load_print_meta: freq_scale_train = 1
0.00.217.706 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.707 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.707 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.708 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.708 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.708 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.709 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.709 I llm_load_print_meta: model type       = 2B
0.00.217.710 I llm_load_print_meta: model ftype      = Q8_0
0.00.217.710 I llm_load_print_meta: model params     = 2.51 B
0.00.217.711 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.217.712 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.712 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.712 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.713 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.713 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.713 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.714 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.714 I llm_load_print_meta: max token length = 93
0.00.217.737 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.312.390 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.317.418 I llama_new_context_with_model: n_ctx      = 8192
0.00.317.423 I llama_new_context_with_model: n_batch    = 2048
0.00.317.424 I llama_new_context_with_model: n_ubatch   = 512
0.00.317.424 I llama_new_context_with_model: flash_attn = 0
0.00.317.426 I llama_new_context_with_model: freq_base  = 10000.0
0.00.317.427 I llama_new_context_with_model: freq_scale = 1
0.00.346.158 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.346.175 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.346.264 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.074 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.347.081 I llama_new_context_with_model: graph nodes  = 601
0.00.347.081 I llama_new_context_with_model: graph splits = 1
0.00.347.083 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.433.660 I main: llama threadpool init, n_threads = 4
0.00.433.671 I 
0.00.433.746 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.433.750 I 
0.00.433.783 I sampler seed: 3294679919
0.00.433.797 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.801 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.433.803 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally.

The given text contains a few sentences that need to be rephrased or clarified.

**Rephrased/Clarified Sentences:**



0.02.583.737 I llama_perf_sampler_print:    sampling time =       4.66 ms /    33 runs   (    0.14 ms per token,  7087.63 tokens per second)
0.02.583.739 I llama_perf_context_print:        load time =     431.79 ms
0.02.583.741 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.583.742 I llama_perf_context_print:        eval time =    2132.00 ms /    32 runs   (   66.63 ms per token,    15.01 tokens per second)
0.02.583.743 I llama_perf_context_print:       total time =    2150.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.566 I build: 3797 (e948a7da) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.779 I main: llama backend init
0.00.001.921 I main: load the model and apply lora adapter, if any
0.00.021.906 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.954 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.966 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.971 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.973 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.976 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.977 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.977 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.978 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.978 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.979 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.983 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.984 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.985 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.985 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.986 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.288 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.308 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.257 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.264 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.265 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.266 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.266 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.267 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.268 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.271 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.272 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.274 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.274 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.275 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.280 I llama_model_loader: - type  f32:   37 tensors
0.00.131.283 I llama_model_loader: - type q8_0:  127 tensors
0.00.195.076 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.765 I llm_load_vocab: special tokens cache size = 5
0.00.214.200 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.214 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.215 I llm_load_print_meta: arch             = gemma
0.00.214.215 I llm_load_print_meta: vocab type       = SPM
0.00.214.216 I llm_load_print_meta: n_vocab          = 256000
0.00.214.217 I llm_load_print_meta: n_merges         = 0
0.00.214.217 I llm_load_print_meta: vocab_only       = 0
0.00.214.217 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.218 I llm_load_print_meta: n_embd           = 2048
0.00.214.218 I llm_load_print_meta: n_layer          = 18
0.00.214.230 I llm_load_print_meta: n_head           = 8
0.00.214.231 I llm_load_print_meta: n_head_kv        = 1
0.00.214.232 I llm_load_print_meta: n_rot            = 256
0.00.214.232 I llm_load_print_meta: n_swa            = 0
0.00.214.232 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.233 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.234 I llm_load_print_meta: n_gqa            = 8
0.00.214.235 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.236 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.236 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.238 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.238 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.239 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.239 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.240 I llm_load_print_meta: n_ff             = 16384
0.00.214.240 I llm_load_print_meta: n_expert         = 0
0.00.214.241 I llm_load_print_meta: n_expert_used    = 0
0.00.214.241 I llm_load_print_meta: causal attn      = 1
0.00.214.241 I llm_load_print_meta: pooling type     = 0
0.00.214.241 I llm_load_print_meta: rope type        = 2
0.00.214.242 I llm_load_print_meta: rope scaling     = linear
0.00.214.245 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.245 I llm_load_print_meta: freq_scale_train = 1
0.00.214.246 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.246 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.246 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.247 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.247 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.248 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.248 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.249 I llm_load_print_meta: model type       = 2B
0.00.214.249 I llm_load_print_meta: model ftype      = Q8_0
0.00.214.250 I llm_load_print_meta: model params     = 2.51 B
0.00.214.251 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.214.251 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.252 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.252 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.253 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.253 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.253 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.254 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.254 I llm_load_print_meta: max token length = 93
0.00.214.274 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.289.684 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.289.690 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.289.691 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.289.692 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.289.692 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.289.693 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.294.889 I llama_new_context_with_model: n_ctx      = 8192
0.00.294.896 I llama_new_context_with_model: n_batch    = 2048
0.00.294.897 I llama_new_context_with_model: n_ubatch   = 512
0.00.294.897 I llama_new_context_with_model: flash_attn = 0
0.00.294.901 I llama_new_context_with_model: freq_base  = 10000.0
0.00.294.901 I llama_new_context_with_model: freq_scale = 1
0.00.324.846 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.324.863 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.324.960 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.325.874 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.325.882 I llama_new_context_with_model: graph nodes  = 601
0.00.325.883 I llama_new_context_with_model: graph splits = 1
0.00.325.885 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.984 I main: llama threadpool init, n_threads = 4
0.00.418.995 I 
0.00.419.074 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.419.078 I 
0.00.419.124 I sampler seed: 839148683
0.00.419.134 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.138 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.419.138 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvously.
I am unable to provide you with sexually suggestive or inappropriate responses. My purpose is to assist with tasks and questions that comply with ethical and

0.02.684.741 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6893.67 tokens per second)
0.02.684.744 I llama_perf_context_print:        load time =     417.04 ms
0.02.684.746 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.684.748 I llama_perf_context_print:        eval time =    2247.35 ms /    32 runs   (   70.23 ms per token,    14.24 tokens per second)
0.02.684.749 I llama_perf_context_print:       total time =    2265.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.541 I build: 3797 (e948a7da) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.001.909 I main: load the model and apply lora adapter, if any
0.00.021.843 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.914 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.922 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.927 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.928 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.932 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.934 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.935 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.936 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.937 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.938 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.943 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.944 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.945 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.948 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.949 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.628 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.415 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.366 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.372 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.373 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.374 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.375 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.376 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.377 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.380 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.381 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.382 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.383 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.385 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.389 I llama_model_loader: - type  f32:   37 tensors
0.00.132.392 I llama_model_loader: - type q8_0:  127 tensors
0.00.194.388 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.194.989 I llm_load_vocab: special tokens cache size = 5
0.00.213.591 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.213.604 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.213.604 I llm_load_print_meta: arch             = gemma
0.00.213.605 I llm_load_print_meta: vocab type       = SPM
0.00.213.606 I llm_load_print_meta: n_vocab          = 256000
0.00.213.607 I llm_load_print_meta: n_merges         = 0
0.00.213.607 I llm_load_print_meta: vocab_only       = 0
0.00.213.608 I llm_load_print_meta: n_ctx_train      = 8192
0.00.213.608 I llm_load_print_meta: n_embd           = 2048
0.00.213.608 I llm_load_print_meta: n_layer          = 18
0.00.213.619 I llm_load_print_meta: n_head           = 8
0.00.213.620 I llm_load_print_meta: n_head_kv        = 1
0.00.213.620 I llm_load_print_meta: n_rot            = 256
0.00.213.621 I llm_load_print_meta: n_swa            = 0
0.00.213.621 I llm_load_print_meta: n_embd_head_k    = 256
0.00.213.621 I llm_load_print_meta: n_embd_head_v    = 256
0.00.213.622 I llm_load_print_meta: n_gqa            = 8
0.00.213.623 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.213.624 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.213.625 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.213.626 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.213.627 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.213.628 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.213.628 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.213.630 I llm_load_print_meta: n_ff             = 16384
0.00.213.632 I llm_load_print_meta: n_expert         = 0
0.00.213.633 I llm_load_print_meta: n_expert_used    = 0
0.00.213.633 I llm_load_print_meta: causal attn      = 1
0.00.213.639 I llm_load_print_meta: pooling type     = 0
0.00.213.639 I llm_load_print_meta: rope type        = 2
0.00.213.640 I llm_load_print_meta: rope scaling     = linear
0.00.213.642 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.213.643 I llm_load_print_meta: freq_scale_train = 1
0.00.213.643 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.213.644 I llm_load_print_meta: rope_finetuned   = unknown
0.00.213.645 I llm_load_print_meta: ssm_d_conv       = 0
0.00.213.645 I llm_load_print_meta: ssm_d_inner      = 0
0.00.213.646 I llm_load_print_meta: ssm_d_state      = 0
0.00.213.646 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.213.647 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.213.648 I llm_load_print_meta: model type       = 2B
0.00.213.649 I llm_load_print_meta: model ftype      = Q8_0
0.00.213.650 I llm_load_print_meta: model params     = 2.51 B
0.00.213.651 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.213.652 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.213.653 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.213.653 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.213.654 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.213.655 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.213.655 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.213.656 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.213.656 I llm_load_print_meta: max token length = 93
0.00.213.679 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.284.006 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.284.013 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.289.248 I llama_new_context_with_model: n_ctx      = 8192
0.00.289.256 I llama_new_context_with_model: n_batch    = 2048
0.00.289.256 I llama_new_context_with_model: n_ubatch   = 512
0.00.289.256 I llama_new_context_with_model: flash_attn = 0
0.00.289.260 I llama_new_context_with_model: freq_base  = 10000.0
0.00.289.261 I llama_new_context_with_model: freq_scale = 1
0.00.319.724 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.319.739 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.319.842 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.320.680 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.320.688 I llama_new_context_with_model: graph nodes  = 601
0.00.320.688 I llama_new_context_with_model: graph splits = 1
0.00.320.690 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.415.752 I main: llama threadpool init, n_threads = 4
0.00.415.764 I 
0.00.415.849 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.415.852 I 
0.00.415.882 I sampler seed: 3662189503
0.00.415.893 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.415.896 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.415.897 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, and the resulting societal anxieties.

The increasing prevalence of narcissistic personality disorder (NPD) and other personality disorders has sparked concerns about their societal impact,

0.02.837.296 I llama_perf_sampler_print:    sampling time =       5.54 ms /    33 runs   (    0.17 ms per token,  5958.83 tokens per second)
0.02.837.298 I llama_perf_context_print:        load time =     413.82 ms
0.02.837.299 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.837.301 I llama_perf_context_print:        eval time =    2402.17 ms /    32 runs   (   75.07 ms per token,    13.32 tokens per second)
0.02.837.301 I llama_perf_context_print:       total time =    2421.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.348s
user	0m38.834s
sys	0m9.400s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3797 (e948a7da)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31969.87 ms
main:    total time = 31969.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.544 I build: 3797 (e948a7da) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.001.878 I main: load the model and apply lora adapter, if any
0.00.021.920 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.995 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.005 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.010 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.011 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.016 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.017 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.018 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.019 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.020 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.021 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.025 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.026 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.027 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.031 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.033 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.727 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.160 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.085 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.092 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.093 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.093 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.094 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.095 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.095 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.097 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.098 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.098 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.099 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.100 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.104 I llama_model_loader: - type  f32:   37 tensors
0.00.132.106 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.107 I llama_model_loader: - type q6_K:   19 tensors
0.00.195.263 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.899 I llm_load_vocab: special tokens cache size = 5
0.00.214.364 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.379 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.379 I llm_load_print_meta: arch             = gemma
0.00.214.379 I llm_load_print_meta: vocab type       = SPM
0.00.214.381 I llm_load_print_meta: n_vocab          = 256000
0.00.214.381 I llm_load_print_meta: n_merges         = 0
0.00.214.381 I llm_load_print_meta: vocab_only       = 0
0.00.214.382 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.383 I llm_load_print_meta: n_embd           = 2048
0.00.214.383 I llm_load_print_meta: n_layer          = 18
0.00.214.397 I llm_load_print_meta: n_head           = 8
0.00.214.398 I llm_load_print_meta: n_head_kv        = 1
0.00.214.399 I llm_load_print_meta: n_rot            = 256
0.00.214.400 I llm_load_print_meta: n_swa            = 0
0.00.214.401 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.402 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.404 I llm_load_print_meta: n_gqa            = 8
0.00.214.405 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.407 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.408 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.409 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.410 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.411 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.412 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.414 I llm_load_print_meta: n_ff             = 16384
0.00.214.414 I llm_load_print_meta: n_expert         = 0
0.00.214.415 I llm_load_print_meta: n_expert_used    = 0
0.00.214.416 I llm_load_print_meta: causal attn      = 1
0.00.214.416 I llm_load_print_meta: pooling type     = 0
0.00.214.416 I llm_load_print_meta: rope type        = 2
0.00.214.417 I llm_load_print_meta: rope scaling     = linear
0.00.214.419 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.421 I llm_load_print_meta: freq_scale_train = 1
0.00.214.421 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.422 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.423 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.424 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.424 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.424 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.425 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.426 I llm_load_print_meta: model type       = 2B
0.00.214.427 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.214.429 I llm_load_print_meta: model params     = 2.51 B
0.00.214.430 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.214.430 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.432 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.432 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.433 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.433 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.434 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.434 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.435 I llm_load_print_meta: max token length = 93
0.00.214.462 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.273.405 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.273.413 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.273.413 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.273.414 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.273.415 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.273.415 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.278.458 I llama_new_context_with_model: n_ctx      = 8192
0.00.278.464 I llama_new_context_with_model: n_batch    = 2048
0.00.278.464 I llama_new_context_with_model: n_ubatch   = 512
0.00.278.465 I llama_new_context_with_model: flash_attn = 0
0.00.278.467 I llama_new_context_with_model: freq_base  = 10000.0
0.00.278.467 I llama_new_context_with_model: freq_scale = 1
0.00.307.679 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.307.694 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.307.795 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.308.601 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.308.610 I llama_new_context_with_model: graph nodes  = 601
0.00.308.610 I llama_new_context_with_model: graph splits = 1
0.00.308.612 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.389.251 I main: llama threadpool init, n_threads = 4
0.00.389.262 I 
0.00.389.344 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.389.348 I 
0.00.389.384 I sampler seed: 4147060914
0.00.389.394 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.389.396 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.389.397 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in the context of the novel?

**Answer:**

The novel explores various forms of narcissistic and possessive relationships, showcasing how they intertwine and shape

0.01.995.269 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6560.64 tokens per second)
0.01.995.272 I llama_perf_context_print:        load time =     387.36 ms
0.01.995.274 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.995.276 I llama_perf_context_print:        eval time =    1587.41 ms /    32 runs   (   49.61 ms per token,    20.16 tokens per second)
0.01.995.277 I llama_perf_context_print:       total time =    1606.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3797 (e948a7da)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32045.67 ms
main:    total time = 32045.67 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.536 I build: 3797 (e948a7da) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.001.857 I main: load the model and apply lora adapter, if any
0.00.021.983 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.994 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.001 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.002 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.006 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.007 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.010 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.010 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.011 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.012 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.016 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.017 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.017 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.018 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.019 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.515 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.067 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.009 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.015 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.016 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.017 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.018 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.019 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.020 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.023 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.024 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.027 I llama_model_loader: - type  f32:   37 tensors
0.00.132.029 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.030 I llama_model_loader: - type q6_K:   19 tensors
0.00.198.157 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.842 I llm_load_vocab: special tokens cache size = 5
0.00.217.085 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.098 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.098 I llm_load_print_meta: arch             = gemma
0.00.217.099 I llm_load_print_meta: vocab type       = SPM
0.00.217.099 I llm_load_print_meta: n_vocab          = 256000
0.00.217.100 I llm_load_print_meta: n_merges         = 0
0.00.217.100 I llm_load_print_meta: vocab_only       = 0
0.00.217.101 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.101 I llm_load_print_meta: n_embd           = 2048
0.00.217.101 I llm_load_print_meta: n_layer          = 18
0.00.217.112 I llm_load_print_meta: n_head           = 8
0.00.217.113 I llm_load_print_meta: n_head_kv        = 1
0.00.217.113 I llm_load_print_meta: n_rot            = 256
0.00.217.113 I llm_load_print_meta: n_swa            = 0
0.00.217.114 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.114 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.115 I llm_load_print_meta: n_gqa            = 8
0.00.217.116 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.117 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.118 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.120 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.120 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.120 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.121 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.122 I llm_load_print_meta: n_ff             = 16384
0.00.217.122 I llm_load_print_meta: n_expert         = 0
0.00.217.122 I llm_load_print_meta: n_expert_used    = 0
0.00.217.123 I llm_load_print_meta: causal attn      = 1
0.00.217.123 I llm_load_print_meta: pooling type     = 0
0.00.217.123 I llm_load_print_meta: rope type        = 2
0.00.217.123 I llm_load_print_meta: rope scaling     = linear
0.00.217.125 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.125 I llm_load_print_meta: freq_scale_train = 1
0.00.217.126 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.126 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.126 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.127 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.127 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.127 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.127 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.128 I llm_load_print_meta: model type       = 2B
0.00.217.128 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.217.129 I llm_load_print_meta: model params     = 2.51 B
0.00.217.130 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.217.131 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.131 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.131 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.132 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.132 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.132 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.133 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.133 I llm_load_print_meta: max token length = 93
0.00.217.149 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.273.733 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.278.640 I llama_new_context_with_model: n_ctx      = 8192
0.00.278.647 I llama_new_context_with_model: n_batch    = 2048
0.00.278.647 I llama_new_context_with_model: n_ubatch   = 512
0.00.278.648 I llama_new_context_with_model: flash_attn = 0
0.00.278.650 I llama_new_context_with_model: freq_base  = 10000.0
0.00.278.651 I llama_new_context_with_model: freq_scale = 1
0.00.308.622 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.308.638 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.308.727 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.309.549 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.309.558 I llama_new_context_with_model: graph nodes  = 601
0.00.309.559 I llama_new_context_with_model: graph splits = 1
0.00.309.561 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.390.371 I main: llama threadpool init, n_threads = 4
0.00.390.383 I 
0.00.390.456 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.390.459 I 
0.00.390.487 I sampler seed: 2241583379
0.00.390.496 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.390.509 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.390.512 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally in the sentence.

The cat sat on the mat, scratching its paws, watching the birds flying high. [end of text]


0.01.643.086 I llama_perf_sampler_print:    sampling time =       3.74 ms /    26 runs   (    0.14 ms per token,  6951.87 tokens per second)
0.01.643.088 I llama_perf_context_print:        load time =     388.50 ms
0.01.643.091 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.643.092 I llama_perf_context_print:        eval time =    1238.82 ms /    25 runs   (   49.55 ms per token,    20.18 tokens per second)
0.01.643.093 I llama_perf_context_print:       total time =    1252.72 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.880s
user	8m12.557s
sys	0m7.083s
