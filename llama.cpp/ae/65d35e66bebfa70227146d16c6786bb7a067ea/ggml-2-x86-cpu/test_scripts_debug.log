+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 3928 (ae65d35e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.784 I main: load the model and apply lora adapter, if any
0.00.024.771 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.964 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.047 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.057 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.058 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.063 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.065 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.066 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.067 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.068 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.069 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.075 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.077 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.078 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.079 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.080 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.137 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.173 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.391 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.400 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.401 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.403 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.403 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.404 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.406 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.409 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.410 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.411 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.412 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.413 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.422 I llama_model_loader: - type  f32:   37 tensors
0.00.268.426 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.814 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.485 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.493 I llm_load_vocab: special tokens cache size = 5
0.00.602.001 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.070 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.071 I llm_load_print_meta: arch             = gemma
0.00.602.072 I llm_load_print_meta: vocab type       = SPM
0.00.602.072 I llm_load_print_meta: n_vocab          = 256000
0.00.602.074 I llm_load_print_meta: n_merges         = 0
0.00.602.075 I llm_load_print_meta: vocab_only       = 0
0.00.602.075 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.076 I llm_load_print_meta: n_embd           = 2048
0.00.602.076 I llm_load_print_meta: n_layer          = 18
0.00.602.140 I llm_load_print_meta: n_head           = 8
0.00.602.148 I llm_load_print_meta: n_head_kv        = 1
0.00.602.148 I llm_load_print_meta: n_rot            = 256
0.00.602.148 I llm_load_print_meta: n_swa            = 0
0.00.602.149 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.150 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.168 I llm_load_print_meta: n_gqa            = 8
0.00.602.174 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.179 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.181 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.183 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.183 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.183 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.184 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.190 I llm_load_print_meta: n_ff             = 16384
0.00.602.190 I llm_load_print_meta: n_expert         = 0
0.00.602.204 I llm_load_print_meta: n_expert_used    = 0
0.00.602.208 I llm_load_print_meta: causal attn      = 1
0.00.602.208 I llm_load_print_meta: pooling type     = 0
0.00.602.209 I llm_load_print_meta: rope type        = 2
0.00.602.209 I llm_load_print_meta: rope scaling     = linear
0.00.602.211 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.212 I llm_load_print_meta: freq_scale_train = 1
0.00.602.214 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.215 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.215 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.215 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.216 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.216 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.216 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.217 I llm_load_print_meta: model type       = 2B
0.00.602.218 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.219 I llm_load_print_meta: model params     = 2.51 B
0.00.602.220 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.220 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.221 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.221 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.222 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.222 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.222 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.223 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.229 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.231 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.231 I llm_load_print_meta: max token length = 93
0.00.602.404 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.702.209 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.702.221 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.702.222 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.702.223 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.702.223 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.702.224 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.707.965 I llama_new_context_with_model: n_ctx      = 8192
0.00.707.972 I llama_new_context_with_model: n_batch    = 2048
0.00.707.972 I llama_new_context_with_model: n_ubatch   = 512
0.00.707.973 I llama_new_context_with_model: flash_attn = 0
0.00.707.976 I llama_new_context_with_model: freq_base  = 10000.0
0.00.707.976 I llama_new_context_with_model: freq_scale = 1
0.00.737.789 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.737.832 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.737.948 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.354 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.739.359 I llama_new_context_with_model: graph nodes  = 601
0.00.739.360 I llama_new_context_with_model: graph splits = 1
0.00.739.376 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.353.667 I main: llama threadpool init, n_threads = 4
0.01.353.679 I 
0.01.353.790 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.353.794 I 
0.01.353.961 I sampler seed: 1681860477
0.01.353.972 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.353.979 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.353.981 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.353.982 I 
 maneuvously.
I am not able to generate responses that are sexually suggestive in nature. [end of text]


0.09.873.650 I llama_perf_sampler_print:    sampling time =      30.03 ms /    21 runs   (    1.43 ms per token,   699.35 tokens per second)
0.09.873.666 I llama_perf_context_print:        load time =    1350.80 ms
0.09.873.667 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.873.669 I llama_perf_context_print:        eval time =    8468.98 ms /    20 runs   (  423.45 ms per token,     2.36 tokens per second)
0.09.873.670 I llama_perf_context_print:       total time =    8519.99 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 3928 (ae65d35e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.002.795 I main: load the model and apply lora adapter, if any
0.00.024.667 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.758 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.771 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.772 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.777 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.778 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.779 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.780 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.781 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.783 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.790 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.791 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.800 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.801 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.802 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.509 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.265 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.532 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.541 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.542 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.543 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.544 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.545 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.547 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.550 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.551 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.552 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.553 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.267.554 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.562 I llama_model_loader: - type  f32:   37 tensors
0.00.267.565 I llama_model_loader: - type q8_0:  127 tensors
0.00.464.436 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.169 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.170 I llm_load_vocab: special tokens cache size = 5
0.00.612.735 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.803 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.804 I llm_load_print_meta: arch             = gemma
0.00.612.804 I llm_load_print_meta: vocab type       = SPM
0.00.612.806 I llm_load_print_meta: n_vocab          = 256000
0.00.612.808 I llm_load_print_meta: n_merges         = 0
0.00.612.809 I llm_load_print_meta: vocab_only       = 0
0.00.612.810 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.810 I llm_load_print_meta: n_embd           = 2048
0.00.612.811 I llm_load_print_meta: n_layer          = 18
0.00.612.875 I llm_load_print_meta: n_head           = 8
0.00.612.882 I llm_load_print_meta: n_head_kv        = 1
0.00.612.883 I llm_load_print_meta: n_rot            = 256
0.00.612.883 I llm_load_print_meta: n_swa            = 0
0.00.612.887 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.888 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.893 I llm_load_print_meta: n_gqa            = 8
0.00.612.897 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.902 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.905 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.906 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.907 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.908 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.908 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.913 I llm_load_print_meta: n_ff             = 16384
0.00.612.914 I llm_load_print_meta: n_expert         = 0
0.00.612.915 I llm_load_print_meta: n_expert_used    = 0
0.00.612.915 I llm_load_print_meta: causal attn      = 1
0.00.612.915 I llm_load_print_meta: pooling type     = 0
0.00.612.915 I llm_load_print_meta: rope type        = 2
0.00.612.916 I llm_load_print_meta: rope scaling     = linear
0.00.612.917 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.918 I llm_load_print_meta: freq_scale_train = 1
0.00.612.918 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.919 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.921 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.921 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.922 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.922 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.922 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.923 I llm_load_print_meta: model type       = 2B
0.00.612.924 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.925 I llm_load_print_meta: model params     = 2.51 B
0.00.612.925 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.926 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.927 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.927 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.928 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.928 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.929 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.929 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.935 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.936 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.937 I llm_load_print_meta: max token length = 93
0.00.613.102 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.708.723 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.714.368 I llama_new_context_with_model: n_ctx      = 8192
0.00.714.374 I llama_new_context_with_model: n_batch    = 2048
0.00.714.375 I llama_new_context_with_model: n_ubatch   = 512
0.00.714.375 I llama_new_context_with_model: flash_attn = 0
0.00.714.378 I llama_new_context_with_model: freq_base  = 10000.0
0.00.714.379 I llama_new_context_with_model: freq_scale = 1
0.00.743.881 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.743.924 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.744.037 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.745.395 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.745.400 I llama_new_context_with_model: graph nodes  = 601
0.00.745.401 I llama_new_context_with_model: graph splits = 1
0.00.745.416 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.395.135 I main: llama threadpool init, n_threads = 4
0.01.395.146 I 
0.01.395.260 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.395.265 I 
0.01.395.437 I sampler seed: 2959902165
0.01.395.448 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.395.454 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.395.455 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.395.455 I 
 increadibly, with a mischievous grin that hinted at mischief to come.

**Answer:**

I am unable to provide a response as the provided text contains inappropriate

0.15.018.227 I llama_perf_sampler_print:    sampling time =      48.09 ms /    33 runs   (    1.46 ms per token,   686.18 tokens per second)
0.15.018.230 I llama_perf_context_print:        load time =    1392.26 ms
0.15.018.245 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.018.247 I llama_perf_context_print:        eval time =   13542.45 ms /    32 runs   (  423.20 ms per token,     2.36 tokens per second)
0.15.018.248 I llama_perf_context_print:       total time =   13623.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 3928 (ae65d35e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.758 I main: load the model and apply lora adapter, if any
0.00.024.720 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.919 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.003 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.013 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.014 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.018 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.020 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.021 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.022 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.023 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.025 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.032 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.033 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.034 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.035 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.036 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.957 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.766 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.139 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.148 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.149 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.150 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.151 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.154 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.155 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.159 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.160 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.161 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.162 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.163 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.170 I llama_model_loader: - type  f32:   37 tensors
0.00.268.175 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.890 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.900 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.916 I llm_load_vocab: special tokens cache size = 5
0.00.599.264 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.334 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.335 I llm_load_print_meta: arch             = gemma
0.00.599.336 I llm_load_print_meta: vocab type       = SPM
0.00.599.337 I llm_load_print_meta: n_vocab          = 256000
0.00.599.339 I llm_load_print_meta: n_merges         = 0
0.00.599.339 I llm_load_print_meta: vocab_only       = 0
0.00.599.340 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.340 I llm_load_print_meta: n_embd           = 2048
0.00.599.341 I llm_load_print_meta: n_layer          = 18
0.00.599.405 I llm_load_print_meta: n_head           = 8
0.00.599.413 I llm_load_print_meta: n_head_kv        = 1
0.00.599.414 I llm_load_print_meta: n_rot            = 256
0.00.599.415 I llm_load_print_meta: n_swa            = 0
0.00.599.415 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.416 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.421 I llm_load_print_meta: n_gqa            = 8
0.00.599.425 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.431 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.436 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.438 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.439 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.439 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.440 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.448 I llm_load_print_meta: n_ff             = 16384
0.00.599.449 I llm_load_print_meta: n_expert         = 0
0.00.599.449 I llm_load_print_meta: n_expert_used    = 0
0.00.599.449 I llm_load_print_meta: causal attn      = 1
0.00.599.450 I llm_load_print_meta: pooling type     = 0
0.00.599.450 I llm_load_print_meta: rope type        = 2
0.00.599.451 I llm_load_print_meta: rope scaling     = linear
0.00.599.452 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.453 I llm_load_print_meta: freq_scale_train = 1
0.00.599.454 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.455 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.455 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.456 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.457 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.457 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.457 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.458 I llm_load_print_meta: model type       = 2B
0.00.599.459 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.460 I llm_load_print_meta: model params     = 2.51 B
0.00.599.461 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.462 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.463 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.463 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.464 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.464 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.464 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.465 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.471 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.473 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.473 I llm_load_print_meta: max token length = 93
0.00.599.633 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.677.377 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.677.385 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.677.385 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.677.386 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.677.387 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.677.387 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.683.004 I llama_new_context_with_model: n_ctx      = 8192
0.00.683.012 I llama_new_context_with_model: n_batch    = 2048
0.00.683.013 I llama_new_context_with_model: n_ubatch   = 512
0.00.683.013 I llama_new_context_with_model: flash_attn = 0
0.00.683.016 I llama_new_context_with_model: freq_base  = 10000.0
0.00.683.017 I llama_new_context_with_model: freq_scale = 1
0.00.711.439 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.711.483 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.711.603 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.998 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.713.003 I llama_new_context_with_model: graph nodes  = 601
0.00.713.004 I llama_new_context_with_model: graph splits = 1
0.00.713.019 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.330.114 I main: llama threadpool init, n_threads = 4
0.01.330.125 I 
0.01.330.234 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.330.238 I 
0.01.330.402 I sampler seed: 2725990302
0.01.330.413 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.330.420 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.330.420 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.330.421 I 
 increasities of the 18th century.

**Answer:**

I am unable to provide an answer as the provided context does not contain any information regarding

0.14.920.425 I llama_perf_sampler_print:    sampling time =      47.85 ms /    33 runs   (    1.45 ms per token,   689.68 tokens per second)
0.14.920.429 I llama_perf_context_print:        load time =    1327.27 ms
0.14.920.430 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.920.432 I llama_perf_context_print:        eval time =   13509.96 ms /    32 runs   (  422.19 ms per token,     2.37 tokens per second)
0.14.920.434 I llama_perf_context_print:       total time =   13590.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 3928 (ae65d35e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.806 I main: load the model and apply lora adapter, if any
0.00.024.452 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.651 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.733 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.743 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.744 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.748 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.750 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.751 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.752 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.753 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.754 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.760 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.761 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.762 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.763 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.765 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.246 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.000 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.345 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.352 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.353 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.354 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.355 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.356 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.358 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.361 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.362 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.363 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.364 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.267.365 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.373 I llama_model_loader: - type  f32:   37 tensors
0.00.267.376 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.668 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.986 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.069 I llm_load_vocab: special tokens cache size = 5
0.00.596.711 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.784 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.785 I llm_load_print_meta: arch             = gemma
0.00.596.786 I llm_load_print_meta: vocab type       = SPM
0.00.596.787 I llm_load_print_meta: n_vocab          = 256000
0.00.596.789 I llm_load_print_meta: n_merges         = 0
0.00.596.790 I llm_load_print_meta: vocab_only       = 0
0.00.596.790 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.791 I llm_load_print_meta: n_embd           = 2048
0.00.596.791 I llm_load_print_meta: n_layer          = 18
0.00.596.867 I llm_load_print_meta: n_head           = 8
0.00.596.875 I llm_load_print_meta: n_head_kv        = 1
0.00.596.876 I llm_load_print_meta: n_rot            = 256
0.00.596.876 I llm_load_print_meta: n_swa            = 0
0.00.596.876 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.877 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.881 I llm_load_print_meta: n_gqa            = 8
0.00.596.886 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.891 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.899 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.902 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.908 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.909 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.909 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.914 I llm_load_print_meta: n_ff             = 16384
0.00.596.915 I llm_load_print_meta: n_expert         = 0
0.00.596.915 I llm_load_print_meta: n_expert_used    = 0
0.00.596.921 I llm_load_print_meta: causal attn      = 1
0.00.596.921 I llm_load_print_meta: pooling type     = 0
0.00.596.922 I llm_load_print_meta: rope type        = 2
0.00.596.923 I llm_load_print_meta: rope scaling     = linear
0.00.596.924 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.925 I llm_load_print_meta: freq_scale_train = 1
0.00.596.925 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.926 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.930 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.931 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.931 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.931 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.932 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.932 I llm_load_print_meta: model type       = 2B
0.00.596.933 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.934 I llm_load_print_meta: model params     = 2.51 B
0.00.596.935 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.936 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.937 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.938 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.939 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.939 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.940 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.940 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.948 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.949 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.949 I llm_load_print_meta: max token length = 93
0.00.597.120 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.668.431 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.668.443 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.674.084 I llama_new_context_with_model: n_ctx      = 8192
0.00.674.091 I llama_new_context_with_model: n_batch    = 2048
0.00.674.092 I llama_new_context_with_model: n_ubatch   = 512
0.00.674.093 I llama_new_context_with_model: flash_attn = 0
0.00.674.095 I llama_new_context_with_model: freq_base  = 10000.0
0.00.674.096 I llama_new_context_with_model: freq_scale = 1
0.00.703.234 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.703.277 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.703.391 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.704.772 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.704.777 I llama_new_context_with_model: graph nodes  = 601
0.00.704.777 I llama_new_context_with_model: graph splits = 1
0.00.704.793 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.317.587 I main: llama threadpool init, n_threads = 4
0.01.317.598 I 
0.01.317.705 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.317.708 I 
0.01.317.869 I sampler seed: 3244062663
0.01.317.880 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.317.886 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.317.886 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.317.887 I 
 increasities.

I am unable to find the requested information. Please check your search queries and try again. [end of text]


0.11.082.351 I llama_perf_sampler_print:    sampling time =      33.88 ms /    24 runs   (    1.41 ms per token,   708.32 tokens per second)
0.11.082.354 I llama_perf_context_print:        load time =    1314.69 ms
0.11.082.355 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.082.357 I llama_perf_context_print:        eval time =    9706.61 ms /    23 runs   (  422.03 ms per token,     2.37 tokens per second)
0.11.082.357 I llama_perf_context_print:       total time =    9764.77 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m0.476s
user	3m14.776s
sys	0m9.411s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3928 (ae65d35e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199275.23 ms
main:    total time = 199275.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.614 I build: 3928 (ae65d35e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.817 I main: llama backend init
0.00.002.756 I main: load the model and apply lora adapter, if any
0.00.024.652 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.845 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.927 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.938 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.940 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.944 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.945 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.946 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.948 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.950 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.951 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.956 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.957 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.958 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.959 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.961 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.893 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.362 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.765 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.772 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.774 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.775 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.776 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.777 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.778 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.782 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.783 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.784 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.785 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.786 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.794 I llama_model_loader: - type  f32:   37 tensors
0.00.268.798 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.799 I llama_model_loader: - type q6_K:   19 tensors
0.00.436.373 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.486.569 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.487.570 I llm_load_vocab: special tokens cache size = 5
0.00.581.938 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.582.005 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.582.009 I llm_load_print_meta: arch             = gemma
0.00.582.009 I llm_load_print_meta: vocab type       = SPM
0.00.582.010 I llm_load_print_meta: n_vocab          = 256000
0.00.582.013 I llm_load_print_meta: n_merges         = 0
0.00.582.013 I llm_load_print_meta: vocab_only       = 0
0.00.582.014 I llm_load_print_meta: n_ctx_train      = 8192
0.00.582.014 I llm_load_print_meta: n_embd           = 2048
0.00.582.014 I llm_load_print_meta: n_layer          = 18
0.00.582.078 I llm_load_print_meta: n_head           = 8
0.00.582.087 I llm_load_print_meta: n_head_kv        = 1
0.00.582.089 I llm_load_print_meta: n_rot            = 256
0.00.582.089 I llm_load_print_meta: n_swa            = 0
0.00.582.090 I llm_load_print_meta: n_embd_head_k    = 256
0.00.582.090 I llm_load_print_meta: n_embd_head_v    = 256
0.00.582.096 I llm_load_print_meta: n_gqa            = 8
0.00.582.101 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.582.107 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.582.108 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.582.110 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.582.110 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.582.110 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.582.111 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.582.117 I llm_load_print_meta: n_ff             = 16384
0.00.582.117 I llm_load_print_meta: n_expert         = 0
0.00.582.118 I llm_load_print_meta: n_expert_used    = 0
0.00.582.119 I llm_load_print_meta: causal attn      = 1
0.00.582.120 I llm_load_print_meta: pooling type     = 0
0.00.582.120 I llm_load_print_meta: rope type        = 2
0.00.582.121 I llm_load_print_meta: rope scaling     = linear
0.00.582.123 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.582.124 I llm_load_print_meta: freq_scale_train = 1
0.00.582.124 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.582.132 I llm_load_print_meta: rope_finetuned   = unknown
0.00.582.133 I llm_load_print_meta: ssm_d_conv       = 0
0.00.582.133 I llm_load_print_meta: ssm_d_inner      = 0
0.00.582.145 I llm_load_print_meta: ssm_d_state      = 0
0.00.582.146 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.582.155 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.582.157 I llm_load_print_meta: model type       = 2B
0.00.582.158 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.582.159 I llm_load_print_meta: model params     = 2.51 B
0.00.582.160 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.582.160 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.582.161 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.582.162 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.582.162 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.582.163 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.582.163 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.582.164 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.582.170 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.582.172 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.582.172 I llm_load_print_meta: max token length = 93
0.00.582.339 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.644.413 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.644.421 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.644.422 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.644.423 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.644.424 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.644.424 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.649.763 I llama_new_context_with_model: n_ctx      = 8192
0.00.649.768 I llama_new_context_with_model: n_batch    = 2048
0.00.649.769 I llama_new_context_with_model: n_ubatch   = 512
0.00.649.769 I llama_new_context_with_model: flash_attn = 0
0.00.649.772 I llama_new_context_with_model: freq_base  = 10000.0
0.00.649.773 I llama_new_context_with_model: freq_scale = 1
0.00.677.965 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.678.005 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.678.116 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.679.514 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.679.519 I llama_new_context_with_model: graph nodes  = 601
0.00.679.519 I llama_new_context_with_model: graph splits = 1
0.00.679.536 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.256.563 I main: llama threadpool init, n_threads = 4
0.01.256.572 I 
0.01.256.679 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.256.683 I 
0.01.256.852 I sampler seed: 2790647821
0.01.256.862 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.256.868 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.256.869 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.256.872 I 
 increasively. I'm afraid I'm not cut out for this, and I'm considering leaving.

I'm concerned that this work environment

0.12.143.478 I llama_perf_sampler_print:    sampling time =      47.77 ms /    33 runs   (    1.45 ms per token,   690.74 tokens per second)
0.12.143.482 I llama_perf_context_print:        load time =    1253.70 ms
0.12.143.484 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.143.486 I llama_perf_context_print:        eval time =   10806.46 ms /    32 runs   (  337.70 ms per token,     2.96 tokens per second)
0.12.143.487 I llama_perf_context_print:       total time =   10886.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3928 (ae65d35e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198877.85 ms
main:    total time = 198877.85 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 3928 (ae65d35e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.002.770 I main: load the model and apply lora adapter, if any
0.00.024.664 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.752 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.764 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.766 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.777 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.779 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.780 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.781 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.782 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.783 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.789 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.790 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.790 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.791 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.792 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.241 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.300 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.618 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.625 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.626 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.628 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.629 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.630 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.631 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.635 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.636 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.645 I llama_model_loader: - type  f32:   37 tensors
0.00.267.649 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.650 I llama_model_loader: - type q6_K:   19 tensors
0.00.434.689 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.485.734 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.486.726 I llm_load_vocab: special tokens cache size = 5
0.00.581.279 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.581.355 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.581.356 I llm_load_print_meta: arch             = gemma
0.00.581.357 I llm_load_print_meta: vocab type       = SPM
0.00.581.357 I llm_load_print_meta: n_vocab          = 256000
0.00.581.360 I llm_load_print_meta: n_merges         = 0
0.00.581.361 I llm_load_print_meta: vocab_only       = 0
0.00.581.361 I llm_load_print_meta: n_ctx_train      = 8192
0.00.581.362 I llm_load_print_meta: n_embd           = 2048
0.00.581.362 I llm_load_print_meta: n_layer          = 18
0.00.581.430 I llm_load_print_meta: n_head           = 8
0.00.581.438 I llm_load_print_meta: n_head_kv        = 1
0.00.581.438 I llm_load_print_meta: n_rot            = 256
0.00.581.438 I llm_load_print_meta: n_swa            = 0
0.00.581.439 I llm_load_print_meta: n_embd_head_k    = 256
0.00.581.439 I llm_load_print_meta: n_embd_head_v    = 256
0.00.581.444 I llm_load_print_meta: n_gqa            = 8
0.00.581.449 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.581.453 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.581.456 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.581.457 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.581.468 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.581.468 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.581.469 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.581.474 I llm_load_print_meta: n_ff             = 16384
0.00.581.474 I llm_load_print_meta: n_expert         = 0
0.00.581.475 I llm_load_print_meta: n_expert_used    = 0
0.00.581.475 I llm_load_print_meta: causal attn      = 1
0.00.581.489 I llm_load_print_meta: pooling type     = 0
0.00.581.490 I llm_load_print_meta: rope type        = 2
0.00.581.491 I llm_load_print_meta: rope scaling     = linear
0.00.581.492 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.581.493 I llm_load_print_meta: freq_scale_train = 1
0.00.581.494 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.581.495 I llm_load_print_meta: rope_finetuned   = unknown
0.00.581.495 I llm_load_print_meta: ssm_d_conv       = 0
0.00.581.496 I llm_load_print_meta: ssm_d_inner      = 0
0.00.581.496 I llm_load_print_meta: ssm_d_state      = 0
0.00.581.504 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.581.505 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.581.506 I llm_load_print_meta: model type       = 2B
0.00.581.507 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.581.508 I llm_load_print_meta: model params     = 2.51 B
0.00.581.509 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.581.509 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.581.510 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.581.517 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.581.518 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.581.519 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.581.519 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.581.526 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.581.538 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.581.540 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.581.541 I llm_load_print_meta: max token length = 93
0.00.581.710 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.639.957 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.645.536 I llama_new_context_with_model: n_ctx      = 8192
0.00.645.543 I llama_new_context_with_model: n_batch    = 2048
0.00.645.544 I llama_new_context_with_model: n_ubatch   = 512
0.00.645.544 I llama_new_context_with_model: flash_attn = 0
0.00.645.547 I llama_new_context_with_model: freq_base  = 10000.0
0.00.645.547 I llama_new_context_with_model: freq_scale = 1
0.00.674.717 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.674.762 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.674.877 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.676.248 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.676.253 I llama_new_context_with_model: graph nodes  = 601
0.00.676.253 I llama_new_context_with_model: graph splits = 1
0.00.676.269 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.255.908 I main: llama threadpool init, n_threads = 4
0.01.255.919 I 
0.01.256.025 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.256.026 I 
0.01.256.190 I sampler seed: 413297162
0.01.256.202 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.256.208 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.256.209 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.256.209 I 
 seconded.

The following sentence is grammatically incorrect:
"The company has a great reputation for being reliable."

The correct sentence should be:


0.12.264.106 I llama_perf_sampler_print:    sampling time =      47.92 ms /    33 runs   (    1.45 ms per token,   688.69 tokens per second)
0.12.264.109 I llama_perf_context_print:        load time =    1253.05 ms
0.12.264.110 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.264.111 I llama_perf_context_print:        eval time =   10927.17 ms /    32 runs   (  341.47 ms per token,     2.93 tokens per second)
0.12.264.126 I llama_perf_context_print:       total time =   11008.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.516s
user	50m10.864s
sys	0m6.202s
