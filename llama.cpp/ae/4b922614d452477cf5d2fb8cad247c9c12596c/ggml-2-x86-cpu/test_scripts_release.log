+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.180 I build: 4299 (ae4b9226) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.379 I main: llama backend init
0.00.000.386 I main: load the model and apply lora adapter, if any
0.00.020.990 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.001 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.009 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.014 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.015 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.019 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.020 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.021 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.022 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.023 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.023 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.028 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.028 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.028 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.029 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.030 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.567 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.917 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.825 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.832 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.833 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.833 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.834 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.835 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.836 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.838 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.839 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.840 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.841 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.842 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.846 I llama_model_loader: - type  f32:   37 tensors
0.00.130.847 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.395 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.810 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.422 I llm_load_vocab: special tokens cache size = 5
0.00.274.252 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.270 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.271 I llm_load_print_meta: arch             = gemma
0.00.274.271 I llm_load_print_meta: vocab type       = SPM
0.00.274.272 I llm_load_print_meta: n_vocab          = 256000
0.00.274.272 I llm_load_print_meta: n_merges         = 0
0.00.274.273 I llm_load_print_meta: vocab_only       = 0
0.00.274.273 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.273 I llm_load_print_meta: n_embd           = 2048
0.00.274.274 I llm_load_print_meta: n_layer          = 18
0.00.274.285 I llm_load_print_meta: n_head           = 8
0.00.274.285 I llm_load_print_meta: n_head_kv        = 1
0.00.274.286 I llm_load_print_meta: n_rot            = 256
0.00.274.286 I llm_load_print_meta: n_swa            = 0
0.00.274.286 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.287 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.287 I llm_load_print_meta: n_gqa            = 8
0.00.274.288 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.289 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.290 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.292 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.292 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.292 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.293 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.293 I llm_load_print_meta: n_ff             = 16384
0.00.274.294 I llm_load_print_meta: n_expert         = 0
0.00.274.294 I llm_load_print_meta: n_expert_used    = 0
0.00.274.294 I llm_load_print_meta: causal attn      = 1
0.00.274.294 I llm_load_print_meta: pooling type     = 0
0.00.274.295 I llm_load_print_meta: rope type        = 2
0.00.274.295 I llm_load_print_meta: rope scaling     = linear
0.00.274.297 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.298 I llm_load_print_meta: freq_scale_train = 1
0.00.274.298 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.298 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.298 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.299 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.299 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.299 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.299 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.300 I llm_load_print_meta: model type       = 2B
0.00.274.300 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.301 I llm_load_print_meta: model params     = 2.51 B
0.00.274.302 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.302 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.303 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.303 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.303 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.303 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.304 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.304 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.304 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.305 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.305 I llm_load_print_meta: max token length = 93
0.00.376.991 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.376.999 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.376.999 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.377.000 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.377.001 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.377.001 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.382.192 I llama_new_context_with_model: n_seq_max     = 1
0.00.382.198 I llama_new_context_with_model: n_ctx         = 4096
0.00.382.199 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.382.199 I llama_new_context_with_model: n_batch       = 2048
0.00.382.200 I llama_new_context_with_model: n_ubatch      = 512
0.00.382.200 I llama_new_context_with_model: flash_attn    = 0
0.00.382.203 I llama_new_context_with_model: freq_base     = 10000.0
0.00.382.204 I llama_new_context_with_model: freq_scale    = 1
0.00.382.205 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.396.670 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.682 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.772 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.985 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.397.992 I llama_new_context_with_model: graph nodes  = 601
0.00.397.992 I llama_new_context_with_model: graph splits = 1
0.00.397.994 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.008 I main: llama threadpool init, n_threads = 4
0.00.484.023 I 
0.00.484.097 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.484.100 I 
0.00.484.144 I sampler seed: 1626715750
0.00.484.154 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.159 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.159 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.160 I 
 increadibly, and with an exaggerated flourish, exclaimed, "I have conquered the labyrinth!"

The other wizards listened intently, their expressions a mix of bewilderment

0.02.769.231 I llama_perf_sampler_print:    sampling time =       5.48 ms /    33 runs   (    0.17 ms per token,  6024.10 tokens per second)
0.02.769.233 I llama_perf_context_print:        load time =     483.61 ms
0.02.769.235 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.769.236 I llama_perf_context_print:        eval time =    2265.55 ms /    32 runs   (   70.80 ms per token,    14.12 tokens per second)
0.02.769.237 I llama_perf_context_print:       total time =    2285.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.573 I build: 4299 (ae4b9226) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.781 I main: llama backend init
0.00.000.790 I main: load the model and apply lora adapter, if any
0.00.021.318 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.333 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.345 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.346 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.352 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.356 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.356 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.357 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.358 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.358 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.363 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.363 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.364 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.364 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.365 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.980 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.678 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.520 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.527 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.528 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.529 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.529 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.530 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.531 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.534 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.535 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.536 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.537 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.538 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.541 I llama_model_loader: - type  f32:   37 tensors
0.00.132.542 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.880 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.582 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.174 I llm_load_vocab: special tokens cache size = 5
0.00.270.889 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.904 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.905 I llm_load_print_meta: arch             = gemma
0.00.270.906 I llm_load_print_meta: vocab type       = SPM
0.00.270.906 I llm_load_print_meta: n_vocab          = 256000
0.00.270.907 I llm_load_print_meta: n_merges         = 0
0.00.270.907 I llm_load_print_meta: vocab_only       = 0
0.00.270.908 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.908 I llm_load_print_meta: n_embd           = 2048
0.00.270.908 I llm_load_print_meta: n_layer          = 18
0.00.270.919 I llm_load_print_meta: n_head           = 8
0.00.270.920 I llm_load_print_meta: n_head_kv        = 1
0.00.270.920 I llm_load_print_meta: n_rot            = 256
0.00.270.920 I llm_load_print_meta: n_swa            = 0
0.00.270.921 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.921 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.922 I llm_load_print_meta: n_gqa            = 8
0.00.270.923 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.924 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.925 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.926 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.926 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.927 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.927 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.928 I llm_load_print_meta: n_ff             = 16384
0.00.270.928 I llm_load_print_meta: n_expert         = 0
0.00.270.928 I llm_load_print_meta: n_expert_used    = 0
0.00.270.929 I llm_load_print_meta: causal attn      = 1
0.00.270.929 I llm_load_print_meta: pooling type     = 0
0.00.270.930 I llm_load_print_meta: rope type        = 2
0.00.270.930 I llm_load_print_meta: rope scaling     = linear
0.00.270.932 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.933 I llm_load_print_meta: freq_scale_train = 1
0.00.270.933 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.933 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.934 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.935 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.935 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.935 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.936 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.936 I llm_load_print_meta: model type       = 2B
0.00.270.937 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.938 I llm_load_print_meta: model params     = 2.51 B
0.00.270.938 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.939 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.940 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.940 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.941 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.941 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.941 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.942 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.942 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.943 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.943 I llm_load_print_meta: max token length = 93
0.00.364.877 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.370.113 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.120 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.120 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.120 I llama_new_context_with_model: n_batch       = 2048
0.00.370.121 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.121 I llama_new_context_with_model: flash_attn    = 0
0.00.370.124 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.125 I llama_new_context_with_model: freq_scale    = 1
0.00.370.125 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.498 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.514 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.609 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.909 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.915 I llama_new_context_with_model: graph nodes  = 601
0.00.386.916 I llama_new_context_with_model: graph splits = 1
0.00.386.917 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.814 I main: llama threadpool init, n_threads = 4
0.00.468.831 I 
0.00.468.913 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.468.917 I 
0.00.468.974 I sampler seed: 484353533
0.00.468.985 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.988 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.990 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.992 I 
 increasements?

I cannot find the requested information. Please check your search parameters and try again. [end of text]


0.01.909.605 I llama_perf_sampler_print:    sampling time =       3.68 ms /    22 runs   (    0.17 ms per token,  5981.51 tokens per second)
0.01.909.608 I llama_perf_context_print:        load time =     468.00 ms
0.01.909.609 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.909.610 I llama_perf_context_print:        eval time =    1427.44 ms /    21 runs   (   67.97 ms per token,    14.71 tokens per second)
0.01.909.611 I llama_perf_context_print:       total time =    1440.80 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.530 I build: 4299 (ae4b9226) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.000.734 I main: load the model and apply lora adapter, if any
0.00.021.091 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.102 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.109 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.119 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.120 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.124 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.125 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.125 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.126 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.127 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.127 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.131 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.132 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.132 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.133 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.133 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.403 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.261 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.139 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.146 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.147 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.148 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.148 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.149 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.150 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.152 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.153 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.153 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.154 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.155 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.158 I llama_model_loader: - type  f32:   37 tensors
0.00.132.159 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.368 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.944 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.535 I llm_load_vocab: special tokens cache size = 5
0.00.267.406 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.428 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.428 I llm_load_print_meta: arch             = gemma
0.00.267.429 I llm_load_print_meta: vocab type       = SPM
0.00.267.429 I llm_load_print_meta: n_vocab          = 256000
0.00.267.430 I llm_load_print_meta: n_merges         = 0
0.00.267.430 I llm_load_print_meta: vocab_only       = 0
0.00.267.431 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.431 I llm_load_print_meta: n_embd           = 2048
0.00.267.431 I llm_load_print_meta: n_layer          = 18
0.00.267.443 I llm_load_print_meta: n_head           = 8
0.00.267.444 I llm_load_print_meta: n_head_kv        = 1
0.00.267.445 I llm_load_print_meta: n_rot            = 256
0.00.267.445 I llm_load_print_meta: n_swa            = 0
0.00.267.446 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.446 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.447 I llm_load_print_meta: n_gqa            = 8
0.00.267.449 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.450 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.451 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.452 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.453 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.453 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.453 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.454 I llm_load_print_meta: n_ff             = 16384
0.00.267.454 I llm_load_print_meta: n_expert         = 0
0.00.267.455 I llm_load_print_meta: n_expert_used    = 0
0.00.267.455 I llm_load_print_meta: causal attn      = 1
0.00.267.455 I llm_load_print_meta: pooling type     = 0
0.00.267.455 I llm_load_print_meta: rope type        = 2
0.00.267.456 I llm_load_print_meta: rope scaling     = linear
0.00.267.457 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.458 I llm_load_print_meta: freq_scale_train = 1
0.00.267.458 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.459 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.459 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.459 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.459 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.460 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.460 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.461 I llm_load_print_meta: model type       = 2B
0.00.267.461 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.462 I llm_load_print_meta: model params     = 2.51 B
0.00.267.463 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.463 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.464 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.464 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.465 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.465 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.465 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.465 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.466 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.466 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.466 I llm_load_print_meta: max token length = 93
0.00.344.564 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.344.570 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.571 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.344.572 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.344.572 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.573 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.349.599 I llama_new_context_with_model: n_seq_max     = 1
0.00.349.605 I llama_new_context_with_model: n_ctx         = 4096
0.00.349.606 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.349.606 I llama_new_context_with_model: n_batch       = 2048
0.00.349.606 I llama_new_context_with_model: n_ubatch      = 512
0.00.349.607 I llama_new_context_with_model: flash_attn    = 0
0.00.349.609 I llama_new_context_with_model: freq_base     = 10000.0
0.00.349.610 I llama_new_context_with_model: freq_scale    = 1
0.00.349.611 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.738 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.752 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.843 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.159 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.365.165 I llama_new_context_with_model: graph nodes  = 601
0.00.365.166 I llama_new_context_with_model: graph splits = 1
0.00.365.168 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.324 I main: llama threadpool init, n_threads = 4
0.00.462.343 I 
0.00.462.423 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.462.427 I 
0.00.462.475 I sampler seed: 1604933440
0.00.462.488 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.492 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.493 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.496 I 
 increasels on the steps. 
The ballerina gracefully leaped onto the stage, gracefully pirouetted, and gracefully leaped again, leaving the audience breathless.



0.02.778.731 I llama_perf_sampler_print:    sampling time =       5.77 ms /    33 runs   (    0.17 ms per token,  5723.20 tokens per second)
0.02.778.733 I llama_perf_context_print:        load time =     461.57 ms
0.02.778.734 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.778.736 I llama_perf_context_print:        eval time =    2295.81 ms /    32 runs   (   71.74 ms per token,    13.94 tokens per second)
0.02.778.736 I llama_perf_context_print:       total time =    2316.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.548 I build: 4299 (ae4b9226) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.021.172 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.182 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.191 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.200 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.204 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.208 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.209 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.209 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.210 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.211 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.213 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.219 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.220 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.221 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.221 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.222 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.786 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.218 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.132 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.138 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.139 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.139 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.140 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.141 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.142 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.146 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.146 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.147 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.147 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.148 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.152 I llama_model_loader: - type  f32:   37 tensors
0.00.131.152 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.706 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.875 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.650 I llm_load_vocab: special tokens cache size = 5
0.00.277.680 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.701 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.702 I llm_load_print_meta: arch             = gemma
0.00.277.703 I llm_load_print_meta: vocab type       = SPM
0.00.277.705 I llm_load_print_meta: n_vocab          = 256000
0.00.277.705 I llm_load_print_meta: n_merges         = 0
0.00.277.705 I llm_load_print_meta: vocab_only       = 0
0.00.277.706 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.706 I llm_load_print_meta: n_embd           = 2048
0.00.277.706 I llm_load_print_meta: n_layer          = 18
0.00.277.719 I llm_load_print_meta: n_head           = 8
0.00.277.720 I llm_load_print_meta: n_head_kv        = 1
0.00.277.720 I llm_load_print_meta: n_rot            = 256
0.00.277.720 I llm_load_print_meta: n_swa            = 0
0.00.277.720 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.721 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.722 I llm_load_print_meta: n_gqa            = 8
0.00.277.723 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.724 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.725 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.726 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.726 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.727 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.727 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.728 I llm_load_print_meta: n_ff             = 16384
0.00.277.728 I llm_load_print_meta: n_expert         = 0
0.00.277.728 I llm_load_print_meta: n_expert_used    = 0
0.00.277.729 I llm_load_print_meta: causal attn      = 1
0.00.277.729 I llm_load_print_meta: pooling type     = 0
0.00.277.729 I llm_load_print_meta: rope type        = 2
0.00.277.730 I llm_load_print_meta: rope scaling     = linear
0.00.277.731 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.731 I llm_load_print_meta: freq_scale_train = 1
0.00.277.732 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.732 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.732 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.733 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.733 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.733 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.733 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.734 I llm_load_print_meta: model type       = 2B
0.00.277.734 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.735 I llm_load_print_meta: model params     = 2.51 B
0.00.277.736 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.736 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.737 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.737 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.738 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.738 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.738 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.738 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.739 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.739 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.740 I llm_load_print_meta: max token length = 93
0.00.348.794 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.348.803 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.354.028 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.034 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.048 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.049 I llama_new_context_with_model: n_batch       = 2048
0.00.354.049 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.050 I llama_new_context_with_model: flash_attn    = 0
0.00.354.053 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.055 I llama_new_context_with_model: freq_scale    = 1
0.00.354.056 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.680 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.694 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.795 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.153 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.160 I llama_new_context_with_model: graph nodes  = 601
0.00.371.160 I llama_new_context_with_model: graph splits = 1
0.00.371.162 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.093 I main: llama threadpool init, n_threads = 4
0.00.461.110 I 
0.00.461.198 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.461.203 I 
0.00.461.255 I sampler seed: 4061285747
0.00.461.267 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.272 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.273 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.273 I 
 increably. [end of text]


0.00.765.830 I llama_perf_sampler_print:    sampling time =       0.69 ms /     5 runs   (    0.14 ms per token,  7246.38 tokens per second)
0.00.765.832 I llama_perf_context_print:        load time =     460.31 ms
0.00.765.833 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.765.835 I llama_perf_context_print:        eval time =     301.40 ms /     4 runs   (   75.35 ms per token,    13.27 tokens per second)
0.00.765.835 I llama_perf_context_print:       total time =     304.75 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.756s
user	0m28.298s
sys	0m9.443s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4299 (ae4b9226)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40240.10 ms
main:    total time = 40240.10 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.173 I build: 4299 (ae4b9226) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.363 I main: llama backend init
0.00.000.369 I main: load the model and apply lora adapter, if any
0.00.020.728 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.740 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.749 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.754 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.755 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.760 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.760 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.762 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.763 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.764 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.764 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.769 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.770 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.770 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.771 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.772 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.573 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.186 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.054 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.060 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.062 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.062 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.063 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.065 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.066 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.069 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.070 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.071 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.072 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.073 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.077 I llama_model_loader: - type  f32:   37 tensors
0.00.131.078 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.079 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.697 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.986 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.681 I llm_load_vocab: special tokens cache size = 5
0.00.280.719 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.738 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.739 I llm_load_print_meta: arch             = gemma
0.00.280.739 I llm_load_print_meta: vocab type       = SPM
0.00.280.740 I llm_load_print_meta: n_vocab          = 256000
0.00.280.741 I llm_load_print_meta: n_merges         = 0
0.00.280.741 I llm_load_print_meta: vocab_only       = 0
0.00.280.742 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.742 I llm_load_print_meta: n_embd           = 2048
0.00.280.742 I llm_load_print_meta: n_layer          = 18
0.00.280.753 I llm_load_print_meta: n_head           = 8
0.00.280.754 I llm_load_print_meta: n_head_kv        = 1
0.00.280.754 I llm_load_print_meta: n_rot            = 256
0.00.280.755 I llm_load_print_meta: n_swa            = 0
0.00.280.755 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.755 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.756 I llm_load_print_meta: n_gqa            = 8
0.00.280.757 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.758 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.759 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.760 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.761 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.761 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.761 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.762 I llm_load_print_meta: n_ff             = 16384
0.00.280.762 I llm_load_print_meta: n_expert         = 0
0.00.280.763 I llm_load_print_meta: n_expert_used    = 0
0.00.280.763 I llm_load_print_meta: causal attn      = 1
0.00.280.763 I llm_load_print_meta: pooling type     = 0
0.00.280.763 I llm_load_print_meta: rope type        = 2
0.00.280.764 I llm_load_print_meta: rope scaling     = linear
0.00.280.765 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.766 I llm_load_print_meta: freq_scale_train = 1
0.00.280.766 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.766 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.767 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.767 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.767 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.768 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.768 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.769 I llm_load_print_meta: model type       = 2B
0.00.280.769 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.280.770 I llm_load_print_meta: model params     = 2.51 B
0.00.280.771 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.280.771 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.772 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.772 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.773 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.773 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.773 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.773 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.773 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.774 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.774 I llm_load_print_meta: max token length = 93
0.00.342.160 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.342.168 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.342.169 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.342.169 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.342.170 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.342.171 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.347.224 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.231 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.232 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.232 I llama_new_context_with_model: n_batch       = 2048
0.00.347.232 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.233 I llama_new_context_with_model: flash_attn    = 0
0.00.347.235 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.236 I llama_new_context_with_model: freq_scale    = 1
0.00.347.237 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.121 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.136 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.223 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.444 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.451 I llama_new_context_with_model: graph nodes  = 601
0.00.363.452 I llama_new_context_with_model: graph splits = 1
0.00.363.454 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.702 I main: llama threadpool init, n_threads = 4
0.00.440.721 I 
0.00.440.797 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.440.800 I 
0.00.440.843 I sampler seed: 502832824
0.00.440.853 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.440.857 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.440.857 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.440.858 I 
 increamically.

I am unable to provide a response that perpetuates potentially harmful or misleading information. [end of text]


0.01.502.991 I llama_perf_sampler_print:    sampling time =       3.69 ms /    22 runs   (    0.17 ms per token,  5958.83 tokens per second)
0.01.502.993 I llama_perf_context_print:        load time =     440.32 ms
0.01.502.994 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.502.995 I llama_perf_context_print:        eval time =    1049.36 ms /    21 runs   (   49.97 ms per token,    20.01 tokens per second)
0.01.502.996 I llama_perf_context_print:       total time =    1062.30 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4299 (ae4b9226)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40190.76 ms
main:    total time = 40190.76 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.178 I build: 4299 (ae4b9226) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.395 I main: llama backend init
0.00.000.400 I main: load the model and apply lora adapter, if any
0.00.021.775 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.793 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.800 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.801 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.807 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.807 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.808 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.809 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.809 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.810 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.814 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.815 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.815 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.816 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.816 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.445 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.552 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.381 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.387 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.388 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.389 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.390 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.391 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.392 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.396 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.396 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.400 I llama_model_loader: - type  f32:   37 tensors
0.00.131.401 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.402 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.603 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.943 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.565 I llm_load_vocab: special tokens cache size = 5
0.00.265.180 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.196 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.196 I llm_load_print_meta: arch             = gemma
0.00.265.197 I llm_load_print_meta: vocab type       = SPM
0.00.265.197 I llm_load_print_meta: n_vocab          = 256000
0.00.265.198 I llm_load_print_meta: n_merges         = 0
0.00.265.198 I llm_load_print_meta: vocab_only       = 0
0.00.265.198 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.199 I llm_load_print_meta: n_embd           = 2048
0.00.265.199 I llm_load_print_meta: n_layer          = 18
0.00.265.210 I llm_load_print_meta: n_head           = 8
0.00.265.211 I llm_load_print_meta: n_head_kv        = 1
0.00.265.211 I llm_load_print_meta: n_rot            = 256
0.00.265.211 I llm_load_print_meta: n_swa            = 0
0.00.265.211 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.212 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.212 I llm_load_print_meta: n_gqa            = 8
0.00.265.213 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.214 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.215 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.217 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.217 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.217 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.218 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.219 I llm_load_print_meta: n_ff             = 16384
0.00.265.219 I llm_load_print_meta: n_expert         = 0
0.00.265.219 I llm_load_print_meta: n_expert_used    = 0
0.00.265.219 I llm_load_print_meta: causal attn      = 1
0.00.265.220 I llm_load_print_meta: pooling type     = 0
0.00.265.220 I llm_load_print_meta: rope type        = 2
0.00.265.220 I llm_load_print_meta: rope scaling     = linear
0.00.265.222 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.222 I llm_load_print_meta: freq_scale_train = 1
0.00.265.223 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.223 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.223 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.224 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.224 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.224 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.224 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.225 I llm_load_print_meta: model type       = 2B
0.00.265.225 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.226 I llm_load_print_meta: model params     = 2.51 B
0.00.265.227 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.227 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.228 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.228 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.228 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.229 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.229 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.229 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.230 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.230 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.230 I llm_load_print_meta: max token length = 93
0.00.322.233 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.327.316 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.321 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.322 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.322 I llama_new_context_with_model: n_batch       = 2048
0.00.327.323 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.323 I llama_new_context_with_model: flash_attn    = 0
0.00.327.326 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.327 I llama_new_context_with_model: freq_scale    = 1
0.00.327.328 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.693 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.707 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.799 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.064 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.070 I llama_new_context_with_model: graph nodes  = 601
0.00.343.071 I llama_new_context_with_model: graph splits = 1
0.00.343.073 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.246 I main: llama threadpool init, n_threads = 4
0.00.418.263 I 
0.00.418.340 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.418.343 I 
0.00.418.392 I sampler seed: 3463314591
0.00.418.402 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.406 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.407 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.408 I 
 guaranteing, "I have a dream. I have a dream that I want to share with you. I have a dream that I want to show you."

0.01.988.717 I llama_perf_sampler_print:    sampling time =       5.59 ms /    33 runs   (    0.17 ms per token,  5905.51 tokens per second)
0.01.988.719 I llama_perf_context_print:        load time =     417.83 ms
0.01.988.720 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.988.722 I llama_perf_context_print:        eval time =    1550.88 ms /    32 runs   (   48.47 ms per token,    20.63 tokens per second)
0.01.988.722 I llama_perf_context_print:       total time =    1570.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.722s
user	10m21.675s
sys	0m7.235s
