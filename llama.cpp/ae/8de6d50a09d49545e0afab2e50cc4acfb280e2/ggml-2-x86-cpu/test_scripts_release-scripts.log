+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.539 I build: 4080 (ae8de6d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.720 I main: llama backend init
0.00.000.894 I main: load the model and apply lora adapter, if any
0.00.021.250 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.260 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.268 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.272 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.273 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.277 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.277 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.278 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.279 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.279 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.279 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.284 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.284 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.285 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.286 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.286 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.524 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.629 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.582 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.589 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.590 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.590 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.591 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.592 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.593 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.596 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.597 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.597 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.597 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.598 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.602 I llama_model_loader: - type  f32:   37 tensors
0.00.131.603 I llama_model_loader: - type q8_0:  127 tensors
0.00.226.572 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.281.881 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.282.696 I llm_load_vocab: special tokens cache size = 5
0.00.303.996 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.304.018 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.304.019 I llm_load_print_meta: arch             = gemma
0.00.304.019 I llm_load_print_meta: vocab type       = SPM
0.00.304.020 I llm_load_print_meta: n_vocab          = 256000
0.00.304.020 I llm_load_print_meta: n_merges         = 0
0.00.304.021 I llm_load_print_meta: vocab_only       = 0
0.00.304.021 I llm_load_print_meta: n_ctx_train      = 8192
0.00.304.021 I llm_load_print_meta: n_embd           = 2048
0.00.304.022 I llm_load_print_meta: n_layer          = 18
0.00.304.033 I llm_load_print_meta: n_head           = 8
0.00.304.034 I llm_load_print_meta: n_head_kv        = 1
0.00.304.035 I llm_load_print_meta: n_rot            = 256
0.00.304.035 I llm_load_print_meta: n_swa            = 0
0.00.304.035 I llm_load_print_meta: n_embd_head_k    = 256
0.00.304.036 I llm_load_print_meta: n_embd_head_v    = 256
0.00.304.036 I llm_load_print_meta: n_gqa            = 8
0.00.304.037 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.304.038 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.304.039 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.304.041 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.304.041 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.304.041 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.304.041 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.304.042 I llm_load_print_meta: n_ff             = 16384
0.00.304.043 I llm_load_print_meta: n_expert         = 0
0.00.304.043 I llm_load_print_meta: n_expert_used    = 0
0.00.304.043 I llm_load_print_meta: causal attn      = 1
0.00.304.044 I llm_load_print_meta: pooling type     = 0
0.00.304.044 I llm_load_print_meta: rope type        = 2
0.00.304.044 I llm_load_print_meta: rope scaling     = linear
0.00.304.046 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.304.046 I llm_load_print_meta: freq_scale_train = 1
0.00.304.047 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.304.047 I llm_load_print_meta: rope_finetuned   = unknown
0.00.304.047 I llm_load_print_meta: ssm_d_conv       = 0
0.00.304.048 I llm_load_print_meta: ssm_d_inner      = 0
0.00.304.048 I llm_load_print_meta: ssm_d_state      = 0
0.00.304.048 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.304.048 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.304.049 I llm_load_print_meta: model type       = 2B
0.00.304.049 I llm_load_print_meta: model ftype      = Q8_0
0.00.304.050 I llm_load_print_meta: model params     = 2.51 B
0.00.304.051 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.304.051 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.304.052 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.304.052 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.304.053 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.304.053 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.304.053 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.304.053 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.304.054 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.304.054 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.304.054 I llm_load_print_meta: max token length = 93
0.00.403.690 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.403.696 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.403.696 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.403.697 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.403.698 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.403.698 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.409.006 I llama_new_context_with_model: n_seq_max     = 1
0.00.409.014 I llama_new_context_with_model: n_ctx         = 4096
0.00.409.014 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.409.015 I llama_new_context_with_model: n_batch       = 2048
0.00.409.015 I llama_new_context_with_model: n_ubatch      = 512
0.00.409.016 I llama_new_context_with_model: flash_attn    = 0
0.00.409.018 I llama_new_context_with_model: freq_base     = 10000.0
0.00.409.019 I llama_new_context_with_model: freq_scale    = 1
0.00.409.020 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.426.155 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.426.172 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.426.272 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.427.553 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.427.560 I llama_new_context_with_model: graph nodes  = 601
0.00.427.560 I llama_new_context_with_model: graph splits = 1
0.00.427.562 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.515.929 I main: llama threadpool init, n_threads = 4
0.00.515.943 I 
0.00.516.014 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.516.017 I 
0.00.516.063 I sampler seed: 2939680160
0.00.516.074 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.516.077 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.516.078 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.516.079 I 
 increably with the rising popularity of electric vehicles. The surge in EV adoption has brought forth concerns about grid stability and the need for further investment in grid infrastructure.

0.02.787.242 I llama_perf_sampler_print:    sampling time =       5.21 ms /    33 runs   (    0.16 ms per token,  6327.90 tokens per second)
0.02.787.244 I llama_perf_context_print:        load time =     515.01 ms
0.02.787.246 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.787.247 I llama_perf_context_print:        eval time =    2252.06 ms /    32 runs   (   70.38 ms per token,    14.21 tokens per second)
0.02.787.248 I llama_perf_context_print:       total time =    2271.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.589 I build: 4080 (ae8de6d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.804 I main: llama backend init
0.00.000.985 I main: load the model and apply lora adapter, if any
0.00.022.855 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.875 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.883 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.884 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.890 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.891 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.892 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.893 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.893 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.894 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.899 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.899 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.900 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.900 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.901 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.310 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.302 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.173 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.179 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.180 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.180 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.181 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.182 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.183 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.185 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.186 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.187 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.188 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.188 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.192 I llama_model_loader: - type  f32:   37 tensors
0.00.133.193 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.122 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.413 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.171 I llm_load_vocab: special tokens cache size = 5
0.00.278.489 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.508 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.509 I llm_load_print_meta: arch             = gemma
0.00.278.510 I llm_load_print_meta: vocab type       = SPM
0.00.278.510 I llm_load_print_meta: n_vocab          = 256000
0.00.278.511 I llm_load_print_meta: n_merges         = 0
0.00.278.511 I llm_load_print_meta: vocab_only       = 0
0.00.278.511 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.512 I llm_load_print_meta: n_embd           = 2048
0.00.278.512 I llm_load_print_meta: n_layer          = 18
0.00.278.525 I llm_load_print_meta: n_head           = 8
0.00.278.527 I llm_load_print_meta: n_head_kv        = 1
0.00.278.527 I llm_load_print_meta: n_rot            = 256
0.00.278.528 I llm_load_print_meta: n_swa            = 0
0.00.278.528 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.528 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.529 I llm_load_print_meta: n_gqa            = 8
0.00.278.530 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.531 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.532 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.533 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.534 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.534 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.534 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.535 I llm_load_print_meta: n_ff             = 16384
0.00.278.536 I llm_load_print_meta: n_expert         = 0
0.00.278.536 I llm_load_print_meta: n_expert_used    = 0
0.00.278.536 I llm_load_print_meta: causal attn      = 1
0.00.278.537 I llm_load_print_meta: pooling type     = 0
0.00.278.537 I llm_load_print_meta: rope type        = 2
0.00.278.537 I llm_load_print_meta: rope scaling     = linear
0.00.278.539 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.539 I llm_load_print_meta: freq_scale_train = 1
0.00.278.540 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.540 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.540 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.540 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.541 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.541 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.541 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.542 I llm_load_print_meta: model type       = 2B
0.00.278.542 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.543 I llm_load_print_meta: model params     = 2.51 B
0.00.278.544 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.544 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.545 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.545 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.546 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.546 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.546 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.547 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.547 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.547 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.547 I llm_load_print_meta: max token length = 93
0.00.373.509 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.378.712 I llama_new_context_with_model: n_seq_max     = 1
0.00.378.719 I llama_new_context_with_model: n_ctx         = 4096
0.00.378.719 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.378.720 I llama_new_context_with_model: n_batch       = 2048
0.00.378.720 I llama_new_context_with_model: n_ubatch      = 512
0.00.378.721 I llama_new_context_with_model: flash_attn    = 0
0.00.378.723 I llama_new_context_with_model: freq_base     = 10000.0
0.00.378.724 I llama_new_context_with_model: freq_scale    = 1
0.00.378.725 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.395.014 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.395.030 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.395.121 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.360 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.396.366 I llama_new_context_with_model: graph nodes  = 601
0.00.396.367 I llama_new_context_with_model: graph splits = 1
0.00.396.368 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.971 I main: llama threadpool init, n_threads = 4
0.00.477.985 I 
0.00.478.059 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.478.062 I 
0.00.478.107 I sampler seed: 4205838175
0.00.478.117 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.122 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.478.123 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.123 I 
 increasements in the 19th century.

**Answer:**

I am unable to provide an answer as the provided text does not contain any information regarding

0.02.700.563 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6498.62 tokens per second)
0.02.700.565 I llama_perf_context_print:        load time =     476.96 ms
0.02.700.566 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.700.567 I llama_perf_context_print:        eval time =    2203.20 ms /    32 runs   (   68.85 ms per token,    14.52 tokens per second)
0.02.700.568 I llama_perf_context_print:       total time =    2222.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.548 I build: 4080 (ae8de6d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.775 I main: llama backend init
0.00.000.958 I main: load the model and apply lora adapter, if any
0.00.021.440 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.451 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.458 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.463 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.465 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.469 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.470 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.470 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.471 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.472 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.473 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.478 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.479 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.481 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.482 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.482 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.673 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.403 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.256 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.262 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.263 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.264 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.264 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.265 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.266 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.268 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.269 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.269 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.270 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.271 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.274 I llama_model_loader: - type  f32:   37 tensors
0.00.131.276 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.279 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.420 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.023 I llm_load_vocab: special tokens cache size = 5
0.00.278.077 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.096 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.097 I llm_load_print_meta: arch             = gemma
0.00.278.097 I llm_load_print_meta: vocab type       = SPM
0.00.278.098 I llm_load_print_meta: n_vocab          = 256000
0.00.278.098 I llm_load_print_meta: n_merges         = 0
0.00.278.099 I llm_load_print_meta: vocab_only       = 0
0.00.278.099 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.099 I llm_load_print_meta: n_embd           = 2048
0.00.278.100 I llm_load_print_meta: n_layer          = 18
0.00.278.112 I llm_load_print_meta: n_head           = 8
0.00.278.113 I llm_load_print_meta: n_head_kv        = 1
0.00.278.113 I llm_load_print_meta: n_rot            = 256
0.00.278.113 I llm_load_print_meta: n_swa            = 0
0.00.278.114 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.114 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.115 I llm_load_print_meta: n_gqa            = 8
0.00.278.116 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.117 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.118 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.119 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.119 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.120 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.120 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.121 I llm_load_print_meta: n_ff             = 16384
0.00.278.121 I llm_load_print_meta: n_expert         = 0
0.00.278.122 I llm_load_print_meta: n_expert_used    = 0
0.00.278.122 I llm_load_print_meta: causal attn      = 1
0.00.278.122 I llm_load_print_meta: pooling type     = 0
0.00.278.123 I llm_load_print_meta: rope type        = 2
0.00.278.123 I llm_load_print_meta: rope scaling     = linear
0.00.278.124 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.125 I llm_load_print_meta: freq_scale_train = 1
0.00.278.125 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.126 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.126 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.126 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.126 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.127 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.127 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.127 I llm_load_print_meta: model type       = 2B
0.00.278.128 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.129 I llm_load_print_meta: model params     = 2.51 B
0.00.278.130 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.130 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.131 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.131 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.131 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.132 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.132 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.132 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.133 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.133 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.133 I llm_load_print_meta: max token length = 93
0.00.358.017 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.358.027 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.358.028 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.358.028 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.358.029 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.358.029 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.363.348 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.354 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.354 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.355 I llama_new_context_with_model: n_batch       = 2048
0.00.363.355 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.356 I llama_new_context_with_model: flash_attn    = 0
0.00.363.358 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.359 I llama_new_context_with_model: freq_scale    = 1
0.00.363.360 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.983 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.996 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.089 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.327 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.334 I llama_new_context_with_model: graph nodes  = 601
0.00.380.335 I llama_new_context_with_model: graph splits = 1
0.00.380.337 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.228 I main: llama threadpool init, n_threads = 4
0.00.467.243 I 
0.00.467.328 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.467.332 I 
0.00.467.380 I sampler seed: 1343497092
0.00.467.391 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.394 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.395 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.395 I 
 increasities, but it is unclear if they are motivated by fear or aggression.

**Possible Causes of Fear-Motivated Creepypastas:**

*

0.02.705.096 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6769.23 tokens per second)
0.02.705.098 I llama_perf_context_print:        load time =     466.25 ms
0.02.705.099 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.705.101 I llama_perf_context_print:        eval time =    2218.72 ms /    32 runs   (   69.34 ms per token,    14.42 tokens per second)
0.02.705.101 I llama_perf_context_print:       total time =    2237.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.632 I build: 4080 (ae8de6d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.881 I main: llama backend init
0.00.001.061 I main: load the model and apply lora adapter, if any
0.00.021.708 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.718 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.726 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.732 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.733 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.741 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.745 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.746 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.747 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.748 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.749 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.755 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.756 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.757 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.758 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.758 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.175 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.290 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.120 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.127 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.128 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.128 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.129 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.130 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.131 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.133 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.133 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.134 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.135 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.136 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.142 I llama_model_loader: - type  f32:   37 tensors
0.00.132.144 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.090 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.067 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.687 I llm_load_vocab: special tokens cache size = 5
0.00.278.689 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.707 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.707 I llm_load_print_meta: arch             = gemma
0.00.278.708 I llm_load_print_meta: vocab type       = SPM
0.00.278.708 I llm_load_print_meta: n_vocab          = 256000
0.00.278.709 I llm_load_print_meta: n_merges         = 0
0.00.278.709 I llm_load_print_meta: vocab_only       = 0
0.00.278.709 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.710 I llm_load_print_meta: n_embd           = 2048
0.00.278.710 I llm_load_print_meta: n_layer          = 18
0.00.278.723 I llm_load_print_meta: n_head           = 8
0.00.278.724 I llm_load_print_meta: n_head_kv        = 1
0.00.278.724 I llm_load_print_meta: n_rot            = 256
0.00.278.725 I llm_load_print_meta: n_swa            = 0
0.00.278.725 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.726 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.727 I llm_load_print_meta: n_gqa            = 8
0.00.278.728 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.729 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.729 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.731 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.732 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.732 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.732 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.733 I llm_load_print_meta: n_ff             = 16384
0.00.278.733 I llm_load_print_meta: n_expert         = 0
0.00.278.734 I llm_load_print_meta: n_expert_used    = 0
0.00.278.734 I llm_load_print_meta: causal attn      = 1
0.00.278.734 I llm_load_print_meta: pooling type     = 0
0.00.278.735 I llm_load_print_meta: rope type        = 2
0.00.278.735 I llm_load_print_meta: rope scaling     = linear
0.00.278.736 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.737 I llm_load_print_meta: freq_scale_train = 1
0.00.278.738 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.738 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.738 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.739 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.739 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.739 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.739 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.740 I llm_load_print_meta: model type       = 2B
0.00.278.741 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.741 I llm_load_print_meta: model params     = 2.51 B
0.00.278.742 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.742 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.743 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.743 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.744 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.744 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.744 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.745 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.745 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.746 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.746 I llm_load_print_meta: max token length = 93
0.00.354.178 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.354.186 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.359.553 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.559 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.559 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.560 I llama_new_context_with_model: n_batch       = 2048
0.00.359.560 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.560 I llama_new_context_with_model: flash_attn    = 0
0.00.359.563 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.564 I llama_new_context_with_model: freq_scale    = 1
0.00.359.565 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.960 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.975 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.066 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.334 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.338 I llama_new_context_with_model: graph nodes  = 601
0.00.376.338 I llama_new_context_with_model: graph splits = 1
0.00.376.340 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.840 I main: llama threadpool init, n_threads = 4
0.00.464.854 I 
0.00.464.937 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.464.941 I 
0.00.464.993 I sampler seed: 3484050290
0.00.465.004 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.008 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.010 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.010 I 
 increasively through the list of elements, skipping any that are not valid.

```python
elements = ['a', 'b', 'c', 'd

0.02.906.661 I llama_perf_sampler_print:    sampling time =       4.83 ms /    33 runs   (    0.15 ms per token,  6826.64 tokens per second)
0.02.906.663 I llama_perf_context_print:        load time =     463.76 ms
0.02.906.664 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.906.666 I llama_perf_context_print:        eval time =    2422.53 ms /    32 runs   (   75.70 ms per token,    13.21 tokens per second)
0.02.906.666 I llama_perf_context_print:       total time =    2441.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.683s
user	0m39.708s
sys	0m9.418s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4080 (ae8de6d5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40222.56 ms
main:    total time = 40222.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.572 I build: 4080 (ae8de6d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.944 I main: load the model and apply lora adapter, if any
0.00.021.708 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.716 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.727 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.733 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.734 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.740 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.742 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.742 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.743 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.744 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.745 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.748 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.749 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.750 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.750 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.751 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.890 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.163 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.994 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.000 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.000 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.001 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.002 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.002 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.003 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.005 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.006 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.007 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.008 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.009 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.013 I llama_model_loader: - type  f32:   37 tensors
0.00.132.014 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.014 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.092 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.866 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.461 I llm_load_vocab: special tokens cache size = 5
0.00.279.609 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.624 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.625 I llm_load_print_meta: arch             = gemma
0.00.279.625 I llm_load_print_meta: vocab type       = SPM
0.00.279.626 I llm_load_print_meta: n_vocab          = 256000
0.00.279.626 I llm_load_print_meta: n_merges         = 0
0.00.279.627 I llm_load_print_meta: vocab_only       = 0
0.00.279.627 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.627 I llm_load_print_meta: n_embd           = 2048
0.00.279.628 I llm_load_print_meta: n_layer          = 18
0.00.279.640 I llm_load_print_meta: n_head           = 8
0.00.279.641 I llm_load_print_meta: n_head_kv        = 1
0.00.279.642 I llm_load_print_meta: n_rot            = 256
0.00.279.643 I llm_load_print_meta: n_swa            = 0
0.00.279.643 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.643 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.644 I llm_load_print_meta: n_gqa            = 8
0.00.279.646 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.647 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.647 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.649 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.649 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.649 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.650 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.651 I llm_load_print_meta: n_ff             = 16384
0.00.279.651 I llm_load_print_meta: n_expert         = 0
0.00.279.652 I llm_load_print_meta: n_expert_used    = 0
0.00.279.652 I llm_load_print_meta: causal attn      = 1
0.00.279.652 I llm_load_print_meta: pooling type     = 0
0.00.279.655 I llm_load_print_meta: rope type        = 2
0.00.279.656 I llm_load_print_meta: rope scaling     = linear
0.00.279.657 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.658 I llm_load_print_meta: freq_scale_train = 1
0.00.279.658 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.659 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.659 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.659 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.659 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.659 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.660 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.660 I llm_load_print_meta: model type       = 2B
0.00.279.661 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.279.662 I llm_load_print_meta: model params     = 2.51 B
0.00.279.662 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.279.663 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.663 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.664 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.665 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.665 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.665 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.665 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.666 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.666 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.667 I llm_load_print_meta: max token length = 93
0.00.338.848 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.338.856 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.338.857 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.338.857 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.338.858 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.338.858 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.344.205 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.213 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.214 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.214 I llama_new_context_with_model: n_batch       = 2048
0.00.344.215 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.215 I llama_new_context_with_model: flash_attn    = 0
0.00.344.218 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.219 I llama_new_context_with_model: freq_scale    = 1
0.00.344.219 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.273 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.291 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.389 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.658 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.662 I llama_new_context_with_model: graph nodes  = 601
0.00.361.663 I llama_new_context_with_model: graph splits = 1
0.00.361.665 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.438.082 I main: llama threadpool init, n_threads = 4
0.00.438.095 I 
0.00.438.167 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.438.171 I 
0.00.438.216 I sampler seed: 2519819474
0.00.438.228 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.438.230 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.438.231 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.438.232 I 
 maneutruely, and then explain why you think the answer is correct.

Answer: The sum of the first n natural numbers is equal to n(n

0.02.082.284 I llama_perf_sampler_print:    sampling time =       5.22 ms /    33 runs   (    0.16 ms per token,  6324.26 tokens per second)
0.02.082.287 I llama_perf_context_print:        load time =     437.12 ms
0.02.082.289 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.082.291 I llama_perf_context_print:        eval time =    1624.67 ms /    32 runs   (   50.77 ms per token,    19.70 tokens per second)
0.02.082.292 I llama_perf_context_print:       total time =    1644.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4080 (ae8de6d5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40180.25 ms
main:    total time = 40180.25 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.552 I build: 4080 (ae8de6d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.000.927 I main: load the model and apply lora adapter, if any
0.00.021.507 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.524 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.531 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.532 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.536 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.537 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.537 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.538 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.539 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.539 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.545 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.545 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.546 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.546 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.547 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.927 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.781 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.697 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.705 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.706 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.706 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.707 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.708 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.708 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.711 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.711 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.716 I llama_model_loader: - type  f32:   37 tensors
0.00.131.717 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.717 I llama_model_loader: - type q6_K:   19 tensors
0.00.222.053 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.274.309 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.274.927 I llm_load_vocab: special tokens cache size = 5
0.00.295.961 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.295.979 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.295.979 I llm_load_print_meta: arch             = gemma
0.00.295.980 I llm_load_print_meta: vocab type       = SPM
0.00.295.980 I llm_load_print_meta: n_vocab          = 256000
0.00.295.981 I llm_load_print_meta: n_merges         = 0
0.00.295.981 I llm_load_print_meta: vocab_only       = 0
0.00.295.982 I llm_load_print_meta: n_ctx_train      = 8192
0.00.295.982 I llm_load_print_meta: n_embd           = 2048
0.00.295.982 I llm_load_print_meta: n_layer          = 18
0.00.295.994 I llm_load_print_meta: n_head           = 8
0.00.295.995 I llm_load_print_meta: n_head_kv        = 1
0.00.295.995 I llm_load_print_meta: n_rot            = 256
0.00.295.995 I llm_load_print_meta: n_swa            = 0
0.00.295.996 I llm_load_print_meta: n_embd_head_k    = 256
0.00.295.996 I llm_load_print_meta: n_embd_head_v    = 256
0.00.295.997 I llm_load_print_meta: n_gqa            = 8
0.00.295.998 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.295.999 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.296.000 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.296.001 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.296.001 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.296.002 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.296.002 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.296.003 I llm_load_print_meta: n_ff             = 16384
0.00.296.003 I llm_load_print_meta: n_expert         = 0
0.00.296.003 I llm_load_print_meta: n_expert_used    = 0
0.00.296.004 I llm_load_print_meta: causal attn      = 1
0.00.296.004 I llm_load_print_meta: pooling type     = 0
0.00.296.004 I llm_load_print_meta: rope type        = 2
0.00.296.005 I llm_load_print_meta: rope scaling     = linear
0.00.296.007 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.296.007 I llm_load_print_meta: freq_scale_train = 1
0.00.296.008 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.296.008 I llm_load_print_meta: rope_finetuned   = unknown
0.00.296.008 I llm_load_print_meta: ssm_d_conv       = 0
0.00.296.009 I llm_load_print_meta: ssm_d_inner      = 0
0.00.296.009 I llm_load_print_meta: ssm_d_state      = 0
0.00.296.009 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.296.009 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.296.010 I llm_load_print_meta: model type       = 2B
0.00.296.010 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.296.011 I llm_load_print_meta: model params     = 2.51 B
0.00.296.012 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.296.012 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.296.013 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.296.013 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.296.013 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.296.014 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.296.014 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.296.014 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.296.015 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.296.015 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.296.015 I llm_load_print_meta: max token length = 93
0.00.355.167 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.360.369 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.375 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.376 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.377 I llama_new_context_with_model: n_batch       = 2048
0.00.360.377 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.378 I llama_new_context_with_model: flash_attn    = 0
0.00.360.381 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.382 I llama_new_context_with_model: freq_scale    = 1
0.00.360.383 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.710 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.726 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.820 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.084 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.091 I llama_new_context_with_model: graph nodes  = 601
0.00.378.091 I llama_new_context_with_model: graph splits = 1
0.00.378.093 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.270 I main: llama threadpool init, n_threads = 4
0.00.453.284 I 
0.00.453.360 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.453.363 I 
0.00.453.405 I sampler seed: 330860678
0.00.453.416 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.418 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.420 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.421 I 
 maneuvously.

**Answer:** I am not able to provide answers that are sexually suggestive in nature. [end of text]


0.01.621.981 I llama_perf_sampler_print:    sampling time =       3.58 ms /    24 runs   (    0.15 ms per token,  6707.66 tokens per second)
0.01.621.984 I llama_perf_context_print:        load time =     452.32 ms
0.01.621.985 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.621.987 I llama_perf_context_print:        eval time =    1154.63 ms /    23 runs   (   50.20 ms per token,    19.92 tokens per second)
0.01.621.988 I llama_perf_context_print:       total time =    1168.72 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.898s
user	10m23.000s
sys	0m6.936s
