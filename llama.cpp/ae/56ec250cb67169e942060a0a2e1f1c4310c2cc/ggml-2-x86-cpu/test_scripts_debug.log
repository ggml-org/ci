+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.678 I build: 3883 (ae56ec25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.882 I main: llama backend init
0.00.002.825 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.151 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.372 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.468 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.481 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.482 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.488 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.492 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.493 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.494 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.495 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.496 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.507 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.509 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.518 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.527 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.531 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.303 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.369 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.175 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.187 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.189 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.190 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.191 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.192 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.194 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.198 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.199 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.200 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.201 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.272.202 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.211 I llama_model_loader: - type  f32:   37 tensors
0.00.272.217 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.629 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.174 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.280 I llm_load_vocab: special tokens cache size = 5
0.00.610.292 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.353 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.354 I llm_load_print_meta: arch             = gemma
0.00.610.355 I llm_load_print_meta: vocab type       = SPM
0.00.610.356 I llm_load_print_meta: n_vocab          = 256000
0.00.610.358 I llm_load_print_meta: n_merges         = 0
0.00.610.359 I llm_load_print_meta: vocab_only       = 0
0.00.610.359 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.360 I llm_load_print_meta: n_embd           = 2048
0.00.610.360 I llm_load_print_meta: n_layer          = 18
0.00.610.425 I llm_load_print_meta: n_head           = 8
0.00.610.434 I llm_load_print_meta: n_head_kv        = 1
0.00.610.435 I llm_load_print_meta: n_rot            = 256
0.00.610.435 I llm_load_print_meta: n_swa            = 0
0.00.610.436 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.436 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.440 I llm_load_print_meta: n_gqa            = 8
0.00.610.445 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.450 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.451 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.452 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.453 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.453 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.454 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.459 I llm_load_print_meta: n_ff             = 16384
0.00.610.459 I llm_load_print_meta: n_expert         = 0
0.00.610.460 I llm_load_print_meta: n_expert_used    = 0
0.00.610.474 I llm_load_print_meta: causal attn      = 1
0.00.610.478 I llm_load_print_meta: pooling type     = 0
0.00.610.479 I llm_load_print_meta: rope type        = 2
0.00.610.479 I llm_load_print_meta: rope scaling     = linear
0.00.610.481 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.481 I llm_load_print_meta: freq_scale_train = 1
0.00.610.482 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.496 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.497 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.497 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.506 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.514 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.522 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.523 I llm_load_print_meta: model type       = 2B
0.00.610.540 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.542 I llm_load_print_meta: model params     = 2.51 B
0.00.610.543 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.546 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.547 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.548 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.548 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.556 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.557 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.558 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.565 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.566 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.567 I llm_load_print_meta: max token length = 93
0.00.610.737 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.708.572 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.708.582 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.708.583 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.708.584 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.708.585 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.708.586 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.714.423 I llama_new_context_with_model: n_ctx      = 8192
0.00.714.431 I llama_new_context_with_model: n_batch    = 2048
0.00.714.432 I llama_new_context_with_model: n_ubatch   = 512
0.00.714.432 I llama_new_context_with_model: flash_attn = 0
0.00.714.437 I llama_new_context_with_model: freq_base  = 10000.0
0.00.714.438 I llama_new_context_with_model: freq_scale = 1
0.00.745.087 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.745.131 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.745.250 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.746.659 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.746.665 I llama_new_context_with_model: graph nodes  = 601
0.00.746.666 I llama_new_context_with_model: graph splits = 1
0.00.746.682 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.035 I main: llama threadpool init, n_threads = 4
0.01.359.048 I 
0.01.359.155 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.359.159 I 
0.01.359.320 I sampler seed: 2270892254
0.01.359.330 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.359.336 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.359.337 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.359.337 I 
 increasities!

I cannot answer this question as it contains sexually suggestive content that is not appropriate for me to provide. [end of text]


0.11.975.909 I llama_perf_sampler_print:    sampling time =      38.55 ms /    26 runs   (    1.48 ms per token,   674.48 tokens per second)
0.11.975.912 I llama_perf_context_print:        load time =    1356.00 ms
0.11.975.914 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.975.925 I llama_perf_context_print:        eval time =   10552.51 ms /    25 runs   (  422.10 ms per token,     2.37 tokens per second)
0.11.975.927 I llama_perf_context_print:       total time =   10616.88 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.692 I build: 3883 (ae56ec25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.897 I main: llama backend init
0.00.002.863 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.632 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.740 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.756 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.761 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.766 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.767 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.768 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.770 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.771 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.772 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.781 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.782 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.783 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.784 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.786 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.452 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.314 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.120 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.129 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.131 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.132 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.133 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.134 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.135 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.139 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.140 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.141 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.142 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.272.143 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.152 I llama_model_loader: - type  f32:   37 tensors
0.00.272.157 I llama_model_loader: - type q8_0:  127 tensors
0.00.459.769 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.490.435 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.491.541 I llm_load_vocab: special tokens cache size = 5
0.00.587.900 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.587.963 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.587.964 I llm_load_print_meta: arch             = gemma
0.00.587.966 I llm_load_print_meta: vocab type       = SPM
0.00.587.967 I llm_load_print_meta: n_vocab          = 256000
0.00.587.969 I llm_load_print_meta: n_merges         = 0
0.00.587.969 I llm_load_print_meta: vocab_only       = 0
0.00.587.970 I llm_load_print_meta: n_ctx_train      = 8192
0.00.587.971 I llm_load_print_meta: n_embd           = 2048
0.00.587.971 I llm_load_print_meta: n_layer          = 18
0.00.588.040 I llm_load_print_meta: n_head           = 8
0.00.588.050 I llm_load_print_meta: n_head_kv        = 1
0.00.588.051 I llm_load_print_meta: n_rot            = 256
0.00.588.052 I llm_load_print_meta: n_swa            = 0
0.00.588.053 I llm_load_print_meta: n_embd_head_k    = 256
0.00.588.053 I llm_load_print_meta: n_embd_head_v    = 256
0.00.588.058 I llm_load_print_meta: n_gqa            = 8
0.00.588.062 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.588.067 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.588.070 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.588.072 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.588.072 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.588.073 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.588.073 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.588.078 I llm_load_print_meta: n_ff             = 16384
0.00.588.079 I llm_load_print_meta: n_expert         = 0
0.00.588.079 I llm_load_print_meta: n_expert_used    = 0
0.00.588.080 I llm_load_print_meta: causal attn      = 1
0.00.588.080 I llm_load_print_meta: pooling type     = 0
0.00.588.092 I llm_load_print_meta: rope type        = 2
0.00.588.095 I llm_load_print_meta: rope scaling     = linear
0.00.588.097 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.588.098 I llm_load_print_meta: freq_scale_train = 1
0.00.588.098 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.588.098 I llm_load_print_meta: rope_finetuned   = unknown
0.00.588.099 I llm_load_print_meta: ssm_d_conv       = 0
0.00.588.099 I llm_load_print_meta: ssm_d_inner      = 0
0.00.588.099 I llm_load_print_meta: ssm_d_state      = 0
0.00.588.100 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.588.100 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.588.101 I llm_load_print_meta: model type       = 2B
0.00.588.110 I llm_load_print_meta: model ftype      = Q8_0
0.00.588.111 I llm_load_print_meta: model params     = 2.51 B
0.00.588.112 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.588.126 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.588.127 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.588.135 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.588.145 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.588.146 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.588.147 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.588.148 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.588.162 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.588.167 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.588.167 I llm_load_print_meta: max token length = 93
0.00.588.336 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.682.475 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.688.254 I llama_new_context_with_model: n_ctx      = 8192
0.00.688.261 I llama_new_context_with_model: n_batch    = 2048
0.00.688.262 I llama_new_context_with_model: n_ubatch   = 512
0.00.688.263 I llama_new_context_with_model: flash_attn = 0
0.00.688.266 I llama_new_context_with_model: freq_base  = 10000.0
0.00.688.267 I llama_new_context_with_model: freq_scale = 1
0.00.717.803 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.717.849 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.717.960 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.719.354 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.719.360 I llama_new_context_with_model: graph nodes  = 601
0.00.719.360 I llama_new_context_with_model: graph splits = 1
0.00.719.376 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.330.002 I main: llama threadpool init, n_threads = 4
0.01.330.014 I 
0.01.330.120 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.330.124 I 
0.01.330.283 I sampler seed: 2027917885
0.01.330.293 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.330.299 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.330.310 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.330.314 I 
 increamically.

The answer is:

Extremely quickly.

The adverb "extremely" indicates a great degree or intensity. It is often used to emphasize the

0.14.948.543 I llama_perf_sampler_print:    sampling time =      49.51 ms /    33 runs   (    1.50 ms per token,   666.55 tokens per second)
0.14.948.546 I llama_perf_context_print:        load time =    1326.92 ms
0.14.948.548 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.948.549 I llama_perf_context_print:        eval time =   13531.33 ms /    32 runs   (  422.85 ms per token,     2.36 tokens per second)
0.14.948.550 I llama_perf_context_print:       total time =   13618.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.681 I build: 3883 (ae56ec25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.878 I main: llama backend init
0.00.002.836 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.895 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.106 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.200 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.212 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.214 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.219 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.223 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.224 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.225 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.226 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.227 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.234 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.235 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.236 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.237 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.238 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.828 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.805 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.556 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.569 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.570 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.571 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.572 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.574 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.575 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.579 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.580 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.581 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.582 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.271.583 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.591 I llama_model_loader: - type  f32:   37 tensors
0.00.271.595 I llama_model_loader: - type q8_0:  127 tensors
0.00.460.757 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.491.464 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.492.561 I llm_load_vocab: special tokens cache size = 5
0.00.587.993 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.588.058 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.588.059 I llm_load_print_meta: arch             = gemma
0.00.588.060 I llm_load_print_meta: vocab type       = SPM
0.00.588.061 I llm_load_print_meta: n_vocab          = 256000
0.00.588.064 I llm_load_print_meta: n_merges         = 0
0.00.588.064 I llm_load_print_meta: vocab_only       = 0
0.00.588.065 I llm_load_print_meta: n_ctx_train      = 8192
0.00.588.065 I llm_load_print_meta: n_embd           = 2048
0.00.588.065 I llm_load_print_meta: n_layer          = 18
0.00.588.131 I llm_load_print_meta: n_head           = 8
0.00.588.138 I llm_load_print_meta: n_head_kv        = 1
0.00.588.139 I llm_load_print_meta: n_rot            = 256
0.00.588.139 I llm_load_print_meta: n_swa            = 0
0.00.588.139 I llm_load_print_meta: n_embd_head_k    = 256
0.00.588.140 I llm_load_print_meta: n_embd_head_v    = 256
0.00.588.144 I llm_load_print_meta: n_gqa            = 8
0.00.588.149 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.588.154 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.588.155 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.588.157 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.588.157 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.588.157 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.588.158 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.588.163 I llm_load_print_meta: n_ff             = 16384
0.00.588.163 I llm_load_print_meta: n_expert         = 0
0.00.588.163 I llm_load_print_meta: n_expert_used    = 0
0.00.588.164 I llm_load_print_meta: causal attn      = 1
0.00.588.164 I llm_load_print_meta: pooling type     = 0
0.00.588.164 I llm_load_print_meta: rope type        = 2
0.00.588.166 I llm_load_print_meta: rope scaling     = linear
0.00.588.183 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.588.183 I llm_load_print_meta: freq_scale_train = 1
0.00.588.184 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.588.184 I llm_load_print_meta: rope_finetuned   = unknown
0.00.588.185 I llm_load_print_meta: ssm_d_conv       = 0
0.00.588.185 I llm_load_print_meta: ssm_d_inner      = 0
0.00.588.185 I llm_load_print_meta: ssm_d_state      = 0
0.00.588.185 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.588.186 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.588.186 I llm_load_print_meta: model type       = 2B
0.00.588.195 I llm_load_print_meta: model ftype      = Q8_0
0.00.588.196 I llm_load_print_meta: model params     = 2.51 B
0.00.588.197 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.588.209 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.588.211 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.588.211 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.588.220 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.588.221 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.588.222 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.588.223 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.588.230 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.588.231 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.588.233 I llm_load_print_meta: max token length = 93
0.00.588.402 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.665.003 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.665.015 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.665.016 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.665.017 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.665.018 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.665.018 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.670.790 I llama_new_context_with_model: n_ctx      = 8192
0.00.670.797 I llama_new_context_with_model: n_batch    = 2048
0.00.670.798 I llama_new_context_with_model: n_ubatch   = 512
0.00.670.799 I llama_new_context_with_model: flash_attn = 0
0.00.670.803 I llama_new_context_with_model: freq_base  = 10000.0
0.00.670.804 I llama_new_context_with_model: freq_scale = 1
0.00.702.279 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.322 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.702.434 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.703.781 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.703.786 I llama_new_context_with_model: graph nodes  = 601
0.00.703.787 I llama_new_context_with_model: graph splits = 1
0.00.703.802 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.314.125 I main: llama threadpool init, n_threads = 4
0.01.314.136 I 
0.01.314.240 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.314.248 I 
0.01.314.415 I sampler seed: 3985708226
0.01.314.426 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.314.433 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.314.434 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.314.435 I 
 increamental relationship is a key concept in understanding the dynamics of relationship development and breakdown.

**True or False?**

The increamental relationship is a type

0.14.897.323 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.50 tokens per second)
0.14.897.326 I llama_perf_context_print:        load time =    1311.10 ms
0.14.897.327 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.897.350 I llama_perf_context_print:        eval time =   13498.99 ms /    32 runs   (  421.84 ms per token,     2.37 tokens per second)
0.14.897.352 I llama_perf_context_print:       total time =   13583.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.648 I build: 3883 (ae56ec25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.002.818 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.972 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.195 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.290 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.302 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.304 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.310 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.312 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.314 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.319 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.320 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.322 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.331 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.333 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.335 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.337 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.338 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.867 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.876 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.721 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.731 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.732 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.733 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.734 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.736 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.737 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.740 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.741 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.742 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.743 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.273.745 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.753 I llama_model_loader: - type  f32:   37 tensors
0.00.273.757 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.876 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.476.200 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.477.348 I llm_load_vocab: special tokens cache size = 5
0.00.588.226 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.588.294 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.588.299 I llm_load_print_meta: arch             = gemma
0.00.588.299 I llm_load_print_meta: vocab type       = SPM
0.00.588.300 I llm_load_print_meta: n_vocab          = 256000
0.00.588.304 I llm_load_print_meta: n_merges         = 0
0.00.588.304 I llm_load_print_meta: vocab_only       = 0
0.00.588.305 I llm_load_print_meta: n_ctx_train      = 8192
0.00.588.306 I llm_load_print_meta: n_embd           = 2048
0.00.588.307 I llm_load_print_meta: n_layer          = 18
0.00.588.377 I llm_load_print_meta: n_head           = 8
0.00.588.387 I llm_load_print_meta: n_head_kv        = 1
0.00.588.389 I llm_load_print_meta: n_rot            = 256
0.00.588.390 I llm_load_print_meta: n_swa            = 0
0.00.588.390 I llm_load_print_meta: n_embd_head_k    = 256
0.00.588.390 I llm_load_print_meta: n_embd_head_v    = 256
0.00.588.397 I llm_load_print_meta: n_gqa            = 8
0.00.588.405 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.588.413 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.588.418 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.588.420 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.588.420 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.588.421 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.588.421 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.588.427 I llm_load_print_meta: n_ff             = 16384
0.00.588.428 I llm_load_print_meta: n_expert         = 0
0.00.588.428 I llm_load_print_meta: n_expert_used    = 0
0.00.588.429 I llm_load_print_meta: causal attn      = 1
0.00.588.429 I llm_load_print_meta: pooling type     = 0
0.00.588.430 I llm_load_print_meta: rope type        = 2
0.00.588.431 I llm_load_print_meta: rope scaling     = linear
0.00.588.433 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.588.435 I llm_load_print_meta: freq_scale_train = 1
0.00.588.435 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.588.436 I llm_load_print_meta: rope_finetuned   = unknown
0.00.588.446 I llm_load_print_meta: ssm_d_conv       = 0
0.00.588.448 I llm_load_print_meta: ssm_d_inner      = 0
0.00.588.448 I llm_load_print_meta: ssm_d_state      = 0
0.00.588.449 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.588.449 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.588.450 I llm_load_print_meta: model type       = 2B
0.00.588.461 I llm_load_print_meta: model ftype      = Q8_0
0.00.588.463 I llm_load_print_meta: model params     = 2.51 B
0.00.588.464 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.588.465 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.588.466 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.588.467 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.588.468 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.588.469 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.588.473 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.588.473 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.588.481 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.588.483 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.588.486 I llm_load_print_meta: max token length = 93
0.00.588.666 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.660.478 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.660.490 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.666.336 I llama_new_context_with_model: n_ctx      = 8192
0.00.666.343 I llama_new_context_with_model: n_batch    = 2048
0.00.666.344 I llama_new_context_with_model: n_ubatch   = 512
0.00.666.345 I llama_new_context_with_model: flash_attn = 0
0.00.666.347 I llama_new_context_with_model: freq_base  = 10000.0
0.00.666.348 I llama_new_context_with_model: freq_scale = 1
0.00.695.705 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.695.749 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.695.859 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.697.247 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.697.254 I llama_new_context_with_model: graph nodes  = 601
0.00.697.255 I llama_new_context_with_model: graph splits = 1
0.00.697.272 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.308.088 I main: llama threadpool init, n_threads = 4
0.01.308.100 I 
0.01.308.226 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.308.230 I 
0.01.308.402 I sampler seed: 1159483070
0.01.308.413 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.308.419 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.308.420 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.308.421 I 
 increasities in the workplace.

**Answer:**

**1. Understanding the Context and Causes:**

* Recognize that workplace incivilities can stem from various

0.14.969.704 I llama_perf_sampler_print:    sampling time =      49.33 ms /    33 runs   (    1.49 ms per token,   669.00 tokens per second)
0.14.969.707 I llama_perf_context_print:        load time =    1305.08 ms
0.14.969.708 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.969.710 I llama_perf_context_print:        eval time =   13577.60 ms /    32 runs   (  424.30 ms per token,     2.36 tokens per second)
0.14.969.711 I llama_perf_context_print:       total time =   13661.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m6.645s
user	3m38.523s
sys	0m9.655s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3883 (ae56ec25)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199988.64 ms
main:    total time = 199988.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.655 I build: 3883 (ae56ec25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.002.824 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.028.195 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.028.399 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.028.491 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.503 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.505 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.509 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.510 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.512 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.513 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.514 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.516 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.524 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.525 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.527 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.536 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.028.538 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.650 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.426 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.193 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.200 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.202 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.203 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.204 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.205 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.207 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.211 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.212 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.213 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.214 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.274.215 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.223 I llama_model_loader: - type  f32:   37 tensors
0.00.274.227 I llama_model_loader: - type q4_K:  108 tensors
0.00.274.227 I llama_model_loader: - type q6_K:   19 tensors
0.00.447.948 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.475.689 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.476.706 I llm_load_vocab: special tokens cache size = 5
0.00.571.896 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.571.957 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.571.958 I llm_load_print_meta: arch             = gemma
0.00.571.959 I llm_load_print_meta: vocab type       = SPM
0.00.571.959 I llm_load_print_meta: n_vocab          = 256000
0.00.571.962 I llm_load_print_meta: n_merges         = 0
0.00.571.962 I llm_load_print_meta: vocab_only       = 0
0.00.571.963 I llm_load_print_meta: n_ctx_train      = 8192
0.00.571.963 I llm_load_print_meta: n_embd           = 2048
0.00.571.963 I llm_load_print_meta: n_layer          = 18
0.00.572.026 I llm_load_print_meta: n_head           = 8
0.00.572.033 I llm_load_print_meta: n_head_kv        = 1
0.00.572.034 I llm_load_print_meta: n_rot            = 256
0.00.572.034 I llm_load_print_meta: n_swa            = 0
0.00.572.034 I llm_load_print_meta: n_embd_head_k    = 256
0.00.572.035 I llm_load_print_meta: n_embd_head_v    = 256
0.00.572.039 I llm_load_print_meta: n_gqa            = 8
0.00.572.043 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.572.049 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.572.051 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.572.061 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.572.063 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.572.063 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.572.063 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.572.068 I llm_load_print_meta: n_ff             = 16384
0.00.572.069 I llm_load_print_meta: n_expert         = 0
0.00.572.069 I llm_load_print_meta: n_expert_used    = 0
0.00.572.070 I llm_load_print_meta: causal attn      = 1
0.00.572.071 I llm_load_print_meta: pooling type     = 0
0.00.572.072 I llm_load_print_meta: rope type        = 2
0.00.572.072 I llm_load_print_meta: rope scaling     = linear
0.00.572.073 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.572.074 I llm_load_print_meta: freq_scale_train = 1
0.00.572.075 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.572.076 I llm_load_print_meta: rope_finetuned   = unknown
0.00.572.076 I llm_load_print_meta: ssm_d_conv       = 0
0.00.572.077 I llm_load_print_meta: ssm_d_inner      = 0
0.00.572.077 I llm_load_print_meta: ssm_d_state      = 0
0.00.572.077 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.572.078 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.572.079 I llm_load_print_meta: model type       = 2B
0.00.572.102 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.572.103 I llm_load_print_meta: model params     = 2.51 B
0.00.572.110 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.572.111 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.572.112 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.572.112 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.572.114 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.572.114 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.572.115 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.572.116 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.572.122 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.572.123 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.572.124 I llm_load_print_meta: max token length = 93
0.00.572.288 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.631.053 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.631.064 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.631.065 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.631.066 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.631.066 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.631.067 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.636.750 I llama_new_context_with_model: n_ctx      = 8192
0.00.636.758 I llama_new_context_with_model: n_batch    = 2048
0.00.636.759 I llama_new_context_with_model: n_ubatch   = 512
0.00.636.759 I llama_new_context_with_model: flash_attn = 0
0.00.636.763 I llama_new_context_with_model: freq_base  = 10000.0
0.00.636.764 I llama_new_context_with_model: freq_scale = 1
0.00.667.261 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.667.303 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.667.422 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.668.844 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.668.850 I llama_new_context_with_model: graph nodes  = 601
0.00.668.851 I llama_new_context_with_model: graph splits = 1
0.00.668.868 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.248.629 I main: llama threadpool init, n_threads = 4
0.01.248.641 I 
0.01.248.751 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.248.755 I 
0.01.248.918 I sampler seed: 3510723327
0.01.248.929 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.248.936 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.248.937 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.248.940 I 
 maneutables! 🤪 [end of text]


0.03.292.937 I llama_perf_sampler_print:    sampling time =       9.30 ms /     7 runs   (    1.33 ms per token,   753.01 tokens per second)
0.03.292.940 I llama_perf_context_print:        load time =    1245.62 ms
0.03.292.953 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.292.955 I llama_perf_context_print:        eval time =    2027.15 ms /     6 runs   (  337.86 ms per token,     2.96 tokens per second)
0.03.292.956 I llama_perf_context_print:       total time =    2044.32 ms /     7 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3883 (ae56ec25)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200032.08 ms
main:    total time = 200032.08 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.657 I build: 3883 (ae56ec25) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.002.806 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.144 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.252 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.268 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.272 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.277 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.278 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.279 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.280 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.281 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.283 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.290 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.291 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.292 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.293 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.294 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.695 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.611 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.434 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.447 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.448 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.449 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.450 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.451 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.453 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.457 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.458 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.467 I llama_model_loader: - type  f32:   37 tensors
0.00.271.471 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.472 I llama_model_loader: - type q6_K:   19 tensors
0.00.457.070 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.488.488 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.489.555 I llm_load_vocab: special tokens cache size = 5
0.00.586.151 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.586.216 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.586.217 I llm_load_print_meta: arch             = gemma
0.00.586.218 I llm_load_print_meta: vocab type       = SPM
0.00.586.218 I llm_load_print_meta: n_vocab          = 256000
0.00.586.220 I llm_load_print_meta: n_merges         = 0
0.00.586.221 I llm_load_print_meta: vocab_only       = 0
0.00.586.221 I llm_load_print_meta: n_ctx_train      = 8192
0.00.586.222 I llm_load_print_meta: n_embd           = 2048
0.00.586.222 I llm_load_print_meta: n_layer          = 18
0.00.586.288 I llm_load_print_meta: n_head           = 8
0.00.586.295 I llm_load_print_meta: n_head_kv        = 1
0.00.586.296 I llm_load_print_meta: n_rot            = 256
0.00.586.296 I llm_load_print_meta: n_swa            = 0
0.00.586.297 I llm_load_print_meta: n_embd_head_k    = 256
0.00.586.297 I llm_load_print_meta: n_embd_head_v    = 256
0.00.586.301 I llm_load_print_meta: n_gqa            = 8
0.00.586.306 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.586.311 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.586.312 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.586.313 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.586.313 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.586.314 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.586.314 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.586.319 I llm_load_print_meta: n_ff             = 16384
0.00.586.320 I llm_load_print_meta: n_expert         = 0
0.00.586.321 I llm_load_print_meta: n_expert_used    = 0
0.00.586.321 I llm_load_print_meta: causal attn      = 1
0.00.586.321 I llm_load_print_meta: pooling type     = 0
0.00.586.322 I llm_load_print_meta: rope type        = 2
0.00.586.322 I llm_load_print_meta: rope scaling     = linear
0.00.586.330 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.586.331 I llm_load_print_meta: freq_scale_train = 1
0.00.586.331 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.586.332 I llm_load_print_meta: rope_finetuned   = unknown
0.00.586.332 I llm_load_print_meta: ssm_d_conv       = 0
0.00.586.332 I llm_load_print_meta: ssm_d_inner      = 0
0.00.586.333 I llm_load_print_meta: ssm_d_state      = 0
0.00.586.334 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.586.334 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.586.335 I llm_load_print_meta: model type       = 2B
0.00.586.345 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.586.346 I llm_load_print_meta: model params     = 2.51 B
0.00.586.347 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.586.347 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.586.348 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.586.350 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.586.350 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.586.351 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.586.374 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.586.376 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.586.382 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.586.384 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.586.384 I llm_load_print_meta: max token length = 93
0.00.586.557 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.643.809 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.649.617 I llama_new_context_with_model: n_ctx      = 8192
0.00.649.626 I llama_new_context_with_model: n_batch    = 2048
0.00.649.627 I llama_new_context_with_model: n_ubatch   = 512
0.00.649.628 I llama_new_context_with_model: flash_attn = 0
0.00.649.632 I llama_new_context_with_model: freq_base  = 10000.0
0.00.649.632 I llama_new_context_with_model: freq_scale = 1
0.00.682.115 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.682.160 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.682.276 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.683.654 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.683.661 I llama_new_context_with_model: graph nodes  = 601
0.00.683.662 I llama_new_context_with_model: graph splits = 1
0.00.683.677 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.260.015 I main: llama threadpool init, n_threads = 4
0.01.260.029 I 
0.01.260.136 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.260.137 I 
0.01.260.302 I sampler seed: 4192751858
0.01.260.310 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.260.315 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.260.316 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.260.316 I 
 seconally after a brief introduction. [end of text]


0.04.007.621 I llama_perf_sampler_print:    sampling time =      12.44 ms /     9 runs   (    1.38 ms per token,   723.30 tokens per second)
0.04.007.646 I llama_perf_context_print:        load time =    1257.02 ms
0.04.007.648 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.007.655 I llama_perf_context_print:        eval time =    2725.36 ms /     8 runs   (  340.67 ms per token,     2.94 tokens per second)
0.04.007.656 I llama_perf_context_print:       total time =    2747.62 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m50.338s
user	49m13.342s
sys	0m6.573s
