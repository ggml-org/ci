+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 4016 (42cadc74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.790 I main: load the model and apply lora adapter, if any
0.00.025.872 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.884 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.978 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.990 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.992 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.998 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.002 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.003 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.004 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.005 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.014 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.022 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.023 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.024 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.026 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.027 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.400 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.201 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.577 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.586 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.588 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.589 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.590 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.591 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.592 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.596 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.597 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.598 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.599 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.600 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.608 I llama_model_loader: - type  f32:   37 tensors
0.00.266.610 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.523 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.636 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.625 I llm_load_vocab: special tokens cache size = 5
0.00.608.592 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.659 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.664 I llm_load_print_meta: arch             = gemma
0.00.608.665 I llm_load_print_meta: vocab type       = SPM
0.00.608.665 I llm_load_print_meta: n_vocab          = 256000
0.00.608.668 I llm_load_print_meta: n_merges         = 0
0.00.608.669 I llm_load_print_meta: vocab_only       = 0
0.00.608.669 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.669 I llm_load_print_meta: n_embd           = 2048
0.00.608.670 I llm_load_print_meta: n_layer          = 18
0.00.608.734 I llm_load_print_meta: n_head           = 8
0.00.608.744 I llm_load_print_meta: n_head_kv        = 1
0.00.608.745 I llm_load_print_meta: n_rot            = 256
0.00.608.745 I llm_load_print_meta: n_swa            = 0
0.00.608.746 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.747 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.751 I llm_load_print_meta: n_gqa            = 8
0.00.608.756 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.762 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.763 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.765 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.765 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.766 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.767 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.772 I llm_load_print_meta: n_ff             = 16384
0.00.608.772 I llm_load_print_meta: n_expert         = 0
0.00.608.773 I llm_load_print_meta: n_expert_used    = 0
0.00.608.773 I llm_load_print_meta: causal attn      = 1
0.00.608.773 I llm_load_print_meta: pooling type     = 0
0.00.608.774 I llm_load_print_meta: rope type        = 2
0.00.608.774 I llm_load_print_meta: rope scaling     = linear
0.00.608.776 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.777 I llm_load_print_meta: freq_scale_train = 1
0.00.608.777 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.787 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.789 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.789 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.789 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.790 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.790 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.793 I llm_load_print_meta: model type       = 2B
0.00.608.794 I llm_load_print_meta: model ftype      = Q8_0
0.00.608.795 I llm_load_print_meta: model params     = 2.51 B
0.00.608.805 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.608.806 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.806 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.807 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.808 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.808 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.810 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.810 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.816 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.818 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.818 I llm_load_print_meta: max token length = 93
0.00.714.240 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.714.247 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.714.248 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.714.249 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.714.250 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.714.251 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.720.129 I llama_new_context_with_model: n_seq_max     = 1
0.00.720.137 I llama_new_context_with_model: n_ctx         = 4096
0.00.720.137 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.720.138 I llama_new_context_with_model: n_batch       = 2048
0.00.720.138 I llama_new_context_with_model: n_ubatch      = 512
0.00.720.139 I llama_new_context_with_model: flash_attn    = 0
0.00.720.142 I llama_new_context_with_model: freq_base     = 10000.0
0.00.720.143 I llama_new_context_with_model: freq_scale    = 1
0.00.720.143 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.734.806 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.734.846 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.734.970 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.737.548 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.737.553 I llama_new_context_with_model: graph nodes  = 601
0.00.737.553 I llama_new_context_with_model: graph splits = 1
0.00.737.580 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.342.046 I main: llama threadpool init, n_threads = 4
0.01.342.057 I 
0.01.342.156 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.342.159 I 
0.01.342.386 I sampler seed: 1580245330
0.01.342.399 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.342.406 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.342.409 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.342.409 I 
 increasities
I am unable to generate a response that contains sexually suggestive or inappropriate content. My purpose is to assist with tasks and provide information in a responsible and

0.14.924.937 I llama_perf_sampler_print:    sampling time =      49.01 ms /    33 runs   (    1.49 ms per token,   673.37 tokens per second)
0.14.924.940 I llama_perf_context_print:        load time =    1339.16 ms
0.14.924.942 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.924.943 I llama_perf_context_print:        eval time =   13492.46 ms /    32 runs   (  421.64 ms per token,     2.37 tokens per second)
0.14.924.944 I llama_perf_context_print:       total time =   13582.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4016 (42cadc74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.002.797 I main: load the model and apply lora adapter, if any
0.00.025.803 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.898 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.913 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.917 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.922 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.923 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.924 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.927 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.928 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.929 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.936 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.937 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.938 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.940 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.941 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.083 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.590 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.924 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.932 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.933 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.934 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.935 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.936 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.938 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.941 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.942 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.944 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.945 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.946 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.954 I llama_model_loader: - type  f32:   37 tensors
0.00.266.956 I llama_model_loader: - type q8_0:  127 tensors
0.00.436.608 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.830 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.825 I llm_load_vocab: special tokens cache size = 5
0.00.599.510 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.580 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.581 I llm_load_print_meta: arch             = gemma
0.00.599.582 I llm_load_print_meta: vocab type       = SPM
0.00.599.583 I llm_load_print_meta: n_vocab          = 256000
0.00.599.587 I llm_load_print_meta: n_merges         = 0
0.00.599.587 I llm_load_print_meta: vocab_only       = 0
0.00.599.588 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.588 I llm_load_print_meta: n_embd           = 2048
0.00.599.588 I llm_load_print_meta: n_layer          = 18
0.00.599.653 I llm_load_print_meta: n_head           = 8
0.00.599.660 I llm_load_print_meta: n_head_kv        = 1
0.00.599.661 I llm_load_print_meta: n_rot            = 256
0.00.599.662 I llm_load_print_meta: n_swa            = 0
0.00.599.662 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.662 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.667 I llm_load_print_meta: n_gqa            = 8
0.00.599.672 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.678 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.679 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.686 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.686 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.687 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.688 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.693 I llm_load_print_meta: n_ff             = 16384
0.00.599.694 I llm_load_print_meta: n_expert         = 0
0.00.599.695 I llm_load_print_meta: n_expert_used    = 0
0.00.599.695 I llm_load_print_meta: causal attn      = 1
0.00.599.696 I llm_load_print_meta: pooling type     = 0
0.00.599.696 I llm_load_print_meta: rope type        = 2
0.00.599.696 I llm_load_print_meta: rope scaling     = linear
0.00.599.698 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.699 I llm_load_print_meta: freq_scale_train = 1
0.00.599.699 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.700 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.700 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.701 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.702 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.702 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.703 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.703 I llm_load_print_meta: model type       = 2B
0.00.599.704 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.705 I llm_load_print_meta: model params     = 2.51 B
0.00.599.714 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.715 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.715 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.719 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.720 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.720 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.720 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.721 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.727 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.729 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.729 I llm_load_print_meta: max token length = 93
0.00.699.644 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.705.592 I llama_new_context_with_model: n_seq_max     = 1
0.00.705.597 I llama_new_context_with_model: n_ctx         = 4096
0.00.705.598 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.705.598 I llama_new_context_with_model: n_batch       = 2048
0.00.705.598 I llama_new_context_with_model: n_ubatch      = 512
0.00.705.599 I llama_new_context_with_model: flash_attn    = 0
0.00.705.601 I llama_new_context_with_model: freq_base     = 10000.0
0.00.705.602 I llama_new_context_with_model: freq_scale    = 1
0.00.705.602 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.720.746 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.720.788 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.720.911 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.441 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.723.445 I llama_new_context_with_model: graph nodes  = 601
0.00.723.445 I llama_new_context_with_model: graph splits = 1
0.00.723.469 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.327.061 I main: llama threadpool init, n_threads = 4
0.01.327.074 I 
0.01.327.179 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.327.183 I 
0.01.327.418 I sampler seed: 4126776109
0.01.327.430 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.327.437 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.327.437 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.327.438 I 
 increamically.

**Assistant**

I understand. I will ensure that I provide you with the information and assistance you need promptly and efficiently. [end of text]


0.14.087.916 I llama_perf_sampler_print:    sampling time =      46.29 ms /    31 runs   (    1.49 ms per token,   669.73 tokens per second)
0.14.087.920 I llama_perf_context_print:        load time =    1324.17 ms
0.14.087.922 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.087.924 I llama_perf_context_print:        eval time =   12675.17 ms /    30 runs   (  422.51 ms per token,     2.37 tokens per second)
0.14.087.925 I llama_perf_context_print:       total time =   12760.86 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4016 (42cadc74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.002.773 I main: load the model and apply lora adapter, if any
0.00.025.302 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.313 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.400 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.412 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.414 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.419 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.422 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.423 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.425 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.426 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.427 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.432 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.433 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.435 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.437 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.438 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.626 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.554 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.956 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.963 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.964 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.965 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.966 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.968 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.969 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.973 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.974 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.975 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.976 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.265.977 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.985 I llama_model_loader: - type  f32:   37 tensors
0.00.265.987 I llama_model_loader: - type q8_0:  127 tensors
0.00.439.882 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.191 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.082 I llm_load_vocab: special tokens cache size = 5
0.00.594.806 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.878 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.882 I llm_load_print_meta: arch             = gemma
0.00.594.883 I llm_load_print_meta: vocab type       = SPM
0.00.594.884 I llm_load_print_meta: n_vocab          = 256000
0.00.594.886 I llm_load_print_meta: n_merges         = 0
0.00.594.886 I llm_load_print_meta: vocab_only       = 0
0.00.594.887 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.887 I llm_load_print_meta: n_embd           = 2048
0.00.594.888 I llm_load_print_meta: n_layer          = 18
0.00.594.954 I llm_load_print_meta: n_head           = 8
0.00.594.963 I llm_load_print_meta: n_head_kv        = 1
0.00.594.965 I llm_load_print_meta: n_rot            = 256
0.00.594.966 I llm_load_print_meta: n_swa            = 0
0.00.594.966 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.967 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.974 I llm_load_print_meta: n_gqa            = 8
0.00.594.979 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.986 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.987 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.989 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.989 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.990 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.991 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.996 I llm_load_print_meta: n_ff             = 16384
0.00.594.997 I llm_load_print_meta: n_expert         = 0
0.00.594.998 I llm_load_print_meta: n_expert_used    = 0
0.00.594.998 I llm_load_print_meta: causal attn      = 1
0.00.594.999 I llm_load_print_meta: pooling type     = 0
0.00.594.999 I llm_load_print_meta: rope type        = 2
0.00.595.002 I llm_load_print_meta: rope scaling     = linear
0.00.595.003 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.004 I llm_load_print_meta: freq_scale_train = 1
0.00.595.004 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.004 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.005 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.005 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.005 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.005 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.006 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.006 I llm_load_print_meta: model type       = 2B
0.00.595.015 I llm_load_print_meta: model ftype      = Q8_0
0.00.595.029 I llm_load_print_meta: model params     = 2.51 B
0.00.595.038 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.595.038 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.039 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.040 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.041 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.041 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.041 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.042 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.048 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.050 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.050 I llm_load_print_meta: max token length = 93
0.00.691.906 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.691.915 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.691.916 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.691.917 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.691.918 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.691.918 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.697.697 I llama_new_context_with_model: n_seq_max     = 1
0.00.697.704 I llama_new_context_with_model: n_ctx         = 4096
0.00.697.705 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.697.705 I llama_new_context_with_model: n_batch       = 2048
0.00.697.706 I llama_new_context_with_model: n_ubatch      = 512
0.00.697.706 I llama_new_context_with_model: flash_attn    = 0
0.00.697.709 I llama_new_context_with_model: freq_base     = 10000.0
0.00.697.710 I llama_new_context_with_model: freq_scale    = 1
0.00.697.710 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.711.951 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.711.988 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.712.112 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.714.651 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.714.655 I llama_new_context_with_model: graph nodes  = 601
0.00.714.655 I llama_new_context_with_model: graph splits = 1
0.00.714.679 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.318.049 I main: llama threadpool init, n_threads = 4
0.01.318.063 I 
0.01.318.177 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.318.181 I 
0.01.318.446 I sampler seed: 707694174
0.01.318.463 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.318.471 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.318.478 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.318.478 I 
 increasively, leaving the original sentence untouched.

... and the sun rose, casting its golden rays upon the sleeping earth, whispering secrets to the slumbering world

0.14.850.173 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.13 tokens per second)
0.14.850.188 I llama_perf_context_print:        load time =    1315.18 ms
0.14.850.189 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.850.191 I llama_perf_context_print:        eval time =   13442.23 ms /    32 runs   (  420.07 ms per token,     2.38 tokens per second)
0.14.850.205 I llama_perf_context_print:       total time =   13532.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 4016 (42cadc74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.002.786 I main: load the model and apply lora adapter, if any
0.00.025.773 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.783 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.881 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.893 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.895 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.900 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.902 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.903 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.904 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.905 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.906 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.913 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.915 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.916 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.917 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.918 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.952 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.646 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.948 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.957 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.958 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.959 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.960 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.961 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.963 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.966 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.967 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.968 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.969 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.971 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.979 I llama_model_loader: - type  f32:   37 tensors
0.00.265.982 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.159 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.180 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.071 I llm_load_vocab: special tokens cache size = 5
0.00.601.051 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.122 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.126 I llm_load_print_meta: arch             = gemma
0.00.601.127 I llm_load_print_meta: vocab type       = SPM
0.00.601.127 I llm_load_print_meta: n_vocab          = 256000
0.00.601.130 I llm_load_print_meta: n_merges         = 0
0.00.601.130 I llm_load_print_meta: vocab_only       = 0
0.00.601.131 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.131 I llm_load_print_meta: n_embd           = 2048
0.00.601.131 I llm_load_print_meta: n_layer          = 18
0.00.601.196 I llm_load_print_meta: n_head           = 8
0.00.601.206 I llm_load_print_meta: n_head_kv        = 1
0.00.601.207 I llm_load_print_meta: n_rot            = 256
0.00.601.208 I llm_load_print_meta: n_swa            = 0
0.00.601.208 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.208 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.213 I llm_load_print_meta: n_gqa            = 8
0.00.601.218 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.223 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.225 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.227 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.227 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.229 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.229 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.235 I llm_load_print_meta: n_ff             = 16384
0.00.601.235 I llm_load_print_meta: n_expert         = 0
0.00.601.236 I llm_load_print_meta: n_expert_used    = 0
0.00.601.236 I llm_load_print_meta: causal attn      = 1
0.00.601.261 I llm_load_print_meta: pooling type     = 0
0.00.601.265 I llm_load_print_meta: rope type        = 2
0.00.601.265 I llm_load_print_meta: rope scaling     = linear
0.00.601.267 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.267 I llm_load_print_meta: freq_scale_train = 1
0.00.601.268 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.268 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.268 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.269 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.269 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.269 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.270 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.270 I llm_load_print_meta: model type       = 2B
0.00.601.272 I llm_load_print_meta: model ftype      = Q8_0
0.00.601.280 I llm_load_print_meta: model params     = 2.51 B
0.00.601.290 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.601.290 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.291 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.291 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.292 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.295 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.295 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.296 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.302 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.304 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.304 I llm_load_print_meta: max token length = 93
0.00.675.034 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.675.044 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.680.884 I llama_new_context_with_model: n_seq_max     = 1
0.00.680.893 I llama_new_context_with_model: n_ctx         = 4096
0.00.680.893 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.680.894 I llama_new_context_with_model: n_batch       = 2048
0.00.680.894 I llama_new_context_with_model: n_ubatch      = 512
0.00.680.895 I llama_new_context_with_model: flash_attn    = 0
0.00.680.897 I llama_new_context_with_model: freq_base     = 10000.0
0.00.680.897 I llama_new_context_with_model: freq_scale    = 1
0.00.680.898 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.696.796 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.696.836 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.696.970 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.699.530 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.699.534 I llama_new_context_with_model: graph nodes  = 601
0.00.699.534 I llama_new_context_with_model: graph splits = 1
0.00.699.560 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.303.585 I main: llama threadpool init, n_threads = 4
0.01.303.597 I 
0.01.303.705 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.303.709 I 
0.01.303.941 I sampler seed: 2293818273
0.01.303.954 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.303.963 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.303.963 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.303.964 I 
 increably. [end of text]


0.02.988.551 I llama_perf_sampler_print:    sampling time =       6.23 ms /     5 runs   (    1.25 ms per token,   802.31 tokens per second)
0.02.988.555 I llama_perf_context_print:        load time =    1300.69 ms
0.02.988.556 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.988.558 I llama_perf_context_print:        eval time =    1671.90 ms /     4 runs   (  417.98 ms per token,     2.39 tokens per second)
0.02.988.558 I llama_perf_context_print:       total time =    1684.98 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m56.518s
user	2m58.888s
sys	0m9.411s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4016 (42cadc74)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198921.71 ms
main:    total time = 198921.71 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 4016 (42cadc74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.002.817 I main: load the model and apply lora adapter, if any
0.00.025.734 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.747 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.846 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.859 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.863 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.869 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.871 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.873 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.874 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.875 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.891 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.902 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.903 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.905 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.906 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.909 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.293 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.843 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.188 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.197 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.198 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.199 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.200 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.202 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.203 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.207 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.208 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.210 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.211 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.212 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.219 I llama_model_loader: - type  f32:   37 tensors
0.00.266.222 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.223 I llama_model_loader: - type q6_K:   19 tensors
0.00.447.358 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.913 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.803 I llm_load_vocab: special tokens cache size = 5
0.00.607.933 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.001 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.005 I llm_load_print_meta: arch             = gemma
0.00.608.006 I llm_load_print_meta: vocab type       = SPM
0.00.608.007 I llm_load_print_meta: n_vocab          = 256000
0.00.608.009 I llm_load_print_meta: n_merges         = 0
0.00.608.010 I llm_load_print_meta: vocab_only       = 0
0.00.608.010 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.011 I llm_load_print_meta: n_embd           = 2048
0.00.608.011 I llm_load_print_meta: n_layer          = 18
0.00.608.074 I llm_load_print_meta: n_head           = 8
0.00.608.084 I llm_load_print_meta: n_head_kv        = 1
0.00.608.085 I llm_load_print_meta: n_rot            = 256
0.00.608.087 I llm_load_print_meta: n_swa            = 0
0.00.608.087 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.087 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.092 I llm_load_print_meta: n_gqa            = 8
0.00.608.097 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.102 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.104 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.105 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.106 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.120 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.120 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.126 I llm_load_print_meta: n_ff             = 16384
0.00.608.129 I llm_load_print_meta: n_expert         = 0
0.00.608.130 I llm_load_print_meta: n_expert_used    = 0
0.00.608.131 I llm_load_print_meta: causal attn      = 1
0.00.608.131 I llm_load_print_meta: pooling type     = 0
0.00.608.132 I llm_load_print_meta: rope type        = 2
0.00.608.132 I llm_load_print_meta: rope scaling     = linear
0.00.608.134 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.134 I llm_load_print_meta: freq_scale_train = 1
0.00.608.135 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.135 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.146 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.147 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.148 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.149 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.149 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.150 I llm_load_print_meta: model type       = 2B
0.00.608.152 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.608.153 I llm_load_print_meta: model params     = 2.51 B
0.00.608.162 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.608.163 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.164 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.165 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.166 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.166 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.167 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.168 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.175 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.176 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.176 I llm_load_print_meta: max token length = 93
0.00.674.034 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.674.043 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.674.044 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.674.045 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.674.046 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.674.047 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.679.867 I llama_new_context_with_model: n_seq_max     = 1
0.00.679.875 I llama_new_context_with_model: n_ctx         = 4096
0.00.679.875 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.679.876 I llama_new_context_with_model: n_batch       = 2048
0.00.679.876 I llama_new_context_with_model: n_ubatch      = 512
0.00.679.877 I llama_new_context_with_model: flash_attn    = 0
0.00.679.879 I llama_new_context_with_model: freq_base     = 10000.0
0.00.679.880 I llama_new_context_with_model: freq_scale    = 1
0.00.679.880 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.694.626 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.694.665 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.694.790 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.697.305 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.697.309 I llama_new_context_with_model: graph nodes  = 601
0.00.697.309 I llama_new_context_with_model: graph splits = 1
0.00.697.334 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.268.445 I main: llama threadpool init, n_threads = 4
0.01.268.458 I 
0.01.268.560 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.268.564 I 
0.01.268.794 I sampler seed: 1762408167
0.01.268.807 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.268.814 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.268.815 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.268.817 I 
 encompasing a vast array of topics, including:

**1. The nature of consciousness and its relationship to the brain.**
**2. The ethical implications

0.12.090.977 I llama_perf_sampler_print:    sampling time =      49.00 ms /    33 runs   (    1.48 ms per token,   673.50 tokens per second)
0.12.090.980 I llama_perf_context_print:        load time =    1265.52 ms
0.12.090.981 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.090.983 I llama_perf_context_print:        eval time =   10732.71 ms /    32 runs   (  335.40 ms per token,     2.98 tokens per second)
0.12.090.984 I llama_perf_context_print:       total time =   10822.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4016 (42cadc74)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198931.58 ms
main:    total time = 198931.58 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 4016 (42cadc74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.816 I main: llama backend init
0.00.002.747 I main: load the model and apply lora adapter, if any
0.00.025.417 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.511 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.524 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.528 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.533 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.535 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.536 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.537 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.539 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.540 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.545 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.547 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.548 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.551 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.552 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.740 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.851 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.351 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.360 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.361 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.362 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.363 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.364 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.366 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.369 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.370 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.377 I llama_model_loader: - type  f32:   37 tensors
0.00.265.380 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.380 I llama_model_loader: - type q6_K:   19 tensors
0.00.444.139 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.938 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.816 I llm_load_vocab: special tokens cache size = 5
0.00.604.128 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.194 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.195 I llm_load_print_meta: arch             = gemma
0.00.604.196 I llm_load_print_meta: vocab type       = SPM
0.00.604.197 I llm_load_print_meta: n_vocab          = 256000
0.00.604.199 I llm_load_print_meta: n_merges         = 0
0.00.604.199 I llm_load_print_meta: vocab_only       = 0
0.00.604.200 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.200 I llm_load_print_meta: n_embd           = 2048
0.00.604.200 I llm_load_print_meta: n_layer          = 18
0.00.604.266 I llm_load_print_meta: n_head           = 8
0.00.604.273 I llm_load_print_meta: n_head_kv        = 1
0.00.604.277 I llm_load_print_meta: n_rot            = 256
0.00.604.277 I llm_load_print_meta: n_swa            = 0
0.00.604.278 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.278 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.283 I llm_load_print_meta: n_gqa            = 8
0.00.604.289 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.294 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.296 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.297 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.298 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.298 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.298 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.303 I llm_load_print_meta: n_ff             = 16384
0.00.604.304 I llm_load_print_meta: n_expert         = 0
0.00.604.304 I llm_load_print_meta: n_expert_used    = 0
0.00.604.305 I llm_load_print_meta: causal attn      = 1
0.00.604.305 I llm_load_print_meta: pooling type     = 0
0.00.604.306 I llm_load_print_meta: rope type        = 2
0.00.604.306 I llm_load_print_meta: rope scaling     = linear
0.00.604.309 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.310 I llm_load_print_meta: freq_scale_train = 1
0.00.604.310 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.311 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.311 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.312 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.312 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.312 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.312 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.313 I llm_load_print_meta: model type       = 2B
0.00.604.314 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.604.315 I llm_load_print_meta: model params     = 2.51 B
0.00.604.324 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.604.325 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.326 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.327 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.327 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.327 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.328 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.329 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.334 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.335 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.336 I llm_load_print_meta: max token length = 93
0.00.664.848 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.670.570 I llama_new_context_with_model: n_seq_max     = 1
0.00.670.578 I llama_new_context_with_model: n_ctx         = 4096
0.00.670.578 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.670.578 I llama_new_context_with_model: n_batch       = 2048
0.00.670.579 I llama_new_context_with_model: n_ubatch      = 512
0.00.670.579 I llama_new_context_with_model: flash_attn    = 0
0.00.670.582 I llama_new_context_with_model: freq_base     = 10000.0
0.00.670.582 I llama_new_context_with_model: freq_scale    = 1
0.00.670.583 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.685.528 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.685.570 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.685.698 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.688.254 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.688.258 I llama_new_context_with_model: graph nodes  = 601
0.00.688.259 I llama_new_context_with_model: graph splits = 1
0.00.688.283 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.260.690 I main: llama threadpool init, n_threads = 4
0.01.260.701 I 
0.01.260.811 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.260.815 I 
0.01.261.054 I sampler seed: 2815841078
0.01.261.066 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.261.072 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.261.075 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.261.076 I 
 increasities and the potential dangers of the phenomenon in the context of the COVID-19 pandemic.

## The Dangers of Uncontrolled Declining Reproduction Rates



0.12.106.091 I llama_perf_sampler_print:    sampling time =      49.00 ms /    33 runs   (    1.48 ms per token,   673.50 tokens per second)
0.12.106.095 I llama_perf_context_print:        load time =    1257.85 ms
0.12.106.107 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.106.109 I llama_perf_context_print:        eval time =   10754.82 ms /    32 runs   (  336.09 ms per token,     2.98 tokens per second)
0.12.106.111 I llama_perf_context_print:       total time =   10845.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.035s
user	50m5.434s
sys	0m6.458s
