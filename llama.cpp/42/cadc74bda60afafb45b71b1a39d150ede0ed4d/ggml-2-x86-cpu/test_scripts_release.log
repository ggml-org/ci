+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.573 I build: 4016 (42cadc74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.001.846 I main: load the model and apply lora adapter, if any
0.00.022.655 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.667 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.675 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.680 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.682 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.687 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.687 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.688 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.689 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.689 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.690 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.695 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.696 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.696 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.697 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.697 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.114 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.638 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.421 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.426 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.427 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.428 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.428 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.429 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.430 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.432 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.433 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.433 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.434 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.435 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.439 I llama_model_loader: - type  f32:   37 tensors
0.00.132.439 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.589 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.943 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.432 I llm_load_vocab: special tokens cache size = 5
0.00.260.937 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.952 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.953 I llm_load_print_meta: arch             = gemma
0.00.260.954 I llm_load_print_meta: vocab type       = SPM
0.00.260.954 I llm_load_print_meta: n_vocab          = 256000
0.00.260.955 I llm_load_print_meta: n_merges         = 0
0.00.260.955 I llm_load_print_meta: vocab_only       = 0
0.00.260.955 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.956 I llm_load_print_meta: n_embd           = 2048
0.00.260.956 I llm_load_print_meta: n_layer          = 18
0.00.260.968 I llm_load_print_meta: n_head           = 8
0.00.260.969 I llm_load_print_meta: n_head_kv        = 1
0.00.260.969 I llm_load_print_meta: n_rot            = 256
0.00.260.970 I llm_load_print_meta: n_swa            = 0
0.00.260.970 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.970 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.971 I llm_load_print_meta: n_gqa            = 8
0.00.260.972 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.973 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.974 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.975 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.976 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.976 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.976 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.977 I llm_load_print_meta: n_ff             = 16384
0.00.260.978 I llm_load_print_meta: n_expert         = 0
0.00.260.978 I llm_load_print_meta: n_expert_used    = 0
0.00.260.978 I llm_load_print_meta: causal attn      = 1
0.00.260.978 I llm_load_print_meta: pooling type     = 0
0.00.260.979 I llm_load_print_meta: rope type        = 2
0.00.260.979 I llm_load_print_meta: rope scaling     = linear
0.00.260.981 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.981 I llm_load_print_meta: freq_scale_train = 1
0.00.260.982 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.982 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.982 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.982 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.983 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.983 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.983 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.984 I llm_load_print_meta: model type       = 2B
0.00.260.984 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.985 I llm_load_print_meta: model params     = 2.51 B
0.00.260.986 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.986 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.987 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.987 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.987 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.987 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.988 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.988 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.988 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.989 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.989 I llm_load_print_meta: max token length = 93
0.00.364.356 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.364.361 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.364.362 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.364.362 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.364.363 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.364.363 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.369.638 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.645 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.645 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.646 I llama_new_context_with_model: n_batch       = 2048
0.00.369.646 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.646 I llama_new_context_with_model: flash_attn    = 0
0.00.369.648 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.649 I llama_new_context_with_model: freq_scale    = 1
0.00.369.650 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.665 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.681 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.766 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.021 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.028 I llama_new_context_with_model: graph nodes  = 601
0.00.386.029 I llama_new_context_with_model: graph splits = 1
0.00.386.030 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.044 I main: llama threadpool init, n_threads = 4
0.00.472.058 I 
0.00.472.133 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.472.136 I 
0.00.472.195 I sampler seed: 3177210160
0.00.472.206 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.209 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.210 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.210 I 
 increamically.

I am unable to generate the requested content as it contains potentially harmful or inappropriate material. [end of text]


0.02.015.136 I llama_perf_sampler_print:    sampling time =       3.30 ms /    23 runs   (    0.14 ms per token,  6967.59 tokens per second)
0.02.015.139 I llama_perf_context_print:        load time =     470.17 ms
0.02.015.140 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.015.141 I llama_perf_context_print:        eval time =    1529.81 ms /    22 runs   (   69.54 ms per token,    14.38 tokens per second)
0.02.015.142 I llama_perf_context_print:       total time =    1543.10 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.543 I build: 4016 (42cadc74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.001.802 I main: load the model and apply lora adapter, if any
0.00.022.466 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.480 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.491 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.492 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.496 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.497 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.498 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.499 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.499 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.500 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.504 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.505 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.505 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.506 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.506 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.737 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.165 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.954 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.961 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.962 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.962 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.963 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.964 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.965 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.969 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.969 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.970 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.971 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.972 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.975 I llama_model_loader: - type  f32:   37 tensors
0.00.131.977 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.752 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.598 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.220 I llm_load_vocab: special tokens cache size = 5
0.00.267.879 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.894 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.895 I llm_load_print_meta: arch             = gemma
0.00.267.895 I llm_load_print_meta: vocab type       = SPM
0.00.267.896 I llm_load_print_meta: n_vocab          = 256000
0.00.267.896 I llm_load_print_meta: n_merges         = 0
0.00.267.896 I llm_load_print_meta: vocab_only       = 0
0.00.267.897 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.897 I llm_load_print_meta: n_embd           = 2048
0.00.267.897 I llm_load_print_meta: n_layer          = 18
0.00.267.909 I llm_load_print_meta: n_head           = 8
0.00.267.910 I llm_load_print_meta: n_head_kv        = 1
0.00.267.911 I llm_load_print_meta: n_rot            = 256
0.00.267.911 I llm_load_print_meta: n_swa            = 0
0.00.267.911 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.912 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.913 I llm_load_print_meta: n_gqa            = 8
0.00.267.914 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.915 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.916 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.917 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.917 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.917 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.918 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.918 I llm_load_print_meta: n_ff             = 16384
0.00.267.919 I llm_load_print_meta: n_expert         = 0
0.00.267.919 I llm_load_print_meta: n_expert_used    = 0
0.00.267.920 I llm_load_print_meta: causal attn      = 1
0.00.267.920 I llm_load_print_meta: pooling type     = 0
0.00.267.920 I llm_load_print_meta: rope type        = 2
0.00.267.921 I llm_load_print_meta: rope scaling     = linear
0.00.267.922 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.923 I llm_load_print_meta: freq_scale_train = 1
0.00.267.923 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.923 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.924 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.924 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.924 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.924 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.925 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.925 I llm_load_print_meta: model type       = 2B
0.00.267.925 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.926 I llm_load_print_meta: model params     = 2.51 B
0.00.267.927 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.927 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.928 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.928 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.929 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.929 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.929 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.930 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.930 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.930 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.931 I llm_load_print_meta: max token length = 93
0.00.364.551 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.878 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.886 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.886 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.887 I llama_new_context_with_model: n_batch       = 2048
0.00.369.887 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.887 I llama_new_context_with_model: flash_attn    = 0
0.00.369.891 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.892 I llama_new_context_with_model: freq_scale    = 1
0.00.369.893 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.349 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.367 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.464 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.719 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.725 I llama_new_context_with_model: graph nodes  = 601
0.00.386.725 I llama_new_context_with_model: graph splits = 1
0.00.386.727 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.159 I main: llama threadpool init, n_threads = 4
0.00.469.174 I 
0.00.469.247 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.469.250 I 
0.00.469.292 I sampler seed: 270162017
0.00.469.303 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.305 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.306 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.306 I 
 increasels in the forest.

The mischievous fairy hopped out of the mossy cloak and winked. "Have you found the magical acorn?" she asked.

The

0.02.675.799 I llama_perf_sampler_print:    sampling time =       4.75 ms /    33 runs   (    0.14 ms per token,  6948.83 tokens per second)
0.02.675.801 I llama_perf_context_print:        load time =     467.34 ms
0.02.675.802 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.675.804 I llama_perf_context_print:        eval time =    2188.63 ms /    32 runs   (   68.39 ms per token,    14.62 tokens per second)
0.02.675.804 I llama_perf_context_print:       total time =    2206.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.567 I build: 4016 (42cadc74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.790 I main: llama backend init
0.00.001.917 I main: load the model and apply lora adapter, if any
0.00.022.379 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.390 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.397 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.409 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.414 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.418 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.419 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.420 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.420 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.421 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.423 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.428 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.429 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.430 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.431 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.432 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.702 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.134.685 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.144.490 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.144.498 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.144.498 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.144.499 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.144.500 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.144.500 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.144.501 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.144.503 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.144.504 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.144.504 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.144.505 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.144.507 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.144.510 I llama_model_loader: - type  f32:   37 tensors
0.00.144.511 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.380 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.121 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.686 I llm_load_vocab: special tokens cache size = 5
0.00.285.542 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.559 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.560 I llm_load_print_meta: arch             = gemma
0.00.285.560 I llm_load_print_meta: vocab type       = SPM
0.00.285.561 I llm_load_print_meta: n_vocab          = 256000
0.00.285.561 I llm_load_print_meta: n_merges         = 0
0.00.285.562 I llm_load_print_meta: vocab_only       = 0
0.00.285.562 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.585 I llm_load_print_meta: n_embd           = 2048
0.00.285.585 I llm_load_print_meta: n_layer          = 18
0.00.285.599 I llm_load_print_meta: n_head           = 8
0.00.285.600 I llm_load_print_meta: n_head_kv        = 1
0.00.285.600 I llm_load_print_meta: n_rot            = 256
0.00.285.601 I llm_load_print_meta: n_swa            = 0
0.00.285.601 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.601 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.602 I llm_load_print_meta: n_gqa            = 8
0.00.285.603 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.605 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.605 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.607 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.607 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.608 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.608 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.609 I llm_load_print_meta: n_ff             = 16384
0.00.285.610 I llm_load_print_meta: n_expert         = 0
0.00.285.610 I llm_load_print_meta: n_expert_used    = 0
0.00.285.610 I llm_load_print_meta: causal attn      = 1
0.00.285.611 I llm_load_print_meta: pooling type     = 0
0.00.285.611 I llm_load_print_meta: rope type        = 2
0.00.285.612 I llm_load_print_meta: rope scaling     = linear
0.00.285.613 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.614 I llm_load_print_meta: freq_scale_train = 1
0.00.285.614 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.615 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.615 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.615 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.615 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.616 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.616 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.617 I llm_load_print_meta: model type       = 2B
0.00.285.617 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.618 I llm_load_print_meta: model params     = 2.51 B
0.00.285.619 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.620 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.620 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.621 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.621 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.622 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.622 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.623 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.623 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.623 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.624 I llm_load_print_meta: max token length = 93
0.00.385.721 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.385.728 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.385.729 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.385.729 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.385.730 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.385.730 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.390.957 I llama_new_context_with_model: n_seq_max     = 1
0.00.390.964 I llama_new_context_with_model: n_ctx         = 4096
0.00.390.964 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.390.965 I llama_new_context_with_model: n_batch       = 2048
0.00.390.965 I llama_new_context_with_model: n_ubatch      = 512
0.00.390.965 I llama_new_context_with_model: flash_attn    = 0
0.00.390.967 I llama_new_context_with_model: freq_base     = 10000.0
0.00.390.968 I llama_new_context_with_model: freq_scale    = 1
0.00.390.969 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.406.186 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.406.200 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.406.298 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.407.565 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.407.572 I llama_new_context_with_model: graph nodes  = 601
0.00.407.573 I llama_new_context_with_model: graph splits = 1
0.00.407.575 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.493.149 I main: llama threadpool init, n_threads = 4
0.00.493.162 I 
0.00.493.234 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.493.238 I 
0.00.493.278 I sampler seed: 774371396
0.00.493.288 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.493.291 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.493.291 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.493.292 I 
 seconary term.

The term "secondary" is a relative term and can refer to something that is:
a) Produced or generated within a short period

0.02.644.490 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6756.76 tokens per second)
0.02.644.492 I llama_perf_context_print:        load time =     491.21 ms
0.02.644.495 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.644.497 I llama_perf_context_print:        eval time =    2132.98 ms /    32 runs   (   66.66 ms per token,    15.00 tokens per second)
0.02.644.497 I llama_perf_context_print:       total time =    2151.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.524 I build: 4016 (42cadc74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.759 I main: llama backend init
0.00.001.905 I main: load the model and apply lora adapter, if any
0.00.023.951 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.960 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.968 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.978 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.984 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.987 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.988 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.989 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.990 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.992 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.993 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.998 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.999 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.000 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.002 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.003 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.325 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.879 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.668 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.675 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.676 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.676 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.678 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.679 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.680 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.683 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.684 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.685 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.686 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.137.687 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.691 I llama_model_loader: - type  f32:   37 tensors
0.00.137.692 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.692 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.888 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.453 I llm_load_vocab: special tokens cache size = 5
0.00.274.415 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.432 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.432 I llm_load_print_meta: arch             = gemma
0.00.274.433 I llm_load_print_meta: vocab type       = SPM
0.00.274.433 I llm_load_print_meta: n_vocab          = 256000
0.00.274.434 I llm_load_print_meta: n_merges         = 0
0.00.274.434 I llm_load_print_meta: vocab_only       = 0
0.00.274.434 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.435 I llm_load_print_meta: n_embd           = 2048
0.00.274.435 I llm_load_print_meta: n_layer          = 18
0.00.274.448 I llm_load_print_meta: n_head           = 8
0.00.274.450 I llm_load_print_meta: n_head_kv        = 1
0.00.274.451 I llm_load_print_meta: n_rot            = 256
0.00.274.452 I llm_load_print_meta: n_swa            = 0
0.00.274.452 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.454 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.455 I llm_load_print_meta: n_gqa            = 8
0.00.274.457 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.458 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.460 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.461 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.462 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.462 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.464 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.465 I llm_load_print_meta: n_ff             = 16384
0.00.274.466 I llm_load_print_meta: n_expert         = 0
0.00.274.466 I llm_load_print_meta: n_expert_used    = 0
0.00.274.467 I llm_load_print_meta: causal attn      = 1
0.00.274.468 I llm_load_print_meta: pooling type     = 0
0.00.274.468 I llm_load_print_meta: rope type        = 2
0.00.274.469 I llm_load_print_meta: rope scaling     = linear
0.00.274.472 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.473 I llm_load_print_meta: freq_scale_train = 1
0.00.274.474 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.474 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.475 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.475 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.476 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.477 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.477 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.478 I llm_load_print_meta: model type       = 2B
0.00.274.479 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.480 I llm_load_print_meta: model params     = 2.51 B
0.00.274.482 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.483 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.483 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.484 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.484 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.485 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.486 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.486 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.487 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.488 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.489 I llm_load_print_meta: max token length = 93
0.00.349.201 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.349.205 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.354.527 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.534 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.534 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.535 I llama_new_context_with_model: n_batch       = 2048
0.00.354.535 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.535 I llama_new_context_with_model: flash_attn    = 0
0.00.354.537 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.538 I llama_new_context_with_model: freq_scale    = 1
0.00.354.539 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.525 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.540 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.637 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.852 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.859 I llama_new_context_with_model: graph nodes  = 601
0.00.370.859 I llama_new_context_with_model: graph splits = 1
0.00.370.860 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.230 I main: llama threadpool init, n_threads = 4
0.00.455.242 I 
0.00.455.330 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.455.334 I 
0.00.455.388 I sampler seed: 3785079276
0.00.455.400 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.410 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.414 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.415 I 
 increably.

I am unable to generate a response due to the provided context being too broad and lacking sufficient information. Please provide additional context or specify the desired

0.02.771.249 I llama_perf_sampler_print:    sampling time =       5.39 ms /    33 runs   (    0.16 ms per token,  6117.91 tokens per second)
0.02.771.252 I llama_perf_context_print:        load time =     453.30 ms
0.02.771.254 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.771.257 I llama_perf_context_print:        eval time =    2295.93 ms /    32 runs   (   71.75 ms per token,    13.94 tokens per second)
0.02.771.259 I llama_perf_context_print:       total time =    2316.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.678s
user	0m35.687s
sys	0m9.454s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4016 (42cadc74)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31980.64 ms
main:    total time = 31980.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.534 I build: 4016 (42cadc74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.757 I main: llama backend init
0.00.001.856 I main: load the model and apply lora adapter, if any
0.00.022.342 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.352 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.361 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.367 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.368 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.374 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.376 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.377 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.378 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.379 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.380 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.385 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.386 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.387 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.388 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.389 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.342 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.217 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.064 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.071 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.072 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.072 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.073 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.074 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.074 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.077 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.077 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.078 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.080 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.081 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.085 I llama_model_loader: - type  f32:   37 tensors
0.00.132.086 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.087 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.212 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.338 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.081 I llm_load_vocab: special tokens cache size = 5
0.00.281.993 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.011 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.012 I llm_load_print_meta: arch             = gemma
0.00.282.013 I llm_load_print_meta: vocab type       = SPM
0.00.282.013 I llm_load_print_meta: n_vocab          = 256000
0.00.282.014 I llm_load_print_meta: n_merges         = 0
0.00.282.014 I llm_load_print_meta: vocab_only       = 0
0.00.282.014 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.015 I llm_load_print_meta: n_embd           = 2048
0.00.282.015 I llm_load_print_meta: n_layer          = 18
0.00.282.027 I llm_load_print_meta: n_head           = 8
0.00.282.029 I llm_load_print_meta: n_head_kv        = 1
0.00.282.029 I llm_load_print_meta: n_rot            = 256
0.00.282.029 I llm_load_print_meta: n_swa            = 0
0.00.282.030 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.030 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.031 I llm_load_print_meta: n_gqa            = 8
0.00.282.032 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.033 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.034 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.035 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.035 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.036 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.036 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.037 I llm_load_print_meta: n_ff             = 16384
0.00.282.037 I llm_load_print_meta: n_expert         = 0
0.00.282.038 I llm_load_print_meta: n_expert_used    = 0
0.00.282.038 I llm_load_print_meta: causal attn      = 1
0.00.282.039 I llm_load_print_meta: pooling type     = 0
0.00.282.039 I llm_load_print_meta: rope type        = 2
0.00.282.040 I llm_load_print_meta: rope scaling     = linear
0.00.282.041 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.042 I llm_load_print_meta: freq_scale_train = 1
0.00.282.042 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.042 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.042 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.043 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.043 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.043 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.043 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.044 I llm_load_print_meta: model type       = 2B
0.00.282.045 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.282.045 I llm_load_print_meta: model params     = 2.51 B
0.00.282.046 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.282.046 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.047 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.047 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.048 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.048 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.048 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.049 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.049 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.050 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.050 I llm_load_print_meta: max token length = 93
0.00.343.714 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.343.720 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.343.721 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.343.721 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.343.722 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.343.723 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.349.117 I llama_new_context_with_model: n_seq_max     = 1
0.00.349.123 I llama_new_context_with_model: n_ctx         = 4096
0.00.349.124 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.349.124 I llama_new_context_with_model: n_batch       = 2048
0.00.349.125 I llama_new_context_with_model: n_ubatch      = 512
0.00.349.125 I llama_new_context_with_model: flash_attn    = 0
0.00.349.128 I llama_new_context_with_model: freq_base     = 10000.0
0.00.349.128 I llama_new_context_with_model: freq_scale    = 1
0.00.349.129 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.850 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.866 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.966 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.206 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.365.213 I llama_new_context_with_model: graph nodes  = 601
0.00.365.213 I llama_new_context_with_model: graph splits = 1
0.00.365.215 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.264 I main: llama threadpool init, n_threads = 4
0.00.442.280 I 
0.00.442.380 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.442.384 I 
0.00.442.452 I sampler seed: 1272642748
0.00.442.463 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.442.469 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.442.469 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.442.470 I 
 maneuvously.

**Corrected version:**

"I'm so sorry, but I can't answer that question. It's against my policy

0.02.140.677 I llama_perf_sampler_print:    sampling time =       5.14 ms /    33 runs   (    0.16 ms per token,  6416.49 tokens per second)
0.02.140.679 I llama_perf_context_print:        load time =     440.39 ms
0.02.140.680 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.140.682 I llama_perf_context_print:        eval time =    1678.06 ms /    32 runs   (   52.44 ms per token,    19.07 tokens per second)
0.02.140.682 I llama_perf_context_print:       total time =    1698.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4016 (42cadc74)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32053.20 ms
main:    total time = 32053.20 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.503 I build: 4016 (42cadc74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.707 I main: llama backend init
0.00.001.810 I main: load the model and apply lora adapter, if any
0.00.022.260 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.275 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.285 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.286 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.290 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.291 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.292 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.292 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.292 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.293 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.297 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.298 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.298 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.299 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.299 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.734 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.286 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.078 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.084 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.085 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.085 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.086 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.086 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.087 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.089 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.090 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.092 I llama_model_loader: - type  f32:   37 tensors
0.00.132.093 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.094 I llama_model_loader: - type q6_K:   19 tensors
0.00.213.185 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.211 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.669 I llm_load_vocab: special tokens cache size = 5
0.00.281.194 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.209 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.210 I llm_load_print_meta: arch             = gemma
0.00.281.210 I llm_load_print_meta: vocab type       = SPM
0.00.281.211 I llm_load_print_meta: n_vocab          = 256000
0.00.281.211 I llm_load_print_meta: n_merges         = 0
0.00.281.212 I llm_load_print_meta: vocab_only       = 0
0.00.281.212 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.212 I llm_load_print_meta: n_embd           = 2048
0.00.281.213 I llm_load_print_meta: n_layer          = 18
0.00.281.224 I llm_load_print_meta: n_head           = 8
0.00.281.225 I llm_load_print_meta: n_head_kv        = 1
0.00.281.225 I llm_load_print_meta: n_rot            = 256
0.00.281.225 I llm_load_print_meta: n_swa            = 0
0.00.281.226 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.226 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.227 I llm_load_print_meta: n_gqa            = 8
0.00.281.228 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.229 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.230 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.231 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.232 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.232 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.233 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.233 I llm_load_print_meta: n_ff             = 16384
0.00.281.234 I llm_load_print_meta: n_expert         = 0
0.00.281.234 I llm_load_print_meta: n_expert_used    = 0
0.00.281.234 I llm_load_print_meta: causal attn      = 1
0.00.281.235 I llm_load_print_meta: pooling type     = 0
0.00.281.235 I llm_load_print_meta: rope type        = 2
0.00.281.235 I llm_load_print_meta: rope scaling     = linear
0.00.281.237 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.238 I llm_load_print_meta: freq_scale_train = 1
0.00.281.238 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.238 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.239 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.239 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.240 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.240 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.240 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.240 I llm_load_print_meta: model type       = 2B
0.00.281.241 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.281.242 I llm_load_print_meta: model params     = 2.51 B
0.00.281.243 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.281.243 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.244 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.244 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.244 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.245 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.245 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.245 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.246 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.246 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.247 I llm_load_print_meta: max token length = 93
0.00.340.564 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.345.745 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.751 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.751 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.752 I llama_new_context_with_model: n_batch       = 2048
0.00.345.752 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.752 I llama_new_context_with_model: flash_attn    = 0
0.00.345.754 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.755 I llama_new_context_with_model: freq_scale    = 1
0.00.345.756 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.391 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.405 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.496 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.748 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.754 I llama_new_context_with_model: graph nodes  = 601
0.00.361.755 I llama_new_context_with_model: graph splits = 1
0.00.361.756 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.887 I main: llama threadpool init, n_threads = 4
0.00.436.901 I 
0.00.436.975 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.436.978 I 
0.00.437.019 I sampler seed: 2027492847
0.00.437.030 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.437.033 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.437.035 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.437.037 I 
 maneupherically. [end of text]


0.00.687.565 I llama_perf_sampler_print:    sampling time =       0.75 ms /     6 runs   (    0.12 ms per token,  8042.90 tokens per second)
0.00.687.567 I llama_perf_context_print:        load time =     435.06 ms
0.00.687.568 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.687.569 I llama_perf_context_print:        eval time =     247.03 ms /     5 runs   (   49.41 ms per token,    20.24 tokens per second)
0.00.687.570 I llama_perf_context_print:       total time =     250.68 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.023s
user	8m9.175s
sys	0m6.944s
