+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.658 I build: 4082 (42eb364d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.001.905 I main: load the model and apply lora adapter, if any
0.00.024.872 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.883 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.998 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.013 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.019 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.027 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.030 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.032 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.033 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.035 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.037 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.047 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.052 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.054 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.057 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.059 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.067 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.432 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.122 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.132 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.133 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.134 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.136 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.137 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.138 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.142 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.143 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.144 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.145 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.273.146 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.155 I llama_model_loader: - type  f32:   37 tensors
0.00.273.158 I llama_model_loader: - type q8_0:  127 tensors
0.00.469.628 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.541.206 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.542.241 I llm_load_vocab: special tokens cache size = 5
0.00.643.591 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.643.668 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.643.669 I llm_load_print_meta: arch             = gemma
0.00.643.670 I llm_load_print_meta: vocab type       = SPM
0.00.643.671 I llm_load_print_meta: n_vocab          = 256000
0.00.643.674 I llm_load_print_meta: n_merges         = 0
0.00.643.675 I llm_load_print_meta: vocab_only       = 0
0.00.643.675 I llm_load_print_meta: n_ctx_train      = 8192
0.00.643.676 I llm_load_print_meta: n_embd           = 2048
0.00.643.676 I llm_load_print_meta: n_layer          = 18
0.00.643.746 I llm_load_print_meta: n_head           = 8
0.00.643.754 I llm_load_print_meta: n_head_kv        = 1
0.00.643.755 I llm_load_print_meta: n_rot            = 256
0.00.643.755 I llm_load_print_meta: n_swa            = 0
0.00.643.756 I llm_load_print_meta: n_embd_head_k    = 256
0.00.643.756 I llm_load_print_meta: n_embd_head_v    = 256
0.00.643.761 I llm_load_print_meta: n_gqa            = 8
0.00.643.765 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.643.770 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.643.771 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.643.773 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.643.773 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.643.774 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.643.774 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.643.779 I llm_load_print_meta: n_ff             = 16384
0.00.643.779 I llm_load_print_meta: n_expert         = 0
0.00.643.780 I llm_load_print_meta: n_expert_used    = 0
0.00.643.780 I llm_load_print_meta: causal attn      = 1
0.00.643.780 I llm_load_print_meta: pooling type     = 0
0.00.643.781 I llm_load_print_meta: rope type        = 2
0.00.643.781 I llm_load_print_meta: rope scaling     = linear
0.00.643.783 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.643.784 I llm_load_print_meta: freq_scale_train = 1
0.00.643.784 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.643.784 I llm_load_print_meta: rope_finetuned   = unknown
0.00.643.785 I llm_load_print_meta: ssm_d_conv       = 0
0.00.643.786 I llm_load_print_meta: ssm_d_inner      = 0
0.00.643.786 I llm_load_print_meta: ssm_d_state      = 0
0.00.643.814 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.643.815 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.643.816 I llm_load_print_meta: model type       = 2B
0.00.643.817 I llm_load_print_meta: model ftype      = Q8_0
0.00.643.818 I llm_load_print_meta: model params     = 2.51 B
0.00.643.828 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.643.828 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.643.829 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.643.830 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.643.830 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.643.831 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.643.839 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.643.840 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.643.847 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.643.848 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.643.849 I llm_load_print_meta: max token length = 93
0.00.745.296 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.745.308 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.745.309 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.745.310 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.745.310 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.745.311 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.751.267 I llama_new_context_with_model: n_seq_max     = 1
0.00.751.276 I llama_new_context_with_model: n_ctx         = 4096
0.00.751.277 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.751.277 I llama_new_context_with_model: n_batch       = 2048
0.00.751.278 I llama_new_context_with_model: n_ubatch      = 512
0.00.751.278 I llama_new_context_with_model: flash_attn    = 0
0.00.751.282 I llama_new_context_with_model: freq_base     = 10000.0
0.00.751.283 I llama_new_context_with_model: freq_scale    = 1
0.00.751.284 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.769.665 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.769.705 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.769.839 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.772.477 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.772.482 I llama_new_context_with_model: graph nodes  = 601
0.00.772.482 I llama_new_context_with_model: graph splits = 1
0.00.772.508 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.391.421 I main: llama threadpool init, n_threads = 4
0.01.391.437 I 
0.01.391.541 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.391.545 I 
0.01.391.776 I sampler seed: 3047020921
0.01.391.788 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.391.795 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.391.798 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.391.799 I 
 increasively, defying the law of diminishing returns.

The reason for its defiance is the peculiarity of its design. A fractal network, infinitely branching and intricately

0.14.896.748 I llama_perf_sampler_print:    sampling time =      49.39 ms /    33 runs   (    1.50 ms per token,   668.19 tokens per second)
0.14.896.752 I llama_perf_context_print:        load time =    1389.41 ms
0.14.896.754 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.896.756 I llama_perf_context_print:        eval time =   13414.32 ms /    32 runs   (  419.20 ms per token,     2.39 tokens per second)
0.14.896.758 I llama_perf_context_print:       total time =   13505.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 4082 (42eb364d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.001.916 I main: load the model and apply lora adapter, if any
0.00.024.591 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.694 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.709 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.713 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.719 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.721 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.723 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.724 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.726 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.727 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.738 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.742 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.743 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.744 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.745 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.177 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.346 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.929 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.939 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.941 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.942 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.943 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.945 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.946 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.949 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.950 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.952 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.953 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.271.954 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.962 I llama_model_loader: - type  f32:   37 tensors
0.00.271.964 I llama_model_loader: - type q8_0:  127 tensors
0.00.455.924 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.521.058 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.522.027 I llm_load_vocab: special tokens cache size = 5
0.00.623.368 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.441 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.442 I llm_load_print_meta: arch             = gemma
0.00.623.443 I llm_load_print_meta: vocab type       = SPM
0.00.623.444 I llm_load_print_meta: n_vocab          = 256000
0.00.623.447 I llm_load_print_meta: n_merges         = 0
0.00.623.447 I llm_load_print_meta: vocab_only       = 0
0.00.623.448 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.448 I llm_load_print_meta: n_embd           = 2048
0.00.623.449 I llm_load_print_meta: n_layer          = 18
0.00.623.516 I llm_load_print_meta: n_head           = 8
0.00.623.523 I llm_load_print_meta: n_head_kv        = 1
0.00.623.524 I llm_load_print_meta: n_rot            = 256
0.00.623.525 I llm_load_print_meta: n_swa            = 0
0.00.623.526 I llm_load_print_meta: n_embd_head_k    = 256
0.00.623.527 I llm_load_print_meta: n_embd_head_v    = 256
0.00.623.532 I llm_load_print_meta: n_gqa            = 8
0.00.623.537 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.623.542 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.623.544 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.623.546 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.623.546 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.623.547 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.623.547 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.623.552 I llm_load_print_meta: n_ff             = 16384
0.00.623.552 I llm_load_print_meta: n_expert         = 0
0.00.623.564 I llm_load_print_meta: n_expert_used    = 0
0.00.623.565 I llm_load_print_meta: causal attn      = 1
0.00.623.566 I llm_load_print_meta: pooling type     = 0
0.00.623.566 I llm_load_print_meta: rope type        = 2
0.00.623.567 I llm_load_print_meta: rope scaling     = linear
0.00.623.568 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.623.569 I llm_load_print_meta: freq_scale_train = 1
0.00.623.570 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.623.571 I llm_load_print_meta: rope_finetuned   = unknown
0.00.623.571 I llm_load_print_meta: ssm_d_conv       = 0
0.00.623.572 I llm_load_print_meta: ssm_d_inner      = 0
0.00.623.573 I llm_load_print_meta: ssm_d_state      = 0
0.00.623.573 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.623.573 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.623.574 I llm_load_print_meta: model type       = 2B
0.00.623.575 I llm_load_print_meta: model ftype      = Q8_0
0.00.623.575 I llm_load_print_meta: model params     = 2.51 B
0.00.623.585 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.623.586 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.623.586 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.623.593 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.623.594 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.623.594 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.623.595 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.623.596 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.623.601 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.623.603 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.623.603 I llm_load_print_meta: max token length = 93
0.00.721.441 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.727.590 I llama_new_context_with_model: n_seq_max     = 1
0.00.727.598 I llama_new_context_with_model: n_ctx         = 4096
0.00.727.599 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.727.599 I llama_new_context_with_model: n_batch       = 2048
0.00.727.599 I llama_new_context_with_model: n_ubatch      = 512
0.00.727.600 I llama_new_context_with_model: flash_attn    = 0
0.00.727.602 I llama_new_context_with_model: freq_base     = 10000.0
0.00.727.603 I llama_new_context_with_model: freq_scale    = 1
0.00.727.604 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.744.964 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.745.006 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.745.137 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.747.659 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.747.663 I llama_new_context_with_model: graph nodes  = 601
0.00.747.663 I llama_new_context_with_model: graph splits = 1
0.00.747.689 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.360.735 I main: llama threadpool init, n_threads = 4
0.01.360.751 I 
0.01.360.887 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.360.892 I 
0.01.361.131 I sampler seed: 2592010399
0.01.361.144 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.361.150 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.361.153 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.361.154 I 
 increasements, and other anti-aging treatments. [end of text]


0.06.000.505 I llama_perf_sampler_print:    sampling time =      17.01 ms /    12 runs   (    1.42 ms per token,   705.38 tokens per second)
0.06.000.519 I llama_perf_context_print:        load time =    1358.72 ms
0.06.000.521 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.000.522 I llama_perf_context_print:        eval time =    4607.14 ms /    11 runs   (  418.83 ms per token,     2.39 tokens per second)
0.06.000.523 I llama_perf_context_print:       total time =    4639.78 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4082 (42eb364d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.001.882 I main: load the model and apply lora adapter, if any
0.00.024.537 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.547 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.652 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.665 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.671 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.678 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.683 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.685 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.687 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.689 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.692 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.702 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.707 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.713 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.716 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.718 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.378 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.622 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.278.228 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.278.240 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.278.241 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.278.242 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.278.243 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.278.245 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.278.246 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.278.249 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.278.250 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.278.251 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.278.252 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.278.254 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.278.262 I llama_model_loader: - type  f32:   37 tensors
0.00.278.264 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.811 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.527.336 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.528.329 I llm_load_vocab: special tokens cache size = 5
0.00.624.917 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.987 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.989 I llm_load_print_meta: arch             = gemma
0.00.624.990 I llm_load_print_meta: vocab type       = SPM
0.00.624.991 I llm_load_print_meta: n_vocab          = 256000
0.00.624.994 I llm_load_print_meta: n_merges         = 0
0.00.624.994 I llm_load_print_meta: vocab_only       = 0
0.00.624.994 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.995 I llm_load_print_meta: n_embd           = 2048
0.00.624.995 I llm_load_print_meta: n_layer          = 18
0.00.625.062 I llm_load_print_meta: n_head           = 8
0.00.625.069 I llm_load_print_meta: n_head_kv        = 1
0.00.625.069 I llm_load_print_meta: n_rot            = 256
0.00.625.070 I llm_load_print_meta: n_swa            = 0
0.00.625.070 I llm_load_print_meta: n_embd_head_k    = 256
0.00.625.071 I llm_load_print_meta: n_embd_head_v    = 256
0.00.625.076 I llm_load_print_meta: n_gqa            = 8
0.00.625.080 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.625.085 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.625.086 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.625.088 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.625.088 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.625.089 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.625.089 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.625.094 I llm_load_print_meta: n_ff             = 16384
0.00.625.095 I llm_load_print_meta: n_expert         = 0
0.00.625.096 I llm_load_print_meta: n_expert_used    = 0
0.00.625.096 I llm_load_print_meta: causal attn      = 1
0.00.625.097 I llm_load_print_meta: pooling type     = 0
0.00.625.098 I llm_load_print_meta: rope type        = 2
0.00.625.098 I llm_load_print_meta: rope scaling     = linear
0.00.625.101 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.625.102 I llm_load_print_meta: freq_scale_train = 1
0.00.625.103 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.625.103 I llm_load_print_meta: rope_finetuned   = unknown
0.00.625.111 I llm_load_print_meta: ssm_d_conv       = 0
0.00.625.111 I llm_load_print_meta: ssm_d_inner      = 0
0.00.625.112 I llm_load_print_meta: ssm_d_state      = 0
0.00.625.112 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.625.113 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.625.114 I llm_load_print_meta: model type       = 2B
0.00.625.115 I llm_load_print_meta: model ftype      = Q8_0
0.00.625.116 I llm_load_print_meta: model params     = 2.51 B
0.00.625.128 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.625.129 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.625.130 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.625.134 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.625.134 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.625.135 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.625.136 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.625.137 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.625.144 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.625.146 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.625.147 I llm_load_print_meta: max token length = 93
0.00.708.212 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.708.221 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.708.222 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.708.222 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.708.223 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.708.224 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.714.325 I llama_new_context_with_model: n_seq_max     = 1
0.00.714.333 I llama_new_context_with_model: n_ctx         = 4096
0.00.714.334 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.714.334 I llama_new_context_with_model: n_batch       = 2048
0.00.714.334 I llama_new_context_with_model: n_ubatch      = 512
0.00.714.335 I llama_new_context_with_model: flash_attn    = 0
0.00.714.337 I llama_new_context_with_model: freq_base     = 10000.0
0.00.714.338 I llama_new_context_with_model: freq_scale    = 1
0.00.714.338 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.730.777 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.730.816 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.730.945 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.584 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.733.588 I llama_new_context_with_model: graph nodes  = 601
0.00.733.588 I llama_new_context_with_model: graph splits = 1
0.00.733.613 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.402.031 I main: llama threadpool init, n_threads = 4
0.01.402.048 I 
0.01.402.166 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.402.171 I 
0.01.402.410 I sampler seed: 3404259140
0.01.402.423 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.402.433 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.402.434 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.402.434 I 
 increably.

I'm not sure how to answer this question because it seems contradictory.

The question is asking me to write a response that is contradictory

0.14.957.964 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.74 tokens per second)
0.14.957.967 I llama_perf_context_print:        load time =    1400.05 ms
0.14.957.968 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.957.970 I llama_perf_context_print:        eval time =   13464.99 ms /    32 runs   (  420.78 ms per token,     2.38 tokens per second)
0.14.957.972 I llama_perf_context_print:       total time =   13555.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 4082 (42eb364d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.822 I main: llama backend init
0.00.001.844 I main: load the model and apply lora adapter, if any
0.00.024.203 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.213 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.297 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.308 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.312 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.318 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.319 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.321 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.322 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.331 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.334 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.342 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.351 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.355 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.357 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.358 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.322 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.221 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.855 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.863 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.865 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.866 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.867 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.868 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.870 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.873 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.874 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.876 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.876 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.878 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.886 I llama_model_loader: - type  f32:   37 tensors
0.00.271.889 I llama_model_loader: - type q8_0:  127 tensors
0.00.457.134 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.988 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.976 I llm_load_vocab: special tokens cache size = 5
0.00.617.008 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.081 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.082 I llm_load_print_meta: arch             = gemma
0.00.617.083 I llm_load_print_meta: vocab type       = SPM
0.00.617.083 I llm_load_print_meta: n_vocab          = 256000
0.00.617.086 I llm_load_print_meta: n_merges         = 0
0.00.617.087 I llm_load_print_meta: vocab_only       = 0
0.00.617.087 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.087 I llm_load_print_meta: n_embd           = 2048
0.00.617.088 I llm_load_print_meta: n_layer          = 18
0.00.617.155 I llm_load_print_meta: n_head           = 8
0.00.617.163 I llm_load_print_meta: n_head_kv        = 1
0.00.617.164 I llm_load_print_meta: n_rot            = 256
0.00.617.164 I llm_load_print_meta: n_swa            = 0
0.00.617.165 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.165 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.170 I llm_load_print_meta: n_gqa            = 8
0.00.617.174 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.198 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.200 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.202 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.202 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.203 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.204 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.219 I llm_load_print_meta: n_ff             = 16384
0.00.617.220 I llm_load_print_meta: n_expert         = 0
0.00.617.221 I llm_load_print_meta: n_expert_used    = 0
0.00.617.221 I llm_load_print_meta: causal attn      = 1
0.00.617.222 I llm_load_print_meta: pooling type     = 0
0.00.617.222 I llm_load_print_meta: rope type        = 2
0.00.617.227 I llm_load_print_meta: rope scaling     = linear
0.00.617.228 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.237 I llm_load_print_meta: freq_scale_train = 1
0.00.617.238 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.238 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.238 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.246 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.247 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.248 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.248 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.249 I llm_load_print_meta: model type       = 2B
0.00.617.250 I llm_load_print_meta: model ftype      = Q8_0
0.00.617.251 I llm_load_print_meta: model params     = 2.51 B
0.00.617.259 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.617.260 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.261 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.261 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.262 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.262 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.270 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.271 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.284 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.286 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.286 I llm_load_print_meta: max token length = 93
0.00.690.120 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.690.132 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.696.085 I llama_new_context_with_model: n_seq_max     = 1
0.00.696.093 I llama_new_context_with_model: n_ctx         = 4096
0.00.696.093 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.696.094 I llama_new_context_with_model: n_batch       = 2048
0.00.696.095 I llama_new_context_with_model: n_ubatch      = 512
0.00.696.095 I llama_new_context_with_model: flash_attn    = 0
0.00.696.098 I llama_new_context_with_model: freq_base     = 10000.0
0.00.696.099 I llama_new_context_with_model: freq_scale    = 1
0.00.696.099 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.712.945 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.712.984 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.713.111 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.715.783 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.715.787 I llama_new_context_with_model: graph nodes  = 601
0.00.715.787 I llama_new_context_with_model: graph splits = 1
0.00.715.814 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.325.531 I main: llama threadpool init, n_threads = 4
0.01.325.550 I 
0.01.325.659 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.325.663 I 
0.01.325.900 I sampler seed: 2772843484
0.01.325.912 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.325.929 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.325.930 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.325.940 I 
 increably. [end of text]


0.03.018.928 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   798.47 tokens per second)
0.03.018.943 I llama_perf_context_print:        load time =    1323.59 ms
0.03.018.945 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.018.946 I llama_perf_context_print:        eval time =    1680.14 ms /     4 runs   (  420.04 ms per token,     2.38 tokens per second)
0.03.018.947 I llama_perf_context_print:       total time =    1693.41 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m48.692s
user	2m26.601s
sys	0m9.546s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4082 (42eb364d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185620.40 ms
main:    total time = 185620.40 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 4082 (42eb364d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.001.894 I main: load the model and apply lora adapter, if any
0.00.024.478 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.487 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.579 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.590 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.592 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.597 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.601 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.602 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.603 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.604 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.605 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.611 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.612 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.613 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.615 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.616 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.231 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.289 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.919 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.929 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.930 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.931 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.932 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.933 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.934 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.946 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.948 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.949 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.950 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.952 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.961 I llama_model_loader: - type  f32:   37 tensors
0.00.271.964 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.964 I llama_model_loader: - type q6_K:   19 tensors
0.00.450.079 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.693 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.677 I llm_load_vocab: special tokens cache size = 5
0.00.612.203 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.273 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.274 I llm_load_print_meta: arch             = gemma
0.00.612.275 I llm_load_print_meta: vocab type       = SPM
0.00.612.276 I llm_load_print_meta: n_vocab          = 256000
0.00.612.278 I llm_load_print_meta: n_merges         = 0
0.00.612.279 I llm_load_print_meta: vocab_only       = 0
0.00.612.279 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.279 I llm_load_print_meta: n_embd           = 2048
0.00.612.280 I llm_load_print_meta: n_layer          = 18
0.00.612.345 I llm_load_print_meta: n_head           = 8
0.00.612.352 I llm_load_print_meta: n_head_kv        = 1
0.00.612.353 I llm_load_print_meta: n_rot            = 256
0.00.612.353 I llm_load_print_meta: n_swa            = 0
0.00.612.354 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.354 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.359 I llm_load_print_meta: n_gqa            = 8
0.00.612.364 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.369 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.371 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.373 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.374 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.374 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.374 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.379 I llm_load_print_meta: n_ff             = 16384
0.00.612.380 I llm_load_print_meta: n_expert         = 0
0.00.612.380 I llm_load_print_meta: n_expert_used    = 0
0.00.612.381 I llm_load_print_meta: causal attn      = 1
0.00.612.382 I llm_load_print_meta: pooling type     = 0
0.00.612.382 I llm_load_print_meta: rope type        = 2
0.00.612.383 I llm_load_print_meta: rope scaling     = linear
0.00.612.385 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.385 I llm_load_print_meta: freq_scale_train = 1
0.00.612.398 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.398 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.399 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.410 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.411 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.419 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.424 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.424 I llm_load_print_meta: model type       = 2B
0.00.612.426 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.612.427 I llm_load_print_meta: model params     = 2.51 B
0.00.612.437 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.612.437 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.438 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.439 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.440 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.447 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.448 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.449 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.455 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.456 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.457 I llm_load_print_meta: max token length = 93
0.00.675.534 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.675.545 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.675.546 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.675.546 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.675.547 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.675.548 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.681.355 I llama_new_context_with_model: n_seq_max     = 1
0.00.681.362 I llama_new_context_with_model: n_ctx         = 4096
0.00.681.362 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.681.363 I llama_new_context_with_model: n_batch       = 2048
0.00.681.363 I llama_new_context_with_model: n_ubatch      = 512
0.00.681.364 I llama_new_context_with_model: flash_attn    = 0
0.00.681.367 I llama_new_context_with_model: freq_base     = 10000.0
0.00.681.367 I llama_new_context_with_model: freq_scale    = 1
0.00.681.368 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.698.083 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.698.122 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.698.248 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.700.846 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.700.850 I llama_new_context_with_model: graph nodes  = 601
0.00.700.851 I llama_new_context_with_model: graph splits = 1
0.00.700.876 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.291.197 I main: llama threadpool init, n_threads = 4
0.01.291.214 I 
0.01.291.324 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.291.328 I 
0.01.291.564 I sampler seed: 1024234714
0.01.291.577 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.291.584 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.291.587 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.291.588 I 
 increamically.

I am unable to answer the question as I am unable to generate text that is sexually suggestive in nature. [end of text]


0.10.336.077 I llama_perf_sampler_print:    sampling time =      40.00 ms /    27 runs   (    1.48 ms per token,   674.95 tokens per second)
0.10.336.080 I llama_perf_context_print:        load time =    1289.21 ms
0.10.336.104 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.336.106 I llama_perf_context_print:        eval time =    8970.35 ms /    26 runs   (  345.01 ms per token,     2.90 tokens per second)
0.10.336.107 I llama_perf_context_print:       total time =    9044.89 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4082 (42eb364d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185504.69 ms
main:    total time = 185504.69 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.676 I build: 4082 (42eb364d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.001.901 I main: load the model and apply lora adapter, if any
0.00.024.245 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.351 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.366 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.368 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.375 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.379 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.380 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.381 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.382 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.383 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.390 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.391 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.392 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.393 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.394 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.558 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.297 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.280.918 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.280.928 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.280.930 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.280.931 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.280.932 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.280.933 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.280.934 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.280.938 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.280.939 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.280.948 I llama_model_loader: - type  f32:   37 tensors
0.00.280.951 I llama_model_loader: - type q4_K:  108 tensors
0.00.280.951 I llama_model_loader: - type q6_K:   19 tensors
0.00.471.356 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.544.082 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.545.109 I llm_load_vocab: special tokens cache size = 5
0.00.642.113 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.642.184 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.642.185 I llm_load_print_meta: arch             = gemma
0.00.642.186 I llm_load_print_meta: vocab type       = SPM
0.00.642.187 I llm_load_print_meta: n_vocab          = 256000
0.00.642.189 I llm_load_print_meta: n_merges         = 0
0.00.642.190 I llm_load_print_meta: vocab_only       = 0
0.00.642.190 I llm_load_print_meta: n_ctx_train      = 8192
0.00.642.191 I llm_load_print_meta: n_embd           = 2048
0.00.642.191 I llm_load_print_meta: n_layer          = 18
0.00.642.257 I llm_load_print_meta: n_head           = 8
0.00.642.264 I llm_load_print_meta: n_head_kv        = 1
0.00.642.264 I llm_load_print_meta: n_rot            = 256
0.00.642.265 I llm_load_print_meta: n_swa            = 0
0.00.642.265 I llm_load_print_meta: n_embd_head_k    = 256
0.00.642.265 I llm_load_print_meta: n_embd_head_v    = 256
0.00.642.270 I llm_load_print_meta: n_gqa            = 8
0.00.642.275 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.642.280 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.642.281 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.642.282 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.642.283 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.642.283 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.642.283 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.642.288 I llm_load_print_meta: n_ff             = 16384
0.00.642.289 I llm_load_print_meta: n_expert         = 0
0.00.642.289 I llm_load_print_meta: n_expert_used    = 0
0.00.642.289 I llm_load_print_meta: causal attn      = 1
0.00.642.289 I llm_load_print_meta: pooling type     = 0
0.00.642.290 I llm_load_print_meta: rope type        = 2
0.00.642.290 I llm_load_print_meta: rope scaling     = linear
0.00.642.291 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.642.292 I llm_load_print_meta: freq_scale_train = 1
0.00.642.292 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.642.293 I llm_load_print_meta: rope_finetuned   = unknown
0.00.642.293 I llm_load_print_meta: ssm_d_conv       = 0
0.00.642.293 I llm_load_print_meta: ssm_d_inner      = 0
0.00.642.294 I llm_load_print_meta: ssm_d_state      = 0
0.00.642.294 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.642.294 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.642.295 I llm_load_print_meta: model type       = 2B
0.00.642.296 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.642.296 I llm_load_print_meta: model params     = 2.51 B
0.00.642.306 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.642.307 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.642.308 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.642.308 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.642.308 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.642.309 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.642.309 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.642.310 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.642.315 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.642.316 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.642.316 I llm_load_print_meta: max token length = 93
0.00.700.985 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.706.805 I llama_new_context_with_model: n_seq_max     = 1
0.00.706.812 I llama_new_context_with_model: n_ctx         = 4096
0.00.706.813 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.706.813 I llama_new_context_with_model: n_batch       = 2048
0.00.706.813 I llama_new_context_with_model: n_ubatch      = 512
0.00.706.814 I llama_new_context_with_model: flash_attn    = 0
0.00.706.817 I llama_new_context_with_model: freq_base     = 10000.0
0.00.706.818 I llama_new_context_with_model: freq_scale    = 1
0.00.706.819 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.723.907 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.723.949 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.724.078 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.662 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.726.666 I llama_new_context_with_model: graph nodes  = 601
0.00.726.667 I llama_new_context_with_model: graph splits = 1
0.00.726.692 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.313.889 I main: llama threadpool init, n_threads = 4
0.01.313.906 I 
0.01.314.014 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.314.018 I 
0.01.314.251 I sampler seed: 2665071789
0.01.314.263 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.314.270 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.314.273 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.314.274 I 
 squaRED TEXT

I am unable to provide assistance with questions or tasks that may facilitate harmful or unsafe activities. [end of text]


0.09.327.777 I llama_perf_sampler_print:    sampling time =      35.40 ms /    24 runs   (    1.47 ms per token,   678.02 tokens per second)
0.09.327.792 I llama_perf_context_print:        load time =    1311.89 ms
0.09.327.794 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.327.796 I llama_perf_context_print:        eval time =    7948.28 ms /    23 runs   (  345.58 ms per token,     2.89 tokens per second)
0.09.327.797 I llama_perf_context_print:       total time =    8013.90 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m33.772s
user	46m19.956s
sys	0m6.388s
