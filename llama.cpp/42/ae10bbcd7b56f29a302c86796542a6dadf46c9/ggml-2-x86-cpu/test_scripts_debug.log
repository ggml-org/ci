+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.706 I build: 4138 (42ae10bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.912 I main: llama backend init
0.00.000.921 I main: load the model and apply lora adapter, if any
0.00.023.926 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.937 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.037 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.051 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.052 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.060 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.064 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.065 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.066 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.067 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.068 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.075 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.076 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.077 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.078 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.080 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.342 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.857 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.992 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.003 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.004 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.005 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.006 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.008 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.009 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.013 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.014 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.015 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.016 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.017 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.025 I llama_model_loader: - type  f32:   37 tensors
0.00.271.028 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.649 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.538.206 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.539.195 I llm_load_vocab: special tokens cache size = 5
0.00.635.213 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.635.288 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.635.289 I llm_load_print_meta: arch             = gemma
0.00.635.290 I llm_load_print_meta: vocab type       = SPM
0.00.635.291 I llm_load_print_meta: n_vocab          = 256000
0.00.635.293 I llm_load_print_meta: n_merges         = 0
0.00.635.294 I llm_load_print_meta: vocab_only       = 0
0.00.635.294 I llm_load_print_meta: n_ctx_train      = 8192
0.00.635.295 I llm_load_print_meta: n_embd           = 2048
0.00.635.295 I llm_load_print_meta: n_layer          = 18
0.00.635.385 I llm_load_print_meta: n_head           = 8
0.00.635.394 I llm_load_print_meta: n_head_kv        = 1
0.00.635.395 I llm_load_print_meta: n_rot            = 256
0.00.635.395 I llm_load_print_meta: n_swa            = 0
0.00.635.395 I llm_load_print_meta: n_embd_head_k    = 256
0.00.635.396 I llm_load_print_meta: n_embd_head_v    = 256
0.00.635.401 I llm_load_print_meta: n_gqa            = 8
0.00.635.406 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.635.417 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.635.418 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.635.420 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.635.420 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.635.421 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.635.422 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.635.426 I llm_load_print_meta: n_ff             = 16384
0.00.635.427 I llm_load_print_meta: n_expert         = 0
0.00.635.427 I llm_load_print_meta: n_expert_used    = 0
0.00.635.436 I llm_load_print_meta: causal attn      = 1
0.00.635.439 I llm_load_print_meta: pooling type     = 0
0.00.635.440 I llm_load_print_meta: rope type        = 2
0.00.635.440 I llm_load_print_meta: rope scaling     = linear
0.00.635.441 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.635.442 I llm_load_print_meta: freq_scale_train = 1
0.00.635.442 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.635.443 I llm_load_print_meta: rope_finetuned   = unknown
0.00.635.443 I llm_load_print_meta: ssm_d_conv       = 0
0.00.635.443 I llm_load_print_meta: ssm_d_inner      = 0
0.00.635.444 I llm_load_print_meta: ssm_d_state      = 0
0.00.635.444 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.635.444 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.635.446 I llm_load_print_meta: model type       = 2B
0.00.635.447 I llm_load_print_meta: model ftype      = Q8_0
0.00.635.448 I llm_load_print_meta: model params     = 2.51 B
0.00.635.458 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.635.458 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.635.466 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.635.467 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.635.468 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.635.469 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.635.471 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.635.472 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.635.478 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.635.488 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.635.496 I llm_load_print_meta: max token length = 93
0.00.735.491 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.735.502 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.735.503 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.735.504 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.735.505 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.735.505 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.741.476 I llama_new_context_with_model: n_seq_max     = 1
0.00.741.485 I llama_new_context_with_model: n_ctx         = 4096
0.00.741.486 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.741.486 I llama_new_context_with_model: n_batch       = 2048
0.00.741.487 I llama_new_context_with_model: n_ubatch      = 512
0.00.741.488 I llama_new_context_with_model: flash_attn    = 0
0.00.741.491 I llama_new_context_with_model: freq_base     = 10000.0
0.00.741.492 I llama_new_context_with_model: freq_scale    = 1
0.00.741.492 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.756.466 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.756.510 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.756.634 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.759.226 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.759.230 I llama_new_context_with_model: graph nodes  = 601
0.00.759.230 I llama_new_context_with_model: graph splits = 1
0.00.759.255 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.366.061 I main: llama threadpool init, n_threads = 4
0.01.366.077 I 
0.01.366.185 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.366.185 I 
0.01.366.422 I sampler seed: 2151071952
0.01.366.437 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.366.444 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.366.448 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.366.448 I 
 increasities to the court, accusing them of misconduct and abusing their powers.

**Background:**

* The court has been criticized for its handling of cases involving

0.14.819.176 I llama_perf_sampler_print:    sampling time =      49.36 ms /    33 runs   (    1.50 ms per token,   668.56 tokens per second)
0.14.819.181 I llama_perf_context_print:        load time =    1365.03 ms
0.14.819.183 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.819.185 I llama_perf_context_print:        eval time =   13362.72 ms /    32 runs   (  417.58 ms per token,     2.39 tokens per second)
0.14.819.186 I llama_perf_context_print:       total time =   13453.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 4138 (42ae10bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.887 I main: llama backend init
0.00.000.895 I main: load the model and apply lora adapter, if any
0.00.023.604 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.720 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.738 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.744 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.751 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.757 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.758 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.760 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.762 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.764 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.774 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.779 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.781 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.783 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.791 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.017 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.834 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.003 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.013 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.015 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.016 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.017 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.018 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.019 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.024 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.025 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.026 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.027 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.271.028 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.037 I llama_model_loader: - type  f32:   37 tensors
0.00.271.039 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.221 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.059 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.142 I llm_load_vocab: special tokens cache size = 5
0.00.620.525 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.620.601 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.620.601 I llm_load_print_meta: arch             = gemma
0.00.620.602 I llm_load_print_meta: vocab type       = SPM
0.00.620.603 I llm_load_print_meta: n_vocab          = 256000
0.00.620.606 I llm_load_print_meta: n_merges         = 0
0.00.620.606 I llm_load_print_meta: vocab_only       = 0
0.00.620.607 I llm_load_print_meta: n_ctx_train      = 8192
0.00.620.607 I llm_load_print_meta: n_embd           = 2048
0.00.620.607 I llm_load_print_meta: n_layer          = 18
0.00.620.672 I llm_load_print_meta: n_head           = 8
0.00.620.679 I llm_load_print_meta: n_head_kv        = 1
0.00.620.679 I llm_load_print_meta: n_rot            = 256
0.00.620.680 I llm_load_print_meta: n_swa            = 0
0.00.620.680 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.681 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.686 I llm_load_print_meta: n_gqa            = 8
0.00.620.690 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.695 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.696 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.697 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.697 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.698 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.698 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.704 I llm_load_print_meta: n_ff             = 16384
0.00.620.704 I llm_load_print_meta: n_expert         = 0
0.00.620.705 I llm_load_print_meta: n_expert_used    = 0
0.00.620.705 I llm_load_print_meta: causal attn      = 1
0.00.620.706 I llm_load_print_meta: pooling type     = 0
0.00.620.707 I llm_load_print_meta: rope type        = 2
0.00.620.713 I llm_load_print_meta: rope scaling     = linear
0.00.620.715 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.716 I llm_load_print_meta: freq_scale_train = 1
0.00.620.717 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.717 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.718 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.720 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.721 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.732 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.733 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.734 I llm_load_print_meta: model type       = 2B
0.00.620.736 I llm_load_print_meta: model ftype      = Q8_0
0.00.620.737 I llm_load_print_meta: model params     = 2.51 B
0.00.620.747 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.620.747 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.763 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.772 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.777 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.777 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.778 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.779 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.786 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.791 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.792 I llm_load_print_meta: max token length = 93
0.00.714.616 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.720.911 I llama_new_context_with_model: n_seq_max     = 1
0.00.720.920 I llama_new_context_with_model: n_ctx         = 4096
0.00.720.921 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.720.921 I llama_new_context_with_model: n_batch       = 2048
0.00.720.922 I llama_new_context_with_model: n_ubatch      = 512
0.00.720.922 I llama_new_context_with_model: flash_attn    = 0
0.00.720.927 I llama_new_context_with_model: freq_base     = 10000.0
0.00.720.928 I llama_new_context_with_model: freq_scale    = 1
0.00.720.929 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.736.571 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.736.615 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.736.743 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.329 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.739.333 I llama_new_context_with_model: graph nodes  = 601
0.00.739.333 I llama_new_context_with_model: graph splits = 1
0.00.739.358 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.347.532 I main: llama threadpool init, n_threads = 4
0.01.347.547 I 
0.01.347.675 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.347.679 I 
0.01.347.917 I sampler seed: 1543960180
0.01.347.930 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.347.938 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.347.943 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.347.943 I 
 increably.

I am unable to locate any information regarding this particular phrase. It appears to be a made-up expression. [end of text]


0.12.800.222 I llama_perf_sampler_print:    sampling time =      41.55 ms /    28 runs   (    1.48 ms per token,   673.84 tokens per second)
0.12.800.237 I llama_perf_context_print:        load time =    1346.54 ms
0.12.800.239 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.800.240 I llama_perf_context_print:        eval time =   11376.22 ms /    27 runs   (  421.34 ms per token,     2.37 tokens per second)
0.12.800.241 I llama_perf_context_print:       total time =   11452.70 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.688 I build: 4138 (42ae10bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.900 I main: llama backend init
0.00.000.909 I main: load the model and apply lora adapter, if any
0.00.023.636 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.649 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.746 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.760 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.765 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.771 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.775 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.776 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.777 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.778 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.780 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.789 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.790 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.791 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.793 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.794 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.092 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.673 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.915 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.927 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.928 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.929 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.930 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.931 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.942 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.946 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.947 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.948 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.962 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.271.964 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.975 I llama_model_loader: - type  f32:   37 tensors
0.00.271.980 I llama_model_loader: - type q8_0:  127 tensors
0.00.477.256 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.547.118 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.548.122 I llm_load_vocab: special tokens cache size = 5
0.00.661.770 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.661.848 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.661.853 I llm_load_print_meta: arch             = gemma
0.00.661.853 I llm_load_print_meta: vocab type       = SPM
0.00.661.854 I llm_load_print_meta: n_vocab          = 256000
0.00.661.857 I llm_load_print_meta: n_merges         = 0
0.00.661.857 I llm_load_print_meta: vocab_only       = 0
0.00.661.858 I llm_load_print_meta: n_ctx_train      = 8192
0.00.661.869 I llm_load_print_meta: n_embd           = 2048
0.00.661.870 I llm_load_print_meta: n_layer          = 18
0.00.661.937 I llm_load_print_meta: n_head           = 8
0.00.661.947 I llm_load_print_meta: n_head_kv        = 1
0.00.661.948 I llm_load_print_meta: n_rot            = 256
0.00.661.964 I llm_load_print_meta: n_swa            = 0
0.00.661.967 I llm_load_print_meta: n_embd_head_k    = 256
0.00.661.967 I llm_load_print_meta: n_embd_head_v    = 256
0.00.661.973 I llm_load_print_meta: n_gqa            = 8
0.00.661.977 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.661.982 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.661.985 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.661.987 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.661.987 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.661.987 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.661.988 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.661.993 I llm_load_print_meta: n_ff             = 16384
0.00.661.994 I llm_load_print_meta: n_expert         = 0
0.00.661.995 I llm_load_print_meta: n_expert_used    = 0
0.00.661.995 I llm_load_print_meta: causal attn      = 1
0.00.661.996 I llm_load_print_meta: pooling type     = 0
0.00.661.996 I llm_load_print_meta: rope type        = 2
0.00.661.997 I llm_load_print_meta: rope scaling     = linear
0.00.661.999 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.662.000 I llm_load_print_meta: freq_scale_train = 1
0.00.662.000 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.662.001 I llm_load_print_meta: rope_finetuned   = unknown
0.00.662.001 I llm_load_print_meta: ssm_d_conv       = 0
0.00.662.002 I llm_load_print_meta: ssm_d_inner      = 0
0.00.662.002 I llm_load_print_meta: ssm_d_state      = 0
0.00.662.002 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.662.003 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.662.011 I llm_load_print_meta: model type       = 2B
0.00.662.013 I llm_load_print_meta: model ftype      = Q8_0
0.00.662.014 I llm_load_print_meta: model params     = 2.51 B
0.00.662.023 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.662.023 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.662.026 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.662.027 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.662.027 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.662.028 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.662.028 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.662.035 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.662.041 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.662.043 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.662.043 I llm_load_print_meta: max token length = 93
0.00.739.299 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.739.308 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.739.309 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.739.310 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.739.310 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.739.311 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.745.497 I llama_new_context_with_model: n_seq_max     = 1
0.00.745.506 I llama_new_context_with_model: n_ctx         = 4096
0.00.745.506 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.745.507 I llama_new_context_with_model: n_batch       = 2048
0.00.745.507 I llama_new_context_with_model: n_ubatch      = 512
0.00.745.508 I llama_new_context_with_model: flash_attn    = 0
0.00.745.511 I llama_new_context_with_model: freq_base     = 10000.0
0.00.745.512 I llama_new_context_with_model: freq_scale    = 1
0.00.745.512 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.760.962 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.761.007 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.761.132 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.763.668 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.763.671 I llama_new_context_with_model: graph nodes  = 601
0.00.763.672 I llama_new_context_with_model: graph splits = 1
0.00.763.695 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.401.704 I main: llama threadpool init, n_threads = 4
0.01.401.720 I 
0.01.401.835 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.401.840 I 
0.01.402.076 I sampler seed: 3118706847
0.01.402.089 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.402.095 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.402.099 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.402.100 I 
 increasively.

I'm so tired of the monotony of daily life. I yearn for a spark of excitement and adventure. What would you suggest?



0.14.960.580 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.37 tokens per second)
0.14.960.584 I llama_perf_context_print:        load time =    1400.70 ms
0.14.960.585 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.960.587 I llama_perf_context_print:        eval time =   13468.83 ms /    32 runs   (  420.90 ms per token,     2.38 tokens per second)
0.14.960.588 I llama_perf_context_print:       total time =   13558.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.678 I build: 4138 (42ae10bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.912 I main: llama backend init
0.00.000.921 I main: load the model and apply lora adapter, if any
0.00.025.289 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.302 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.407 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.421 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.422 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.428 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.433 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.435 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.437 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.439 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.441 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.456 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.462 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.466 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.468 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.469 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.259 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.981 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.096 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.107 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.108 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.110 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.111 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.112 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.113 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.117 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.118 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.119 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.120 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.122 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.132 I llama_model_loader: - type  f32:   37 tensors
0.00.271.135 I llama_model_loader: - type q8_0:  127 tensors
0.00.460.332 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.780 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.789 I llm_load_vocab: special tokens cache size = 5
0.00.644.497 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.644.570 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.644.571 I llm_load_print_meta: arch             = gemma
0.00.644.572 I llm_load_print_meta: vocab type       = SPM
0.00.644.574 I llm_load_print_meta: n_vocab          = 256000
0.00.644.576 I llm_load_print_meta: n_merges         = 0
0.00.644.576 I llm_load_print_meta: vocab_only       = 0
0.00.644.577 I llm_load_print_meta: n_ctx_train      = 8192
0.00.644.577 I llm_load_print_meta: n_embd           = 2048
0.00.644.577 I llm_load_print_meta: n_layer          = 18
0.00.644.642 I llm_load_print_meta: n_head           = 8
0.00.644.649 I llm_load_print_meta: n_head_kv        = 1
0.00.644.650 I llm_load_print_meta: n_rot            = 256
0.00.644.650 I llm_load_print_meta: n_swa            = 0
0.00.644.650 I llm_load_print_meta: n_embd_head_k    = 256
0.00.644.650 I llm_load_print_meta: n_embd_head_v    = 256
0.00.644.655 I llm_load_print_meta: n_gqa            = 8
0.00.644.660 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.644.664 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.644.666 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.644.668 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.644.669 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.644.669 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.644.670 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.644.676 I llm_load_print_meta: n_ff             = 16384
0.00.644.677 I llm_load_print_meta: n_expert         = 0
0.00.644.677 I llm_load_print_meta: n_expert_used    = 0
0.00.644.677 I llm_load_print_meta: causal attn      = 1
0.00.644.679 I llm_load_print_meta: pooling type     = 0
0.00.644.679 I llm_load_print_meta: rope type        = 2
0.00.644.680 I llm_load_print_meta: rope scaling     = linear
0.00.644.681 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.644.682 I llm_load_print_meta: freq_scale_train = 1
0.00.644.682 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.644.683 I llm_load_print_meta: rope_finetuned   = unknown
0.00.644.683 I llm_load_print_meta: ssm_d_conv       = 0
0.00.644.683 I llm_load_print_meta: ssm_d_inner      = 0
0.00.644.684 I llm_load_print_meta: ssm_d_state      = 0
0.00.644.684 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.644.684 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.644.685 I llm_load_print_meta: model type       = 2B
0.00.644.686 I llm_load_print_meta: model ftype      = Q8_0
0.00.644.687 I llm_load_print_meta: model params     = 2.51 B
0.00.644.696 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.644.697 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.644.698 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.644.699 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.644.699 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.644.711 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.644.712 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.644.713 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.644.719 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.644.721 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.644.722 I llm_load_print_meta: max token length = 93
0.00.717.245 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.717.256 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.723.398 I llama_new_context_with_model: n_seq_max     = 1
0.00.723.405 I llama_new_context_with_model: n_ctx         = 4096
0.00.723.406 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.723.406 I llama_new_context_with_model: n_batch       = 2048
0.00.723.406 I llama_new_context_with_model: n_ubatch      = 512
0.00.723.407 I llama_new_context_with_model: flash_attn    = 0
0.00.723.410 I llama_new_context_with_model: freq_base     = 10000.0
0.00.723.410 I llama_new_context_with_model: freq_scale    = 1
0.00.723.411 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.738.500 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.738.547 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.738.678 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.741.218 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.741.222 I llama_new_context_with_model: graph nodes  = 601
0.00.741.223 I llama_new_context_with_model: graph splits = 1
0.00.741.247 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.348.967 I main: llama threadpool init, n_threads = 4
0.01.348.983 I 
0.01.349.105 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.349.110 I 
0.01.349.350 I sampler seed: 876216604
0.01.349.363 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.349.372 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.349.373 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.349.373 I 
 increasively:

1. I
2. II
3. IIII
4. XXXX
5. XXXXXX

The pattern seems to be increasing

0.14.860.827 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.51 tokens per second)
0.14.860.831 I llama_perf_context_print:        load time =    1347.94 ms
0.14.860.832 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.860.833 I llama_perf_context_print:        eval time =   13421.22 ms /    32 runs   (  419.41 ms per token,     2.38 tokens per second)
0.14.860.857 I llama_perf_context_print:       total time =   13511.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m7.277s
user	3m40.855s
sys	0m9.505s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4138 (42ae10bb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186980.81 ms
main:    total time = 186980.81 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.701 I build: 4138 (42ae10bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.911 I main: llama backend init
0.00.000.920 I main: load the model and apply lora adapter, if any
0.00.023.681 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.697 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.799 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.811 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.813 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.819 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.824 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.825 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.826 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.827 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.828 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.841 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.842 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.844 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.845 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.846 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.277 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.004 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.353 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.363 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.364 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.366 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.366 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.368 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.369 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.373 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.374 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.375 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.376 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.377 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.386 I llama_model_loader: - type  f32:   37 tensors
0.00.271.388 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.389 I llama_model_loader: - type q6_K:   19 tensors
0.00.459.303 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.531.183 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.532.191 I llm_load_vocab: special tokens cache size = 5
0.00.641.942 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.642.014 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.642.015 I llm_load_print_meta: arch             = gemma
0.00.642.016 I llm_load_print_meta: vocab type       = SPM
0.00.642.016 I llm_load_print_meta: n_vocab          = 256000
0.00.642.019 I llm_load_print_meta: n_merges         = 0
0.00.642.020 I llm_load_print_meta: vocab_only       = 0
0.00.642.020 I llm_load_print_meta: n_ctx_train      = 8192
0.00.642.020 I llm_load_print_meta: n_embd           = 2048
0.00.642.021 I llm_load_print_meta: n_layer          = 18
0.00.642.088 I llm_load_print_meta: n_head           = 8
0.00.642.095 I llm_load_print_meta: n_head_kv        = 1
0.00.642.095 I llm_load_print_meta: n_rot            = 256
0.00.642.096 I llm_load_print_meta: n_swa            = 0
0.00.642.096 I llm_load_print_meta: n_embd_head_k    = 256
0.00.642.096 I llm_load_print_meta: n_embd_head_v    = 256
0.00.642.101 I llm_load_print_meta: n_gqa            = 8
0.00.642.105 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.642.110 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.642.112 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.642.113 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.642.114 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.642.114 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.642.115 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.642.119 I llm_load_print_meta: n_ff             = 16384
0.00.642.120 I llm_load_print_meta: n_expert         = 0
0.00.642.120 I llm_load_print_meta: n_expert_used    = 0
0.00.642.121 I llm_load_print_meta: causal attn      = 1
0.00.642.121 I llm_load_print_meta: pooling type     = 0
0.00.642.121 I llm_load_print_meta: rope type        = 2
0.00.642.122 I llm_load_print_meta: rope scaling     = linear
0.00.642.123 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.642.124 I llm_load_print_meta: freq_scale_train = 1
0.00.642.124 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.642.124 I llm_load_print_meta: rope_finetuned   = unknown
0.00.642.125 I llm_load_print_meta: ssm_d_conv       = 0
0.00.642.125 I llm_load_print_meta: ssm_d_inner      = 0
0.00.642.125 I llm_load_print_meta: ssm_d_state      = 0
0.00.642.126 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.642.126 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.642.127 I llm_load_print_meta: model type       = 2B
0.00.642.128 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.642.128 I llm_load_print_meta: model params     = 2.51 B
0.00.642.140 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.642.141 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.642.142 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.642.143 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.642.143 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.642.143 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.642.144 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.642.144 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.642.152 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.642.153 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.642.154 I llm_load_print_meta: max token length = 93
0.00.703.905 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.703.916 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.703.916 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.703.917 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.703.918 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.703.918 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.712.842 I llama_new_context_with_model: n_seq_max     = 1
0.00.712.850 I llama_new_context_with_model: n_ctx         = 4096
0.00.712.850 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.712.851 I llama_new_context_with_model: n_batch       = 2048
0.00.712.851 I llama_new_context_with_model: n_ubatch      = 512
0.00.712.852 I llama_new_context_with_model: flash_attn    = 0
0.00.712.855 I llama_new_context_with_model: freq_base     = 10000.0
0.00.712.855 I llama_new_context_with_model: freq_scale    = 1
0.00.712.856 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.727.762 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.727.802 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.727.929 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.730.535 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.730.540 I llama_new_context_with_model: graph nodes  = 601
0.00.730.540 I llama_new_context_with_model: graph splits = 1
0.00.730.562 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.315.883 I main: llama threadpool init, n_threads = 4
0.01.315.898 I 
0.01.316.005 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.316.009 I 
0.01.316.248 I sampler seed: 348598185
0.01.316.260 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.316.267 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.316.270 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.316.270 I 
 seconally.

**Answer:** I am not able to provide medical advice or make diagnoses. Please consult a healthcare professional for any questions or concerns you may have

0.12.489.202 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.81 tokens per second)
0.12.489.205 I llama_perf_context_print:        load time =    1314.85 ms
0.12.489.206 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.489.207 I llama_perf_context_print:        eval time =   11083.05 ms /    32 runs   (  346.35 ms per token,     2.89 tokens per second)
0.12.489.208 I llama_perf_context_print:       total time =   11173.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4138 (42ae10bb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186220.50 ms
main:    total time = 186220.50 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4138 (42ae10bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.023.169 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.272 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.286 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.290 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.295 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.296 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.298 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.300 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.301 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.302 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.308 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.309 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.310 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.312 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.313 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.014 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.310 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.408 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.420 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.421 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.422 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.423 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.425 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.426 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.430 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.431 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.442 I llama_model_loader: - type  f32:   37 tensors
0.00.269.445 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.446 I llama_model_loader: - type q6_K:   19 tensors
0.00.449.915 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.516.238 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.181 I llm_load_vocab: special tokens cache size = 5
0.00.614.189 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.262 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.263 I llm_load_print_meta: arch             = gemma
0.00.614.264 I llm_load_print_meta: vocab type       = SPM
0.00.614.265 I llm_load_print_meta: n_vocab          = 256000
0.00.614.268 I llm_load_print_meta: n_merges         = 0
0.00.614.268 I llm_load_print_meta: vocab_only       = 0
0.00.614.269 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.269 I llm_load_print_meta: n_embd           = 2048
0.00.614.269 I llm_load_print_meta: n_layer          = 18
0.00.614.331 I llm_load_print_meta: n_head           = 8
0.00.614.338 I llm_load_print_meta: n_head_kv        = 1
0.00.614.339 I llm_load_print_meta: n_rot            = 256
0.00.614.339 I llm_load_print_meta: n_swa            = 0
0.00.614.339 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.339 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.344 I llm_load_print_meta: n_gqa            = 8
0.00.614.348 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.353 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.354 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.355 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.357 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.357 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.357 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.362 I llm_load_print_meta: n_ff             = 16384
0.00.614.363 I llm_load_print_meta: n_expert         = 0
0.00.614.363 I llm_load_print_meta: n_expert_used    = 0
0.00.614.363 I llm_load_print_meta: causal attn      = 1
0.00.614.364 I llm_load_print_meta: pooling type     = 0
0.00.614.364 I llm_load_print_meta: rope type        = 2
0.00.614.365 I llm_load_print_meta: rope scaling     = linear
0.00.614.367 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.368 I llm_load_print_meta: freq_scale_train = 1
0.00.614.369 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.370 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.370 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.370 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.371 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.371 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.372 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.373 I llm_load_print_meta: model type       = 2B
0.00.614.374 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.614.375 I llm_load_print_meta: model params     = 2.51 B
0.00.614.383 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.614.384 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.385 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.385 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.386 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.386 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.387 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.388 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.393 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.395 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.395 I llm_load_print_meta: max token length = 93
0.00.671.019 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.676.900 I llama_new_context_with_model: n_seq_max     = 1
0.00.676.908 I llama_new_context_with_model: n_ctx         = 4096
0.00.676.909 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.676.909 I llama_new_context_with_model: n_batch       = 2048
0.00.676.910 I llama_new_context_with_model: n_ubatch      = 512
0.00.676.910 I llama_new_context_with_model: flash_attn    = 0
0.00.676.913 I llama_new_context_with_model: freq_base     = 10000.0
0.00.676.914 I llama_new_context_with_model: freq_scale    = 1
0.00.676.914 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.692.904 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.692.946 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.693.075 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.704 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.695.707 I llama_new_context_with_model: graph nodes  = 601
0.00.695.708 I llama_new_context_with_model: graph splits = 1
0.00.695.731 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.278.268 I main: llama threadpool init, n_threads = 4
0.01.278.283 I 
0.01.278.386 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.278.390 I 
0.01.278.615 I sampler seed: 3736083598
0.01.278.628 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.278.634 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.278.637 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.278.638 I 
 increasities in the workplace and their consequences.

**Introduction**

In today's competitive business landscape, employees are increasingly demanding recognition, respect, and recognition

0.12.462.737 I llama_perf_sampler_print:    sampling time =      49.35 ms /    33 runs   (    1.50 ms per token,   668.72 tokens per second)
0.12.462.741 I llama_perf_context_print:        load time =    1277.32 ms
0.12.462.743 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.462.745 I llama_perf_context_print:        eval time =   11094.75 ms /    32 runs   (  346.71 ms per token,     2.88 tokens per second)
0.12.462.746 I llama_perf_context_print:       total time =   11184.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.058s
user	46m59.774s
sys	0m6.317s
