+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.597 I build: 3809 (f3979df7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.792 I main: llama backend init
0.00.001.890 I main: load the model and apply lora adapter, if any
0.00.022.129 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.178 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.185 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.190 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.191 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.194 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.195 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.195 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.196 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.196 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.197 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.201 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.202 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.203 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.203 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.204 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.735 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.787 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.668 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.676 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.677 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.678 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.678 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.679 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.680 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.682 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.683 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.684 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.684 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.686 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.690 I llama_model_loader: - type  f32:   37 tensors
0.00.133.692 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.448 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.207.269 I llm_load_vocab: special tokens cache size = 5
0.00.226.064 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.226.080 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.226.081 I llm_load_print_meta: arch             = gemma
0.00.226.081 I llm_load_print_meta: vocab type       = SPM
0.00.226.082 I llm_load_print_meta: n_vocab          = 256000
0.00.226.083 I llm_load_print_meta: n_merges         = 0
0.00.226.083 I llm_load_print_meta: vocab_only       = 0
0.00.226.084 I llm_load_print_meta: n_ctx_train      = 8192
0.00.226.084 I llm_load_print_meta: n_embd           = 2048
0.00.226.085 I llm_load_print_meta: n_layer          = 18
0.00.226.098 I llm_load_print_meta: n_head           = 8
0.00.226.100 I llm_load_print_meta: n_head_kv        = 1
0.00.226.100 I llm_load_print_meta: n_rot            = 256
0.00.226.100 I llm_load_print_meta: n_swa            = 0
0.00.226.101 I llm_load_print_meta: n_embd_head_k    = 256
0.00.226.101 I llm_load_print_meta: n_embd_head_v    = 256
0.00.226.102 I llm_load_print_meta: n_gqa            = 8
0.00.226.103 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.226.104 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.226.105 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.226.106 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.226.107 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.226.108 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.226.109 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.226.110 I llm_load_print_meta: n_ff             = 16384
0.00.226.110 I llm_load_print_meta: n_expert         = 0
0.00.226.110 I llm_load_print_meta: n_expert_used    = 0
0.00.226.111 I llm_load_print_meta: causal attn      = 1
0.00.226.111 I llm_load_print_meta: pooling type     = 0
0.00.226.112 I llm_load_print_meta: rope type        = 2
0.00.226.112 I llm_load_print_meta: rope scaling     = linear
0.00.226.114 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.226.115 I llm_load_print_meta: freq_scale_train = 1
0.00.226.115 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.226.116 I llm_load_print_meta: rope_finetuned   = unknown
0.00.226.116 I llm_load_print_meta: ssm_d_conv       = 0
0.00.226.116 I llm_load_print_meta: ssm_d_inner      = 0
0.00.226.117 I llm_load_print_meta: ssm_d_state      = 0
0.00.226.117 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.226.117 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.226.118 I llm_load_print_meta: model type       = 2B
0.00.226.119 I llm_load_print_meta: model ftype      = Q8_0
0.00.226.119 I llm_load_print_meta: model params     = 2.51 B
0.00.226.120 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.226.121 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.226.121 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.226.122 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.226.122 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.226.122 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.226.123 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.226.123 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.226.124 I llm_load_print_meta: max token length = 93
0.00.226.150 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.326.012 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.326.021 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.326.021 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.326.022 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.326.023 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.326.023 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.331.139 I llama_new_context_with_model: n_ctx      = 8192
0.00.331.145 I llama_new_context_with_model: n_batch    = 2048
0.00.331.145 I llama_new_context_with_model: n_ubatch   = 512
0.00.331.146 I llama_new_context_with_model: flash_attn = 0
0.00.331.148 I llama_new_context_with_model: freq_base  = 10000.0
0.00.331.149 I llama_new_context_with_model: freq_scale = 1
0.00.361.013 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.361.027 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.361.118 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.974 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.361.982 I llama_new_context_with_model: graph nodes  = 601
0.00.361.983 I llama_new_context_with_model: graph splits = 1
0.00.361.984 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.454.155 I main: llama threadpool init, n_threads = 4
0.00.454.167 I 
0.00.454.240 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.454.243 I 
0.00.454.272 I sampler seed: 776866157
0.00.454.281 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.283 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.454.284 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasels and their impact on the environment.

**Impact of Declining Crescendoli on the Environment:**

* **Loss of biodiversity:**
    *

0.02.748.205 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6900.88 tokens per second)
0.02.748.207 I llama_perf_context_print:        load time =     452.25 ms
0.02.748.208 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.748.210 I llama_perf_context_print:        eval time =    2274.89 ms /    32 runs   (   71.09 ms per token,    14.07 tokens per second)
0.02.748.210 I llama_perf_context_print:       total time =    2294.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.556 I build: 3809 (f3979df7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.001.865 I main: load the model and apply lora adapter, if any
0.00.022.104 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.117 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.123 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.124 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.128 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.129 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.129 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.130 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.130 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.131 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.135 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.136 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.137 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.137 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.138 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.295 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.883 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.777 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.784 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.785 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.786 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.787 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.788 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.789 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.793 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.794 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.795 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.796 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.797 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.800 I llama_model_loader: - type  f32:   37 tensors
0.00.132.803 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.283 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.212.129 I llm_load_vocab: special tokens cache size = 5
0.00.230.775 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.230.791 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.230.791 I llm_load_print_meta: arch             = gemma
0.00.230.792 I llm_load_print_meta: vocab type       = SPM
0.00.230.792 I llm_load_print_meta: n_vocab          = 256000
0.00.230.793 I llm_load_print_meta: n_merges         = 0
0.00.230.793 I llm_load_print_meta: vocab_only       = 0
0.00.230.793 I llm_load_print_meta: n_ctx_train      = 8192
0.00.230.794 I llm_load_print_meta: n_embd           = 2048
0.00.230.794 I llm_load_print_meta: n_layer          = 18
0.00.230.806 I llm_load_print_meta: n_head           = 8
0.00.230.808 I llm_load_print_meta: n_head_kv        = 1
0.00.230.808 I llm_load_print_meta: n_rot            = 256
0.00.230.808 I llm_load_print_meta: n_swa            = 0
0.00.230.809 I llm_load_print_meta: n_embd_head_k    = 256
0.00.230.809 I llm_load_print_meta: n_embd_head_v    = 256
0.00.230.810 I llm_load_print_meta: n_gqa            = 8
0.00.230.811 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.230.812 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.230.812 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.230.814 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.230.814 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.230.815 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.230.815 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.230.816 I llm_load_print_meta: n_ff             = 16384
0.00.230.816 I llm_load_print_meta: n_expert         = 0
0.00.230.817 I llm_load_print_meta: n_expert_used    = 0
0.00.230.817 I llm_load_print_meta: causal attn      = 1
0.00.230.817 I llm_load_print_meta: pooling type     = 0
0.00.230.818 I llm_load_print_meta: rope type        = 2
0.00.230.818 I llm_load_print_meta: rope scaling     = linear
0.00.230.819 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.230.820 I llm_load_print_meta: freq_scale_train = 1
0.00.230.820 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.230.820 I llm_load_print_meta: rope_finetuned   = unknown
0.00.230.821 I llm_load_print_meta: ssm_d_conv       = 0
0.00.230.821 I llm_load_print_meta: ssm_d_inner      = 0
0.00.230.821 I llm_load_print_meta: ssm_d_state      = 0
0.00.230.821 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.230.822 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.230.823 I llm_load_print_meta: model type       = 2B
0.00.230.823 I llm_load_print_meta: model ftype      = Q8_0
0.00.230.824 I llm_load_print_meta: model params     = 2.51 B
0.00.230.825 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.230.825 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.230.826 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.230.826 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.230.826 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.230.826 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.230.827 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.230.827 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.230.827 I llm_load_print_meta: max token length = 93
0.00.230.848 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.325.053 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.330.248 I llama_new_context_with_model: n_ctx      = 8192
0.00.330.254 I llama_new_context_with_model: n_batch    = 2048
0.00.330.254 I llama_new_context_with_model: n_ubatch   = 512
0.00.330.255 I llama_new_context_with_model: flash_attn = 0
0.00.330.258 I llama_new_context_with_model: freq_base  = 10000.0
0.00.330.259 I llama_new_context_with_model: freq_scale = 1
0.00.361.582 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.361.600 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.361.696 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.601 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.362.609 I llama_new_context_with_model: graph nodes  = 601
0.00.362.609 I llama_new_context_with_model: graph splits = 1
0.00.362.611 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.417 I main: llama threadpool init, n_threads = 4
0.00.452.429 I 
0.00.452.504 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.452.507 I 
0.00.452.536 I sampler seed: 1339551959
0.00.452.544 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.556 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.452.557 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasels for the following sentences:

1. The boy ran quickly through the forest.
2. The children played happily in the park.
3.

0.02.669.271 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6396.59 tokens per second)
0.02.669.274 I llama_perf_context_print:        load time =     450.54 ms
0.02.669.275 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.669.276 I llama_perf_context_print:        eval time =    2197.55 ms /    32 runs   (   68.67 ms per token,    14.56 tokens per second)
0.02.669.277 I llama_perf_context_print:       total time =    2216.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.548 I build: 3809 (f3979df7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.774 I main: llama backend init
0.00.001.906 I main: load the model and apply lora adapter, if any
0.00.022.151 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.203 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.214 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.219 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.220 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.224 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.224 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.225 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.226 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.226 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.227 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.231 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.232 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.232 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.233 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.233 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.888 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.129.955 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.873 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.883 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.884 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.885 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.886 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.887 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.888 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.892 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.893 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.894 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.895 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.138.896 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.138.901 I llama_model_loader: - type  f32:   37 tensors
0.00.138.904 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.365 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.216.168 I llm_load_vocab: special tokens cache size = 5
0.00.234.484 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.234.497 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.234.498 I llm_load_print_meta: arch             = gemma
0.00.234.498 I llm_load_print_meta: vocab type       = SPM
0.00.234.499 I llm_load_print_meta: n_vocab          = 256000
0.00.234.499 I llm_load_print_meta: n_merges         = 0
0.00.234.500 I llm_load_print_meta: vocab_only       = 0
0.00.234.500 I llm_load_print_meta: n_ctx_train      = 8192
0.00.234.500 I llm_load_print_meta: n_embd           = 2048
0.00.234.501 I llm_load_print_meta: n_layer          = 18
0.00.234.513 I llm_load_print_meta: n_head           = 8
0.00.234.514 I llm_load_print_meta: n_head_kv        = 1
0.00.234.514 I llm_load_print_meta: n_rot            = 256
0.00.234.514 I llm_load_print_meta: n_swa            = 0
0.00.234.515 I llm_load_print_meta: n_embd_head_k    = 256
0.00.234.515 I llm_load_print_meta: n_embd_head_v    = 256
0.00.234.516 I llm_load_print_meta: n_gqa            = 8
0.00.234.517 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.234.518 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.234.518 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.234.520 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.234.520 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.234.520 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.234.521 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.234.522 I llm_load_print_meta: n_ff             = 16384
0.00.234.522 I llm_load_print_meta: n_expert         = 0
0.00.234.522 I llm_load_print_meta: n_expert_used    = 0
0.00.234.523 I llm_load_print_meta: causal attn      = 1
0.00.234.523 I llm_load_print_meta: pooling type     = 0
0.00.234.523 I llm_load_print_meta: rope type        = 2
0.00.234.523 I llm_load_print_meta: rope scaling     = linear
0.00.234.524 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.234.525 I llm_load_print_meta: freq_scale_train = 1
0.00.234.525 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.234.526 I llm_load_print_meta: rope_finetuned   = unknown
0.00.234.526 I llm_load_print_meta: ssm_d_conv       = 0
0.00.234.526 I llm_load_print_meta: ssm_d_inner      = 0
0.00.234.526 I llm_load_print_meta: ssm_d_state      = 0
0.00.234.527 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.234.527 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.234.527 I llm_load_print_meta: model type       = 2B
0.00.234.528 I llm_load_print_meta: model ftype      = Q8_0
0.00.234.529 I llm_load_print_meta: model params     = 2.51 B
0.00.234.530 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.234.531 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.234.531 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.234.531 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.234.532 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.234.532 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.234.532 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.234.533 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.234.533 I llm_load_print_meta: max token length = 93
0.00.234.549 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.314.359 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.314.367 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.314.368 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.314.369 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.314.370 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.314.370 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.319.404 I llama_new_context_with_model: n_ctx      = 8192
0.00.319.410 I llama_new_context_with_model: n_batch    = 2048
0.00.319.410 I llama_new_context_with_model: n_ubatch   = 512
0.00.319.411 I llama_new_context_with_model: flash_attn = 0
0.00.319.413 I llama_new_context_with_model: freq_base  = 10000.0
0.00.319.414 I llama_new_context_with_model: freq_scale = 1
0.00.349.253 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.349.269 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.349.360 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.257 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.350.265 I llama_new_context_with_model: graph nodes  = 601
0.00.350.265 I llama_new_context_with_model: graph splits = 1
0.00.350.268 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.537 I main: llama threadpool init, n_threads = 4
0.00.444.549 I 
0.00.444.623 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.444.626 I 
0.00.444.663 I sampler seed: 2443552012
0.00.444.673 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.675 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.444.676 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and provide an analysis of the challenges and opportunities it presents.

**Introduction:**

The increasing prevalence of narcissistic personality disorder (NPD) and other narcissistic

0.02.745.016 I llama_perf_sampler_print:    sampling time =       5.02 ms /    33 runs   (    0.15 ms per token,  6569.78 tokens per second)
0.02.745.019 I llama_perf_context_print:        load time =     442.61 ms
0.02.745.020 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.745.021 I llama_perf_context_print:        eval time =    2280.99 ms /    32 runs   (   71.28 ms per token,    14.03 tokens per second)
0.02.745.022 I llama_perf_context_print:       total time =    2300.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.637 I build: 3809 (f3979df7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.854 I main: llama backend init
0.00.002.026 I main: load the model and apply lora adapter, if any
0.00.027.890 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.027.939 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.027.951 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.957 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.961 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.965 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.966 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.966 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.970 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.970 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.971 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.976 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.977 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.978 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.979 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.980 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.787 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.139.182 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.146.532 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.146.539 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.146.540 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.146.541 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.146.541 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.146.542 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.146.543 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.146.545 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.146.546 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.146.547 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.146.548 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.146.549 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.146.553 I llama_model_loader: - type  f32:   37 tensors
0.00.146.555 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.291 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.216.159 I llm_load_vocab: special tokens cache size = 5
0.00.237.792 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.237.809 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.237.809 I llm_load_print_meta: arch             = gemma
0.00.237.810 I llm_load_print_meta: vocab type       = SPM
0.00.237.810 I llm_load_print_meta: n_vocab          = 256000
0.00.237.811 I llm_load_print_meta: n_merges         = 0
0.00.237.811 I llm_load_print_meta: vocab_only       = 0
0.00.237.811 I llm_load_print_meta: n_ctx_train      = 8192
0.00.237.812 I llm_load_print_meta: n_embd           = 2048
0.00.237.812 I llm_load_print_meta: n_layer          = 18
0.00.237.827 I llm_load_print_meta: n_head           = 8
0.00.237.828 I llm_load_print_meta: n_head_kv        = 1
0.00.237.828 I llm_load_print_meta: n_rot            = 256
0.00.237.829 I llm_load_print_meta: n_swa            = 0
0.00.237.829 I llm_load_print_meta: n_embd_head_k    = 256
0.00.237.829 I llm_load_print_meta: n_embd_head_v    = 256
0.00.237.830 I llm_load_print_meta: n_gqa            = 8
0.00.237.831 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.237.832 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.237.833 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.237.834 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.237.834 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.237.835 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.237.835 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.237.836 I llm_load_print_meta: n_ff             = 16384
0.00.237.836 I llm_load_print_meta: n_expert         = 0
0.00.237.837 I llm_load_print_meta: n_expert_used    = 0
0.00.237.837 I llm_load_print_meta: causal attn      = 1
0.00.237.837 I llm_load_print_meta: pooling type     = 0
0.00.237.838 I llm_load_print_meta: rope type        = 2
0.00.237.838 I llm_load_print_meta: rope scaling     = linear
0.00.237.839 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.237.840 I llm_load_print_meta: freq_scale_train = 1
0.00.237.840 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.237.840 I llm_load_print_meta: rope_finetuned   = unknown
0.00.237.841 I llm_load_print_meta: ssm_d_conv       = 0
0.00.237.841 I llm_load_print_meta: ssm_d_inner      = 0
0.00.237.841 I llm_load_print_meta: ssm_d_state      = 0
0.00.237.841 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.237.842 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.237.843 I llm_load_print_meta: model type       = 2B
0.00.237.843 I llm_load_print_meta: model ftype      = Q8_0
0.00.237.844 I llm_load_print_meta: model params     = 2.51 B
0.00.237.845 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.237.846 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.237.847 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.237.847 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.237.847 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.237.848 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.237.848 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.237.848 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.237.848 I llm_load_print_meta: max token length = 93
0.00.237.871 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.309.384 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.309.396 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.318.726 I llama_new_context_with_model: n_ctx      = 8192
0.00.318.734 I llama_new_context_with_model: n_batch    = 2048
0.00.318.734 I llama_new_context_with_model: n_ubatch   = 512
0.00.318.735 I llama_new_context_with_model: flash_attn = 0
0.00.318.739 I llama_new_context_with_model: freq_base  = 10000.0
0.00.318.740 I llama_new_context_with_model: freq_scale = 1
0.00.350.448 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.350.464 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.350.562 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.415 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.351.423 I llama_new_context_with_model: graph nodes  = 601
0.00.351.424 I llama_new_context_with_model: graph splits = 1
0.00.351.426 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.667 I main: llama threadpool init, n_threads = 4
0.00.453.679 I 
0.00.453.753 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.453.757 I 
0.00.453.783 I sampler seed: 140767927
0.00.453.792 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.796 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.453.796 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in the modern world.

**Answer:**

**The modern world is rife with narcissistic and possessive individuals who exhibit extreme selfishness and disregard for others.**

0.02.920.798 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6665.32 tokens per second)
0.02.920.800 I llama_perf_context_print:        load time =     451.62 ms
0.02.920.802 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.920.803 I llama_perf_context_print:        eval time =    2448.52 ms /    32 runs   (   76.52 ms per token,    13.07 tokens per second)
0.02.920.804 I llama_perf_context_print:       total time =    2467.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.783s
user	0m39.940s
sys	0m9.606s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3809 (f3979df7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32017.36 ms
main:    total time = 32017.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.568 I build: 3809 (f3979df7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.001.883 I main: load the model and apply lora adapter, if any
0.00.022.187 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.235 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.243 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.248 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.248 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.252 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.253 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.254 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.255 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.256 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.257 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.261 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.262 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.262 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.263 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.264 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.173 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.915 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.772 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.778 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.779 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.780 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.781 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.781 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.782 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.785 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.785 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.786 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.787 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.788 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.792 I llama_model_loader: - type  f32:   37 tensors
0.00.132.795 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.796 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.893 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.201.670 I llm_load_vocab: special tokens cache size = 5
0.00.220.189 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.220.204 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.220.204 I llm_load_print_meta: arch             = gemma
0.00.220.205 I llm_load_print_meta: vocab type       = SPM
0.00.220.205 I llm_load_print_meta: n_vocab          = 256000
0.00.220.206 I llm_load_print_meta: n_merges         = 0
0.00.220.206 I llm_load_print_meta: vocab_only       = 0
0.00.220.207 I llm_load_print_meta: n_ctx_train      = 8192
0.00.220.207 I llm_load_print_meta: n_embd           = 2048
0.00.220.207 I llm_load_print_meta: n_layer          = 18
0.00.220.220 I llm_load_print_meta: n_head           = 8
0.00.220.221 I llm_load_print_meta: n_head_kv        = 1
0.00.220.221 I llm_load_print_meta: n_rot            = 256
0.00.220.222 I llm_load_print_meta: n_swa            = 0
0.00.220.222 I llm_load_print_meta: n_embd_head_k    = 256
0.00.220.222 I llm_load_print_meta: n_embd_head_v    = 256
0.00.220.223 I llm_load_print_meta: n_gqa            = 8
0.00.220.224 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.220.225 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.220.226 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.220.227 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.220.227 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.220.228 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.220.228 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.220.229 I llm_load_print_meta: n_ff             = 16384
0.00.220.229 I llm_load_print_meta: n_expert         = 0
0.00.220.230 I llm_load_print_meta: n_expert_used    = 0
0.00.220.230 I llm_load_print_meta: causal attn      = 1
0.00.220.231 I llm_load_print_meta: pooling type     = 0
0.00.220.231 I llm_load_print_meta: rope type        = 2
0.00.220.231 I llm_load_print_meta: rope scaling     = linear
0.00.220.233 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.220.233 I llm_load_print_meta: freq_scale_train = 1
0.00.220.233 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.220.234 I llm_load_print_meta: rope_finetuned   = unknown
0.00.220.234 I llm_load_print_meta: ssm_d_conv       = 0
0.00.220.234 I llm_load_print_meta: ssm_d_inner      = 0
0.00.220.235 I llm_load_print_meta: ssm_d_state      = 0
0.00.220.235 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.220.235 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.220.236 I llm_load_print_meta: model type       = 2B
0.00.220.236 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.220.237 I llm_load_print_meta: model params     = 2.51 B
0.00.220.237 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.220.238 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.220.239 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.220.239 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.220.239 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.220.240 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.220.240 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.220.240 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.220.241 I llm_load_print_meta: max token length = 93
0.00.220.266 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.277.799 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.277.808 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.277.809 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.277.810 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.277.810 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.277.811 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.282.876 I llama_new_context_with_model: n_ctx      = 8192
0.00.282.883 I llama_new_context_with_model: n_batch    = 2048
0.00.282.884 I llama_new_context_with_model: n_ubatch   = 512
0.00.282.884 I llama_new_context_with_model: flash_attn = 0
0.00.282.886 I llama_new_context_with_model: freq_base  = 10000.0
0.00.282.887 I llama_new_context_with_model: freq_scale = 1
0.00.312.602 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.312.618 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.312.716 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.313.548 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.313.556 I llama_new_context_with_model: graph nodes  = 601
0.00.313.557 I llama_new_context_with_model: graph splits = 1
0.00.313.559 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.395.463 I main: llama threadpool init, n_threads = 4
0.00.395.476 I 
0.00.395.549 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.395.552 I 
0.00.395.581 I sampler seed: 2897110396
0.00.395.590 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.395.592 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.395.593 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconded the two leading companies in the pharmaceutical industry, Pfizer and Johnson & Johnson.

**Explain the significance of this event.**

**Answer:**

**

0.02.094.993 I llama_perf_sampler_print:    sampling time =       5.30 ms /    33 runs   (    0.16 ms per token,  6222.89 tokens per second)
0.02.094.995 I llama_perf_context_print:        load time =     393.56 ms
0.02.094.997 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.094.998 I llama_perf_context_print:        eval time =    1679.52 ms /    32 runs   (   52.49 ms per token,    19.05 tokens per second)
0.02.094.999 I llama_perf_context_print:       total time =    1699.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3809 (f3979df7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32110.81 ms
main:    total time = 32110.81 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.572 I build: 3809 (f3979df7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.001.882 I main: load the model and apply lora adapter, if any
0.00.022.227 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.239 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.245 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.246 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.250 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.251 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.252 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.252 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.253 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.254 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.258 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.259 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.261 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.261 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.262 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.399 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.363 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.224 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.231 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.232 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.233 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.234 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.235 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.236 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.240 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.240 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.245 I llama_model_loader: - type  f32:   37 tensors
0.00.133.248 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.249 I llama_model_loader: - type q6_K:   19 tensors
0.00.198.975 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.199.690 I llm_load_vocab: special tokens cache size = 5
0.00.217.828 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.843 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.843 I llm_load_print_meta: arch             = gemma
0.00.217.844 I llm_load_print_meta: vocab type       = SPM
0.00.217.845 I llm_load_print_meta: n_vocab          = 256000
0.00.217.845 I llm_load_print_meta: n_merges         = 0
0.00.217.845 I llm_load_print_meta: vocab_only       = 0
0.00.217.846 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.846 I llm_load_print_meta: n_embd           = 2048
0.00.217.846 I llm_load_print_meta: n_layer          = 18
0.00.217.857 I llm_load_print_meta: n_head           = 8
0.00.217.858 I llm_load_print_meta: n_head_kv        = 1
0.00.217.859 I llm_load_print_meta: n_rot            = 256
0.00.217.859 I llm_load_print_meta: n_swa            = 0
0.00.217.859 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.860 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.860 I llm_load_print_meta: n_gqa            = 8
0.00.217.862 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.863 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.863 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.865 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.865 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.865 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.866 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.866 I llm_load_print_meta: n_ff             = 16384
0.00.217.867 I llm_load_print_meta: n_expert         = 0
0.00.217.867 I llm_load_print_meta: n_expert_used    = 0
0.00.217.868 I llm_load_print_meta: causal attn      = 1
0.00.217.868 I llm_load_print_meta: pooling type     = 0
0.00.217.869 I llm_load_print_meta: rope type        = 2
0.00.217.869 I llm_load_print_meta: rope scaling     = linear
0.00.217.870 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.871 I llm_load_print_meta: freq_scale_train = 1
0.00.217.871 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.871 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.872 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.872 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.872 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.872 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.873 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.873 I llm_load_print_meta: model type       = 2B
0.00.217.874 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.217.875 I llm_load_print_meta: model params     = 2.51 B
0.00.217.875 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.217.876 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.876 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.877 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.877 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.878 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.878 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.879 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.879 I llm_load_print_meta: max token length = 93
0.00.217.901 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.274.597 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.279.610 I llama_new_context_with_model: n_ctx      = 8192
0.00.279.617 I llama_new_context_with_model: n_batch    = 2048
0.00.279.617 I llama_new_context_with_model: n_ubatch   = 512
0.00.279.617 I llama_new_context_with_model: flash_attn = 0
0.00.279.620 I llama_new_context_with_model: freq_base  = 10000.0
0.00.279.621 I llama_new_context_with_model: freq_scale = 1
0.00.309.014 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.309.030 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.309.126 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.309.950 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.309.959 I llama_new_context_with_model: graph nodes  = 601
0.00.309.959 I llama_new_context_with_model: graph splits = 1
0.00.309.961 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.391.693 I main: llama threadpool init, n_threads = 4
0.00.391.707 I 
0.00.391.782 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.391.786 I 
0.00.391.816 I sampler seed: 661010710
0.00.391.826 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.391.828 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.391.829 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 strickchen, a renowned philosopher, is currently in a contemplative state. He has been contemplating the nature of consciousness and the limitations of human understanding.

**Discuss

0.02.054.678 I llama_perf_sampler_print:    sampling time =       5.48 ms /    33 runs   (    0.17 ms per token,  6017.51 tokens per second)
0.02.054.680 I llama_perf_context_print:        load time =     389.80 ms
0.02.054.681 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.054.683 I llama_perf_context_print:        eval time =    1642.98 ms /    32 runs   (   51.34 ms per token,    19.48 tokens per second)
0.02.054.683 I llama_perf_context_print:       total time =    1662.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.147s
user	8m15.277s
sys	0m7.165s
