+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.666 I build: 3809 (f3979df7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.002.853 I main: load the model and apply lora adapter, if any
0.00.025.623 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.810 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.903 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.915 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.916 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.921 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.922 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.923 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.924 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.925 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.926 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.934 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.935 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.936 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.938 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.939 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.402 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.636 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.903 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.911 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.912 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.913 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.914 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.915 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.915 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.919 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.920 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.921 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.921 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.198.922 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.931 I llama_model_loader: - type  f32:   37 tensors
0.00.198.935 I llama_model_loader: - type q8_0:  127 tensors
0.00.495.182 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.260 I llm_load_vocab: special tokens cache size = 5
0.00.554.759 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.554.819 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.554.823 I llm_load_print_meta: arch             = gemma
0.00.554.824 I llm_load_print_meta: vocab type       = SPM
0.00.554.825 I llm_load_print_meta: n_vocab          = 256000
0.00.554.827 I llm_load_print_meta: n_merges         = 0
0.00.554.828 I llm_load_print_meta: vocab_only       = 0
0.00.554.829 I llm_load_print_meta: n_ctx_train      = 8192
0.00.554.829 I llm_load_print_meta: n_embd           = 2048
0.00.554.829 I llm_load_print_meta: n_layer          = 18
0.00.554.865 I llm_load_print_meta: n_head           = 8
0.00.554.875 I llm_load_print_meta: n_head_kv        = 1
0.00.554.875 I llm_load_print_meta: n_rot            = 256
0.00.554.877 I llm_load_print_meta: n_swa            = 0
0.00.554.877 I llm_load_print_meta: n_embd_head_k    = 256
0.00.554.878 I llm_load_print_meta: n_embd_head_v    = 256
0.00.554.882 I llm_load_print_meta: n_gqa            = 8
0.00.554.887 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.554.893 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.554.906 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.554.910 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.554.911 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.554.911 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.554.912 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.554.930 I llm_load_print_meta: n_ff             = 16384
0.00.554.934 I llm_load_print_meta: n_expert         = 0
0.00.554.934 I llm_load_print_meta: n_expert_used    = 0
0.00.554.934 I llm_load_print_meta: causal attn      = 1
0.00.554.935 I llm_load_print_meta: pooling type     = 0
0.00.554.935 I llm_load_print_meta: rope type        = 2
0.00.554.936 I llm_load_print_meta: rope scaling     = linear
0.00.554.937 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.554.938 I llm_load_print_meta: freq_scale_train = 1
0.00.554.939 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.554.939 I llm_load_print_meta: rope_finetuned   = unknown
0.00.554.939 I llm_load_print_meta: ssm_d_conv       = 0
0.00.554.939 I llm_load_print_meta: ssm_d_inner      = 0
0.00.554.940 I llm_load_print_meta: ssm_d_state      = 0
0.00.554.940 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.554.941 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.554.942 I llm_load_print_meta: model type       = 2B
0.00.554.943 I llm_load_print_meta: model ftype      = Q8_0
0.00.554.944 I llm_load_print_meta: model params     = 2.51 B
0.00.554.945 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.554.945 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.554.946 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.554.946 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.554.947 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.554.948 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.554.948 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.554.949 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.554.950 I llm_load_print_meta: max token length = 93
0.00.555.137 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.653.865 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.653.876 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.653.877 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.653.878 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.653.878 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.653.879 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.659.565 I llama_new_context_with_model: n_ctx      = 8192
0.00.659.574 I llama_new_context_with_model: n_batch    = 2048
0.00.659.574 I llama_new_context_with_model: n_ubatch   = 512
0.00.659.575 I llama_new_context_with_model: flash_attn = 0
0.00.659.578 I llama_new_context_with_model: freq_base  = 10000.0
0.00.659.578 I llama_new_context_with_model: freq_scale = 1
0.00.689.875 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.689.921 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.690.038 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.691.452 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.691.459 I llama_new_context_with_model: graph nodes  = 601
0.00.691.459 I llama_new_context_with_model: graph splits = 1
0.00.691.476 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.304.787 I main: llama threadpool init, n_threads = 4
0.01.304.801 I 
0.01.304.899 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.304.903 I 
0.01.305.066 I sampler seed: 1874051083
0.01.305.076 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.305.082 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.305.082 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively, blurring the lines between the traditional and the novel.

The traditional novel, confined by the rigid structure of the printed page, has stifled the creative

0.14.853.877 I llama_perf_sampler_print:    sampling time =      47.82 ms /    33 runs   (    1.45 ms per token,   690.04 tokens per second)
0.14.853.880 I llama_perf_context_print:        load time =    1301.85 ms
0.14.853.881 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.853.883 I llama_perf_context_print:        eval time =   13467.79 ms /    32 runs   (  420.87 ms per token,     2.38 tokens per second)
0.14.853.884 I llama_perf_context_print:       total time =   13549.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.676 I build: 3809 (f3979df7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.002.813 I main: load the model and apply lora adapter, if any
0.00.025.045 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.140 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.154 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.156 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.159 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.160 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.161 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.162 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.163 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.164 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.171 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.172 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.173 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.174 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.175 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.106 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.556 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.763 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.770 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.771 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.772 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.773 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.774 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.775 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.778 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.779 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.780 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.781 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.197.782 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.790 I llama_model_loader: - type  f32:   37 tensors
0.00.197.795 I llama_model_loader: - type q8_0:  127 tensors
0.00.491.290 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.395 I llm_load_vocab: special tokens cache size = 5
0.00.551.017 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.551.076 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.551.078 I llm_load_print_meta: arch             = gemma
0.00.551.078 I llm_load_print_meta: vocab type       = SPM
0.00.551.080 I llm_load_print_meta: n_vocab          = 256000
0.00.551.082 I llm_load_print_meta: n_merges         = 0
0.00.551.082 I llm_load_print_meta: vocab_only       = 0
0.00.551.083 I llm_load_print_meta: n_ctx_train      = 8192
0.00.551.083 I llm_load_print_meta: n_embd           = 2048
0.00.551.084 I llm_load_print_meta: n_layer          = 18
0.00.551.118 I llm_load_print_meta: n_head           = 8
0.00.551.126 I llm_load_print_meta: n_head_kv        = 1
0.00.551.126 I llm_load_print_meta: n_rot            = 256
0.00.551.127 I llm_load_print_meta: n_swa            = 0
0.00.551.127 I llm_load_print_meta: n_embd_head_k    = 256
0.00.551.128 I llm_load_print_meta: n_embd_head_v    = 256
0.00.551.132 I llm_load_print_meta: n_gqa            = 8
0.00.551.137 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.551.142 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.551.143 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.551.144 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.551.145 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.551.145 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.551.146 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.551.164 I llm_load_print_meta: n_ff             = 16384
0.00.551.165 I llm_load_print_meta: n_expert         = 0
0.00.551.166 I llm_load_print_meta: n_expert_used    = 0
0.00.551.166 I llm_load_print_meta: causal attn      = 1
0.00.551.166 I llm_load_print_meta: pooling type     = 0
0.00.551.167 I llm_load_print_meta: rope type        = 2
0.00.551.167 I llm_load_print_meta: rope scaling     = linear
0.00.551.168 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.551.169 I llm_load_print_meta: freq_scale_train = 1
0.00.551.169 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.551.170 I llm_load_print_meta: rope_finetuned   = unknown
0.00.551.170 I llm_load_print_meta: ssm_d_conv       = 0
0.00.551.170 I llm_load_print_meta: ssm_d_inner      = 0
0.00.551.171 I llm_load_print_meta: ssm_d_state      = 0
0.00.551.171 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.551.171 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.551.172 I llm_load_print_meta: model type       = 2B
0.00.551.173 I llm_load_print_meta: model ftype      = Q8_0
0.00.551.174 I llm_load_print_meta: model params     = 2.51 B
0.00.551.174 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.551.175 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.551.176 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.551.176 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.551.176 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.551.177 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.551.177 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.551.178 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.551.179 I llm_load_print_meta: max token length = 93
0.00.551.368 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.644.989 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.650.640 I llama_new_context_with_model: n_ctx      = 8192
0.00.650.647 I llama_new_context_with_model: n_batch    = 2048
0.00.650.647 I llama_new_context_with_model: n_ubatch   = 512
0.00.650.648 I llama_new_context_with_model: flash_attn = 0
0.00.650.651 I llama_new_context_with_model: freq_base  = 10000.0
0.00.650.651 I llama_new_context_with_model: freq_scale = 1
0.00.681.895 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.681.942 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.682.061 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.683.451 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.683.457 I llama_new_context_with_model: graph nodes  = 601
0.00.683.458 I llama_new_context_with_model: graph splits = 1
0.00.683.475 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.297.096 I main: llama threadpool init, n_threads = 4
0.01.297.108 I 
0.01.297.197 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.297.201 I 
0.01.297.364 I sampler seed: 595240219
0.01.297.376 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.297.380 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.297.381 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities!

I am unable to generate a response that is sexually suggestive or inappropriate. [end of text]


0.09.341.843 I llama_perf_sampler_print:    sampling time =      28.37 ms /    20 runs   (    1.42 ms per token,   704.90 tokens per second)
0.09.341.847 I llama_perf_context_print:        load time =    1294.20 ms
0.09.341.848 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.341.850 I llama_perf_context_print:        eval time =    7995.82 ms /    19 runs   (  420.83 ms per token,     2.38 tokens per second)
0.09.341.851 I llama_perf_context_print:       total time =    8044.76 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.642 I build: 3809 (f3979df7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.002.784 I main: load the model and apply lora adapter, if any
0.00.024.986 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.168 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.266 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.277 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.279 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.283 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.284 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.285 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.286 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.286 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.289 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.296 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.297 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.297 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.299 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.300 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.666 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.187.335 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.199.850 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.199.860 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.199.860 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.199.861 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.199.862 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.199.863 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.199.864 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.199.867 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.199.868 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.199.869 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.199.870 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.199.871 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.199.879 I llama_model_loader: - type  f32:   37 tensors
0.00.199.885 I llama_model_loader: - type q8_0:  127 tensors
0.00.494.017 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.042 I llm_load_vocab: special tokens cache size = 5
0.00.553.704 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.553.768 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.553.769 I llm_load_print_meta: arch             = gemma
0.00.553.770 I llm_load_print_meta: vocab type       = SPM
0.00.553.770 I llm_load_print_meta: n_vocab          = 256000
0.00.553.773 I llm_load_print_meta: n_merges         = 0
0.00.553.773 I llm_load_print_meta: vocab_only       = 0
0.00.553.774 I llm_load_print_meta: n_ctx_train      = 8192
0.00.553.774 I llm_load_print_meta: n_embd           = 2048
0.00.553.775 I llm_load_print_meta: n_layer          = 18
0.00.553.809 I llm_load_print_meta: n_head           = 8
0.00.553.816 I llm_load_print_meta: n_head_kv        = 1
0.00.553.816 I llm_load_print_meta: n_rot            = 256
0.00.553.817 I llm_load_print_meta: n_swa            = 0
0.00.553.817 I llm_load_print_meta: n_embd_head_k    = 256
0.00.553.817 I llm_load_print_meta: n_embd_head_v    = 256
0.00.553.822 I llm_load_print_meta: n_gqa            = 8
0.00.553.827 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.553.851 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.553.853 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.553.855 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.553.855 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.553.856 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.553.856 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.553.861 I llm_load_print_meta: n_ff             = 16384
0.00.553.862 I llm_load_print_meta: n_expert         = 0
0.00.553.871 I llm_load_print_meta: n_expert_used    = 0
0.00.553.879 I llm_load_print_meta: causal attn      = 1
0.00.553.880 I llm_load_print_meta: pooling type     = 0
0.00.553.881 I llm_load_print_meta: rope type        = 2
0.00.553.885 I llm_load_print_meta: rope scaling     = linear
0.00.553.887 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.553.894 I llm_load_print_meta: freq_scale_train = 1
0.00.553.895 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.553.902 I llm_load_print_meta: rope_finetuned   = unknown
0.00.553.903 I llm_load_print_meta: ssm_d_conv       = 0
0.00.553.904 I llm_load_print_meta: ssm_d_inner      = 0
0.00.553.905 I llm_load_print_meta: ssm_d_state      = 0
0.00.553.905 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.553.906 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.553.907 I llm_load_print_meta: model type       = 2B
0.00.553.911 I llm_load_print_meta: model ftype      = Q8_0
0.00.553.912 I llm_load_print_meta: model params     = 2.51 B
0.00.553.913 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.553.914 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.553.914 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.553.915 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.553.915 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.553.915 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.553.916 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.553.916 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.553.917 I llm_load_print_meta: max token length = 93
0.00.554.089 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.631.449 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.631.460 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.631.461 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.631.461 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.631.462 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.631.463 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.637.376 I llama_new_context_with_model: n_ctx      = 8192
0.00.637.382 I llama_new_context_with_model: n_batch    = 2048
0.00.637.383 I llama_new_context_with_model: n_ubatch   = 512
0.00.637.383 I llama_new_context_with_model: flash_attn = 0
0.00.637.386 I llama_new_context_with_model: freq_base  = 10000.0
0.00.637.387 I llama_new_context_with_model: freq_scale = 1
0.00.667.393 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.667.434 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.667.544 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.668.959 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.668.965 I llama_new_context_with_model: graph nodes  = 601
0.00.668.966 I llama_new_context_with_model: graph splits = 1
0.00.668.982 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.318.073 I main: llama threadpool init, n_threads = 4
0.01.318.084 I 
0.01.318.173 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.318.177 I 
0.01.318.338 I sampler seed: 2232511850
0.01.318.349 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.318.354 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.318.356 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.03.028.249 I llama_perf_sampler_print:    sampling time =       6.04 ms /     5 runs   (    1.21 ms per token,   827.54 tokens per second)
0.03.028.252 I llama_perf_context_print:        load time =    1315.20 ms
0.03.028.254 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.028.255 I llama_perf_context_print:        eval time =    1698.63 ms /     4 runs   (  424.66 ms per token,     2.35 tokens per second)
0.03.028.256 I llama_perf_context_print:       total time =    1710.19 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.653 I build: 3809 (f3979df7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.002.785 I main: load the model and apply lora adapter, if any
0.00.024.772 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.967 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.059 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.071 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.072 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.077 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.081 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.082 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.082 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.083 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.084 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.091 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.092 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.102 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.103 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.104 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.775 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.982 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.224 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.232 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.233 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.234 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.235 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.236 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.237 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.240 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.241 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.242 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.243 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.198.244 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.253 I llama_model_loader: - type  f32:   37 tensors
0.00.198.257 I llama_model_loader: - type q8_0:  127 tensors
0.00.477.430 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.478.522 I llm_load_vocab: special tokens cache size = 5
0.00.537.038 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.537.095 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.537.095 I llm_load_print_meta: arch             = gemma
0.00.537.096 I llm_load_print_meta: vocab type       = SPM
0.00.537.098 I llm_load_print_meta: n_vocab          = 256000
0.00.537.100 I llm_load_print_meta: n_merges         = 0
0.00.537.101 I llm_load_print_meta: vocab_only       = 0
0.00.537.101 I llm_load_print_meta: n_ctx_train      = 8192
0.00.537.101 I llm_load_print_meta: n_embd           = 2048
0.00.537.102 I llm_load_print_meta: n_layer          = 18
0.00.537.136 I llm_load_print_meta: n_head           = 8
0.00.537.143 I llm_load_print_meta: n_head_kv        = 1
0.00.537.143 I llm_load_print_meta: n_rot            = 256
0.00.537.144 I llm_load_print_meta: n_swa            = 0
0.00.537.144 I llm_load_print_meta: n_embd_head_k    = 256
0.00.537.145 I llm_load_print_meta: n_embd_head_v    = 256
0.00.537.149 I llm_load_print_meta: n_gqa            = 8
0.00.537.154 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.537.160 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.537.161 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.537.162 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.537.163 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.537.163 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.537.164 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.537.169 I llm_load_print_meta: n_ff             = 16384
0.00.537.169 I llm_load_print_meta: n_expert         = 0
0.00.537.169 I llm_load_print_meta: n_expert_used    = 0
0.00.537.170 I llm_load_print_meta: causal attn      = 1
0.00.537.170 I llm_load_print_meta: pooling type     = 0
0.00.537.170 I llm_load_print_meta: rope type        = 2
0.00.537.171 I llm_load_print_meta: rope scaling     = linear
0.00.537.172 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.537.173 I llm_load_print_meta: freq_scale_train = 1
0.00.537.173 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.537.173 I llm_load_print_meta: rope_finetuned   = unknown
0.00.537.174 I llm_load_print_meta: ssm_d_conv       = 0
0.00.537.174 I llm_load_print_meta: ssm_d_inner      = 0
0.00.537.174 I llm_load_print_meta: ssm_d_state      = 0
0.00.537.174 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.537.175 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.537.176 I llm_load_print_meta: model type       = 2B
0.00.537.177 I llm_load_print_meta: model ftype      = Q8_0
0.00.537.177 I llm_load_print_meta: model params     = 2.51 B
0.00.537.178 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.537.179 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.537.179 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.537.179 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.537.180 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.537.180 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.537.181 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.537.182 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.537.182 I llm_load_print_meta: max token length = 93
0.00.537.362 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.609.463 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.609.472 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.615.080 I llama_new_context_with_model: n_ctx      = 8192
0.00.615.087 I llama_new_context_with_model: n_batch    = 2048
0.00.615.088 I llama_new_context_with_model: n_ubatch   = 512
0.00.615.088 I llama_new_context_with_model: flash_attn = 0
0.00.615.091 I llama_new_context_with_model: freq_base  = 10000.0
0.00.615.091 I llama_new_context_with_model: freq_scale = 1
0.00.645.187 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.645.230 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.645.346 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.646.750 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.646.756 I llama_new_context_with_model: graph nodes  = 601
0.00.646.757 I llama_new_context_with_model: graph splits = 1
0.00.646.774 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.265.336 I main: llama threadpool init, n_threads = 4
0.01.265.348 I 
0.01.265.444 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.265.445 I 
0.01.265.618 I sampler seed: 2647867492
0.01.265.629 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.265.634 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.265.635 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.02.953.383 I llama_perf_sampler_print:    sampling time =       6.01 ms /     5 runs   (    1.20 ms per token,   832.22 tokens per second)
0.02.953.386 I llama_perf_context_print:        load time =    1262.47 ms
0.02.953.388 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.953.400 I llama_perf_context_print:        eval time =    1676.55 ms /     4 runs   (  419.14 ms per token,     2.39 tokens per second)
0.02.953.401 I llama_perf_context_print:       total time =    1688.06 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m39.966s
user	1m52.524s
sys	0m9.614s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3809 (f3979df7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200124.68 ms
main:    total time = 200124.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.652 I build: 3809 (f3979df7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.002.796 I main: load the model and apply lora adapter, if any
0.00.024.786 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.980 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.072 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.083 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.084 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.089 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.090 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.090 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.091 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.092 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.093 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.100 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.101 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.102 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.103 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.103 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.161 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.454 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.716 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.725 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.726 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.727 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.728 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.729 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.730 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.733 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.734 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.735 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.735 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.736 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.745 I llama_model_loader: - type  f32:   37 tensors
0.00.197.750 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.751 I llama_model_loader: - type q6_K:   19 tensors
0.00.504.680 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.756 I llm_load_vocab: special tokens cache size = 5
0.00.564.410 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.564.468 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.564.469 I llm_load_print_meta: arch             = gemma
0.00.564.470 I llm_load_print_meta: vocab type       = SPM
0.00.564.471 I llm_load_print_meta: n_vocab          = 256000
0.00.564.474 I llm_load_print_meta: n_merges         = 0
0.00.564.475 I llm_load_print_meta: vocab_only       = 0
0.00.564.476 I llm_load_print_meta: n_ctx_train      = 8192
0.00.564.476 I llm_load_print_meta: n_embd           = 2048
0.00.564.476 I llm_load_print_meta: n_layer          = 18
0.00.564.513 I llm_load_print_meta: n_head           = 8
0.00.564.524 I llm_load_print_meta: n_head_kv        = 1
0.00.564.524 I llm_load_print_meta: n_rot            = 256
0.00.564.525 I llm_load_print_meta: n_swa            = 0
0.00.564.525 I llm_load_print_meta: n_embd_head_k    = 256
0.00.564.525 I llm_load_print_meta: n_embd_head_v    = 256
0.00.564.530 I llm_load_print_meta: n_gqa            = 8
0.00.564.535 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.564.540 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.564.541 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.564.542 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.564.543 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.564.543 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.564.544 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.564.548 I llm_load_print_meta: n_ff             = 16384
0.00.564.549 I llm_load_print_meta: n_expert         = 0
0.00.564.549 I llm_load_print_meta: n_expert_used    = 0
0.00.564.550 I llm_load_print_meta: causal attn      = 1
0.00.564.559 I llm_load_print_meta: pooling type     = 0
0.00.564.560 I llm_load_print_meta: rope type        = 2
0.00.564.560 I llm_load_print_meta: rope scaling     = linear
0.00.564.562 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.564.563 I llm_load_print_meta: freq_scale_train = 1
0.00.564.563 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.564.563 I llm_load_print_meta: rope_finetuned   = unknown
0.00.564.564 I llm_load_print_meta: ssm_d_conv       = 0
0.00.564.577 I llm_load_print_meta: ssm_d_inner      = 0
0.00.564.578 I llm_load_print_meta: ssm_d_state      = 0
0.00.564.587 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.564.588 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.564.589 I llm_load_print_meta: model type       = 2B
0.00.564.597 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.564.598 I llm_load_print_meta: model params     = 2.51 B
0.00.564.599 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.564.600 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.564.600 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.564.601 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.564.601 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.564.602 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.564.602 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.564.603 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.564.603 I llm_load_print_meta: max token length = 93
0.00.564.793 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.624.619 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.624.627 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.624.628 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.624.628 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.624.629 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.624.630 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.630.281 I llama_new_context_with_model: n_ctx      = 8192
0.00.630.289 I llama_new_context_with_model: n_batch    = 2048
0.00.630.289 I llama_new_context_with_model: n_ubatch   = 512
0.00.630.290 I llama_new_context_with_model: flash_attn = 0
0.00.630.293 I llama_new_context_with_model: freq_base  = 10000.0
0.00.630.294 I llama_new_context_with_model: freq_scale = 1
0.00.660.165 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.660.209 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.660.318 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.661.652 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.661.658 I llama_new_context_with_model: graph nodes  = 601
0.00.661.658 I llama_new_context_with_model: graph splits = 1
0.00.661.675 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.244.854 I main: llama threadpool init, n_threads = 4
0.01.244.865 I 
0.01.244.957 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.244.961 I 
0.01.245.127 I sampler seed: 1843159521
0.01.245.138 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.245.146 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.245.147 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconded arms outstretched in supplication.

The scene was a desolate wasteland, devoid of life and bathed in the dim glow of a dying sun. The wind

0.12.252.655 I llama_perf_sampler_print:    sampling time =      47.76 ms /    33 runs   (    1.45 ms per token,   690.95 tokens per second)
0.12.252.660 I llama_perf_context_print:        load time =    1241.98 ms
0.12.252.661 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.252.667 I llama_perf_context_print:        eval time =   10926.66 ms /    32 runs   (  341.46 ms per token,     2.93 tokens per second)
0.12.252.668 I llama_perf_context_print:       total time =   11007.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3809 (f3979df7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200233.65 ms
main:    total time = 200233.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.683 I build: 3809 (f3979df7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.905 I main: llama backend init
0.00.002.871 I main: load the model and apply lora adapter, if any
0.00.024.976 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.095 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.112 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.113 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.117 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.120 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.121 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.122 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.122 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.123 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.131 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.133 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.134 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.135 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.137 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.727 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.840 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.042 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.051 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.052 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.053 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.054 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.056 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.057 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.060 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.061 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.085 I llama_model_loader: - type  f32:   37 tensors
0.00.197.088 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.089 I llama_model_loader: - type q6_K:   19 tensors
0.00.493.611 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.494.656 I llm_load_vocab: special tokens cache size = 5
0.00.553.241 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.553.304 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.553.305 I llm_load_print_meta: arch             = gemma
0.00.553.306 I llm_load_print_meta: vocab type       = SPM
0.00.553.307 I llm_load_print_meta: n_vocab          = 256000
0.00.553.309 I llm_load_print_meta: n_merges         = 0
0.00.553.309 I llm_load_print_meta: vocab_only       = 0
0.00.553.310 I llm_load_print_meta: n_ctx_train      = 8192
0.00.553.310 I llm_load_print_meta: n_embd           = 2048
0.00.553.310 I llm_load_print_meta: n_layer          = 18
0.00.553.345 I llm_load_print_meta: n_head           = 8
0.00.553.352 I llm_load_print_meta: n_head_kv        = 1
0.00.553.353 I llm_load_print_meta: n_rot            = 256
0.00.553.353 I llm_load_print_meta: n_swa            = 0
0.00.553.354 I llm_load_print_meta: n_embd_head_k    = 256
0.00.553.354 I llm_load_print_meta: n_embd_head_v    = 256
0.00.553.358 I llm_load_print_meta: n_gqa            = 8
0.00.553.363 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.553.367 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.553.368 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.553.369 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.553.370 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.553.370 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.553.370 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.553.375 I llm_load_print_meta: n_ff             = 16384
0.00.553.375 I llm_load_print_meta: n_expert         = 0
0.00.553.375 I llm_load_print_meta: n_expert_used    = 0
0.00.553.376 I llm_load_print_meta: causal attn      = 1
0.00.553.376 I llm_load_print_meta: pooling type     = 0
0.00.553.376 I llm_load_print_meta: rope type        = 2
0.00.553.377 I llm_load_print_meta: rope scaling     = linear
0.00.553.378 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.553.379 I llm_load_print_meta: freq_scale_train = 1
0.00.553.379 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.553.380 I llm_load_print_meta: rope_finetuned   = unknown
0.00.553.380 I llm_load_print_meta: ssm_d_conv       = 0
0.00.553.380 I llm_load_print_meta: ssm_d_inner      = 0
0.00.553.381 I llm_load_print_meta: ssm_d_state      = 0
0.00.553.381 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.553.381 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.553.383 I llm_load_print_meta: model type       = 2B
0.00.553.383 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.553.384 I llm_load_print_meta: model params     = 2.51 B
0.00.553.385 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.553.386 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.553.410 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.553.411 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.553.412 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.553.412 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.553.413 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.553.414 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.553.414 I llm_load_print_meta: max token length = 93
0.00.553.615 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.611.517 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.617.261 I llama_new_context_with_model: n_ctx      = 8192
0.00.617.267 I llama_new_context_with_model: n_batch    = 2048
0.00.617.267 I llama_new_context_with_model: n_ubatch   = 512
0.00.617.268 I llama_new_context_with_model: flash_attn = 0
0.00.617.271 I llama_new_context_with_model: freq_base  = 10000.0
0.00.617.272 I llama_new_context_with_model: freq_scale = 1
0.00.649.495 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.649.541 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.649.657 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.651.056 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.651.065 I llama_new_context_with_model: graph nodes  = 601
0.00.651.066 I llama_new_context_with_model: graph splits = 1
0.00.651.083 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.230.870 I main: llama threadpool init, n_threads = 4
0.01.230.883 I 
0.01.230.988 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.230.993 I 
0.01.231.165 I sampler seed: 3520588676
0.01.231.176 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.231.181 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.231.182 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconal. 

**Explanation:**

A social network is a system of interconnected nodes (users, entities, or things) and the connections between them.

0.12.199.267 I llama_perf_sampler_print:    sampling time =      47.91 ms /    33 runs   (    1.45 ms per token,   688.78 tokens per second)
0.12.199.284 I llama_perf_context_print:        load time =    1227.90 ms
0.12.199.285 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.199.287 I llama_perf_context_print:        eval time =   10887.78 ms /    32 runs   (  340.24 ms per token,     2.94 tokens per second)
0.12.199.288 I llama_perf_context_print:       total time =   10968.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.698s
user	50m26.321s
sys	0m6.538s
