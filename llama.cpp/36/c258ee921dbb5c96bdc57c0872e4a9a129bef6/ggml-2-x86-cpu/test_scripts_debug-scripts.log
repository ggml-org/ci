+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.689 I build: 4760 (36c258ee) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.891 I main: llama backend init
0.00.000.898 I main: load the model and apply lora adapter, if any
0.00.089.664 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.089.679 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.089.787 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.089.821 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.089.827 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.089.835 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.089.839 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.089.843 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.089.846 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.089.849 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.089.852 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.089.865 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.089.869 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.089.878 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.089.882 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.089.884 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.318.046 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.423.807 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.447.201 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.447.227 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.447.230 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.447.233 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.447.235 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.447.239 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.447.242 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.447.250 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.447.253 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.447.256 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.447.261 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.447.264 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.447.277 I llama_model_loader: - type  f32:   37 tensors
0.00.447.282 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.302 I print_info: file format = GGUF V3 (latest)
0.00.447.305 I print_info: file type   = Q8_0
0.00.447.310 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.750.691 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.883.187 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.884.291 I load: special tokens cache size = 5
0.01.107.092 I load: token to piece cache size = 1.6014 MB
0.01.107.199 I print_info: arch             = gemma
0.01.107.204 I print_info: vocab_only       = 0
0.01.107.205 I print_info: n_ctx_train      = 8192
0.01.107.205 I print_info: n_embd           = 2048
0.01.107.206 I print_info: n_layer          = 18
0.01.107.285 I print_info: n_head           = 8
0.01.107.297 I print_info: n_head_kv        = 1
0.01.107.298 I print_info: n_rot            = 256
0.01.107.298 I print_info: n_swa            = 0
0.01.107.299 I print_info: n_embd_head_k    = 256
0.01.107.300 I print_info: n_embd_head_v    = 256
0.01.107.308 I print_info: n_gqa            = 8
0.01.107.315 I print_info: n_embd_k_gqa     = 256
0.01.107.325 I print_info: n_embd_v_gqa     = 256
0.01.107.329 I print_info: f_norm_eps       = 0.0e+00
0.01.107.331 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.107.332 I print_info: f_clamp_kqv      = 0.0e+00
0.01.107.333 I print_info: f_max_alibi_bias = 0.0e+00
0.01.107.334 I print_info: f_logit_scale    = 0.0e+00
0.01.107.341 I print_info: n_ff             = 16384
0.01.107.344 I print_info: n_expert         = 0
0.01.107.345 I print_info: n_expert_used    = 0
0.01.107.346 I print_info: causal attn      = 1
0.01.107.346 I print_info: pooling type     = 0
0.01.107.347 I print_info: rope type        = 2
0.01.107.349 I print_info: rope scaling     = linear
0.01.107.351 I print_info: freq_base_train  = 10000.0
0.01.107.352 I print_info: freq_scale_train = 1
0.01.107.353 I print_info: n_ctx_orig_yarn  = 8192
0.01.107.354 I print_info: rope_finetuned   = unknown
0.01.107.354 I print_info: ssm_d_conv       = 0
0.01.107.355 I print_info: ssm_d_inner      = 0
0.01.107.356 I print_info: ssm_d_state      = 0
0.01.107.357 I print_info: ssm_dt_rank      = 0
0.01.107.360 I print_info: ssm_dt_b_c_rms   = 0
0.01.107.362 I print_info: model type       = 2B
0.01.107.364 I print_info: model params     = 2.51 B
0.01.107.364 I print_info: general.name     = gemma-1.1-2b-it
0.01.107.370 I print_info: vocab type       = SPM
0.01.107.372 I print_info: n_vocab          = 256000
0.01.107.374 I print_info: n_merges         = 0
0.01.107.376 I print_info: BOS token        = 2 '<bos>'
0.01.107.377 I print_info: EOS token        = 1 '<eos>'
0.01.107.377 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.107.378 I print_info: UNK token        = 3 '<unk>'
0.01.107.379 I print_info: PAD token        = 0 '<pad>'
0.01.107.380 I print_info: LF token         = 227 '<0x0A>'
0.01.107.389 I print_info: EOG token        = 1 '<eos>'
0.01.107.391 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.107.391 I print_info: max token length = 93
0.01.107.395 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.227.591 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.227.603 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.227.605 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.227.606 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.227.607 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.227.608 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.234.992 I llama_init_from_model: n_seq_max     = 1
0.01.234.998 I llama_init_from_model: n_ctx         = 4096
0.01.234.999 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.234.999 I llama_init_from_model: n_batch       = 2048
0.01.235.000 I llama_init_from_model: n_ubatch      = 512
0.01.235.001 I llama_init_from_model: flash_attn    = 0
0.01.235.004 I llama_init_from_model: freq_base     = 10000.0
0.01.235.005 I llama_init_from_model: freq_scale    = 1
0.01.235.006 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.235.098 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.251.071 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.251.127 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.251.265 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.254.564 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.254.569 I llama_init_from_model: graph nodes  = 601
0.01.254.569 I llama_init_from_model: graph splits = 1
0.01.254.597 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.254.601 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.02.356.068 I main: llama threadpool init, n_threads = 4
0.02.356.084 I 
0.02.356.200 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.02.356.206 I 
0.02.356.513 I sampler seed: 2563288378
0.02.356.534 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.02.356.548 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.02.356.553 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.02.356.553 I 
 increasels, and other creatures. [end of text]


0.07.866.527 I llama_perf_sampler_print:    sampling time =      15.30 ms /     9 runs   (    1.70 ms per token,   588.24 tokens per second)
0.07.866.557 I llama_perf_context_print:        load time =    2315.22 ms
0.07.866.581 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.866.614 I llama_perf_context_print:        eval time =    5479.06 ms /     8 runs   (  684.88 ms per token,     1.46 tokens per second)
0.07.866.638 I llama_perf_context_print:       total time =    5550.31 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.682 I build: 4760 (36c258ee) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.920 I main: llama backend init
0.00.000.937 I main: load the model and apply lora adapter, if any
0.00.141.711 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.141.872 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.141.912 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.141.919 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.141.928 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.141.932 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.141.935 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.141.955 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.141.960 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.141.968 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.141.979 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.141.986 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.141.989 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.141.992 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.141.995 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.499.068 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.606.631 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.631.895 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.631.918 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.631.920 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.631.922 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.631.923 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.631.949 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.631.953 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.631.960 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.631.963 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.631.966 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.631.970 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.631.972 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.631.985 I llama_model_loader: - type  f32:   37 tensors
0.00.631.991 I llama_model_loader: - type q8_0:  127 tensors
0.00.632.016 I print_info: file format = GGUF V3 (latest)
0.00.632.020 I print_info: file type   = Q8_0
0.00.632.024 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.01.128.051 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.01.340.686 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.01.341.780 I load: special tokens cache size = 5
0.01.572.299 I load: token to piece cache size = 1.6014 MB
0.01.572.396 I print_info: arch             = gemma
0.01.572.403 I print_info: vocab_only       = 0
0.01.572.404 I print_info: n_ctx_train      = 8192
0.01.572.405 I print_info: n_embd           = 2048
0.01.572.405 I print_info: n_layer          = 18
0.01.572.486 I print_info: n_head           = 8
0.01.572.496 I print_info: n_head_kv        = 1
0.01.572.498 I print_info: n_rot            = 256
0.01.572.498 I print_info: n_swa            = 0
0.01.572.499 I print_info: n_embd_head_k    = 256
0.01.572.499 I print_info: n_embd_head_v    = 256
0.01.572.506 I print_info: n_gqa            = 8
0.01.572.513 I print_info: n_embd_k_gqa     = 256
0.01.572.520 I print_info: n_embd_v_gqa     = 256
0.01.572.525 I print_info: f_norm_eps       = 0.0e+00
0.01.572.527 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.572.528 I print_info: f_clamp_kqv      = 0.0e+00
0.01.572.529 I print_info: f_max_alibi_bias = 0.0e+00
0.01.572.529 I print_info: f_logit_scale    = 0.0e+00
0.01.572.537 I print_info: n_ff             = 16384
0.01.572.538 I print_info: n_expert         = 0
0.01.572.539 I print_info: n_expert_used    = 0
0.01.572.540 I print_info: causal attn      = 1
0.01.572.541 I print_info: pooling type     = 0
0.01.572.541 I print_info: rope type        = 2
0.01.572.545 I print_info: rope scaling     = linear
0.01.572.547 I print_info: freq_base_train  = 10000.0
0.01.572.548 I print_info: freq_scale_train = 1
0.01.572.549 I print_info: n_ctx_orig_yarn  = 8192
0.01.572.550 I print_info: rope_finetuned   = unknown
0.01.572.551 I print_info: ssm_d_conv       = 0
0.01.572.552 I print_info: ssm_d_inner      = 0
0.01.572.553 I print_info: ssm_d_state      = 0
0.01.572.553 I print_info: ssm_dt_rank      = 0
0.01.572.554 I print_info: ssm_dt_b_c_rms   = 0
0.01.572.556 I print_info: model type       = 2B
0.01.572.558 I print_info: model params     = 2.51 B
0.01.572.559 I print_info: general.name     = gemma-1.1-2b-it
0.01.572.564 I print_info: vocab type       = SPM
0.01.572.566 I print_info: n_vocab          = 256000
0.01.572.569 I print_info: n_merges         = 0
0.01.572.573 I print_info: BOS token        = 2 '<bos>'
0.01.572.573 I print_info: EOS token        = 1 '<eos>'
0.01.572.575 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.572.579 I print_info: UNK token        = 3 '<unk>'
0.01.572.587 I print_info: PAD token        = 0 '<pad>'
0.01.572.588 I print_info: LF token         = 227 '<0x0A>'
0.01.572.594 I print_info: EOG token        = 1 '<eos>'
0.01.572.595 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.572.599 I print_info: max token length = 93
0.01.572.601 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.671.867 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.679.111 I llama_init_from_model: n_seq_max     = 1
0.01.679.118 I llama_init_from_model: n_ctx         = 4096
0.01.679.118 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.679.119 I llama_init_from_model: n_batch       = 2048
0.01.679.119 I llama_init_from_model: n_ubatch      = 512
0.01.679.120 I llama_init_from_model: flash_attn    = 0
0.01.679.123 I llama_init_from_model: freq_base     = 10000.0
0.01.679.124 I llama_init_from_model: freq_scale    = 1
0.01.679.124 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.679.217 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.694.588 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.694.636 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.694.779 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.698.048 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.698.053 I llama_init_from_model: graph nodes  = 601
0.01.698.053 I llama_init_from_model: graph splits = 1
0.01.698.080 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.698.080 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.02.789.302 I main: llama threadpool init, n_threads = 4
0.02.789.316 I 
0.02.789.417 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.02.789.421 I 
0.02.789.669 I sampler seed: 471111472
0.02.789.683 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.02.789.696 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.02.789.700 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.02.789.700 I 
 increasities

I am unable to generate text that is sexually suggestive in nature. My purpose is to assist with tasks and provide information that is safe and appropriate for

0.24.602.845 I llama_perf_sampler_print:    sampling time =      55.72 ms /    33 runs   (    1.69 ms per token,   592.24 tokens per second)
0.24.602.873 I llama_perf_context_print:        load time =    2761.57 ms
0.24.602.896 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.24.602.918 I llama_perf_context_print:        eval time =   21705.68 ms /    32 runs   (  678.30 ms per token,     1.47 tokens per second)
0.24.602.940 I llama_perf_context_print:       total time =   21840.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.680 I build: 4760 (36c258ee) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.888 I main: llama backend init
0.00.000.896 I main: load the model and apply lora adapter, if any
0.00.086.052 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.086.067 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.086.172 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.199 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.205 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.212 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.215 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.218 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.221 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.224 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.232 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.256 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.261 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.264 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.267 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.271 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.292.897 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.398.632 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.422.118 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.422.136 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.422.138 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.422.154 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.422.157 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.422.160 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.422.163 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.422.170 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.422.173 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.422.176 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.422.179 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.422.195 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.422.209 I llama_model_loader: - type  f32:   37 tensors
0.00.422.214 I llama_model_loader: - type q8_0:  127 tensors
0.00.422.236 I print_info: file format = GGUF V3 (latest)
0.00.422.239 I print_info: file type   = Q8_0
0.00.422.242 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.717.200 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.890.880 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.892.504 I load: special tokens cache size = 5
0.01.182.267 I load: token to piece cache size = 1.6014 MB
0.01.182.363 I print_info: arch             = gemma
0.01.182.368 I print_info: vocab_only       = 0
0.01.182.369 I print_info: n_ctx_train      = 8192
0.01.182.369 I print_info: n_embd           = 2048
0.01.182.369 I print_info: n_layer          = 18
0.01.182.447 I print_info: n_head           = 8
0.01.182.458 I print_info: n_head_kv        = 1
0.01.182.479 I print_info: n_rot            = 256
0.01.182.483 I print_info: n_swa            = 0
0.01.182.484 I print_info: n_embd_head_k    = 256
0.01.182.484 I print_info: n_embd_head_v    = 256
0.01.182.492 I print_info: n_gqa            = 8
0.01.182.499 I print_info: n_embd_k_gqa     = 256
0.01.182.506 I print_info: n_embd_v_gqa     = 256
0.01.182.508 I print_info: f_norm_eps       = 0.0e+00
0.01.182.510 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.182.511 I print_info: f_clamp_kqv      = 0.0e+00
0.01.182.520 I print_info: f_max_alibi_bias = 0.0e+00
0.01.182.521 I print_info: f_logit_scale    = 0.0e+00
0.01.182.533 I print_info: n_ff             = 16384
0.01.182.534 I print_info: n_expert         = 0
0.01.182.539 I print_info: n_expert_used    = 0
0.01.182.540 I print_info: causal attn      = 1
0.01.182.540 I print_info: pooling type     = 0
0.01.182.541 I print_info: rope type        = 2
0.01.182.542 I print_info: rope scaling     = linear
0.01.182.544 I print_info: freq_base_train  = 10000.0
0.01.182.545 I print_info: freq_scale_train = 1
0.01.182.546 I print_info: n_ctx_orig_yarn  = 8192
0.01.182.550 I print_info: rope_finetuned   = unknown
0.01.182.551 I print_info: ssm_d_conv       = 0
0.01.182.551 I print_info: ssm_d_inner      = 0
0.01.182.552 I print_info: ssm_d_state      = 0
0.01.182.553 I print_info: ssm_dt_rank      = 0
0.01.182.554 I print_info: ssm_dt_b_c_rms   = 0
0.01.182.559 I print_info: model type       = 2B
0.01.182.569 I print_info: model params     = 2.51 B
0.01.182.569 I print_info: general.name     = gemma-1.1-2b-it
0.01.182.573 I print_info: vocab type       = SPM
0.01.182.575 I print_info: n_vocab          = 256000
0.01.182.578 I print_info: n_merges         = 0
0.01.182.579 I print_info: BOS token        = 2 '<bos>'
0.01.182.579 I print_info: EOS token        = 1 '<eos>'
0.01.182.580 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.182.580 I print_info: UNK token        = 3 '<unk>'
0.01.182.581 I print_info: PAD token        = 0 '<pad>'
0.01.182.582 I print_info: LF token         = 227 '<0x0A>'
0.01.182.590 I print_info: EOG token        = 1 '<eos>'
0.01.182.592 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.182.593 I print_info: max token length = 93
0.01.182.596 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.260.205 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.260.215 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.260.216 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.260.217 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.260.217 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.260.218 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.267.504 I llama_init_from_model: n_seq_max     = 1
0.01.267.511 I llama_init_from_model: n_ctx         = 4096
0.01.267.511 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.267.512 I llama_init_from_model: n_batch       = 2048
0.01.267.512 I llama_init_from_model: n_ubatch      = 512
0.01.267.512 I llama_init_from_model: flash_attn    = 0
0.01.267.515 I llama_init_from_model: freq_base     = 10000.0
0.01.267.516 I llama_init_from_model: freq_scale    = 1
0.01.267.516 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.267.607 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.283.485 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.283.529 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.283.665 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.287.224 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.287.228 I llama_init_from_model: graph nodes  = 601
0.01.287.228 I llama_init_from_model: graph splits = 1
0.01.287.253 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.287.254 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.02.381.295 I main: llama threadpool init, n_threads = 4
0.02.381.305 I 
0.02.381.408 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.02.381.412 I 
0.02.381.654 I sampler seed: 2620310309
0.02.381.666 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.02.381.676 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.02.381.677 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.02.381.692 I 
 increasities, and the rise of empires and kingdoms. [end of text]


0.10.419.477 I llama_perf_sampler_print:    sampling time =      19.85 ms /    13 runs   (    1.53 ms per token,   655.01 tokens per second)
0.10.419.498 I llama_perf_context_print:        load time =    2353.47 ms
0.10.419.516 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.419.533 I llama_perf_context_print:        eval time =    7999.08 ms /    12 runs   (  666.59 ms per token,     1.50 tokens per second)
0.10.419.550 I llama_perf_context_print:       total time =    8064.99 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.692 I build: 4760 (36c258ee) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.896 I main: llama backend init
0.00.000.905 I main: load the model and apply lora adapter, if any
0.00.087.357 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.087.371 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.087.478 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.506 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.511 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.520 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.524 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.529 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.532 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.535 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.538 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.549 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.554 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.557 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.561 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.087.563 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.300.474 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.413.874 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.438.205 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.438.229 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.438.231 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.438.250 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.438.252 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.438.254 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.438.256 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.438.261 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.438.263 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.438.265 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.438.268 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.438.269 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.438.279 I llama_model_loader: - type  f32:   37 tensors
0.00.438.282 I llama_model_loader: - type q8_0:  127 tensors
0.00.438.301 I print_info: file format = GGUF V3 (latest)
0.00.438.306 I print_info: file type   = Q8_0
0.00.438.311 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.758.171 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.986.795 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.987.859 I load: special tokens cache size = 5
0.01.219.039 I load: token to piece cache size = 1.6014 MB
0.01.219.148 I print_info: arch             = gemma
0.01.219.152 I print_info: vocab_only       = 0
0.01.219.153 I print_info: n_ctx_train      = 8192
0.01.219.153 I print_info: n_embd           = 2048
0.01.219.154 I print_info: n_layer          = 18
0.01.219.233 I print_info: n_head           = 8
0.01.219.245 I print_info: n_head_kv        = 1
0.01.219.246 I print_info: n_rot            = 256
0.01.219.247 I print_info: n_swa            = 0
0.01.219.248 I print_info: n_embd_head_k    = 256
0.01.219.248 I print_info: n_embd_head_v    = 256
0.01.219.256 I print_info: n_gqa            = 8
0.01.219.264 I print_info: n_embd_k_gqa     = 256
0.01.219.274 I print_info: n_embd_v_gqa     = 256
0.01.219.276 I print_info: f_norm_eps       = 0.0e+00
0.01.219.277 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.219.278 I print_info: f_clamp_kqv      = 0.0e+00
0.01.219.278 I print_info: f_max_alibi_bias = 0.0e+00
0.01.219.279 I print_info: f_logit_scale    = 0.0e+00
0.01.219.287 I print_info: n_ff             = 16384
0.01.219.288 I print_info: n_expert         = 0
0.01.219.289 I print_info: n_expert_used    = 0
0.01.219.289 I print_info: causal attn      = 1
0.01.219.291 I print_info: pooling type     = 0
0.01.219.292 I print_info: rope type        = 2
0.01.219.293 I print_info: rope scaling     = linear
0.01.219.295 I print_info: freq_base_train  = 10000.0
0.01.219.296 I print_info: freq_scale_train = 1
0.01.219.297 I print_info: n_ctx_orig_yarn  = 8192
0.01.219.298 I print_info: rope_finetuned   = unknown
0.01.219.299 I print_info: ssm_d_conv       = 0
0.01.219.299 I print_info: ssm_d_inner      = 0
0.01.219.299 I print_info: ssm_d_state      = 0
0.01.219.300 I print_info: ssm_dt_rank      = 0
0.01.219.301 I print_info: ssm_dt_b_c_rms   = 0
0.01.219.303 I print_info: model type       = 2B
0.01.219.305 I print_info: model params     = 2.51 B
0.01.219.306 I print_info: general.name     = gemma-1.1-2b-it
0.01.219.310 I print_info: vocab type       = SPM
0.01.219.312 I print_info: n_vocab          = 256000
0.01.219.315 I print_info: n_merges         = 0
0.01.219.316 I print_info: BOS token        = 2 '<bos>'
0.01.219.317 I print_info: EOS token        = 1 '<eos>'
0.01.219.318 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.219.319 I print_info: UNK token        = 3 '<unk>'
0.01.219.320 I print_info: PAD token        = 0 '<pad>'
0.01.219.322 I print_info: LF token         = 227 '<0x0A>'
0.01.219.329 I print_info: EOG token        = 1 '<eos>'
0.01.219.338 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.219.339 I print_info: max token length = 93
0.01.219.342 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.308.548 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.308.559 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.315.833 I llama_init_from_model: n_seq_max     = 1
0.01.315.839 I llama_init_from_model: n_ctx         = 4096
0.01.315.839 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.315.840 I llama_init_from_model: n_batch       = 2048
0.01.315.840 I llama_init_from_model: n_ubatch      = 512
0.01.315.841 I llama_init_from_model: flash_attn    = 0
0.01.315.843 I llama_init_from_model: freq_base     = 10000.0
0.01.315.844 I llama_init_from_model: freq_scale    = 1
0.01.315.845 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.315.943 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.331.313 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.331.358 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.331.490 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.334.751 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.334.755 I llama_init_from_model: graph nodes  = 601
0.01.334.755 I llama_init_from_model: graph splits = 1
0.01.334.781 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.334.782 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.02.430.285 I main: llama threadpool init, n_threads = 4
0.02.430.297 I 
0.02.430.385 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.02.430.390 I 
0.02.430.655 I sampler seed: 3864500306
0.02.430.668 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.02.430.688 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.02.430.693 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.02.430.693 I 
 increably with the sun,
But hides its face in winter's shroud.

What am I?
\
... The Moon [end of text]


0.22.292.807 I llama_perf_sampler_print:    sampling time =      52.61 ms /    30 runs   (    1.75 ms per token,   570.19 tokens per second)
0.22.292.841 I llama_perf_context_print:        load time =    2402.62 ms
0.22.292.859 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.22.292.877 I llama_perf_context_print:        eval time =   19760.21 ms /    29 runs   (  681.39 ms per token,     1.47 tokens per second)
0.22.292.894 I llama_perf_context_print:       total time =   19889.19 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m18.464s
user	4m4.650s
sys	0m10.819s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4760 (36c258ee)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 206118.18 ms
main:    total time = 206118.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.641 I build: 4760 (36c258ee) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.086.251 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.086.266 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.086.384 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.412 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.419 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.426 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.429 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.432 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.434 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.437 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.439 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.449 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.452 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.455 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.457 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.354.427 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.459.309 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.482.698 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.482.717 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.482.729 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.482.735 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.482.738 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.482.744 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.482.747 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.482.758 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.482.773 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.482.776 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.482.779 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.482.785 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.482.788 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.482.799 I llama_model_loader: - type  f32:   37 tensors
0.00.482.810 I llama_model_loader: - type q4_K:  108 tensors
0.00.482.811 I llama_model_loader: - type q6_K:   19 tensors
0.00.482.830 I print_info: file format = GGUF V3 (latest)
0.00.482.844 I print_info: file type   = Q4_K - Medium
0.00.482.848 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.755.788 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.886.288 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.887.355 I load: special tokens cache size = 5
0.01.121.891 I load: token to piece cache size = 1.6014 MB
0.01.121.986 I print_info: arch             = gemma
0.01.121.990 I print_info: vocab_only       = 0
0.01.121.991 I print_info: n_ctx_train      = 8192
0.01.121.991 I print_info: n_embd           = 2048
0.01.121.992 I print_info: n_layer          = 18
0.01.122.072 I print_info: n_head           = 8
0.01.122.084 I print_info: n_head_kv        = 1
0.01.122.085 I print_info: n_rot            = 256
0.01.122.086 I print_info: n_swa            = 0
0.01.122.087 I print_info: n_embd_head_k    = 256
0.01.122.088 I print_info: n_embd_head_v    = 256
0.01.122.095 I print_info: n_gqa            = 8
0.01.122.110 I print_info: n_embd_k_gqa     = 256
0.01.122.120 I print_info: n_embd_v_gqa     = 256
0.01.122.122 I print_info: f_norm_eps       = 0.0e+00
0.01.122.124 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.122.125 I print_info: f_clamp_kqv      = 0.0e+00
0.01.122.126 I print_info: f_max_alibi_bias = 0.0e+00
0.01.122.126 I print_info: f_logit_scale    = 0.0e+00
0.01.122.134 I print_info: n_ff             = 16384
0.01.122.135 I print_info: n_expert         = 0
0.01.122.135 I print_info: n_expert_used    = 0
0.01.122.136 I print_info: causal attn      = 1
0.01.122.138 I print_info: pooling type     = 0
0.01.122.138 I print_info: rope type        = 2
0.01.122.139 I print_info: rope scaling     = linear
0.01.122.141 I print_info: freq_base_train  = 10000.0
0.01.122.142 I print_info: freq_scale_train = 1
0.01.122.143 I print_info: n_ctx_orig_yarn  = 8192
0.01.122.144 I print_info: rope_finetuned   = unknown
0.01.122.145 I print_info: ssm_d_conv       = 0
0.01.122.145 I print_info: ssm_d_inner      = 0
0.01.122.146 I print_info: ssm_d_state      = 0
0.01.122.147 I print_info: ssm_dt_rank      = 0
0.01.122.148 I print_info: ssm_dt_b_c_rms   = 0
0.01.122.151 I print_info: model type       = 2B
0.01.122.153 I print_info: model params     = 2.51 B
0.01.122.154 I print_info: general.name     = gemma-1.1-2b-it
0.01.122.159 I print_info: vocab type       = SPM
0.01.122.161 I print_info: n_vocab          = 256000
0.01.122.164 I print_info: n_merges         = 0
0.01.122.165 I print_info: BOS token        = 2 '<bos>'
0.01.122.166 I print_info: EOS token        = 1 '<eos>'
0.01.122.167 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.122.168 I print_info: UNK token        = 3 '<unk>'
0.01.122.169 I print_info: PAD token        = 0 '<pad>'
0.01.122.170 I print_info: LF token         = 227 '<0x0A>'
0.01.122.177 I print_info: EOG token        = 1 '<eos>'
0.01.122.179 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.122.179 I print_info: max token length = 93
0.01.122.181 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.190.127 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.190.138 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.190.139 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.190.140 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.190.141 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.190.142 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.197.375 I llama_init_from_model: n_seq_max     = 1
0.01.197.380 I llama_init_from_model: n_ctx         = 4096
0.01.197.381 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.197.382 I llama_init_from_model: n_batch       = 2048
0.01.197.383 I llama_init_from_model: n_ubatch      = 512
0.01.197.383 I llama_init_from_model: flash_attn    = 0
0.01.197.387 I llama_init_from_model: freq_base     = 10000.0
0.01.197.388 I llama_init_from_model: freq_scale    = 1
0.01.197.389 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.197.478 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.212.533 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.212.579 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.212.719 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.216.021 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.216.025 I llama_init_from_model: graph nodes  = 601
0.01.216.026 I llama_init_from_model: graph splits = 1
0.01.216.054 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.216.064 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.02.215.521 I main: llama threadpool init, n_threads = 4
0.02.215.534 I 
0.02.215.628 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.02.215.631 I 
0.02.215.874 I sampler seed: 3201520307
0.02.215.890 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.02.215.906 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.02.215.909 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.02.215.909 I 
 seconded:

"I have a question about the role of the Holy Spirit in the life of a believer."

The question is a valid theological inquiry that

0.20.592.207 I llama_perf_sampler_print:    sampling time =      49.80 ms /    33 runs   (    1.51 ms per token,   662.69 tokens per second)
0.20.592.244 I llama_perf_context_print:        load time =    2187.85 ms
0.20.592.263 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.20.592.281 I llama_perf_context_print:        eval time =   18280.29 ms /    32 runs   (  571.26 ms per token,     1.75 tokens per second)
0.20.592.298 I llama_perf_context_print:       total time =   18403.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4760 (36c258ee)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 194691.45 ms
main:    total time = 194691.45 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.633 I build: 4760 (36c258ee) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.000.839 I main: load the model and apply lora adapter, if any
0.00.086.141 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.086.271 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.298 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.303 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.310 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.312 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.314 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.315 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.317 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.319 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.326 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.328 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.331 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.332 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.310.413 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.410.312 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.433.854 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.433.871 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.433.873 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.433.875 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.433.876 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.433.879 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.433.880 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.433.885 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.433.887 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.433.890 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.433.899 I llama_model_loader: - type  f32:   37 tensors
0.00.433.901 I llama_model_loader: - type q4_K:  108 tensors
0.00.433.902 I llama_model_loader: - type q6_K:   19 tensors
0.00.433.920 I print_info: file format = GGUF V3 (latest)
0.00.433.921 I print_info: file type   = Q4_K - Medium
0.00.433.923 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.716.849 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.842.858 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.843.858 I load: special tokens cache size = 5
0.01.078.705 I load: token to piece cache size = 1.6014 MB
0.01.078.790 I print_info: arch             = gemma
0.01.078.795 I print_info: vocab_only       = 0
0.01.078.795 I print_info: n_ctx_train      = 8192
0.01.078.796 I print_info: n_embd           = 2048
0.01.078.796 I print_info: n_layer          = 18
0.01.078.871 I print_info: n_head           = 8
0.01.078.882 I print_info: n_head_kv        = 1
0.01.078.882 I print_info: n_rot            = 256
0.01.078.883 I print_info: n_swa            = 0
0.01.078.884 I print_info: n_embd_head_k    = 256
0.01.078.884 I print_info: n_embd_head_v    = 256
0.01.078.890 I print_info: n_gqa            = 8
0.01.078.895 I print_info: n_embd_k_gqa     = 256
0.01.078.900 I print_info: n_embd_v_gqa     = 256
0.01.078.902 I print_info: f_norm_eps       = 0.0e+00
0.01.078.903 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.078.904 I print_info: f_clamp_kqv      = 0.0e+00
0.01.078.905 I print_info: f_max_alibi_bias = 0.0e+00
0.01.078.905 I print_info: f_logit_scale    = 0.0e+00
0.01.078.910 I print_info: n_ff             = 16384
0.01.078.919 I print_info: n_expert         = 0
0.01.078.922 I print_info: n_expert_used    = 0
0.01.078.923 I print_info: causal attn      = 1
0.01.078.923 I print_info: pooling type     = 0
0.01.078.924 I print_info: rope type        = 2
0.01.078.924 I print_info: rope scaling     = linear
0.01.078.926 I print_info: freq_base_train  = 10000.0
0.01.078.927 I print_info: freq_scale_train = 1
0.01.078.927 I print_info: n_ctx_orig_yarn  = 8192
0.01.078.928 I print_info: rope_finetuned   = unknown
0.01.078.928 I print_info: ssm_d_conv       = 0
0.01.078.928 I print_info: ssm_d_inner      = 0
0.01.078.929 I print_info: ssm_d_state      = 0
0.01.078.929 I print_info: ssm_dt_rank      = 0
0.01.078.941 I print_info: ssm_dt_b_c_rms   = 0
0.01.078.943 I print_info: model type       = 2B
0.01.078.944 I print_info: model params     = 2.51 B
0.01.078.944 I print_info: general.name     = gemma-1.1-2b-it
0.01.078.948 I print_info: vocab type       = SPM
0.01.078.950 I print_info: n_vocab          = 256000
0.01.078.952 I print_info: n_merges         = 0
0.01.078.953 I print_info: BOS token        = 2 '<bos>'
0.01.078.954 I print_info: EOS token        = 1 '<eos>'
0.01.078.955 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.078.955 I print_info: UNK token        = 3 '<unk>'
0.01.078.958 I print_info: PAD token        = 0 '<pad>'
0.01.078.959 I print_info: LF token         = 227 '<0x0A>'
0.01.078.965 I print_info: EOG token        = 1 '<eos>'
0.01.078.967 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.078.967 I print_info: max token length = 93
0.01.078.969 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.126.568 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.133.615 I llama_init_from_model: n_seq_max     = 1
0.01.133.622 I llama_init_from_model: n_ctx         = 4096
0.01.133.622 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.133.622 I llama_init_from_model: n_batch       = 2048
0.01.133.623 I llama_init_from_model: n_ubatch      = 512
0.01.133.623 I llama_init_from_model: flash_attn    = 0
0.01.133.626 I llama_init_from_model: freq_base     = 10000.0
0.01.133.627 I llama_init_from_model: freq_scale    = 1
0.01.133.628 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.133.718 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.149.860 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.149.900 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.150.033 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.153.270 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.153.274 I llama_init_from_model: graph nodes  = 601
0.01.153.274 I llama_init_from_model: graph splits = 1
0.01.153.299 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.153.302 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.763.386 I main: llama threadpool init, n_threads = 4
0.01.763.400 I 
0.01.763.492 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.763.496 I 
0.01.763.728 I sampler seed: 2804934800
0.01.763.741 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.763.752 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.763.753 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.763.753 I 
 squared with the following conditions:

1. The square root of the difference between the squares of any two consecutive integers is an integer.
2. The

0.12.775.642 I llama_perf_sampler_print:    sampling time =      49.45 ms /    33 runs   (    1.50 ms per token,   667.38 tokens per second)
0.12.775.648 I llama_perf_context_print:        load time =    1735.91 ms
0.12.775.649 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.775.651 I llama_perf_context_print:        eval time =   10926.44 ms /    32 runs   (  341.45 ms per token,     2.93 tokens per second)
0.12.775.653 I llama_perf_context_print:       total time =   11038.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m17.778s
user	46m53.446s
sys	0m7.047s
