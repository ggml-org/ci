+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
main: build = 3742 (3653fede)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
[34m00000.00.000.455[0m [32mI [0mmain: llama backend init
[34m00000.00.001.589[0m [32mI [0mmain: load the model and apply lora adapter, if any
[34m00000.00.022.158[0m [32mI [0mllama_model_loader: additional 5 GGUFs metadata loaded.
[34m00000.00.022.208[0m [32mI [0mllama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
[34m00000.00.022.223[0m [32mI [0mllama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
[34m00000.00.022.230[0m [32mI [0mllama_model_loader: - kv   0:                       general.architecture str              = gemma
[34m00000.00.022.232[0m [32mI [0mllama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
[34m00000.00.022.236[0m [32mI [0mllama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
[34m00000.00.022.237[0m [32mI [0mllama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
[34m00000.00.022.237[0m [32mI [0mllama_model_loader: - kv   4:                          gemma.block_count u32              = 18
[34m00000.00.022.238[0m [32mI [0mllama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
[34m00000.00.022.238[0m [32mI [0mllama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
[34m00000.00.022.239[0m [32mI [0mllama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
[34m00000.00.022.243[0m [32mI [0mllama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
[34m00000.00.022.244[0m [32mI [0mllama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
[34m00000.00.022.245[0m [32mI [0mllama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
[34m00000.00.022.245[0m [32mI [0mllama_model_loader: - kv  11:                          general.file_type u32              = 7
[34m00000.00.022.246[0m [32mI [0mllama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
[34m00000.00.049.812[0m [32mI [0mllama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
[34m00000.00.126.398[0m [32mI [0mllama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
[34m00000.00.133.293[0m [32mI [0mllama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
[34m00000.00.133.301[0m [32mI [0mllama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
[34m00000.00.133.302[0m [32mI [0mllama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
[34m00000.00.133.303[0m [32mI [0mllama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
[34m00000.00.133.303[0m [32mI [0mllama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
[34m00000.00.133.304[0m [32mI [0mllama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
[34m00000.00.133.305[0m [32mI [0mllama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
[34m00000.00.133.307[0m [32mI [0mllama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
[34m00000.00.133.308[0m [32mI [0mllama_model_loader: - kv  23:               general.quantization_version u32              = 2
[34m00000.00.133.309[0m [32mI [0mllama_model_loader: - kv  24:                                   split.no u16              = 0
[34m00000.00.133.309[0m [32mI [0mllama_model_loader: - kv  25:                                split.count u16              = 6
[34m00000.00.133.310[0m [32mI [0mllama_model_loader: - kv  26:                        split.tensors.count i32              = 164
[34m00000.00.133.313[0m [32mI [0mllama_model_loader: - type  f32:   37 tensors
[34m00000.00.133.316[0m [32mI [0mllama_model_loader: - type q8_0:  127 tensors
[34m00000.00.206.215[0m [35mW llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
[0m[34m00000.00.206.996[0m [32mI [0mllm_load_vocab: special tokens cache size = 5
[34m00000.00.225.515[0m [32mI [0mllm_load_vocab: token to piece cache size = 1.6014 MB
[34m00000.00.225.530[0m [32mI [0mllm_load_print_meta: format           = GGUF V3 (latest)
[34m00000.00.225.531[0m [32mI [0mllm_load_print_meta: arch             = gemma
[34m00000.00.225.531[0m [32mI [0mllm_load_print_meta: vocab type       = SPM
[34m00000.00.225.532[0m [32mI [0mllm_load_print_meta: n_vocab          = 256000
[34m00000.00.225.533[0m [32mI [0mllm_load_print_meta: n_merges         = 0
[34m00000.00.225.533[0m [32mI [0mllm_load_print_meta: vocab_only       = 0
[34m00000.00.225.534[0m [32mI [0mllm_load_print_meta: n_ctx_train      = 8192
[34m00000.00.225.534[0m [32mI [0mllm_load_print_meta: n_embd           = 2048
[34m00000.00.225.534[0m [32mI [0mllm_load_print_meta: n_layer          = 18
[34m00000.00.225.547[0m [32mI [0mllm_load_print_meta: n_head           = 8
[34m00000.00.225.549[0m [32mI [0mllm_load_print_meta: n_head_kv        = 1
[34m00000.00.225.549[0m [32mI [0mllm_load_print_meta: n_rot            = 256
[34m00000.00.225.549[0m [32mI [0mllm_load_print_meta: n_swa            = 0
[34m00000.00.225.549[0m [32mI [0mllm_load_print_meta: n_embd_head_k    = 256
[34m00000.00.225.550[0m [32mI [0mllm_load_print_meta: n_embd_head_v    = 256
[34m00000.00.225.551[0m [32mI [0mllm_load_print_meta: n_gqa            = 8
[34m00000.00.225.552[0m [32mI [0mllm_load_print_meta: n_embd_k_gqa     = 256
[34m00000.00.225.553[0m [32mI [0mllm_load_print_meta: n_embd_v_gqa     = 256
[34m00000.00.225.554[0m [32mI [0mllm_load_print_meta: f_norm_eps       = 0.0e+00
[34m00000.00.225.555[0m [32mI [0mllm_load_print_meta: f_norm_rms_eps   = 1.0e-06
[34m00000.00.225.555[0m [32mI [0mllm_load_print_meta: f_clamp_kqv      = 0.0e+00
[34m00000.00.225.556[0m [32mI [0mllm_load_print_meta: f_max_alibi_bias = 0.0e+00
[34m00000.00.225.556[0m [32mI [0mllm_load_print_meta: f_logit_scale    = 0.0e+00
[34m00000.00.225.557[0m [32mI [0mllm_load_print_meta: n_ff             = 16384
[34m00000.00.225.557[0m [32mI [0mllm_load_print_meta: n_expert         = 0
[34m00000.00.225.558[0m [32mI [0mllm_load_print_meta: n_expert_used    = 0
[34m00000.00.225.558[0m [32mI [0mllm_load_print_meta: causal attn      = 1
[34m00000.00.225.558[0m [32mI [0mllm_load_print_meta: pooling type     = 0
[34m00000.00.225.558[0m [32mI [0mllm_load_print_meta: rope type        = 2
[34m00000.00.225.559[0m [32mI [0mllm_load_print_meta: rope scaling     = linear
[34m00000.00.225.560[0m [32mI [0mllm_load_print_meta: freq_base_train  = 10000.0
[34m00000.00.225.561[0m [32mI [0mllm_load_print_meta: freq_scale_train = 1
[34m00000.00.225.561[0m [32mI [0mllm_load_print_meta: n_ctx_orig_yarn  = 8192
[34m00000.00.225.561[0m [32mI [0mllm_load_print_meta: rope_finetuned   = unknown
[34m00000.00.225.562[0m [32mI [0mllm_load_print_meta: ssm_d_conv       = 0
[34m00000.00.225.562[0m [32mI [0mllm_load_print_meta: ssm_d_inner      = 0
[34m00000.00.225.562[0m [32mI [0mllm_load_print_meta: ssm_d_state      = 0
[34m00000.00.225.563[0m [32mI [0mllm_load_print_meta: ssm_dt_rank      = 0
[34m00000.00.225.563[0m [32mI [0mllm_load_print_meta: ssm_dt_b_c_rms   = 0
[34m00000.00.225.563[0m [32mI [0mllm_load_print_meta: model type       = 2B
[34m00000.00.225.564[0m [32mI [0mllm_load_print_meta: model ftype      = Q8_0
[34m00000.00.225.565[0m [32mI [0mllm_load_print_meta: model params     = 2.51 B
[34m00000.00.225.566[0m [32mI [0mllm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
[34m00000.00.225.566[0m [32mI [0mllm_load_print_meta: general.name     = gemma-1.1-2b-it
[34m00000.00.225.567[0m [32mI [0mllm_load_print_meta: BOS token        = 2 '<bos>'
[34m00000.00.225.567[0m [32mI [0mllm_load_print_meta: EOS token        = 1 '<eos>'
[34m00000.00.225.567[0m [32mI [0mllm_load_print_meta: UNK token        = 3 '<unk>'
[34m00000.00.225.567[0m [32mI [0mllm_load_print_meta: PAD token        = 0 '<pad>'
[34m00000.00.225.568[0m [32mI [0mllm_load_print_meta: LF token         = 227 '<0x0A>'
[34m00000.00.225.568[0m [32mI [0mllm_load_print_meta: EOT token        = 107 '<end_of_turn>'
[34m00000.00.225.569[0m [32mI [0mllm_load_print_meta: max token length = 93
[34m00000.00.225.597[0m [32mI [0mllm_load_tensors: ggml ctx size =    0.08 MiB
[34m00000.00.324.502[0m [32mI [0mllm_load_tensors:        CPU buffer size =   865.98 MiB
[34m00000.00.324.510[0m [32mI [0mllm_load_tensors:        CPU buffer size =   334.74 MiB
[34m00000.00.324.510[0m [32mI [0mllm_load_tensors:        CPU buffer size =   402.73 MiB
[34m00000.00.324.511[0m [32mI [0mllm_load_tensors:        CPU buffer size =   335.27 MiB
[34m00000.00.324.511[0m [32mI [0mllm_load_tensors:        CPU buffer size =   338.98 MiB
[34m00000.00.324.512[0m [32mI [0mllm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
[34m00000.00.329.594[0m [32mI [0mllama_new_context_with_model: n_ctx      = 8192
[34m00000.00.329.600[0m [32mI [0mllama_new_context_with_model: n_batch    = 2048
[34m00000.00.329.600[0m [32mI [0mllama_new_context_with_model: n_ubatch   = 512
[34m00000.00.329.601[0m [32mI [0mllama_new_context_with_model: flash_attn = 0
[34m00000.00.329.603[0m [32mI [0mllama_new_context_with_model: freq_base  = 10000.0
[34m00000.00.329.604[0m [32mI [0mllama_new_context_with_model: freq_scale = 1
[34m00000.00.358.351[0m [32mI [0mllama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
[34m00000.00.358.368[0m [32mI [0mllama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
[34m00000.00.358.466[0m [32mI [0mllama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
[34m00000.00.359.393[0m [32mI [0mllama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
[34m00000.00.359.398[0m [32mI [0mllama_new_context_with_model: graph nodes  = 601
[34m00000.00.359.399[0m [32mI [0mllama_new_context_with_model: graph splits = 1
[34m00000.00.359.400[0m [35mW llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
[0m[34m00000.00.450.535[0m [32mI [0mmain: llama threadpool init, n_threads = 4
[34m00000.00.450.547[0m [32mI [0m
[34m00000.00.450.619[0m [32mI [0msystem_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
[34m00000.00.450.622[0m [32mI [0m
[34m00000.00.450.649[0m [32mI [0msampler seed: 2464210228
[34m00000.00.450.658[0m [32mI [0msampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
[34m00000.00.450.660[0m [32mI [0msampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
[34m00000.00.450.661[0m [32mI [0mgenerate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively.

I am not able to fulfill this request as it requires generating potentially harmful or dangerous content. [end of text]


[34m00000.02.075.703[0m [32mI [0mllama_perf_print:    sampling time =       3.94 ms /    24 runs   (    0.16 ms per token,  6089.82 tokens per second)
[34m00000.02.075.708[0m [32mI [0mllama_perf_print:        load time =     224.96 ms
[34m00000.02.075.710[0m [32mI [0mllama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
[34m00000.02.075.712[0m [32mI [0mllama_perf_print:        eval time =    1610.51 ms /    23 runs   (   70.02 ms per token,    14.28 tokens per second)
[34m00000.02.075.713[0m [32mI [0mllama_perf_print:       total time =    1624.41 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
main: build = 3742 (3653fede)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
[34m00000.00.000.476[0m [32mI [0mmain: llama backend init
[34m00000.00.001.611[0m [32mI [0mmain: load the model and apply lora adapter, if any
[34m00000.00.021.931[0m [32mI [0mllama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
[34m00000.00.021.946[0m [32mI [0mllama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
[34m00000.00.021.954[0m [32mI [0mllama_model_loader: - kv   0:                       general.architecture str              = gemma
[34m00000.00.021.954[0m [32mI [0mllama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
[34m00000.00.021.959[0m [32mI [0mllama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
[34m00000.00.021.959[0m [32mI [0mllama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
[34m00000.00.021.960[0m [32mI [0mllama_model_loader: - kv   4:                          gemma.block_count u32              = 18
[34m00000.00.021.961[0m [32mI [0mllama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
[34m00000.00.021.961[0m [32mI [0mllama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
[34m00000.00.021.962[0m [32mI [0mllama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
[34m00000.00.021.967[0m [32mI [0mllama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
[34m00000.00.021.968[0m [32mI [0mllama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
[34m00000.00.021.969[0m [32mI [0mllama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
[34m00000.00.021.970[0m [32mI [0mllama_model_loader: - kv  11:                          general.file_type u32              = 7
[34m00000.00.021.971[0m [32mI [0mllama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
[34m00000.00.049.744[0m [32mI [0mllama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
[34m00000.00.125.999[0m [32mI [0mllama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
[34m00000.00.132.985[0m [32mI [0mllama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
[34m00000.00.132.993[0m [32mI [0mllama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
[34m00000.00.132.994[0m [32mI [0mllama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
[34m00000.00.132.995[0m [32mI [0mllama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
[34m00000.00.132.995[0m [32mI [0mllama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
[34m00000.00.132.996[0m [32mI [0mllama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
[34m00000.00.132.997[0m [32mI [0mllama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
[34m00000.00.132.999[0m [32mI [0mllama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
[34m00000.00.133.000[0m [32mI [0mllama_model_loader: - kv  23:               general.quantization_version u32              = 2
[34m00000.00.133.000[0m [32mI [0mllama_model_loader: - kv  24:                                   split.no u16              = 0
[34m00000.00.133.001[0m [32mI [0mllama_model_loader: - kv  25:                                split.count u16              = 0
[34m00000.00.133.002[0m [32mI [0mllama_model_loader: - kv  26:                        split.tensors.count i32              = 164
[34m00000.00.133.005[0m [32mI [0mllama_model_loader: - type  f32:   37 tensors
[34m00000.00.133.008[0m [32mI [0mllama_model_loader: - type q8_0:  127 tensors
[34m00000.00.206.451[0m [35mW llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
[0m[34m00000.00.207.269[0m [32mI [0mllm_load_vocab: special tokens cache size = 5
[34m00000.00.225.872[0m [32mI [0mllm_load_vocab: token to piece cache size = 1.6014 MB
[34m00000.00.225.887[0m [32mI [0mllm_load_print_meta: format           = GGUF V3 (latest)
[34m00000.00.225.888[0m [32mI [0mllm_load_print_meta: arch             = gemma
[34m00000.00.225.889[0m [32mI [0mllm_load_print_meta: vocab type       = SPM
[34m00000.00.225.889[0m [32mI [0mllm_load_print_meta: n_vocab          = 256000
[34m00000.00.225.890[0m [32mI [0mllm_load_print_meta: n_merges         = 0
[34m00000.00.225.890[0m [32mI [0mllm_load_print_meta: vocab_only       = 0
[34m00000.00.225.890[0m [32mI [0mllm_load_print_meta: n_ctx_train      = 8192
[34m00000.00.225.890[0m [32mI [0mllm_load_print_meta: n_embd           = 2048
[34m00000.00.225.891[0m [32mI [0mllm_load_print_meta: n_layer          = 18
[34m00000.00.225.904[0m [32mI [0mllm_load_print_meta: n_head           = 8
[34m00000.00.225.905[0m [32mI [0mllm_load_print_meta: n_head_kv        = 1
[34m00000.00.225.905[0m [32mI [0mllm_load_print_meta: n_rot            = 256
[34m00000.00.225.905[0m [32mI [0mllm_load_print_meta: n_swa            = 0
[34m00000.00.225.906[0m [32mI [0mllm_load_print_meta: n_embd_head_k    = 256
[34m00000.00.225.906[0m [32mI [0mllm_load_print_meta: n_embd_head_v    = 256
[34m00000.00.225.907[0m [32mI [0mllm_load_print_meta: n_gqa            = 8
[34m00000.00.225.908[0m [32mI [0mllm_load_print_meta: n_embd_k_gqa     = 256
[34m00000.00.225.909[0m [32mI [0mllm_load_print_meta: n_embd_v_gqa     = 256
[34m00000.00.225.910[0m [32mI [0mllm_load_print_meta: f_norm_eps       = 0.0e+00
[34m00000.00.225.911[0m [32mI [0mllm_load_print_meta: f_norm_rms_eps   = 1.0e-06
[34m00000.00.225.911[0m [32mI [0mllm_load_print_meta: f_clamp_kqv      = 0.0e+00
[34m00000.00.225.912[0m [32mI [0mllm_load_print_meta: f_max_alibi_bias = 0.0e+00
[34m00000.00.225.913[0m [32mI [0mllm_load_print_meta: f_logit_scale    = 0.0e+00
[34m00000.00.225.915[0m [32mI [0mllm_load_print_meta: n_ff             = 16384
[34m00000.00.225.915[0m [32mI [0mllm_load_print_meta: n_expert         = 0
[34m00000.00.225.916[0m [32mI [0mllm_load_print_meta: n_expert_used    = 0
[34m00000.00.225.917[0m [32mI [0mllm_load_print_meta: causal attn      = 1
[34m00000.00.225.917[0m [32mI [0mllm_load_print_meta: pooling type     = 0
[34m00000.00.225.917[0m [32mI [0mllm_load_print_meta: rope type        = 2
[34m00000.00.225.918[0m [32mI [0mllm_load_print_meta: rope scaling     = linear
[34m00000.00.225.919[0m [32mI [0mllm_load_print_meta: freq_base_train  = 10000.0
[34m00000.00.225.920[0m [32mI [0mllm_load_print_meta: freq_scale_train = 1
[34m00000.00.225.920[0m [32mI [0mllm_load_print_meta: n_ctx_orig_yarn  = 8192
[34m00000.00.225.921[0m [32mI [0mllm_load_print_meta: rope_finetuned   = unknown
[34m00000.00.225.921[0m [32mI [0mllm_load_print_meta: ssm_d_conv       = 0
[34m00000.00.225.921[0m [32mI [0mllm_load_print_meta: ssm_d_inner      = 0
[34m00000.00.225.922[0m [32mI [0mllm_load_print_meta: ssm_d_state      = 0
[34m00000.00.225.923[0m [32mI [0mllm_load_print_meta: ssm_dt_rank      = 0
[34m00000.00.225.923[0m [32mI [0mllm_load_print_meta: ssm_dt_b_c_rms   = 0
[34m00000.00.225.924[0m [32mI [0mllm_load_print_meta: model type       = 2B
[34m00000.00.225.925[0m [32mI [0mllm_load_print_meta: model ftype      = Q8_0
[34m00000.00.225.926[0m [32mI [0mllm_load_print_meta: model params     = 2.51 B
[34m00000.00.225.927[0m [32mI [0mllm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
[34m00000.00.225.927[0m [32mI [0mllm_load_print_meta: general.name     = gemma-1.1-2b-it
[34m00000.00.225.929[0m [32mI [0mllm_load_print_meta: BOS token        = 2 '<bos>'
[34m00000.00.225.929[0m [32mI [0mllm_load_print_meta: EOS token        = 1 '<eos>'
[34m00000.00.225.930[0m [32mI [0mllm_load_print_meta: UNK token        = 3 '<unk>'
[34m00000.00.225.931[0m [32mI [0mllm_load_print_meta: PAD token        = 0 '<pad>'
[34m00000.00.225.931[0m [32mI [0mllm_load_print_meta: LF token         = 227 '<0x0A>'
[34m00000.00.225.932[0m [32mI [0mllm_load_print_meta: EOT token        = 107 '<end_of_turn>'
[34m00000.00.225.933[0m [32mI [0mllm_load_print_meta: max token length = 93
[34m00000.00.225.953[0m [32mI [0mllm_load_tensors: ggml ctx size =    0.08 MiB
[34m00000.00.318.692[0m [32mI [0mllm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
[34m00000.00.323.668[0m [32mI [0mllama_new_context_with_model: n_ctx      = 8192
[34m00000.00.323.675[0m [32mI [0mllama_new_context_with_model: n_batch    = 2048
[34m00000.00.323.675[0m [32mI [0mllama_new_context_with_model: n_ubatch   = 512
[34m00000.00.323.675[0m [32mI [0mllama_new_context_with_model: flash_attn = 0
[34m00000.00.323.678[0m [32mI [0mllama_new_context_with_model: freq_base  = 10000.0
[34m00000.00.323.679[0m [32mI [0mllama_new_context_with_model: freq_scale = 1
[34m00000.00.353.327[0m [32mI [0mllama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
[34m00000.00.353.342[0m [32mI [0mllama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
[34m00000.00.353.433[0m [32mI [0mllama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
[34m00000.00.354.287[0m [32mI [0mllama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
[34m00000.00.354.294[0m [32mI [0mllama_new_context_with_model: graph nodes  = 601
[34m00000.00.354.294[0m [32mI [0mllama_new_context_with_model: graph splits = 1
[34m00000.00.354.296[0m [35mW llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
[0m[34m00000.00.444.273[0m [32mI [0mmain: llama threadpool init, n_threads = 4
[34m00000.00.444.287[0m [32mI [0m
[34m00000.00.444.364[0m [32mI [0msystem_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
[34m00000.00.444.367[0m [32mI [0m
[34m00000.00.444.396[0m [32mI [0msampler seed: 3356363186
[34m00000.00.444.422[0m [32mI [0msampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
[34m00000.00.444.427[0m [32mI [0msampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
[34m00000.00.444.428[0m [32mI [0mgenerate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably and with a chuckle. [end of text]


[34m00000.00.999.715[0m [32mI [0mllama_perf_print:    sampling time =       1.47 ms /     9 runs   (    0.16 ms per token,  6126.62 tokens per second)
[34m00000.00.999.719[0m [32mI [0mllama_perf_print:        load time =     218.33 ms
[34m00000.00.999.720[0m [32mI [0mllama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
[34m00000.00.999.722[0m [32mI [0mllama_perf_print:        eval time =     549.48 ms /     8 runs   (   68.69 ms per token,    14.56 tokens per second)
[34m00000.00.999.722[0m [32mI [0mllama_perf_print:       total time =     555.13 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
main: build = 3742 (3653fede)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
[34m00000.00.000.413[0m [32mI [0mmain: llama backend init
[34m00000.00.001.582[0m [32mI [0mmain: load the model and apply lora adapter, if any
[34m00000.00.021.822[0m [32mI [0mllama_model_loader: additional 6 GGUFs metadata loaded.
[34m00000.00.021.872[0m [32mI [0mllama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
[34m00000.00.021.883[0m [32mI [0mllama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
[34m00000.00.021.889[0m [32mI [0mllama_model_loader: - kv   0:                       general.architecture str              = gemma
[34m00000.00.021.893[0m [32mI [0mllama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
[34m00000.00.021.898[0m [32mI [0mllama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
[34m00000.00.021.898[0m [32mI [0mllama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
[34m00000.00.021.899[0m [32mI [0mllama_model_loader: - kv   4:                          gemma.block_count u32              = 18
[34m00000.00.021.900[0m [32mI [0mllama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
[34m00000.00.021.901[0m [32mI [0mllama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
[34m00000.00.021.902[0m [32mI [0mllama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
[34m00000.00.021.907[0m [32mI [0mllama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
[34m00000.00.021.907[0m [32mI [0mllama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
[34m00000.00.021.908[0m [32mI [0mllama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
[34m00000.00.021.909[0m [32mI [0mllama_model_loader: - kv  11:                          general.file_type u32              = 7
[34m00000.00.021.909[0m [32mI [0mllama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
[34m00000.00.049.487[0m [32mI [0mllama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
[34m00000.00.126.127[0m [32mI [0mllama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
[34m00000.00.133.097[0m [32mI [0mllama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
[34m00000.00.133.106[0m [32mI [0mllama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
[34m00000.00.133.107[0m [32mI [0mllama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
[34m00000.00.133.108[0m [32mI [0mllama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
[34m00000.00.133.109[0m [32mI [0mllama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
[34m00000.00.133.110[0m [32mI [0mllama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
[34m00000.00.133.111[0m [32mI [0mllama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
[34m00000.00.133.114[0m [32mI [0mllama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
[34m00000.00.133.115[0m [32mI [0mllama_model_loader: - kv  23:               general.quantization_version u32              = 2
[34m00000.00.133.116[0m [32mI [0mllama_model_loader: - kv  24:                                   split.no u16              = 0
[34m00000.00.133.117[0m [32mI [0mllama_model_loader: - kv  25:                                split.count u16              = 7
[34m00000.00.133.118[0m [32mI [0mllama_model_loader: - kv  26:                        split.tensors.count i32              = 164
[34m00000.00.133.122[0m [32mI [0mllama_model_loader: - type  f32:   37 tensors
[34m00000.00.133.125[0m [32mI [0mllama_model_loader: - type q8_0:  127 tensors
[34m00000.00.212.601[0m [35mW llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
[0m[34m00000.00.213.450[0m [32mI [0mllm_load_vocab: special tokens cache size = 5
[34m00000.00.232.265[0m [32mI [0mllm_load_vocab: token to piece cache size = 1.6014 MB
[34m00000.00.232.282[0m [32mI [0mllm_load_print_meta: format           = GGUF V3 (latest)
[34m00000.00.232.282[0m [32mI [0mllm_load_print_meta: arch             = gemma
[34m00000.00.232.283[0m [32mI [0mllm_load_print_meta: vocab type       = SPM
[34m00000.00.232.284[0m [32mI [0mllm_load_print_meta: n_vocab          = 256000
[34m00000.00.232.284[0m [32mI [0mllm_load_print_meta: n_merges         = 0
[34m00000.00.232.284[0m [32mI [0mllm_load_print_meta: vocab_only       = 0
[34m00000.00.232.285[0m [32mI [0mllm_load_print_meta: n_ctx_train      = 8192
[34m00000.00.232.285[0m [32mI [0mllm_load_print_meta: n_embd           = 2048
[34m00000.00.232.285[0m [32mI [0mllm_load_print_meta: n_layer          = 18
[34m00000.00.232.301[0m [32mI [0mllm_load_print_meta: n_head           = 8
[34m00000.00.232.302[0m [32mI [0mllm_load_print_meta: n_head_kv        = 1
[34m00000.00.232.302[0m [32mI [0mllm_load_print_meta: n_rot            = 256
[34m00000.00.232.303[0m [32mI [0mllm_load_print_meta: n_swa            = 0
[34m00000.00.232.303[0m [32mI [0mllm_load_print_meta: n_embd_head_k    = 256
[34m00000.00.232.303[0m [32mI [0mllm_load_print_meta: n_embd_head_v    = 256
[34m00000.00.232.304[0m [32mI [0mllm_load_print_meta: n_gqa            = 8
[34m00000.00.232.305[0m [32mI [0mllm_load_print_meta: n_embd_k_gqa     = 256
[34m00000.00.232.306[0m [32mI [0mllm_load_print_meta: n_embd_v_gqa     = 256
[34m00000.00.232.307[0m [32mI [0mllm_load_print_meta: f_norm_eps       = 0.0e+00
[34m00000.00.232.308[0m [32mI [0mllm_load_print_meta: f_norm_rms_eps   = 1.0e-06
[34m00000.00.232.308[0m [32mI [0mllm_load_print_meta: f_clamp_kqv      = 0.0e+00
[34m00000.00.232.309[0m [32mI [0mllm_load_print_meta: f_max_alibi_bias = 0.0e+00
[34m00000.00.232.309[0m [32mI [0mllm_load_print_meta: f_logit_scale    = 0.0e+00
[34m00000.00.232.310[0m [32mI [0mllm_load_print_meta: n_ff             = 16384
[34m00000.00.232.311[0m [32mI [0mllm_load_print_meta: n_expert         = 0
[34m00000.00.232.311[0m [32mI [0mllm_load_print_meta: n_expert_used    = 0
[34m00000.00.232.311[0m [32mI [0mllm_load_print_meta: causal attn      = 1
[34m00000.00.232.312[0m [32mI [0mllm_load_print_meta: pooling type     = 0
[34m00000.00.232.312[0m [32mI [0mllm_load_print_meta: rope type        = 2
[34m00000.00.232.312[0m [32mI [0mllm_load_print_meta: rope scaling     = linear
[34m00000.00.232.313[0m [32mI [0mllm_load_print_meta: freq_base_train  = 10000.0
[34m00000.00.232.314[0m [32mI [0mllm_load_print_meta: freq_scale_train = 1
[34m00000.00.232.314[0m [32mI [0mllm_load_print_meta: n_ctx_orig_yarn  = 8192
[34m00000.00.232.315[0m [32mI [0mllm_load_print_meta: rope_finetuned   = unknown
[34m00000.00.232.315[0m [32mI [0mllm_load_print_meta: ssm_d_conv       = 0
[34m00000.00.232.315[0m [32mI [0mllm_load_print_meta: ssm_d_inner      = 0
[34m00000.00.232.315[0m [32mI [0mllm_load_print_meta: ssm_d_state      = 0
[34m00000.00.232.316[0m [32mI [0mllm_load_print_meta: ssm_dt_rank      = 0
[34m00000.00.232.316[0m [32mI [0mllm_load_print_meta: ssm_dt_b_c_rms   = 0
[34m00000.00.232.317[0m [32mI [0mllm_load_print_meta: model type       = 2B
[34m00000.00.232.317[0m [32mI [0mllm_load_print_meta: model ftype      = Q8_0
[34m00000.00.232.319[0m [32mI [0mllm_load_print_meta: model params     = 2.51 B
[34m00000.00.232.319[0m [32mI [0mllm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
[34m00000.00.232.320[0m [32mI [0mllm_load_print_meta: general.name     = gemma-1.1-2b-it
[34m00000.00.232.320[0m [32mI [0mllm_load_print_meta: BOS token        = 2 '<bos>'
[34m00000.00.232.321[0m [32mI [0mllm_load_print_meta: EOS token        = 1 '<eos>'
[34m00000.00.232.321[0m [32mI [0mllm_load_print_meta: UNK token        = 3 '<unk>'
[34m00000.00.232.321[0m [32mI [0mllm_load_print_meta: PAD token        = 0 '<pad>'
[34m00000.00.232.322[0m [32mI [0mllm_load_print_meta: LF token         = 227 '<0x0A>'
[34m00000.00.232.322[0m [32mI [0mllm_load_print_meta: EOT token        = 107 '<end_of_turn>'
[34m00000.00.232.323[0m [32mI [0mllm_load_print_meta: max token length = 93
[34m00000.00.232.352[0m [32mI [0mllm_load_tensors: ggml ctx size =    0.08 MiB
[34m00000.00.306.971[0m [32mI [0mllm_load_tensors:        CPU buffer size =   967.99 MiB
[34m00000.00.306.978[0m [32mI [0mllm_load_tensors:        CPU buffer size =   344.30 MiB
[34m00000.00.306.979[0m [32mI [0mllm_load_tensors:        CPU buffer size =   411.77 MiB
[34m00000.00.306.980[0m [32mI [0mllm_load_tensors:        CPU buffer size =   437.27 MiB
[34m00000.00.306.980[0m [32mI [0mllm_load_tensors:        CPU buffer size =   344.30 MiB
[34m00000.00.306.981[0m [32mI [0mllm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
[34m00000.00.312.113[0m [32mI [0mllama_new_context_with_model: n_ctx      = 8192
[34m00000.00.312.120[0m [32mI [0mllama_new_context_with_model: n_batch    = 2048
[34m00000.00.312.121[0m [32mI [0mllama_new_context_with_model: n_ubatch   = 512
[34m00000.00.312.121[0m [32mI [0mllama_new_context_with_model: flash_attn = 0
[34m00000.00.312.124[0m [32mI [0mllama_new_context_with_model: freq_base  = 10000.0
[34m00000.00.312.124[0m [32mI [0mllama_new_context_with_model: freq_scale = 1
[34m00000.00.343.445[0m [32mI [0mllama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
[34m00000.00.343.467[0m [32mI [0mllama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
[34m00000.00.343.588[0m [32mI [0mllama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
[34m00000.00.344.550[0m [32mI [0mllama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
[34m00000.00.344.558[0m [32mI [0mllama_new_context_with_model: graph nodes  = 601
[34m00000.00.344.558[0m [32mI [0mllama_new_context_with_model: graph splits = 1
[34m00000.00.344.560[0m [35mW llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
[0m[34m00000.00.449.193[0m [32mI [0mmain: llama threadpool init, n_threads = 4
[34m00000.00.449.205[0m [32mI [0m
[34m00000.00.449.287[0m [32mI [0msystem_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
[34m00000.00.449.291[0m [32mI [0m
[34m00000.00.449.333[0m [32mI [0msampler seed: 3555485918
[34m00000.00.449.348[0m [32mI [0msampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
[34m00000.00.449.352[0m [32mI [0msampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
[34m00000.00.449.352[0m [32mI [0mgenerate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvring?

I understand that this is a strange term and I am unable to provide a definition at this time. Please provide more context or specific questions

[34m00000.02.797.540[0m [32mI [0mllama_perf_print:    sampling time =       5.84 ms /    33 runs   (    0.18 ms per token,  5648.75 tokens per second)
[34m00000.02.797.545[0m [32mI [0mllama_perf_print:        load time =     216.85 ms
[34m00000.02.797.546[0m [32mI [0mllama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
[34m00000.02.797.548[0m [32mI [0mllama_perf_print:        eval time =    2328.81 ms /    32 runs   (   72.78 ms per token,    13.74 tokens per second)
[34m00000.02.797.548[0m [32mI [0mllama_perf_print:       total time =    2347.49 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
main: build = 3742 (3653fede)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
[34m00000.00.000.483[0m [32mI [0mmain: llama backend init
[34m00000.00.001.689[0m [32mI [0mmain: load the model and apply lora adapter, if any
[34m00000.00.021.847[0m [32mI [0mllama_model_loader: additional 1 GGUFs metadata loaded.
[34m00000.00.021.900[0m [32mI [0mllama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
[34m00000.00.021.914[0m [32mI [0mllama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
[34m00000.00.021.926[0m [32mI [0mllama_model_loader: - kv   0:                       general.architecture str              = gemma
[34m00000.00.021.931[0m [32mI [0mllama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
[34m00000.00.021.936[0m [32mI [0mllama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
[34m00000.00.021.937[0m [32mI [0mllama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
[34m00000.00.021.938[0m [32mI [0mllama_model_loader: - kv   4:                          gemma.block_count u32              = 18
[34m00000.00.021.939[0m [32mI [0mllama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
[34m00000.00.021.940[0m [32mI [0mllama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
[34m00000.00.021.941[0m [32mI [0mllama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
[34m00000.00.021.946[0m [32mI [0mllama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
[34m00000.00.021.947[0m [32mI [0mllama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
[34m00000.00.021.948[0m [32mI [0mllama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
[34m00000.00.021.948[0m [32mI [0mllama_model_loader: - kv  11:                          general.file_type u32              = 7
[34m00000.00.021.949[0m [32mI [0mllama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
[34m00000.00.049.748[0m [32mI [0mllama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
[34m00000.00.126.347[0m [32mI [0mllama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
[34m00000.00.133.218[0m [32mI [0mllama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
[34m00000.00.133.224[0m [32mI [0mllama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
[34m00000.00.133.225[0m [32mI [0mllama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
[34m00000.00.133.225[0m [32mI [0mllama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
[34m00000.00.133.226[0m [32mI [0mllama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
[34m00000.00.133.227[0m [32mI [0mllama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
[34m00000.00.133.228[0m [32mI [0mllama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
[34m00000.00.133.230[0m [32mI [0mllama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
[34m00000.00.133.231[0m [32mI [0mllama_model_loader: - kv  23:               general.quantization_version u32              = 2
[34m00000.00.133.231[0m [32mI [0mllama_model_loader: - kv  24:                                   split.no u16              = 0
[34m00000.00.133.232[0m [32mI [0mllama_model_loader: - kv  25:                                split.count u16              = 2
[34m00000.00.133.233[0m [32mI [0mllama_model_loader: - kv  26:                        split.tensors.count i32              = 164
[34m00000.00.133.237[0m [32mI [0mllama_model_loader: - type  f32:   37 tensors
[34m00000.00.133.240[0m [32mI [0mllama_model_loader: - type q8_0:  127 tensors
[34m00000.00.206.912[0m [35mW llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
[0m[34m00000.00.207.742[0m [32mI [0mllm_load_vocab: special tokens cache size = 5
[34m00000.00.226.257[0m [32mI [0mllm_load_vocab: token to piece cache size = 1.6014 MB
[34m00000.00.226.272[0m [32mI [0mllm_load_print_meta: format           = GGUF V3 (latest)
[34m00000.00.226.272[0m [32mI [0mllm_load_print_meta: arch             = gemma
[34m00000.00.226.273[0m [32mI [0mllm_load_print_meta: vocab type       = SPM
[34m00000.00.226.274[0m [32mI [0mllm_load_print_meta: n_vocab          = 256000
[34m00000.00.226.274[0m [32mI [0mllm_load_print_meta: n_merges         = 0
[34m00000.00.226.274[0m [32mI [0mllm_load_print_meta: vocab_only       = 0
[34m00000.00.226.275[0m [32mI [0mllm_load_print_meta: n_ctx_train      = 8192
[34m00000.00.226.275[0m [32mI [0mllm_load_print_meta: n_embd           = 2048
[34m00000.00.226.275[0m [32mI [0mllm_load_print_meta: n_layer          = 18
[34m00000.00.226.288[0m [32mI [0mllm_load_print_meta: n_head           = 8
[34m00000.00.226.289[0m [32mI [0mllm_load_print_meta: n_head_kv        = 1
[34m00000.00.226.289[0m [32mI [0mllm_load_print_meta: n_rot            = 256
[34m00000.00.226.289[0m [32mI [0mllm_load_print_meta: n_swa            = 0
[34m00000.00.226.290[0m [32mI [0mllm_load_print_meta: n_embd_head_k    = 256
[34m00000.00.226.290[0m [32mI [0mllm_load_print_meta: n_embd_head_v    = 256
[34m00000.00.226.291[0m [32mI [0mllm_load_print_meta: n_gqa            = 8
[34m00000.00.226.292[0m [32mI [0mllm_load_print_meta: n_embd_k_gqa     = 256
[34m00000.00.226.293[0m [32mI [0mllm_load_print_meta: n_embd_v_gqa     = 256
[34m00000.00.226.293[0m [32mI [0mllm_load_print_meta: f_norm_eps       = 0.0e+00
[34m00000.00.226.295[0m [32mI [0mllm_load_print_meta: f_norm_rms_eps   = 1.0e-06
[34m00000.00.226.295[0m [32mI [0mllm_load_print_meta: f_clamp_kqv      = 0.0e+00
[34m00000.00.226.296[0m [32mI [0mllm_load_print_meta: f_max_alibi_bias = 0.0e+00
[34m00000.00.226.296[0m [32mI [0mllm_load_print_meta: f_logit_scale    = 0.0e+00
[34m00000.00.226.297[0m [32mI [0mllm_load_print_meta: n_ff             = 16384
[34m00000.00.226.297[0m [32mI [0mllm_load_print_meta: n_expert         = 0
[34m00000.00.226.298[0m [32mI [0mllm_load_print_meta: n_expert_used    = 0
[34m00000.00.226.298[0m [32mI [0mllm_load_print_meta: causal attn      = 1
[34m00000.00.226.298[0m [32mI [0mllm_load_print_meta: pooling type     = 0
[34m00000.00.226.299[0m [32mI [0mllm_load_print_meta: rope type        = 2
[34m00000.00.226.299[0m [32mI [0mllm_load_print_meta: rope scaling     = linear
[34m00000.00.226.300[0m [32mI [0mllm_load_print_meta: freq_base_train  = 10000.0
[34m00000.00.226.301[0m [32mI [0mllm_load_print_meta: freq_scale_train = 1
[34m00000.00.226.301[0m [32mI [0mllm_load_print_meta: n_ctx_orig_yarn  = 8192
[34m00000.00.226.301[0m [32mI [0mllm_load_print_meta: rope_finetuned   = unknown
[34m00000.00.226.302[0m [32mI [0mllm_load_print_meta: ssm_d_conv       = 0
[34m00000.00.226.302[0m [32mI [0mllm_load_print_meta: ssm_d_inner      = 0
[34m00000.00.226.302[0m [32mI [0mllm_load_print_meta: ssm_d_state      = 0
[34m00000.00.226.302[0m [32mI [0mllm_load_print_meta: ssm_dt_rank      = 0
[34m00000.00.226.303[0m [32mI [0mllm_load_print_meta: ssm_dt_b_c_rms   = 0
[34m00000.00.226.303[0m [32mI [0mllm_load_print_meta: model type       = 2B
[34m00000.00.226.304[0m [32mI [0mllm_load_print_meta: model ftype      = Q8_0
[34m00000.00.226.304[0m [32mI [0mllm_load_print_meta: model params     = 2.51 B
[34m00000.00.226.305[0m [32mI [0mllm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
[34m00000.00.226.306[0m [32mI [0mllm_load_print_meta: general.name     = gemma-1.1-2b-it
[34m00000.00.226.306[0m [32mI [0mllm_load_print_meta: BOS token        = 2 '<bos>'
[34m00000.00.226.307[0m [32mI [0mllm_load_print_meta: EOS token        = 1 '<eos>'
[34m00000.00.226.307[0m [32mI [0mllm_load_print_meta: UNK token        = 3 '<unk>'
[34m00000.00.226.307[0m [32mI [0mllm_load_print_meta: PAD token        = 0 '<pad>'
[34m00000.00.226.308[0m [32mI [0mllm_load_print_meta: LF token         = 227 '<0x0A>'
[34m00000.00.226.308[0m [32mI [0mllm_load_print_meta: EOT token        = 107 '<end_of_turn>'
[34m00000.00.226.308[0m [32mI [0mllm_load_print_meta: max token length = 93
[34m00000.00.226.332[0m [32mI [0mllm_load_tensors: ggml ctx size =    0.08 MiB
[34m00000.00.297.132[0m [32mI [0mllm_load_tensors:        CPU buffer size =  1904.18 MiB
[34m00000.00.297.140[0m [32mI [0mllm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
[34m00000.00.302.192[0m [32mI [0mllama_new_context_with_model: n_ctx      = 8192
[34m00000.00.302.200[0m [32mI [0mllama_new_context_with_model: n_batch    = 2048
[34m00000.00.302.200[0m [32mI [0mllama_new_context_with_model: n_ubatch   = 512
[34m00000.00.302.201[0m [32mI [0mllama_new_context_with_model: flash_attn = 0
[34m00000.00.302.204[0m [32mI [0mllama_new_context_with_model: freq_base  = 10000.0
[34m00000.00.302.205[0m [32mI [0mllama_new_context_with_model: freq_scale = 1
[34m00000.00.333.418[0m [32mI [0mllama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
[34m00000.00.333.434[0m [32mI [0mllama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
[34m00000.00.333.527[0m [32mI [0mllama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
[34m00000.00.334.423[0m [32mI [0mllama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
[34m00000.00.334.432[0m [32mI [0mllama_new_context_with_model: graph nodes  = 601
[34m00000.00.334.432[0m [32mI [0mllama_new_context_with_model: graph splits = 1
[34m00000.00.334.434[0m [35mW llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
[0m[34m00000.00.431.181[0m [32mI [0mmain: llama threadpool init, n_threads = 4
[34m00000.00.431.196[0m [32mI [0m
[34m00000.00.431.273[0m [32mI [0msystem_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
[34m00000.00.431.277[0m [32mI [0m
[34m00000.00.431.326[0m [32mI [0msampler seed: 3538262285
[34m00000.00.431.337[0m [32mI [0msampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
[34m00000.00.431.340[0m [32mI [0msampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
[34m00000.00.431.342[0m [32mI [0mgenerate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically, her voice cracking with strained emotion. "I... I can't bear it anymore."

The scene fades out, leaving the weight of unspoken

[34m00000.02.910.688[0m [32mI [0mllama_perf_print:    sampling time =       6.15 ms /    33 runs   (    0.19 ms per token,  5364.98 tokens per second)
[34m00000.02.910.694[0m [32mI [0mllama_perf_print:        load time =     204.86 ms
[34m00000.02.910.695[0m [32mI [0mllama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
[34m00000.02.910.696[0m [32mI [0mllama_perf_print:        eval time =    2459.26 ms /    32 runs   (   76.85 ms per token,    13.01 tokens per second)
[34m00000.02.910.697[0m [32mI [0mllama_perf_print:       total time =    2479.23 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.775s
user	0m30.821s
sys	0m9.651s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3742 (3653fede)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32018.87 ms
main:    total time = 32018.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
main: build = 3742 (3653fede)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
[34m00000.00.000.461[0m [32mI [0mmain: llama backend init
[34m00000.00.001.595[0m [32mI [0mmain: load the model and apply lora adapter, if any
[34m00000.00.021.752[0m [32mI [0mllama_model_loader: additional 5 GGUFs metadata loaded.
[34m00000.00.021.801[0m [32mI [0mllama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
[34m00000.00.021.809[0m [32mI [0mllama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
[34m00000.00.021.819[0m [32mI [0mllama_model_loader: - kv   0:                       general.architecture str              = gemma
[34m00000.00.021.822[0m [32mI [0mllama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
[34m00000.00.021.827[0m [32mI [0mllama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
[34m00000.00.021.828[0m [32mI [0mllama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
[34m00000.00.021.829[0m [32mI [0mllama_model_loader: - kv   4:                          gemma.block_count u32              = 18
[34m00000.00.021.830[0m [32mI [0mllama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
[34m00000.00.021.830[0m [32mI [0mllama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
[34m00000.00.021.831[0m [32mI [0mllama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
[34m00000.00.021.835[0m [32mI [0mllama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
[34m00000.00.021.836[0m [32mI [0mllama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
[34m00000.00.021.837[0m [32mI [0mllama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
[34m00000.00.021.837[0m [32mI [0mllama_model_loader: - kv  11:                          general.file_type u32              = 15
[34m00000.00.021.838[0m [32mI [0mllama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
[34m00000.00.049.592[0m [32mI [0mllama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
[34m00000.00.125.838[0m [32mI [0mllama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
[34m00000.00.132.782[0m [32mI [0mllama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
[34m00000.00.132.790[0m [32mI [0mllama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
[34m00000.00.132.791[0m [32mI [0mllama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
[34m00000.00.132.791[0m [32mI [0mllama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
[34m00000.00.132.792[0m [32mI [0mllama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
[34m00000.00.132.793[0m [32mI [0mllama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
[34m00000.00.132.794[0m [32mI [0mllama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
[34m00000.00.132.796[0m [32mI [0mllama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
[34m00000.00.132.797[0m [32mI [0mllama_model_loader: - kv  23:               general.quantization_version u32              = 2
[34m00000.00.132.798[0m [32mI [0mllama_model_loader: - kv  24:                                   split.no u16              = 0
[34m00000.00.132.798[0m [32mI [0mllama_model_loader: - kv  25:                                split.count u16              = 6
[34m00000.00.132.799[0m [32mI [0mllama_model_loader: - kv  26:                        split.tensors.count i32              = 164
[34m00000.00.132.804[0m [32mI [0mllama_model_loader: - type  f32:   37 tensors
[34m00000.00.132.807[0m [32mI [0mllama_model_loader: - type q4_K:  108 tensors
[34m00000.00.132.807[0m [32mI [0mllama_model_loader: - type q6_K:   19 tensors
[34m00000.00.225.896[0m [35mW llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
[0m[34m00000.00.226.687[0m [32mI [0mllm_load_vocab: special tokens cache size = 5
[34m00000.00.245.407[0m [32mI [0mllm_load_vocab: token to piece cache size = 1.6014 MB
[34m00000.00.245.422[0m [32mI [0mllm_load_print_meta: format           = GGUF V3 (latest)
[34m00000.00.245.422[0m [32mI [0mllm_load_print_meta: arch             = gemma
[34m00000.00.245.424[0m [32mI [0mllm_load_print_meta: vocab type       = SPM
[34m00000.00.245.424[0m [32mI [0mllm_load_print_meta: n_vocab          = 256000
[34m00000.00.245.425[0m [32mI [0mllm_load_print_meta: n_merges         = 0
[34m00000.00.245.425[0m [32mI [0mllm_load_print_meta: vocab_only       = 0
[34m00000.00.245.425[0m [32mI [0mllm_load_print_meta: n_ctx_train      = 8192
[34m00000.00.245.426[0m [32mI [0mllm_load_print_meta: n_embd           = 2048
[34m00000.00.245.426[0m [32mI [0mllm_load_print_meta: n_layer          = 18
[34m00000.00.245.438[0m [32mI [0mllm_load_print_meta: n_head           = 8
[34m00000.00.245.439[0m [32mI [0mllm_load_print_meta: n_head_kv        = 1
[34m00000.00.245.440[0m [32mI [0mllm_load_print_meta: n_rot            = 256
[34m00000.00.245.440[0m [32mI [0mllm_load_print_meta: n_swa            = 0
[34m00000.00.245.440[0m [32mI [0mllm_load_print_meta: n_embd_head_k    = 256
[34m00000.00.245.441[0m [32mI [0mllm_load_print_meta: n_embd_head_v    = 256
[34m00000.00.245.442[0m [32mI [0mllm_load_print_meta: n_gqa            = 8
[34m00000.00.245.443[0m [32mI [0mllm_load_print_meta: n_embd_k_gqa     = 256
[34m00000.00.245.444[0m [32mI [0mllm_load_print_meta: n_embd_v_gqa     = 256
[34m00000.00.245.445[0m [32mI [0mllm_load_print_meta: f_norm_eps       = 0.0e+00
[34m00000.00.245.446[0m [32mI [0mllm_load_print_meta: f_norm_rms_eps   = 1.0e-06
[34m00000.00.245.446[0m [32mI [0mllm_load_print_meta: f_clamp_kqv      = 0.0e+00
[34m00000.00.245.447[0m [32mI [0mllm_load_print_meta: f_max_alibi_bias = 0.0e+00
[34m00000.00.245.447[0m [32mI [0mllm_load_print_meta: f_logit_scale    = 0.0e+00
[34m00000.00.245.448[0m [32mI [0mllm_load_print_meta: n_ff             = 16384
[34m00000.00.245.448[0m [32mI [0mllm_load_print_meta: n_expert         = 0
[34m00000.00.245.448[0m [32mI [0mllm_load_print_meta: n_expert_used    = 0
[34m00000.00.245.449[0m [32mI [0mllm_load_print_meta: causal attn      = 1
[34m00000.00.245.449[0m [32mI [0mllm_load_print_meta: pooling type     = 0
[34m00000.00.245.449[0m [32mI [0mllm_load_print_meta: rope type        = 2
[34m00000.00.245.449[0m [32mI [0mllm_load_print_meta: rope scaling     = linear
[34m00000.00.245.451[0m [32mI [0mllm_load_print_meta: freq_base_train  = 10000.0
[34m00000.00.245.451[0m [32mI [0mllm_load_print_meta: freq_scale_train = 1
[34m00000.00.245.452[0m [32mI [0mllm_load_print_meta: n_ctx_orig_yarn  = 8192
[34m00000.00.245.452[0m [32mI [0mllm_load_print_meta: rope_finetuned   = unknown
[34m00000.00.245.452[0m [32mI [0mllm_load_print_meta: ssm_d_conv       = 0
[34m00000.00.245.453[0m [32mI [0mllm_load_print_meta: ssm_d_inner      = 0
[34m00000.00.245.453[0m [32mI [0mllm_load_print_meta: ssm_d_state      = 0
[34m00000.00.245.453[0m [32mI [0mllm_load_print_meta: ssm_dt_rank      = 0
[34m00000.00.245.454[0m [32mI [0mllm_load_print_meta: ssm_dt_b_c_rms   = 0
[34m00000.00.245.454[0m [32mI [0mllm_load_print_meta: model type       = 2B
[34m00000.00.245.455[0m [32mI [0mllm_load_print_meta: model ftype      = Q4_K - Medium
[34m00000.00.245.456[0m [32mI [0mllm_load_print_meta: model params     = 2.51 B
[34m00000.00.245.456[0m [32mI [0mllm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
[34m00000.00.245.457[0m [32mI [0mllm_load_print_meta: general.name     = gemma-1.1-2b-it
[34m00000.00.245.457[0m [32mI [0mllm_load_print_meta: BOS token        = 2 '<bos>'
[34m00000.00.245.458[0m [32mI [0mllm_load_print_meta: EOS token        = 1 '<eos>'
[34m00000.00.245.458[0m [32mI [0mllm_load_print_meta: UNK token        = 3 '<unk>'
[34m00000.00.245.459[0m [32mI [0mllm_load_print_meta: PAD token        = 0 '<pad>'
[34m00000.00.245.459[0m [32mI [0mllm_load_print_meta: LF token         = 227 '<0x0A>'
[34m00000.00.245.459[0m [32mI [0mllm_load_print_meta: EOT token        = 107 '<end_of_turn>'
[34m00000.00.245.460[0m [32mI [0mllm_load_print_meta: max token length = 93
[34m00000.00.245.488[0m [32mI [0mllm_load_tensors: ggml ctx size =    0.08 MiB
[34m00000.00.302.870[0m [32mI [0mllm_load_tensors:        CPU buffer size =   604.15 MiB
[34m00000.00.302.880[0m [32mI [0mllm_load_tensors:        CPU buffer size =   185.62 MiB
[34m00000.00.302.881[0m [32mI [0mllm_load_tensors:        CPU buffer size =   221.61 MiB
[34m00000.00.302.882[0m [32mI [0mllm_load_tensors:        CPU buffer size =   185.89 MiB
[34m00000.00.302.882[0m [32mI [0mllm_load_tensors:        CPU buffer size =   187.86 MiB
[34m00000.00.302.883[0m [32mI [0mllm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
[34m00000.00.308.126[0m [32mI [0mllama_new_context_with_model: n_ctx      = 8192
[34m00000.00.308.134[0m [32mI [0mllama_new_context_with_model: n_batch    = 2048
[34m00000.00.308.135[0m [32mI [0mllama_new_context_with_model: n_ubatch   = 512
[34m00000.00.308.135[0m [32mI [0mllama_new_context_with_model: flash_attn = 0
[34m00000.00.308.139[0m [32mI [0mllama_new_context_with_model: freq_base  = 10000.0
[34m00000.00.308.140[0m [32mI [0mllama_new_context_with_model: freq_scale = 1
[34m00000.00.338.899[0m [32mI [0mllama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
[34m00000.00.338.916[0m [32mI [0mllama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
[34m00000.00.339.011[0m [32mI [0mllama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
[34m00000.00.339.882[0m [32mI [0mllama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
[34m00000.00.339.890[0m [32mI [0mllama_new_context_with_model: graph nodes  = 601
[34m00000.00.339.890[0m [32mI [0mllama_new_context_with_model: graph splits = 1
[34m00000.00.339.892[0m [35mW llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
[0m[34m00000.00.422.699[0m [32mI [0mmain: llama threadpool init, n_threads = 4
[34m00000.00.422.713[0m [32mI [0m
[34m00000.00.422.788[0m [32mI [0msystem_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
[34m00000.00.422.792[0m [32mI [0m
[34m00000.00.422.819[0m [32mI [0msampler seed: 3033175275
[34m00000.00.422.828[0m [32mI [0msampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
[34m00000.00.422.830[0m [32mI [0msampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
[34m00000.00.422.831[0m [32mI [0mgenerate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities

I am unable to generate a response as requested as I am unable to access or process sexually explicit or inappropriate content. [end of text]


[34m00000.01.828.042[0m [32mI [0mllama_perf_print:    sampling time =       4.63 ms /    28 runs   (    0.17 ms per token,  6051.44 tokens per second)
[34m00000.01.828.047[0m [32mI [0mllama_perf_print:        load time =     177.23 ms
[34m00000.01.828.048[0m [32mI [0mllama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
[34m00000.01.828.049[0m [32mI [0mllama_perf_print:        eval time =    1388.80 ms /    27 runs   (   51.44 ms per token,    19.44 tokens per second)
[34m00000.01.828.050[0m [32mI [0mllama_perf_print:       total time =    1404.40 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3742 (3653fede)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32103.86 ms
main:    total time = 32103.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
main: build = 3742 (3653fede)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
[34m00000.00.000.422[0m [32mI [0mmain: llama backend init
[34m00000.00.001.551[0m [32mI [0mmain: load the model and apply lora adapter, if any
[34m00000.00.021.636[0m [32mI [0mllama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
[34m00000.00.021.651[0m [32mI [0mllama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
[34m00000.00.021.659[0m [32mI [0mllama_model_loader: - kv   0:                       general.architecture str              = gemma
[34m00000.00.021.663[0m [32mI [0mllama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
[34m00000.00.021.667[0m [32mI [0mllama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
[34m00000.00.021.669[0m [32mI [0mllama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
[34m00000.00.021.670[0m [32mI [0mllama_model_loader: - kv   4:                          gemma.block_count u32              = 18
[34m00000.00.021.670[0m [32mI [0mllama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
[34m00000.00.021.671[0m [32mI [0mllama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
[34m00000.00.021.672[0m [32mI [0mllama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
[34m00000.00.021.675[0m [32mI [0mllama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
[34m00000.00.021.676[0m [32mI [0mllama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
[34m00000.00.021.677[0m [32mI [0mllama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
[34m00000.00.021.677[0m [32mI [0mllama_model_loader: - kv  11:                          general.file_type u32              = 15
[34m00000.00.021.678[0m [32mI [0mllama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
[34m00000.00.049.090[0m [32mI [0mllama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
[34m00000.00.125.416[0m [32mI [0mllama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
[34m00000.00.132.357[0m [32mI [0mllama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
[34m00000.00.132.365[0m [32mI [0mllama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
[34m00000.00.132.366[0m [32mI [0mllama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
[34m00000.00.132.366[0m [32mI [0mllama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
[34m00000.00.132.367[0m [32mI [0mllama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
[34m00000.00.132.368[0m [32mI [0mllama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
[34m00000.00.132.370[0m [32mI [0mllama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
[34m00000.00.132.373[0m [32mI [0mllama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
[34m00000.00.132.374[0m [32mI [0mllama_model_loader: - kv  23:               general.quantization_version u32              = 2
[34m00000.00.132.378[0m [32mI [0mllama_model_loader: - type  f32:   37 tensors
[34m00000.00.132.381[0m [32mI [0mllama_model_loader: - type q4_K:  108 tensors
[34m00000.00.132.381[0m [32mI [0mllama_model_loader: - type q6_K:   19 tensors
[34m00000.00.210.351[0m [35mW llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
[0m[34m00000.00.211.171[0m [32mI [0mllm_load_vocab: special tokens cache size = 5
[34m00000.00.229.849[0m [32mI [0mllm_load_vocab: token to piece cache size = 1.6014 MB
[34m00000.00.229.863[0m [32mI [0mllm_load_print_meta: format           = GGUF V3 (latest)
[34m00000.00.229.864[0m [32mI [0mllm_load_print_meta: arch             = gemma
[34m00000.00.229.865[0m [32mI [0mllm_load_print_meta: vocab type       = SPM
[34m00000.00.229.865[0m [32mI [0mllm_load_print_meta: n_vocab          = 256000
[34m00000.00.229.866[0m [32mI [0mllm_load_print_meta: n_merges         = 0
[34m00000.00.229.866[0m [32mI [0mllm_load_print_meta: vocab_only       = 0
[34m00000.00.229.866[0m [32mI [0mllm_load_print_meta: n_ctx_train      = 8192
[34m00000.00.229.867[0m [32mI [0mllm_load_print_meta: n_embd           = 2048
[34m00000.00.229.867[0m [32mI [0mllm_load_print_meta: n_layer          = 18
[34m00000.00.229.879[0m [32mI [0mllm_load_print_meta: n_head           = 8
[34m00000.00.229.880[0m [32mI [0mllm_load_print_meta: n_head_kv        = 1
[34m00000.00.229.880[0m [32mI [0mllm_load_print_meta: n_rot            = 256
[34m00000.00.229.881[0m [32mI [0mllm_load_print_meta: n_swa            = 0
[34m00000.00.229.881[0m [32mI [0mllm_load_print_meta: n_embd_head_k    = 256
[34m00000.00.229.881[0m [32mI [0mllm_load_print_meta: n_embd_head_v    = 256
[34m00000.00.229.882[0m [32mI [0mllm_load_print_meta: n_gqa            = 8
[34m00000.00.229.883[0m [32mI [0mllm_load_print_meta: n_embd_k_gqa     = 256
[34m00000.00.229.884[0m [32mI [0mllm_load_print_meta: n_embd_v_gqa     = 256
[34m00000.00.229.885[0m [32mI [0mllm_load_print_meta: f_norm_eps       = 0.0e+00
[34m00000.00.229.886[0m [32mI [0mllm_load_print_meta: f_norm_rms_eps   = 1.0e-06
[34m00000.00.229.886[0m [32mI [0mllm_load_print_meta: f_clamp_kqv      = 0.0e+00
[34m00000.00.229.887[0m [32mI [0mllm_load_print_meta: f_max_alibi_bias = 0.0e+00
[34m00000.00.229.887[0m [32mI [0mllm_load_print_meta: f_logit_scale    = 0.0e+00
[34m00000.00.229.888[0m [32mI [0mllm_load_print_meta: n_ff             = 16384
[34m00000.00.229.888[0m [32mI [0mllm_load_print_meta: n_expert         = 0
[34m00000.00.229.889[0m [32mI [0mllm_load_print_meta: n_expert_used    = 0
[34m00000.00.229.889[0m [32mI [0mllm_load_print_meta: causal attn      = 1
[34m00000.00.229.889[0m [32mI [0mllm_load_print_meta: pooling type     = 0
[34m00000.00.229.890[0m [32mI [0mllm_load_print_meta: rope type        = 2
[34m00000.00.229.890[0m [32mI [0mllm_load_print_meta: rope scaling     = linear
[34m00000.00.229.892[0m [32mI [0mllm_load_print_meta: freq_base_train  = 10000.0
[34m00000.00.229.892[0m [32mI [0mllm_load_print_meta: freq_scale_train = 1
[34m00000.00.229.892[0m [32mI [0mllm_load_print_meta: n_ctx_orig_yarn  = 8192
[34m00000.00.229.893[0m [32mI [0mllm_load_print_meta: rope_finetuned   = unknown
[34m00000.00.229.893[0m [32mI [0mllm_load_print_meta: ssm_d_conv       = 0
[34m00000.00.229.893[0m [32mI [0mllm_load_print_meta: ssm_d_inner      = 0
[34m00000.00.229.893[0m [32mI [0mllm_load_print_meta: ssm_d_state      = 0
[34m00000.00.229.894[0m [32mI [0mllm_load_print_meta: ssm_dt_rank      = 0
[34m00000.00.229.894[0m [32mI [0mllm_load_print_meta: ssm_dt_b_c_rms   = 0
[34m00000.00.229.894[0m [32mI [0mllm_load_print_meta: model type       = 2B
[34m00000.00.229.895[0m [32mI [0mllm_load_print_meta: model ftype      = Q4_K - Medium
[34m00000.00.229.896[0m [32mI [0mllm_load_print_meta: model params     = 2.51 B
[34m00000.00.229.896[0m [32mI [0mllm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
[34m00000.00.229.897[0m [32mI [0mllm_load_print_meta: general.name     = gemma-1.1-2b-it
[34m00000.00.229.897[0m [32mI [0mllm_load_print_meta: BOS token        = 2 '<bos>'
[34m00000.00.229.898[0m [32mI [0mllm_load_print_meta: EOS token        = 1 '<eos>'
[34m00000.00.229.898[0m [32mI [0mllm_load_print_meta: UNK token        = 3 '<unk>'
[34m00000.00.229.899[0m [32mI [0mllm_load_print_meta: PAD token        = 0 '<pad>'
[34m00000.00.229.899[0m [32mI [0mllm_load_print_meta: LF token         = 227 '<0x0A>'
[34m00000.00.229.899[0m [32mI [0mllm_load_print_meta: EOT token        = 107 '<end_of_turn>'
[34m00000.00.229.900[0m [32mI [0mllm_load_print_meta: max token length = 93
[34m00000.00.229.919[0m [32mI [0mllm_load_tensors: ggml ctx size =    0.08 MiB
[34m00000.00.286.218[0m [32mI [0mllm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
[34m00000.00.291.921[0m [32mI [0mllama_new_context_with_model: n_ctx      = 8192
[34m00000.00.291.925[0m [32mI [0mllama_new_context_with_model: n_batch    = 2048
[34m00000.00.291.926[0m [32mI [0mllama_new_context_with_model: n_ubatch   = 512
[34m00000.00.291.926[0m [32mI [0mllama_new_context_with_model: flash_attn = 0
[34m00000.00.291.928[0m [32mI [0mllama_new_context_with_model: freq_base  = 10000.0
[34m00000.00.291.929[0m [32mI [0mllama_new_context_with_model: freq_scale = 1
[34m00000.00.321.320[0m [32mI [0mllama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
[34m00000.00.321.336[0m [32mI [0mllama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
[34m00000.00.321.435[0m [32mI [0mllama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
[34m00000.00.322.309[0m [32mI [0mllama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
[34m00000.00.322.316[0m [32mI [0mllama_new_context_with_model: graph nodes  = 601
[34m00000.00.322.317[0m [32mI [0mllama_new_context_with_model: graph splits = 1
[34m00000.00.322.319[0m [35mW llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
[0m[34m00000.00.402.564[0m [32mI [0mmain: llama threadpool init, n_threads = 4
[34m00000.00.402.576[0m [32mI [0m
[34m00000.00.402.651[0m [32mI [0msystem_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
[34m00000.00.402.655[0m [32mI [0m
[34m00000.00.402.692[0m [32mI [0msampler seed: 870502969
[34m00000.00.402.701[0m [32mI [0msampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
[34m00000.00.402.704[0m [32mI [0msampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
[34m00000.00.402.704[0m [32mI [0mgenerate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRED:

**Question:** Identify the grammatical errors and suggest corrections.

The question is about the grammatical errors in the provided text. Please provide the corrected

[34m00000.02.045.335[0m [32mI [0mllama_perf_print:    sampling time =       5.63 ms /    33 runs   (    0.17 ms per token,  5865.62 tokens per second)
[34m00000.02.045.339[0m [32mI [0mllama_perf_print:        load time =     172.66 ms
[34m00000.02.045.340[0m [32mI [0mllama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
[34m00000.02.045.342[0m [32mI [0mllama_perf_print:        eval time =    1623.23 ms /    32 runs   (   50.73 ms per token,    19.71 tokens per second)
[34m00000.02.045.343[0m [32mI [0mllama_perf_print:       total time =    1642.27 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.854s
user	8m14.596s
sys	0m7.044s
