+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.446 I build: 4205 (c6bc7395) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.639 I main: llama backend init
0.00.000.645 I main: load the model and apply lora adapter, if any
0.00.021.858 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.867 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.875 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.883 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.887 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.892 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.893 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.893 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.894 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.894 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.895 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.899 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.899 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.900 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.900 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.900 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.002 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.941 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.850 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.857 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.859 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.859 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.860 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.861 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.862 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.866 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.867 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.868 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.868 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.870 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.874 I llama_model_loader: - type  f32:   37 tensors
0.00.133.875 I llama_model_loader: - type q8_0:  127 tensors
0.00.221.429 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.274.083 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.274.759 I llm_load_vocab: special tokens cache size = 5
0.00.296.250 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.296.270 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.296.270 I llm_load_print_meta: arch             = gemma
0.00.296.271 I llm_load_print_meta: vocab type       = SPM
0.00.296.273 I llm_load_print_meta: n_vocab          = 256000
0.00.296.273 I llm_load_print_meta: n_merges         = 0
0.00.296.273 I llm_load_print_meta: vocab_only       = 0
0.00.296.273 I llm_load_print_meta: n_ctx_train      = 8192
0.00.296.274 I llm_load_print_meta: n_embd           = 2048
0.00.296.274 I llm_load_print_meta: n_layer          = 18
0.00.296.285 I llm_load_print_meta: n_head           = 8
0.00.296.286 I llm_load_print_meta: n_head_kv        = 1
0.00.296.286 I llm_load_print_meta: n_rot            = 256
0.00.296.287 I llm_load_print_meta: n_swa            = 0
0.00.296.287 I llm_load_print_meta: n_embd_head_k    = 256
0.00.296.287 I llm_load_print_meta: n_embd_head_v    = 256
0.00.296.288 I llm_load_print_meta: n_gqa            = 8
0.00.296.289 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.296.290 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.296.291 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.296.292 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.296.292 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.296.293 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.296.293 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.296.294 I llm_load_print_meta: n_ff             = 16384
0.00.296.295 I llm_load_print_meta: n_expert         = 0
0.00.296.295 I llm_load_print_meta: n_expert_used    = 0
0.00.296.295 I llm_load_print_meta: causal attn      = 1
0.00.296.295 I llm_load_print_meta: pooling type     = 0
0.00.296.296 I llm_load_print_meta: rope type        = 2
0.00.296.296 I llm_load_print_meta: rope scaling     = linear
0.00.296.298 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.296.298 I llm_load_print_meta: freq_scale_train = 1
0.00.296.299 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.296.299 I llm_load_print_meta: rope_finetuned   = unknown
0.00.296.299 I llm_load_print_meta: ssm_d_conv       = 0
0.00.296.300 I llm_load_print_meta: ssm_d_inner      = 0
0.00.296.300 I llm_load_print_meta: ssm_d_state      = 0
0.00.296.300 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.296.300 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.296.301 I llm_load_print_meta: model type       = 2B
0.00.296.301 I llm_load_print_meta: model ftype      = Q8_0
0.00.296.302 I llm_load_print_meta: model params     = 2.51 B
0.00.296.303 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.296.304 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.296.304 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.296.305 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.296.305 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.296.305 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.296.306 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.296.306 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.296.307 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.296.307 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.296.307 I llm_load_print_meta: max token length = 93
0.00.395.529 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.395.539 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.395.540 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.395.540 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.395.541 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.395.542 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.400.884 I llama_new_context_with_model: n_seq_max     = 1
0.00.400.890 I llama_new_context_with_model: n_ctx         = 4096
0.00.400.891 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.400.891 I llama_new_context_with_model: n_batch       = 2048
0.00.400.892 I llama_new_context_with_model: n_ubatch      = 512
0.00.400.892 I llama_new_context_with_model: flash_attn    = 0
0.00.400.896 I llama_new_context_with_model: freq_base     = 10000.0
0.00.400.897 I llama_new_context_with_model: freq_scale    = 1
0.00.400.898 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.415.739 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.415.752 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.415.844 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.417.186 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.417.192 I llama_new_context_with_model: graph nodes  = 601
0.00.417.192 I llama_new_context_with_model: graph splits = 1
0.00.417.195 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.503.646 I main: llama threadpool init, n_threads = 4
0.00.503.662 I 
0.00.503.733 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.503.737 I 
0.00.503.780 I sampler seed: 1502840339
0.00.503.791 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.503.793 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.503.794 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.503.794 I 
 increamically.

I'm so bored. What should I do?

- Read a book
- Watch a movie
- Play a game
-

0.02.757.649 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6498.62 tokens per second)
0.02.757.651 I llama_perf_context_print:        load time =     502.98 ms
0.02.757.652 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.757.654 I llama_perf_context_print:        eval time =    2234.46 ms /    32 runs   (   69.83 ms per token,    14.32 tokens per second)
0.02.757.655 I llama_perf_context_print:       total time =    2254.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.168 I build: 4205 (c6bc7395) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.380 I main: llama backend init
0.00.000.386 I main: load the model and apply lora adapter, if any
0.00.020.344 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.358 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.368 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.369 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.373 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.373 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.374 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.375 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.376 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.376 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.381 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.382 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.383 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.383 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.384 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.510 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.597 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.449 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.455 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.456 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.456 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.457 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.458 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.458 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.461 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.461 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.462 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.463 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.464 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.467 I llama_model_loader: - type  f32:   37 tensors
0.00.131.468 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.901 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.594 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.086 I llm_load_vocab: special tokens cache size = 5
0.00.262.079 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.096 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.096 I llm_load_print_meta: arch             = gemma
0.00.262.097 I llm_load_print_meta: vocab type       = SPM
0.00.262.097 I llm_load_print_meta: n_vocab          = 256000
0.00.262.098 I llm_load_print_meta: n_merges         = 0
0.00.262.098 I llm_load_print_meta: vocab_only       = 0
0.00.262.098 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.099 I llm_load_print_meta: n_embd           = 2048
0.00.262.099 I llm_load_print_meta: n_layer          = 18
0.00.262.111 I llm_load_print_meta: n_head           = 8
0.00.262.112 I llm_load_print_meta: n_head_kv        = 1
0.00.262.112 I llm_load_print_meta: n_rot            = 256
0.00.262.112 I llm_load_print_meta: n_swa            = 0
0.00.262.112 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.113 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.114 I llm_load_print_meta: n_gqa            = 8
0.00.262.115 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.116 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.116 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.118 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.118 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.118 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.119 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.120 I llm_load_print_meta: n_ff             = 16384
0.00.262.120 I llm_load_print_meta: n_expert         = 0
0.00.262.120 I llm_load_print_meta: n_expert_used    = 0
0.00.262.120 I llm_load_print_meta: causal attn      = 1
0.00.262.121 I llm_load_print_meta: pooling type     = 0
0.00.262.121 I llm_load_print_meta: rope type        = 2
0.00.262.121 I llm_load_print_meta: rope scaling     = linear
0.00.262.122 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.123 I llm_load_print_meta: freq_scale_train = 1
0.00.262.123 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.124 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.124 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.124 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.125 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.125 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.125 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.126 I llm_load_print_meta: model type       = 2B
0.00.262.126 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.127 I llm_load_print_meta: model params     = 2.51 B
0.00.262.128 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.128 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.129 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.129 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.130 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.130 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.130 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.131 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.131 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.131 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.132 I llm_load_print_meta: max token length = 93
0.00.355.011 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.360.121 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.127 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.128 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.128 I llama_new_context_with_model: n_batch       = 2048
0.00.360.129 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.129 I llama_new_context_with_model: flash_attn    = 0
0.00.360.132 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.133 I llama_new_context_with_model: freq_scale    = 1
0.00.360.134 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.918 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.936 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.027 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.292 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.299 I llama_new_context_with_model: graph nodes  = 601
0.00.376.300 I llama_new_context_with_model: graph splits = 1
0.00.376.302 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.754 I main: llama threadpool init, n_threads = 4
0.00.457.771 I 
0.00.457.847 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.457.851 I 
0.00.457.904 I sampler seed: 3621057545
0.00.457.916 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.940 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.945 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.945 I 
 increably. [end of text]


0.00.729.344 I llama_perf_sampler_print:    sampling time =       0.64 ms /     5 runs   (    0.13 ms per token,  7800.31 tokens per second)
0.00.729.347 I llama_perf_context_print:        load time =     457.35 ms
0.00.729.348 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.729.351 I llama_perf_context_print:        eval time =     268.35 ms /     4 runs   (   67.09 ms per token,    14.91 tokens per second)
0.00.729.352 I llama_perf_context_print:       total time =     271.60 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.547 I build: 4205 (c6bc7395) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.000.756 I main: load the model and apply lora adapter, if any
0.00.021.252 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.261 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.269 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.274 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.279 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.283 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.284 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.285 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.285 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.286 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.287 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.291 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.292 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.293 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.293 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.294 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.139 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.480 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.431 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.438 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.439 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.440 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.440 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.441 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.442 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.444 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.445 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.447 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.447 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.448 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.452 I llama_model_loader: - type  f32:   37 tensors
0.00.132.453 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.991 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.283 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.937 I llm_load_vocab: special tokens cache size = 5
0.00.271.288 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.304 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.305 I llm_load_print_meta: arch             = gemma
0.00.271.305 I llm_load_print_meta: vocab type       = SPM
0.00.271.306 I llm_load_print_meta: n_vocab          = 256000
0.00.271.306 I llm_load_print_meta: n_merges         = 0
0.00.271.307 I llm_load_print_meta: vocab_only       = 0
0.00.271.307 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.307 I llm_load_print_meta: n_embd           = 2048
0.00.271.307 I llm_load_print_meta: n_layer          = 18
0.00.271.319 I llm_load_print_meta: n_head           = 8
0.00.271.320 I llm_load_print_meta: n_head_kv        = 1
0.00.271.320 I llm_load_print_meta: n_rot            = 256
0.00.271.320 I llm_load_print_meta: n_swa            = 0
0.00.271.321 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.321 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.322 I llm_load_print_meta: n_gqa            = 8
0.00.271.323 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.324 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.324 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.326 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.326 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.327 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.327 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.328 I llm_load_print_meta: n_ff             = 16384
0.00.271.328 I llm_load_print_meta: n_expert         = 0
0.00.271.328 I llm_load_print_meta: n_expert_used    = 0
0.00.271.329 I llm_load_print_meta: causal attn      = 1
0.00.271.329 I llm_load_print_meta: pooling type     = 0
0.00.271.329 I llm_load_print_meta: rope type        = 2
0.00.271.330 I llm_load_print_meta: rope scaling     = linear
0.00.271.331 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.332 I llm_load_print_meta: freq_scale_train = 1
0.00.271.332 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.332 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.333 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.333 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.333 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.333 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.334 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.334 I llm_load_print_meta: model type       = 2B
0.00.271.335 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.336 I llm_load_print_meta: model params     = 2.51 B
0.00.271.336 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.337 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.337 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.338 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.338 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.338 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.339 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.339 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.339 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.340 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.340 I llm_load_print_meta: max token length = 93
0.00.346.786 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.346.793 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.346.794 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.346.794 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.346.795 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.346.796 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.352.217 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.223 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.223 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.223 I llama_new_context_with_model: n_batch       = 2048
0.00.352.224 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.224 I llama_new_context_with_model: flash_attn    = 0
0.00.352.227 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.228 I llama_new_context_with_model: freq_scale    = 1
0.00.352.228 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.366.359 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.375 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.366.463 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.729 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.734 I llama_new_context_with_model: graph nodes  = 601
0.00.367.734 I llama_new_context_with_model: graph splits = 1
0.00.367.736 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.382 I main: llama threadpool init, n_threads = 4
0.00.452.397 I 
0.00.452.490 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.452.494 I 
0.00.452.553 I sampler seed: 700340427
0.00.452.564 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.569 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.452.570 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.452.571 I 
 increably.

I'm a bit of a klutz, and I often drop things. But I'm also a quick learner, and I can

0.02.714.239 I llama_perf_sampler_print:    sampling time =       4.64 ms /    33 runs   (    0.14 ms per token,  7110.54 tokens per second)
0.02.714.242 I llama_perf_context_print:        load time =     451.60 ms
0.02.714.243 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.714.245 I llama_perf_context_print:        eval time =    2243.40 ms /    32 runs   (   70.11 ms per token,    14.26 tokens per second)
0.02.714.245 I llama_perf_context_print:       total time =    2261.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.530 I build: 4205 (c6bc7395) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.021.068 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.077 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.084 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.089 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.090 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.095 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.096 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.097 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.098 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.098 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.099 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.106 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.107 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.108 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.108 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.109 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.686 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.299 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.171 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.179 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.179 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.180 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.180 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.181 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.182 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.184 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.185 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.185 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.187 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.187 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.190 I llama_model_loader: - type  f32:   37 tensors
0.00.132.192 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.923 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.908 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.394 I llm_load_vocab: special tokens cache size = 5
0.00.260.351 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.367 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.367 I llm_load_print_meta: arch             = gemma
0.00.260.368 I llm_load_print_meta: vocab type       = SPM
0.00.260.368 I llm_load_print_meta: n_vocab          = 256000
0.00.260.369 I llm_load_print_meta: n_merges         = 0
0.00.260.369 I llm_load_print_meta: vocab_only       = 0
0.00.260.369 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.369 I llm_load_print_meta: n_embd           = 2048
0.00.260.370 I llm_load_print_meta: n_layer          = 18
0.00.260.381 I llm_load_print_meta: n_head           = 8
0.00.260.382 I llm_load_print_meta: n_head_kv        = 1
0.00.260.382 I llm_load_print_meta: n_rot            = 256
0.00.260.382 I llm_load_print_meta: n_swa            = 0
0.00.260.383 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.383 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.384 I llm_load_print_meta: n_gqa            = 8
0.00.260.385 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.386 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.387 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.389 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.389 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.389 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.390 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.390 I llm_load_print_meta: n_ff             = 16384
0.00.260.391 I llm_load_print_meta: n_expert         = 0
0.00.260.391 I llm_load_print_meta: n_expert_used    = 0
0.00.260.391 I llm_load_print_meta: causal attn      = 1
0.00.260.391 I llm_load_print_meta: pooling type     = 0
0.00.260.392 I llm_load_print_meta: rope type        = 2
0.00.260.392 I llm_load_print_meta: rope scaling     = linear
0.00.260.393 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.394 I llm_load_print_meta: freq_scale_train = 1
0.00.260.394 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.395 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.395 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.395 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.396 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.396 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.396 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.396 I llm_load_print_meta: model type       = 2B
0.00.260.397 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.398 I llm_load_print_meta: model params     = 2.51 B
0.00.260.399 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.399 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.399 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.400 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.400 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.400 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.401 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.401 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.402 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.402 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.402 I llm_load_print_meta: max token length = 93
0.00.331.553 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.331.559 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.336.918 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.924 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.925 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.925 I llama_new_context_with_model: n_batch       = 2048
0.00.336.926 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.926 I llama_new_context_with_model: flash_attn    = 0
0.00.336.929 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.930 I llama_new_context_with_model: freq_scale    = 1
0.00.336.931 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.258 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.272 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.366 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.658 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.664 I llama_new_context_with_model: graph nodes  = 601
0.00.352.665 I llama_new_context_with_model: graph splits = 1
0.00.352.667 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.759 I main: llama threadpool init, n_threads = 4
0.00.441.774 I 
0.00.441.857 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.441.861 I 
0.00.441.908 I sampler seed: 2347432793
0.00.441.919 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.928 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.441.929 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.930 I 
 increasities

I am unable to access the requested text. Please provide the text so I can assist you. [end of text]


0.02.184.049 I llama_perf_sampler_print:    sampling time =       3.69 ms /    24 runs   (    0.15 ms per token,  6512.89 tokens per second)
0.02.184.051 I llama_perf_context_print:        load time =     440.98 ms
0.02.184.053 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.184.054 I llama_perf_context_print:        eval time =    1727.72 ms /    23 runs   (   75.12 ms per token,    13.31 tokens per second)
0.02.184.055 I llama_perf_context_print:       total time =    1742.30 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.046s
user	0m29.045s
sys	0m9.259s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4205 (c6bc7395)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40341.92 ms
main:    total time = 40341.92 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.169 I build: 4205 (c6bc7395) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.352 I main: llama backend init
0.00.000.359 I main: load the model and apply lora adapter, if any
0.00.020.650 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.659 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.668 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.676 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.680 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.685 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.687 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.688 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.688 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.689 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.689 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.692 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.693 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.693 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.694 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.694 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.772 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.653 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.519 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.524 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.525 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.525 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.525 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.526 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.527 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.529 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.530 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.531 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.533 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.534 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.537 I llama_model_loader: - type  f32:   37 tensors
0.00.131.538 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.538 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.369 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.789 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.474 I llm_load_vocab: special tokens cache size = 5
0.00.273.032 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.053 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.054 I llm_load_print_meta: arch             = gemma
0.00.273.054 I llm_load_print_meta: vocab type       = SPM
0.00.273.055 I llm_load_print_meta: n_vocab          = 256000
0.00.273.056 I llm_load_print_meta: n_merges         = 0
0.00.273.056 I llm_load_print_meta: vocab_only       = 0
0.00.273.056 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.057 I llm_load_print_meta: n_embd           = 2048
0.00.273.057 I llm_load_print_meta: n_layer          = 18
0.00.273.070 I llm_load_print_meta: n_head           = 8
0.00.273.071 I llm_load_print_meta: n_head_kv        = 1
0.00.273.071 I llm_load_print_meta: n_rot            = 256
0.00.273.071 I llm_load_print_meta: n_swa            = 0
0.00.273.072 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.072 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.073 I llm_load_print_meta: n_gqa            = 8
0.00.273.074 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.075 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.075 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.077 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.077 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.078 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.078 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.079 I llm_load_print_meta: n_ff             = 16384
0.00.273.079 I llm_load_print_meta: n_expert         = 0
0.00.273.079 I llm_load_print_meta: n_expert_used    = 0
0.00.273.079 I llm_load_print_meta: causal attn      = 1
0.00.273.080 I llm_load_print_meta: pooling type     = 0
0.00.273.080 I llm_load_print_meta: rope type        = 2
0.00.273.080 I llm_load_print_meta: rope scaling     = linear
0.00.273.082 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.083 I llm_load_print_meta: freq_scale_train = 1
0.00.273.083 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.083 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.084 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.084 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.084 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.084 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.085 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.085 I llm_load_print_meta: model type       = 2B
0.00.273.086 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.087 I llm_load_print_meta: model params     = 2.51 B
0.00.273.087 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.088 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.088 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.089 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.089 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.089 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.090 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.090 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.091 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.091 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.092 I llm_load_print_meta: max token length = 93
0.00.332.968 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.332.976 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.332.977 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.332.977 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.332.978 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.332.978 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.338.053 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.060 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.060 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.061 I llama_new_context_with_model: n_batch       = 2048
0.00.338.061 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.062 I llama_new_context_with_model: flash_attn    = 0
0.00.338.064 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.065 I llama_new_context_with_model: freq_scale    = 1
0.00.338.066 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.183 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.199 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.290 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.604 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.610 I llama_new_context_with_model: graph nodes  = 601
0.00.353.610 I llama_new_context_with_model: graph splits = 1
0.00.353.612 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.043 I main: llama threadpool init, n_threads = 4
0.00.428.058 I 
0.00.428.130 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.428.133 I 
0.00.428.176 I sampler seed: 4038672477
0.00.428.187 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.199 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.203 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.203 I 
 squaRED, a global technology company, is seeking to expand its reach into the European market.

**Requirements:**

* Develop a comprehensive marketing strategy for SQU

0.02.025.468 I llama_perf_sampler_print:    sampling time =       5.34 ms /    33 runs   (    0.16 ms per token,  6184.41 tokens per second)
0.02.025.470 I llama_perf_context_print:        load time =     427.67 ms
0.02.025.471 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.025.473 I llama_perf_context_print:        eval time =    1577.48 ms /    32 runs   (   49.30 ms per token,    20.29 tokens per second)
0.02.025.473 I llama_perf_context_print:       total time =    1597.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4205 (c6bc7395)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40186.90 ms
main:    total time = 40186.90 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.543 I build: 4205 (c6bc7395) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.021.203 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.218 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.229 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.232 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.237 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.238 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.239 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.240 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.240 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.241 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.244 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.244 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.245 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.245 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.246 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.248 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.327 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.138 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.144 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.145 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.146 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.146 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.147 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.147 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.150 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.150 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.154 I llama_model_loader: - type  f32:   37 tensors
0.00.132.154 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.155 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.131 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.521 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.205 I llm_load_vocab: special tokens cache size = 5
0.00.277.472 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.492 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.492 I llm_load_print_meta: arch             = gemma
0.00.277.493 I llm_load_print_meta: vocab type       = SPM
0.00.277.494 I llm_load_print_meta: n_vocab          = 256000
0.00.277.494 I llm_load_print_meta: n_merges         = 0
0.00.277.495 I llm_load_print_meta: vocab_only       = 0
0.00.277.495 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.495 I llm_load_print_meta: n_embd           = 2048
0.00.277.495 I llm_load_print_meta: n_layer          = 18
0.00.277.507 I llm_load_print_meta: n_head           = 8
0.00.277.508 I llm_load_print_meta: n_head_kv        = 1
0.00.277.509 I llm_load_print_meta: n_rot            = 256
0.00.277.509 I llm_load_print_meta: n_swa            = 0
0.00.277.509 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.509 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.510 I llm_load_print_meta: n_gqa            = 8
0.00.277.511 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.512 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.513 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.514 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.515 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.515 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.516 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.516 I llm_load_print_meta: n_ff             = 16384
0.00.277.517 I llm_load_print_meta: n_expert         = 0
0.00.277.517 I llm_load_print_meta: n_expert_used    = 0
0.00.277.517 I llm_load_print_meta: causal attn      = 1
0.00.277.517 I llm_load_print_meta: pooling type     = 0
0.00.277.517 I llm_load_print_meta: rope type        = 2
0.00.277.518 I llm_load_print_meta: rope scaling     = linear
0.00.277.519 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.520 I llm_load_print_meta: freq_scale_train = 1
0.00.277.520 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.521 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.521 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.521 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.521 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.522 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.522 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.522 I llm_load_print_meta: model type       = 2B
0.00.277.523 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.277.524 I llm_load_print_meta: model params     = 2.51 B
0.00.277.524 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.277.525 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.525 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.526 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.526 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.526 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.527 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.527 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.528 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.528 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.528 I llm_load_print_meta: max token length = 93
0.00.334.063 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.339.141 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.147 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.148 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.148 I llama_new_context_with_model: n_batch       = 2048
0.00.339.148 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.149 I llama_new_context_with_model: flash_attn    = 0
0.00.339.151 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.152 I llama_new_context_with_model: freq_scale    = 1
0.00.339.153 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.992 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.003 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.094 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.310 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.316 I llama_new_context_with_model: graph nodes  = 601
0.00.355.316 I llama_new_context_with_model: graph splits = 1
0.00.355.319 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.100 I main: llama threadpool init, n_threads = 4
0.00.429.116 I 
0.00.429.186 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.429.189 I 
0.00.429.236 I sampler seed: 1064480053
0.00.429.247 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.260 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.263 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.263 I 
 maneuvously. 

The word "unpleasant" contains unpleasant words like "pain" and "trouble". Is it appropriate to use it in a formal

0.01.990.990 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6772.01 tokens per second)
0.01.990.993 I llama_perf_context_print:        load time =     428.31 ms
0.01.990.994 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.990.996 I llama_perf_context_print:        eval time =    1543.59 ms /    32 runs   (   48.24 ms per token,    20.73 tokens per second)
0.01.990.996 I llama_perf_context_print:       total time =    1561.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.280s
user	10m23.930s
sys	0m6.930s
