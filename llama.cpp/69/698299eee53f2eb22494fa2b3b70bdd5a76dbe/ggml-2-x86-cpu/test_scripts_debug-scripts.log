+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4042 (69698299) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.001.091 I main: load the model and apply lora adapter, if any
0.00.023.320 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.330 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.420 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.433 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.434 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.440 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.444 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.445 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.447 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.449 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.450 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.459 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.460 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.461 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.462 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.463 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.360 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.531 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.786 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.795 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.797 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.798 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.799 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.800 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.802 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.806 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.807 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.808 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.809 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.810 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.819 I llama_model_loader: - type  f32:   37 tensors
0.00.275.821 I llama_model_loader: - type q8_0:  127 tensors
0.00.485.343 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.550.594 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.551.574 I llm_load_vocab: special tokens cache size = 5
0.00.654.938 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.655.011 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.655.013 I llm_load_print_meta: arch             = gemma
0.00.655.014 I llm_load_print_meta: vocab type       = SPM
0.00.655.015 I llm_load_print_meta: n_vocab          = 256000
0.00.655.017 I llm_load_print_meta: n_merges         = 0
0.00.655.017 I llm_load_print_meta: vocab_only       = 0
0.00.655.018 I llm_load_print_meta: n_ctx_train      = 8192
0.00.655.018 I llm_load_print_meta: n_embd           = 2048
0.00.655.019 I llm_load_print_meta: n_layer          = 18
0.00.655.087 I llm_load_print_meta: n_head           = 8
0.00.655.094 I llm_load_print_meta: n_head_kv        = 1
0.00.655.094 I llm_load_print_meta: n_rot            = 256
0.00.655.095 I llm_load_print_meta: n_swa            = 0
0.00.655.095 I llm_load_print_meta: n_embd_head_k    = 256
0.00.655.096 I llm_load_print_meta: n_embd_head_v    = 256
0.00.655.101 I llm_load_print_meta: n_gqa            = 8
0.00.655.106 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.655.111 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.655.112 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.655.114 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.655.114 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.655.115 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.655.115 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.655.120 I llm_load_print_meta: n_ff             = 16384
0.00.655.122 I llm_load_print_meta: n_expert         = 0
0.00.655.122 I llm_load_print_meta: n_expert_used    = 0
0.00.655.127 I llm_load_print_meta: causal attn      = 1
0.00.655.127 I llm_load_print_meta: pooling type     = 0
0.00.655.128 I llm_load_print_meta: rope type        = 2
0.00.655.128 I llm_load_print_meta: rope scaling     = linear
0.00.655.130 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.655.130 I llm_load_print_meta: freq_scale_train = 1
0.00.655.152 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.655.152 I llm_load_print_meta: rope_finetuned   = unknown
0.00.655.161 I llm_load_print_meta: ssm_d_conv       = 0
0.00.655.162 I llm_load_print_meta: ssm_d_inner      = 0
0.00.655.163 I llm_load_print_meta: ssm_d_state      = 0
0.00.655.163 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.655.164 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.655.164 I llm_load_print_meta: model type       = 2B
0.00.655.165 I llm_load_print_meta: model ftype      = Q8_0
0.00.655.166 I llm_load_print_meta: model params     = 2.51 B
0.00.655.175 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.655.175 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.655.176 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.655.176 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.655.177 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.655.177 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.655.178 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.655.179 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.655.185 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.655.187 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.655.187 I llm_load_print_meta: max token length = 93
0.00.755.057 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.755.065 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.755.066 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.755.067 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.755.067 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.755.068 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.761.004 I llama_new_context_with_model: n_seq_max     = 1
0.00.761.013 I llama_new_context_with_model: n_ctx         = 4096
0.00.761.014 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.761.015 I llama_new_context_with_model: n_batch       = 2048
0.00.761.015 I llama_new_context_with_model: n_ubatch      = 512
0.00.761.016 I llama_new_context_with_model: flash_attn    = 0
0.00.761.019 I llama_new_context_with_model: freq_base     = 10000.0
0.00.761.020 I llama_new_context_with_model: freq_scale    = 1
0.00.761.021 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.777.375 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.777.419 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.777.539 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.780.083 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.780.088 I llama_new_context_with_model: graph nodes  = 601
0.00.780.088 I llama_new_context_with_model: graph splits = 1
0.00.780.113 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.386.162 I main: llama threadpool init, n_threads = 4
0.01.386.177 I 
0.01.386.306 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.386.310 I 
0.01.386.544 I sampler seed: 1994883562
0.01.386.556 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.386.563 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.386.564 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.386.565 I 
 increasities?

I cannot find that information in the context. [end of text]


0.07.308.166 I llama_perf_sampler_print:    sampling time =      21.57 ms /    15 runs   (    1.44 ms per token,   695.44 tokens per second)
0.07.308.168 I llama_perf_context_print:        load time =    1384.98 ms
0.07.308.185 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.308.186 I llama_perf_context_print:        eval time =    5881.15 ms /    14 runs   (  420.08 ms per token,     2.38 tokens per second)
0.07.308.187 I llama_perf_context_print:       total time =    5922.01 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 4042 (69698299) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.001.097 I main: load the model and apply lora adapter, if any
0.00.026.484 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.026.585 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.601 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.605 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.610 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.612 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.613 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.615 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.616 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.617 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.624 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.625 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.626 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.628 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.629 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.160.768 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.259.732 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.277.988 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.277.996 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.277.997 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.277.998 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.278.000 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.278.001 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.278.002 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.278.006 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.278.007 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.278.009 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.278.010 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.278.011 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.278.018 I llama_model_loader: - type  f32:   37 tensors
0.00.278.021 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.875 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.265 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.184 I llm_load_vocab: special tokens cache size = 5
0.00.616.079 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.147 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.147 I llm_load_print_meta: arch             = gemma
0.00.616.148 I llm_load_print_meta: vocab type       = SPM
0.00.616.149 I llm_load_print_meta: n_vocab          = 256000
0.00.616.152 I llm_load_print_meta: n_merges         = 0
0.00.616.152 I llm_load_print_meta: vocab_only       = 0
0.00.616.152 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.153 I llm_load_print_meta: n_embd           = 2048
0.00.616.153 I llm_load_print_meta: n_layer          = 18
0.00.616.215 I llm_load_print_meta: n_head           = 8
0.00.616.223 I llm_load_print_meta: n_head_kv        = 1
0.00.616.224 I llm_load_print_meta: n_rot            = 256
0.00.616.224 I llm_load_print_meta: n_swa            = 0
0.00.616.224 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.225 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.229 I llm_load_print_meta: n_gqa            = 8
0.00.616.233 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.238 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.239 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.242 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.243 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.243 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.254 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.259 I llm_load_print_meta: n_ff             = 16384
0.00.616.261 I llm_load_print_meta: n_expert         = 0
0.00.616.261 I llm_load_print_meta: n_expert_used    = 0
0.00.616.261 I llm_load_print_meta: causal attn      = 1
0.00.616.262 I llm_load_print_meta: pooling type     = 0
0.00.616.263 I llm_load_print_meta: rope type        = 2
0.00.616.263 I llm_load_print_meta: rope scaling     = linear
0.00.616.276 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.283 I llm_load_print_meta: freq_scale_train = 1
0.00.616.284 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.285 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.285 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.286 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.286 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.286 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.287 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.287 I llm_load_print_meta: model type       = 2B
0.00.616.288 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.289 I llm_load_print_meta: model params     = 2.51 B
0.00.616.298 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.298 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.299 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.300 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.300 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.301 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.301 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.302 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.307 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.313 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.313 I llm_load_print_meta: max token length = 93
0.00.714.648 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.720.729 I llama_new_context_with_model: n_seq_max     = 1
0.00.720.735 I llama_new_context_with_model: n_ctx         = 4096
0.00.720.735 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.720.736 I llama_new_context_with_model: n_batch       = 2048
0.00.720.736 I llama_new_context_with_model: n_ubatch      = 512
0.00.720.737 I llama_new_context_with_model: flash_attn    = 0
0.00.720.739 I llama_new_context_with_model: freq_base     = 10000.0
0.00.720.739 I llama_new_context_with_model: freq_scale    = 1
0.00.720.740 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.737.350 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.737.388 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.737.509 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.976 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.739.980 I llama_new_context_with_model: graph nodes  = 601
0.00.739.980 I llama_new_context_with_model: graph splits = 1
0.00.740.005 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.349.395 I main: llama threadpool init, n_threads = 4
0.01.349.406 I 
0.01.349.512 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.349.516 I 
0.01.349.742 I sampler seed: 4159560287
0.01.349.754 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.349.762 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.349.763 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.349.763 I 
 increasities in the text, indicating the type of relationship between the entities.

**Relationships:**

* **Person and Place:** Person lives in a place.

0.14.919.769 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.21 tokens per second)
0.14.919.774 I llama_perf_context_print:        load time =    1348.20 ms
0.14.919.776 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.919.779 I llama_perf_context_print:        eval time =   13480.30 ms /    32 runs   (  421.26 ms per token,     2.37 tokens per second)
0.14.919.782 I llama_perf_context_print:       total time =   13570.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 4042 (69698299) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.001.124 I main: load the model and apply lora adapter, if any
0.00.023.831 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.844 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.942 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.955 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.956 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.961 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.962 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.964 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.966 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.967 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.968 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.976 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.977 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.978 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.979 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.989 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.817 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.977 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.315 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.323 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.325 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.326 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.327 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.328 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.330 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.333 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.334 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.335 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.336 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.276.338 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.346 I llama_model_loader: - type  f32:   37 tensors
0.00.276.349 I llama_model_loader: - type q8_0:  127 tensors
0.00.457.747 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.522.125 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.113 I llm_load_vocab: special tokens cache size = 5
0.00.626.667 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.626.738 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.626.739 I llm_load_print_meta: arch             = gemma
0.00.626.740 I llm_load_print_meta: vocab type       = SPM
0.00.626.741 I llm_load_print_meta: n_vocab          = 256000
0.00.626.744 I llm_load_print_meta: n_merges         = 0
0.00.626.744 I llm_load_print_meta: vocab_only       = 0
0.00.626.745 I llm_load_print_meta: n_ctx_train      = 8192
0.00.626.745 I llm_load_print_meta: n_embd           = 2048
0.00.626.745 I llm_load_print_meta: n_layer          = 18
0.00.626.810 I llm_load_print_meta: n_head           = 8
0.00.626.817 I llm_load_print_meta: n_head_kv        = 1
0.00.626.818 I llm_load_print_meta: n_rot            = 256
0.00.626.818 I llm_load_print_meta: n_swa            = 0
0.00.626.819 I llm_load_print_meta: n_embd_head_k    = 256
0.00.626.819 I llm_load_print_meta: n_embd_head_v    = 256
0.00.626.844 I llm_load_print_meta: n_gqa            = 8
0.00.626.849 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.626.856 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.626.857 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.626.859 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.626.863 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.626.863 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.626.864 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.626.869 I llm_load_print_meta: n_ff             = 16384
0.00.626.871 I llm_load_print_meta: n_expert         = 0
0.00.626.872 I llm_load_print_meta: n_expert_used    = 0
0.00.626.872 I llm_load_print_meta: causal attn      = 1
0.00.626.872 I llm_load_print_meta: pooling type     = 0
0.00.626.873 I llm_load_print_meta: rope type        = 2
0.00.626.873 I llm_load_print_meta: rope scaling     = linear
0.00.626.875 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.626.875 I llm_load_print_meta: freq_scale_train = 1
0.00.626.877 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.626.877 I llm_load_print_meta: rope_finetuned   = unknown
0.00.626.877 I llm_load_print_meta: ssm_d_conv       = 0
0.00.626.878 I llm_load_print_meta: ssm_d_inner      = 0
0.00.626.878 I llm_load_print_meta: ssm_d_state      = 0
0.00.626.879 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.626.879 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.626.880 I llm_load_print_meta: model type       = 2B
0.00.626.881 I llm_load_print_meta: model ftype      = Q8_0
0.00.626.882 I llm_load_print_meta: model params     = 2.51 B
0.00.626.889 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.626.890 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.626.890 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.626.891 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.626.892 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.626.892 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.626.893 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.626.894 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.626.900 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.626.901 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.626.902 I llm_load_print_meta: max token length = 93
0.00.719.578 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.719.588 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.719.589 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.719.590 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.719.591 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.719.592 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.725.724 I llama_new_context_with_model: n_seq_max     = 1
0.00.725.732 I llama_new_context_with_model: n_ctx         = 4096
0.00.725.732 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.725.732 I llama_new_context_with_model: n_batch       = 2048
0.00.725.733 I llama_new_context_with_model: n_ubatch      = 512
0.00.725.733 I llama_new_context_with_model: flash_attn    = 0
0.00.725.736 I llama_new_context_with_model: freq_base     = 10000.0
0.00.725.736 I llama_new_context_with_model: freq_scale    = 1
0.00.725.737 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.741.973 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.742.011 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.742.138 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.744.661 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.744.665 I llama_new_context_with_model: graph nodes  = 601
0.00.744.666 I llama_new_context_with_model: graph splits = 1
0.00.744.690 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.386.491 I main: llama threadpool init, n_threads = 4
0.01.386.506 I 
0.01.386.618 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.386.622 I 
0.01.386.858 I sampler seed: 642729618
0.01.386.871 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.386.877 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.386.881 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.386.881 I 
 increasements is a common problem in many organisations, leading to decreased productivity and innovation.

**Causes of this problem:**

* Poor communication and lack of transparency

0.14.971.340 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.53 tokens per second)
0.14.971.344 I llama_perf_context_print:        load time =    1385.26 ms
0.14.971.346 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.971.348 I llama_perf_context_print:        eval time =   13494.53 ms /    32 runs   (  421.70 ms per token,     2.37 tokens per second)
0.14.971.349 I llama_perf_context_print:       total time =   13584.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 4042 (69698299) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.909 I main: llama backend init
0.00.001.184 I main: load the model and apply lora adapter, if any
0.00.023.730 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.742 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.833 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.845 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.846 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.851 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.855 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.856 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.857 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.858 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.859 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.867 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.868 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.869 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.870 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.871 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.159.637 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.793 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.165 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.174 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.175 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.176 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.177 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.179 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.180 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.184 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.185 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.186 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.187 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.276.188 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.197 I llama_model_loader: - type  f32:   37 tensors
0.00.276.200 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.935 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.322 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.272 I llm_load_vocab: special tokens cache size = 5
0.00.613.123 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.193 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.194 I llm_load_print_meta: arch             = gemma
0.00.613.195 I llm_load_print_meta: vocab type       = SPM
0.00.613.196 I llm_load_print_meta: n_vocab          = 256000
0.00.613.198 I llm_load_print_meta: n_merges         = 0
0.00.613.198 I llm_load_print_meta: vocab_only       = 0
0.00.613.199 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.199 I llm_load_print_meta: n_embd           = 2048
0.00.613.200 I llm_load_print_meta: n_layer          = 18
0.00.613.265 I llm_load_print_meta: n_head           = 8
0.00.613.273 I llm_load_print_meta: n_head_kv        = 1
0.00.613.273 I llm_load_print_meta: n_rot            = 256
0.00.613.274 I llm_load_print_meta: n_swa            = 0
0.00.613.274 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.275 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.279 I llm_load_print_meta: n_gqa            = 8
0.00.613.305 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.311 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.313 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.314 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.315 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.315 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.316 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.322 I llm_load_print_meta: n_ff             = 16384
0.00.613.322 I llm_load_print_meta: n_expert         = 0
0.00.613.327 I llm_load_print_meta: n_expert_used    = 0
0.00.613.327 I llm_load_print_meta: causal attn      = 1
0.00.613.328 I llm_load_print_meta: pooling type     = 0
0.00.613.328 I llm_load_print_meta: rope type        = 2
0.00.613.337 I llm_load_print_meta: rope scaling     = linear
0.00.613.341 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.342 I llm_load_print_meta: freq_scale_train = 1
0.00.613.342 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.343 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.343 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.343 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.343 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.344 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.344 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.344 I llm_load_print_meta: model type       = 2B
0.00.613.345 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.346 I llm_load_print_meta: model params     = 2.51 B
0.00.613.355 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.356 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.356 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.357 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.357 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.358 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.358 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.359 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.365 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.367 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.367 I llm_load_print_meta: max token length = 93
0.00.686.320 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.686.330 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.692.139 I llama_new_context_with_model: n_seq_max     = 1
0.00.692.147 I llama_new_context_with_model: n_ctx         = 4096
0.00.692.147 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.692.147 I llama_new_context_with_model: n_batch       = 2048
0.00.692.148 I llama_new_context_with_model: n_ubatch      = 512
0.00.692.148 I llama_new_context_with_model: flash_attn    = 0
0.00.692.151 I llama_new_context_with_model: freq_base     = 10000.0
0.00.692.151 I llama_new_context_with_model: freq_scale    = 1
0.00.692.152 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.708.423 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.708.462 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.708.586 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.711.144 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.711.148 I llama_new_context_with_model: graph nodes  = 601
0.00.711.148 I llama_new_context_with_model: graph splits = 1
0.00.711.172 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.317.156 I main: llama threadpool init, n_threads = 4
0.01.317.169 I 
0.01.317.281 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.317.284 I 
0.01.317.519 I sampler seed: 2036761198
0.01.317.532 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.317.539 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.317.543 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.317.543 I 
 maneurors the most common cause of blindness in developing countries.

Answer: True

Explanation:

One of the most common causes of blindness in developing countries is

0.14.857.835 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.46 tokens per second)
0.14.857.838 I llama_perf_context_print:        load time =    1315.87 ms
0.14.857.840 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.857.842 I llama_perf_context_print:        eval time =   13450.21 ms /    32 runs   (  420.32 ms per token,     2.38 tokens per second)
0.14.857.843 I llama_perf_context_print:       total time =   13540.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m1.673s
user	3m19.366s
sys	0m9.400s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4042 (69698299)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199676.06 ms
main:    total time = 199676.06 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4042 (69698299) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.001.105 I main: load the model and apply lora adapter, if any
0.00.023.558 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.569 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.662 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.673 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.675 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.679 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.681 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.682 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.684 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.685 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.686 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.693 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.696 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.697 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.698 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.699 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.013 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.592 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.903 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.911 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.912 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.913 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.914 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.915 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.916 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.920 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.921 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.922 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.923 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.274.924 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.932 I llama_model_loader: - type  f32:   37 tensors
0.00.274.935 I llama_model_loader: - type q4_K:  108 tensors
0.00.274.935 I llama_model_loader: - type q6_K:   19 tensors
0.00.461.406 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.837 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.709 I llm_load_vocab: special tokens cache size = 5
0.00.619.739 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.811 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.812 I llm_load_print_meta: arch             = gemma
0.00.619.813 I llm_load_print_meta: vocab type       = SPM
0.00.619.814 I llm_load_print_meta: n_vocab          = 256000
0.00.619.817 I llm_load_print_meta: n_merges         = 0
0.00.619.817 I llm_load_print_meta: vocab_only       = 0
0.00.619.818 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.818 I llm_load_print_meta: n_embd           = 2048
0.00.619.818 I llm_load_print_meta: n_layer          = 18
0.00.619.882 I llm_load_print_meta: n_head           = 8
0.00.619.889 I llm_load_print_meta: n_head_kv        = 1
0.00.619.890 I llm_load_print_meta: n_rot            = 256
0.00.619.890 I llm_load_print_meta: n_swa            = 0
0.00.619.891 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.891 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.896 I llm_load_print_meta: n_gqa            = 8
0.00.619.902 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.907 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.908 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.910 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.910 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.910 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.911 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.916 I llm_load_print_meta: n_ff             = 16384
0.00.619.916 I llm_load_print_meta: n_expert         = 0
0.00.619.916 I llm_load_print_meta: n_expert_used    = 0
0.00.619.917 I llm_load_print_meta: causal attn      = 1
0.00.619.917 I llm_load_print_meta: pooling type     = 0
0.00.619.918 I llm_load_print_meta: rope type        = 2
0.00.619.918 I llm_load_print_meta: rope scaling     = linear
0.00.619.919 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.920 I llm_load_print_meta: freq_scale_train = 1
0.00.619.920 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.921 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.921 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.921 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.921 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.922 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.922 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.923 I llm_load_print_meta: model type       = 2B
0.00.619.924 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.619.924 I llm_load_print_meta: model params     = 2.51 B
0.00.619.933 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.619.934 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.935 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.935 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.936 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.937 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.938 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.938 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.945 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.947 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.947 I llm_load_print_meta: max token length = 93
0.00.683.516 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.683.526 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.683.527 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.683.527 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.683.528 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.683.529 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.689.306 I llama_new_context_with_model: n_seq_max     = 1
0.00.689.310 I llama_new_context_with_model: n_ctx         = 4096
0.00.689.311 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.689.311 I llama_new_context_with_model: n_batch       = 2048
0.00.689.311 I llama_new_context_with_model: n_ubatch      = 512
0.00.689.312 I llama_new_context_with_model: flash_attn    = 0
0.00.689.314 I llama_new_context_with_model: freq_base     = 10000.0
0.00.689.315 I llama_new_context_with_model: freq_scale    = 1
0.00.689.315 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.705.475 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.705.514 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.705.636 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.708.162 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.708.166 I llama_new_context_with_model: graph nodes  = 601
0.00.708.167 I llama_new_context_with_model: graph splits = 1
0.00.708.191 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.278.629 I main: llama threadpool init, n_threads = 4
0.01.278.642 I 
0.01.278.754 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.278.758 I 
0.01.278.995 I sampler seed: 3806808723
0.01.279.008 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.279.014 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.279.017 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.279.018 I 
 maneuvously. 

I apologize, but I am unable to provide inappropriate or suggestive responses. My purpose is to assist with tasks and provide information in a

0.12.078.873 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.65 tokens per second)
0.12.078.877 I llama_perf_context_print:        load time =    1277.43 ms
0.12.078.879 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.078.881 I llama_perf_context_print:        eval time =   10710.04 ms /    32 runs   (  334.69 ms per token,     2.99 tokens per second)
0.12.078.883 I llama_perf_context_print:       total time =   10800.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4042 (69698299)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199682.02 ms
main:    total time = 199682.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 4042 (69698299) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.818 I main: llama backend init
0.00.001.083 I main: load the model and apply lora adapter, if any
0.00.023.596 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.704 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.718 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.725 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.730 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.731 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.733 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.734 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.735 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.737 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.744 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.747 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.748 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.749 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.751 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.994 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.174 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.489 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.499 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.501 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.502 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.503 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.504 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.505 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.510 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.511 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.520 I llama_model_loader: - type  f32:   37 tensors
0.00.275.522 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.523 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.427 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.189 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.137 I llm_load_vocab: special tokens cache size = 5
0.00.616.719 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.790 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.791 I llm_load_print_meta: arch             = gemma
0.00.616.792 I llm_load_print_meta: vocab type       = SPM
0.00.616.793 I llm_load_print_meta: n_vocab          = 256000
0.00.616.795 I llm_load_print_meta: n_merges         = 0
0.00.616.796 I llm_load_print_meta: vocab_only       = 0
0.00.616.796 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.797 I llm_load_print_meta: n_embd           = 2048
0.00.616.797 I llm_load_print_meta: n_layer          = 18
0.00.616.860 I llm_load_print_meta: n_head           = 8
0.00.616.867 I llm_load_print_meta: n_head_kv        = 1
0.00.616.868 I llm_load_print_meta: n_rot            = 256
0.00.616.868 I llm_load_print_meta: n_swa            = 0
0.00.616.869 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.869 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.875 I llm_load_print_meta: n_gqa            = 8
0.00.616.880 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.885 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.886 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.887 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.905 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.906 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.913 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.919 I llm_load_print_meta: n_ff             = 16384
0.00.616.920 I llm_load_print_meta: n_expert         = 0
0.00.616.920 I llm_load_print_meta: n_expert_used    = 0
0.00.616.921 I llm_load_print_meta: causal attn      = 1
0.00.616.921 I llm_load_print_meta: pooling type     = 0
0.00.616.923 I llm_load_print_meta: rope type        = 2
0.00.616.923 I llm_load_print_meta: rope scaling     = linear
0.00.616.925 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.926 I llm_load_print_meta: freq_scale_train = 1
0.00.616.927 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.928 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.928 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.928 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.929 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.937 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.938 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.938 I llm_load_print_meta: model type       = 2B
0.00.616.939 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.616.940 I llm_load_print_meta: model params     = 2.51 B
0.00.616.949 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.616.950 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.951 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.952 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.953 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.953 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.954 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.955 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.961 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.962 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.963 I llm_load_print_meta: max token length = 93
0.00.678.138 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.684.087 I llama_new_context_with_model: n_seq_max     = 1
0.00.684.094 I llama_new_context_with_model: n_ctx         = 4096
0.00.684.094 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.684.095 I llama_new_context_with_model: n_batch       = 2048
0.00.684.095 I llama_new_context_with_model: n_ubatch      = 512
0.00.684.096 I llama_new_context_with_model: flash_attn    = 0
0.00.684.099 I llama_new_context_with_model: freq_base     = 10000.0
0.00.684.099 I llama_new_context_with_model: freq_scale    = 1
0.00.684.100 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.701.586 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.701.629 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.701.755 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.704.384 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.704.388 I llama_new_context_with_model: graph nodes  = 601
0.00.704.388 I llama_new_context_with_model: graph splits = 1
0.00.704.413 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.273.821 I main: llama threadpool init, n_threads = 4
0.01.273.834 I 
0.01.273.942 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.273.946 I 
0.01.274.177 I sampler seed: 767552543
0.01.274.189 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.274.195 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.274.198 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.274.199 I 
 seconded in the text below:

"The dog barked and barked again, but the owner did not hear it because the noise was drowned out by the sound

0.12.110.850 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.47 tokens per second)
0.12.110.855 I llama_perf_context_print:        load time =    1272.64 ms
0.12.110.857 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.110.858 I llama_perf_context_print:        eval time =   10746.24 ms /    32 runs   (  335.82 ms per token,     2.98 tokens per second)
0.12.110.859 I llama_perf_context_print:       total time =   10837.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.448s
user	50m17.769s
sys	0m6.307s
