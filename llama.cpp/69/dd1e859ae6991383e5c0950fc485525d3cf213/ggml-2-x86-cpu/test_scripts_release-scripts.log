+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.525 I build: 4430 (69dd1e85) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.711 I main: llama backend init
0.00.000.718 I main: load the model and apply lora adapter, if any
0.00.021.210 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.220 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.228 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.233 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.235 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.238 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.240 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.241 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.241 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.242 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.242 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.245 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.246 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.247 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.247 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.247 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.553 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.251 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.192 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.199 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.200 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.200 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.201 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.202 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.203 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.205 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.206 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.206 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.208 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.209 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.212 I llama_model_loader: - type  f32:   37 tensors
0.00.132.213 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.816 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.522 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.084 I llm_load_vocab: special tokens cache size = 5
0.00.269.682 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.700 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.701 I llm_load_print_meta: arch             = gemma
0.00.269.702 I llm_load_print_meta: vocab type       = SPM
0.00.269.702 I llm_load_print_meta: n_vocab          = 256000
0.00.269.703 I llm_load_print_meta: n_merges         = 0
0.00.269.703 I llm_load_print_meta: vocab_only       = 0
0.00.269.703 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.704 I llm_load_print_meta: n_embd           = 2048
0.00.269.704 I llm_load_print_meta: n_layer          = 18
0.00.269.720 I llm_load_print_meta: n_head           = 8
0.00.269.722 I llm_load_print_meta: n_head_kv        = 1
0.00.269.722 I llm_load_print_meta: n_rot            = 256
0.00.269.723 I llm_load_print_meta: n_swa            = 0
0.00.269.723 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.723 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.725 I llm_load_print_meta: n_gqa            = 8
0.00.269.727 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.728 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.729 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.731 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.731 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.731 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.731 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.733 I llm_load_print_meta: n_ff             = 16384
0.00.269.733 I llm_load_print_meta: n_expert         = 0
0.00.269.734 I llm_load_print_meta: n_expert_used    = 0
0.00.269.734 I llm_load_print_meta: causal attn      = 1
0.00.269.734 I llm_load_print_meta: pooling type     = 0
0.00.269.734 I llm_load_print_meta: rope type        = 2
0.00.269.735 I llm_load_print_meta: rope scaling     = linear
0.00.269.737 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.737 I llm_load_print_meta: freq_scale_train = 1
0.00.269.738 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.738 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.738 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.738 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.739 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.739 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.739 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.741 I llm_load_print_meta: model type       = 2B
0.00.269.742 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.743 I llm_load_print_meta: model params     = 2.51 B
0.00.269.744 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.744 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.745 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.745 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.745 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.746 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.746 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.746 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.747 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.747 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.747 I llm_load_print_meta: max token length = 93
0.00.372.014 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.372.019 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.372.019 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.372.020 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.372.020 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.372.021 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.378.058 I llama_new_context_with_model: n_seq_max     = 1
0.00.378.064 I llama_new_context_with_model: n_ctx         = 4096
0.00.378.064 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.378.065 I llama_new_context_with_model: n_batch       = 2048
0.00.378.065 I llama_new_context_with_model: n_ubatch      = 512
0.00.378.065 I llama_new_context_with_model: flash_attn    = 0
0.00.378.067 I llama_new_context_with_model: freq_base     = 10000.0
0.00.378.068 I llama_new_context_with_model: freq_scale    = 1
0.00.378.069 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.088 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.392.040 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.392.053 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.392.143 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.436 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.393.442 I llama_new_context_with_model: graph nodes  = 601
0.00.393.443 I llama_new_context_with_model: graph splits = 1
0.00.393.446 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.393.447 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.100 I main: llama threadpool init, n_threads = 4
0.00.479.116 I 
0.00.479.191 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.479.195 I 
0.00.479.230 I sampler seed: 2290657949
0.00.479.241 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.244 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.256 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.259 I 
 increasities in the 18th century. [end of text]


0.01.254.748 I llama_perf_sampler_print:    sampling time =       1.65 ms /    12 runs   (    0.14 ms per token,  7281.55 tokens per second)
0.01.254.751 I llama_perf_context_print:        load time =     478.36 ms
0.01.254.753 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.254.755 I llama_perf_context_print:        eval time =     768.21 ms /    11 runs   (   69.84 ms per token,    14.32 tokens per second)
0.01.254.755 I llama_perf_context_print:       total time =     775.65 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.179 I build: 4430 (69dd1e85) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.360 I main: llama backend init
0.00.000.368 I main: load the model and apply lora adapter, if any
0.00.020.314 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.327 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.333 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.334 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.337 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.337 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.339 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.339 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.340 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.340 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.343 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.344 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.345 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.345 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.345 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.946 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.663 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.588 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.594 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.595 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.595 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.596 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.596 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.597 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.599 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.599 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.600 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.600 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.601 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.604 I llama_model_loader: - type  f32:   37 tensors
0.00.130.605 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.437 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.376 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.892 I llm_load_vocab: special tokens cache size = 5
0.00.272.401 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.419 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.420 I llm_load_print_meta: arch             = gemma
0.00.272.421 I llm_load_print_meta: vocab type       = SPM
0.00.272.422 I llm_load_print_meta: n_vocab          = 256000
0.00.272.422 I llm_load_print_meta: n_merges         = 0
0.00.272.422 I llm_load_print_meta: vocab_only       = 0
0.00.272.423 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.423 I llm_load_print_meta: n_embd           = 2048
0.00.272.424 I llm_load_print_meta: n_layer          = 18
0.00.272.435 I llm_load_print_meta: n_head           = 8
0.00.272.437 I llm_load_print_meta: n_head_kv        = 1
0.00.272.437 I llm_load_print_meta: n_rot            = 256
0.00.272.438 I llm_load_print_meta: n_swa            = 0
0.00.272.438 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.438 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.440 I llm_load_print_meta: n_gqa            = 8
0.00.272.442 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.444 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.445 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.447 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.447 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.447 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.447 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.449 I llm_load_print_meta: n_ff             = 16384
0.00.272.449 I llm_load_print_meta: n_expert         = 0
0.00.272.450 I llm_load_print_meta: n_expert_used    = 0
0.00.272.450 I llm_load_print_meta: causal attn      = 1
0.00.272.450 I llm_load_print_meta: pooling type     = 0
0.00.272.450 I llm_load_print_meta: rope type        = 2
0.00.272.451 I llm_load_print_meta: rope scaling     = linear
0.00.272.452 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.453 I llm_load_print_meta: freq_scale_train = 1
0.00.272.453 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.454 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.454 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.455 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.455 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.455 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.455 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.457 I llm_load_print_meta: model type       = 2B
0.00.272.458 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.459 I llm_load_print_meta: model params     = 2.51 B
0.00.272.460 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.461 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.461 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.462 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.462 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.462 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.463 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.463 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.463 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.464 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.464 I llm_load_print_meta: max token length = 93
0.00.368.992 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.374.127 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.133 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.134 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.134 I llama_new_context_with_model: n_batch       = 2048
0.00.374.135 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.135 I llama_new_context_with_model: flash_attn    = 0
0.00.374.137 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.138 I llama_new_context_with_model: freq_scale    = 1
0.00.374.140 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.161 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.388.570 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.583 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.673 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.904 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.911 I llama_new_context_with_model: graph nodes  = 601
0.00.389.912 I llama_new_context_with_model: graph splits = 1
0.00.389.915 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.389.915 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.817 I main: llama threadpool init, n_threads = 4
0.00.471.834 I 
0.00.471.928 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.471.931 I 
0.00.471.964 I sampler seed: 701291850
0.00.471.975 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.986 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.990 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.990 I 
 increably.

I am unable to find the requested information in the provided context. Please provide more information or specify the desired information so that I can assist you

0.02.665.222 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6489.68 tokens per second)
0.02.665.225 I llama_perf_context_print:        load time =     471.43 ms
0.02.665.226 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.665.227 I llama_perf_context_print:        eval time =    2174.11 ms /    32 runs   (   67.94 ms per token,    14.72 tokens per second)
0.02.665.228 I llama_perf_context_print:       total time =    2193.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.569 I build: 4430 (69dd1e85) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.000.773 I main: load the model and apply lora adapter, if any
0.00.021.557 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.569 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.577 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.583 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.584 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.587 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.588 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.588 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.589 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.589 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.589 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.594 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.595 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.595 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.596 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.597 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.503 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.229 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.136 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.142 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.143 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.144 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.145 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.146 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.146 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.151 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.152 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.152 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.153 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.154 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.158 I llama_model_loader: - type  f32:   37 tensors
0.00.132.159 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.240 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.121 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.703 I llm_load_vocab: special tokens cache size = 5
0.00.273.422 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.441 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.443 I llm_load_print_meta: arch             = gemma
0.00.273.443 I llm_load_print_meta: vocab type       = SPM
0.00.273.444 I llm_load_print_meta: n_vocab          = 256000
0.00.273.444 I llm_load_print_meta: n_merges         = 0
0.00.273.445 I llm_load_print_meta: vocab_only       = 0
0.00.273.445 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.446 I llm_load_print_meta: n_embd           = 2048
0.00.273.446 I llm_load_print_meta: n_layer          = 18
0.00.273.457 I llm_load_print_meta: n_head           = 8
0.00.273.459 I llm_load_print_meta: n_head_kv        = 1
0.00.273.459 I llm_load_print_meta: n_rot            = 256
0.00.273.459 I llm_load_print_meta: n_swa            = 0
0.00.273.460 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.460 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.462 I llm_load_print_meta: n_gqa            = 8
0.00.273.464 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.466 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.466 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.468 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.468 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.468 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.468 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.470 I llm_load_print_meta: n_ff             = 16384
0.00.273.471 I llm_load_print_meta: n_expert         = 0
0.00.273.471 I llm_load_print_meta: n_expert_used    = 0
0.00.273.471 I llm_load_print_meta: causal attn      = 1
0.00.273.472 I llm_load_print_meta: pooling type     = 0
0.00.273.472 I llm_load_print_meta: rope type        = 2
0.00.273.472 I llm_load_print_meta: rope scaling     = linear
0.00.273.474 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.475 I llm_load_print_meta: freq_scale_train = 1
0.00.273.475 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.475 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.476 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.476 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.476 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.476 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.477 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.478 I llm_load_print_meta: model type       = 2B
0.00.273.479 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.480 I llm_load_print_meta: model params     = 2.51 B
0.00.273.481 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.481 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.482 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.482 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.483 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.483 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.483 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.483 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.484 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.484 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.484 I llm_load_print_meta: max token length = 93
0.00.350.880 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.350.888 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.350.888 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.350.889 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.350.890 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.350.890 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.356.060 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.065 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.066 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.066 I llama_new_context_with_model: n_batch       = 2048
0.00.356.067 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.067 I llama_new_context_with_model: flash_attn    = 0
0.00.356.069 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.070 I llama_new_context_with_model: freq_scale    = 1
0.00.356.071 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.097 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.370.569 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.370.582 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.675 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.886 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.892 I llama_new_context_with_model: graph nodes  = 601
0.00.371.892 I llama_new_context_with_model: graph splits = 1
0.00.371.895 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.371.896 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.738 I main: llama threadpool init, n_threads = 4
0.00.456.753 I 
0.00.456.825 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.456.828 I 
0.00.456.861 I sampler seed: 371090838
0.00.456.872 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.889 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.892 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.892 I 
 increasities, and other romantic entanglements occur in the lives of nurses, creating unique and sometimes challenging situations.

**Questions:**

1. What are

0.02.714.461 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6627.84 tokens per second)
0.02.714.463 I llama_perf_context_print:        load time =     455.94 ms
0.02.714.464 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.714.466 I llama_perf_context_print:        eval time =    2238.20 ms /    32 runs   (   69.94 ms per token,    14.30 tokens per second)
0.02.714.466 I llama_perf_context_print:       total time =    2257.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.194 I build: 4430 (69dd1e85) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.404 I main: llama backend init
0.00.000.412 I main: load the model and apply lora adapter, if any
0.00.020.681 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.693 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.701 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.707 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.708 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.710 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.711 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.712 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.712 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.713 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.713 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.717 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.718 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.718 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.719 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.719 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.025 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.064 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.092 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.099 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.100 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.100 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.101 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.102 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.102 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.105 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.105 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.106 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.106 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.135.107 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.111 I llama_model_loader: - type  f32:   37 tensors
0.00.135.112 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.877 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.973 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.501 I llm_load_vocab: special tokens cache size = 5
0.00.280.122 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.141 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.143 I llm_load_print_meta: arch             = gemma
0.00.280.143 I llm_load_print_meta: vocab type       = SPM
0.00.280.144 I llm_load_print_meta: n_vocab          = 256000
0.00.280.144 I llm_load_print_meta: n_merges         = 0
0.00.280.145 I llm_load_print_meta: vocab_only       = 0
0.00.280.145 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.145 I llm_load_print_meta: n_embd           = 2048
0.00.280.146 I llm_load_print_meta: n_layer          = 18
0.00.280.157 I llm_load_print_meta: n_head           = 8
0.00.280.159 I llm_load_print_meta: n_head_kv        = 1
0.00.280.159 I llm_load_print_meta: n_rot            = 256
0.00.280.159 I llm_load_print_meta: n_swa            = 0
0.00.280.160 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.160 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.162 I llm_load_print_meta: n_gqa            = 8
0.00.280.163 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.165 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.165 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.167 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.167 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.167 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.168 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.169 I llm_load_print_meta: n_ff             = 16384
0.00.280.169 I llm_load_print_meta: n_expert         = 0
0.00.280.170 I llm_load_print_meta: n_expert_used    = 0
0.00.280.170 I llm_load_print_meta: causal attn      = 1
0.00.280.170 I llm_load_print_meta: pooling type     = 0
0.00.280.171 I llm_load_print_meta: rope type        = 2
0.00.280.171 I llm_load_print_meta: rope scaling     = linear
0.00.280.172 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.173 I llm_load_print_meta: freq_scale_train = 1
0.00.280.173 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.174 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.174 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.174 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.174 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.175 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.175 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.176 I llm_load_print_meta: model type       = 2B
0.00.280.178 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.179 I llm_load_print_meta: model params     = 2.51 B
0.00.280.180 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.180 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.181 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.181 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.182 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.182 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.182 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.182 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.183 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.183 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.184 I llm_load_print_meta: max token length = 93
0.00.354.428 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.354.435 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.359.504 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.510 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.510 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.511 I llama_new_context_with_model: n_batch       = 2048
0.00.359.511 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.511 I llama_new_context_with_model: flash_attn    = 0
0.00.359.514 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.515 I llama_new_context_with_model: freq_scale    = 1
0.00.359.516 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.535 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.373.542 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.554 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.647 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.924 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.931 I llama_new_context_with_model: graph nodes  = 601
0.00.374.931 I llama_new_context_with_model: graph splits = 1
0.00.374.935 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.374.935 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.495 I main: llama threadpool init, n_threads = 4
0.00.463.510 I 
0.00.463.593 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.463.597 I 
0.00.463.646 I sampler seed: 501710582
0.00.463.657 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.660 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.662 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.662 I 
 increasities from the 18th century.

This is a fascinating topic, and I am eager to learn more. Could you please provide me with information

0.02.888.381 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6494.78 tokens per second)
0.02.888.383 I llama_perf_context_print:        load time =     463.06 ms
0.02.888.384 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.888.385 I llama_perf_context_print:        eval time =    2404.66 ms /    32 runs   (   75.15 ms per token,    13.31 tokens per second)
0.02.888.386 I llama_perf_context_print:       total time =    2424.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.372s
user	0m33.502s
sys	0m9.379s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4430 (69dd1e85)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40243.56 ms
main:    total time = 40243.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 4430 (69dd1e85) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.747 I main: load the model and apply lora adapter, if any
0.00.021.275 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.285 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.293 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.298 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.299 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.301 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.302 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.302 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.303 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.303 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.304 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.307 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.307 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.308 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.308 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.309 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.807 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.250 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.126 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.132 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.133 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.133 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.134 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.135 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.135 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.139 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.139 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.140 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.140 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.142 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.144 I llama_model_loader: - type  f32:   37 tensors
0.00.131.145 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.146 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.222 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.512 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.967 I llm_load_vocab: special tokens cache size = 5
0.00.263.722 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.738 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.739 I llm_load_print_meta: arch             = gemma
0.00.263.740 I llm_load_print_meta: vocab type       = SPM
0.00.263.740 I llm_load_print_meta: n_vocab          = 256000
0.00.263.741 I llm_load_print_meta: n_merges         = 0
0.00.263.741 I llm_load_print_meta: vocab_only       = 0
0.00.263.741 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.742 I llm_load_print_meta: n_embd           = 2048
0.00.263.742 I llm_load_print_meta: n_layer          = 18
0.00.263.758 I llm_load_print_meta: n_head           = 8
0.00.263.760 I llm_load_print_meta: n_head_kv        = 1
0.00.263.761 I llm_load_print_meta: n_rot            = 256
0.00.263.761 I llm_load_print_meta: n_swa            = 0
0.00.263.761 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.762 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.764 I llm_load_print_meta: n_gqa            = 8
0.00.263.765 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.767 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.767 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.769 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.769 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.769 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.770 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.771 I llm_load_print_meta: n_ff             = 16384
0.00.263.772 I llm_load_print_meta: n_expert         = 0
0.00.263.772 I llm_load_print_meta: n_expert_used    = 0
0.00.263.772 I llm_load_print_meta: causal attn      = 1
0.00.263.773 I llm_load_print_meta: pooling type     = 0
0.00.263.773 I llm_load_print_meta: rope type        = 2
0.00.263.774 I llm_load_print_meta: rope scaling     = linear
0.00.263.775 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.776 I llm_load_print_meta: freq_scale_train = 1
0.00.263.776 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.776 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.777 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.777 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.777 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.777 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.777 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.779 I llm_load_print_meta: model type       = 2B
0.00.263.780 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.781 I llm_load_print_meta: model params     = 2.51 B
0.00.263.782 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.782 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.782 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.783 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.783 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.783 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.783 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.784 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.784 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.785 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.785 I llm_load_print_meta: max token length = 93
0.00.322.916 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.322.922 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.322.923 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.322.923 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.322.924 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.322.925 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.328.129 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.136 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.137 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.137 I llama_new_context_with_model: n_batch       = 2048
0.00.328.138 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.138 I llama_new_context_with_model: flash_attn    = 0
0.00.328.141 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.142 I llama_new_context_with_model: freq_scale    = 1
0.00.328.143 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.328.163 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.343.993 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.008 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.112 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.430 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.437 I llama_new_context_with_model: graph nodes  = 601
0.00.345.437 I llama_new_context_with_model: graph splits = 1
0.00.345.441 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.345.442 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.679 I main: llama threadpool init, n_threads = 4
0.00.421.694 I 
0.00.421.766 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.421.770 I 
0.00.421.802 I sampler seed: 56236383
0.00.421.813 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.816 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.817 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.817 I 
 seconally, while holding his breath.

**The scene:** A dark, deserted road stretching before them, shrouded in an eerie silence.

**Character:**

0.02.010.939 I llama_perf_sampler_print:    sampling time =       5.24 ms /    33 runs   (    0.16 ms per token,  6303.72 tokens per second)
0.02.010.942 I llama_perf_context_print:        load time =     420.91 ms
0.02.010.943 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.010.944 I llama_perf_context_print:        eval time =    1570.74 ms /    32 runs   (   49.09 ms per token,    20.37 tokens per second)
0.02.010.945 I llama_perf_context_print:       total time =    1589.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4430 (69dd1e85)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40213.49 ms
main:    total time = 40213.49 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.191 I build: 4430 (69dd1e85) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.382 I main: llama backend init
0.00.000.388 I main: load the model and apply lora adapter, if any
0.00.020.683 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.697 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.705 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.708 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.711 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.712 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.712 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.713 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.717 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.717 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.720 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.721 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.722 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.722 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.723 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.550 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.715 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.594 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.601 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.601 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.602 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.602 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.603 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.604 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.606 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.607 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.610 I llama_model_loader: - type  f32:   37 tensors
0.00.131.611 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.612 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.973 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.038 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.513 I llm_load_vocab: special tokens cache size = 5
0.00.266.163 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.182 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.183 I llm_load_print_meta: arch             = gemma
0.00.266.183 I llm_load_print_meta: vocab type       = SPM
0.00.266.184 I llm_load_print_meta: n_vocab          = 256000
0.00.266.184 I llm_load_print_meta: n_merges         = 0
0.00.266.185 I llm_load_print_meta: vocab_only       = 0
0.00.266.185 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.185 I llm_load_print_meta: n_embd           = 2048
0.00.266.186 I llm_load_print_meta: n_layer          = 18
0.00.266.197 I llm_load_print_meta: n_head           = 8
0.00.266.199 I llm_load_print_meta: n_head_kv        = 1
0.00.266.200 I llm_load_print_meta: n_rot            = 256
0.00.266.200 I llm_load_print_meta: n_swa            = 0
0.00.266.200 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.201 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.202 I llm_load_print_meta: n_gqa            = 8
0.00.266.204 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.207 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.208 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.209 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.210 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.210 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.211 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.212 I llm_load_print_meta: n_ff             = 16384
0.00.266.213 I llm_load_print_meta: n_expert         = 0
0.00.266.213 I llm_load_print_meta: n_expert_used    = 0
0.00.266.213 I llm_load_print_meta: causal attn      = 1
0.00.266.214 I llm_load_print_meta: pooling type     = 0
0.00.266.215 I llm_load_print_meta: rope type        = 2
0.00.266.215 I llm_load_print_meta: rope scaling     = linear
0.00.266.217 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.217 I llm_load_print_meta: freq_scale_train = 1
0.00.266.218 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.218 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.219 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.219 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.219 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.219 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.219 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.221 I llm_load_print_meta: model type       = 2B
0.00.266.222 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.223 I llm_load_print_meta: model params     = 2.51 B
0.00.266.224 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.224 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.224 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.225 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.226 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.226 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.226 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.227 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.227 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.227 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.228 I llm_load_print_meta: max token length = 93
0.00.325.117 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.330.157 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.163 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.164 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.164 I llama_new_context_with_model: n_batch       = 2048
0.00.330.165 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.165 I llama_new_context_with_model: flash_attn    = 0
0.00.330.167 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.168 I llama_new_context_with_model: freq_scale    = 1
0.00.330.169 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.330.189 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.345.290 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.305 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.397 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.679 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.685 I llama_new_context_with_model: graph nodes  = 601
0.00.346.686 I llama_new_context_with_model: graph splits = 1
0.00.346.689 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.346.689 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.821 I main: llama threadpool init, n_threads = 4
0.00.420.836 I 
0.00.420.908 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.420.911 I 
0.00.420.942 I sampler seed: 4229673026
0.00.420.953 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.965 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.969 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.969 I 
 seconded.

**Assistant**

I am unable to provide personal or sensitive information. [end of text]


0.01.363.194 I llama_perf_sampler_print:    sampling time =       3.40 ms /    20 runs   (    0.17 ms per token,  5885.82 tokens per second)
0.01.363.197 I llama_perf_context_print:        load time =     420.41 ms
0.01.363.198 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.363.199 I llama_perf_context_print:        eval time =     929.74 ms /    19 runs   (   48.93 ms per token,    20.44 tokens per second)
0.01.363.200 I llama_perf_context_print:       total time =     942.38 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.631s
user	10m21.335s
sys	0m7.094s
