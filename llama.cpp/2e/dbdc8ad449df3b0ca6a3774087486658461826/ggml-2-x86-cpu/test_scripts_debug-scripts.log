+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4035 (2edbdc8a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.001.121 I main: load the model and apply lora adapter, if any
0.00.023.574 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.585 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.670 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.681 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.683 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.687 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.689 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.690 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.691 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.692 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.693 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.704 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.709 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.711 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.712 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.714 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.772 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.507 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.728 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.737 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.738 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.739 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.740 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.742 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.743 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.747 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.747 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.749 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.749 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.274.751 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.758 I llama_model_loader: - type  f32:   37 tensors
0.00.274.760 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.394 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.379 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.424 I llm_load_vocab: special tokens cache size = 5
0.00.613.979 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.056 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.057 I llm_load_print_meta: arch             = gemma
0.00.614.058 I llm_load_print_meta: vocab type       = SPM
0.00.614.059 I llm_load_print_meta: n_vocab          = 256000
0.00.614.062 I llm_load_print_meta: n_merges         = 0
0.00.614.063 I llm_load_print_meta: vocab_only       = 0
0.00.614.063 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.063 I llm_load_print_meta: n_embd           = 2048
0.00.614.064 I llm_load_print_meta: n_layer          = 18
0.00.614.130 I llm_load_print_meta: n_head           = 8
0.00.614.137 I llm_load_print_meta: n_head_kv        = 1
0.00.614.138 I llm_load_print_meta: n_rot            = 256
0.00.614.138 I llm_load_print_meta: n_swa            = 0
0.00.614.139 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.140 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.145 I llm_load_print_meta: n_gqa            = 8
0.00.614.160 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.167 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.170 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.172 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.173 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.173 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.174 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.190 I llm_load_print_meta: n_ff             = 16384
0.00.614.194 I llm_load_print_meta: n_expert         = 0
0.00.614.195 I llm_load_print_meta: n_expert_used    = 0
0.00.614.195 I llm_load_print_meta: causal attn      = 1
0.00.614.196 I llm_load_print_meta: pooling type     = 0
0.00.614.196 I llm_load_print_meta: rope type        = 2
0.00.614.196 I llm_load_print_meta: rope scaling     = linear
0.00.614.198 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.198 I llm_load_print_meta: freq_scale_train = 1
0.00.614.199 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.199 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.200 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.200 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.200 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.201 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.201 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.202 I llm_load_print_meta: model type       = 2B
0.00.614.203 I llm_load_print_meta: model ftype      = Q8_0
0.00.614.203 I llm_load_print_meta: model params     = 2.51 B
0.00.614.212 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.614.222 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.223 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.224 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.226 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.227 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.227 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.228 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.234 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.236 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.236 I llm_load_print_meta: max token length = 93
0.00.719.324 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.719.332 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.719.333 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.719.333 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.719.334 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.719.335 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.725.470 I llama_new_context_with_model: n_seq_max     = 1
0.00.725.478 I llama_new_context_with_model: n_ctx         = 4096
0.00.725.478 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.725.479 I llama_new_context_with_model: n_batch       = 2048
0.00.725.479 I llama_new_context_with_model: n_ubatch      = 512
0.00.725.479 I llama_new_context_with_model: flash_attn    = 0
0.00.725.482 I llama_new_context_with_model: freq_base     = 10000.0
0.00.725.483 I llama_new_context_with_model: freq_scale    = 1
0.00.725.484 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.741.931 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.741.969 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.742.090 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.744.662 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.744.666 I llama_new_context_with_model: graph nodes  = 601
0.00.744.666 I llama_new_context_with_model: graph splits = 1
0.00.744.691 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.351.532 I main: llama threadpool init, n_threads = 4
0.01.351.544 I 
0.01.351.647 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.351.648 I 
0.01.351.878 I sampler seed: 1225681301
0.01.351.892 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.351.899 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.351.901 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.351.901 I 
 maneuvously.

I am unable to generate a response as requested because it involves potentially harmful and inappropriate content. [end of text]


0.11.505.511 I llama_perf_sampler_print:    sampling time =      37.02 ms /    25 runs   (    1.48 ms per token,   675.31 tokens per second)
0.11.505.514 I llama_perf_context_print:        load time =    1350.31 ms
0.11.505.516 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.505.518 I llama_perf_context_print:        eval time =   10086.25 ms /    24 runs   (  420.26 ms per token,     2.38 tokens per second)
0.11.505.519 I llama_perf_context_print:       total time =   10153.99 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4035 (2edbdc8a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.001.104 I main: load the model and apply lora adapter, if any
0.00.023.339 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.433 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.447 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.448 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.453 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.457 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.459 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.460 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.461 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.462 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.470 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.471 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.472 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.473 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.474 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.876 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.413 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.706 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.716 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.717 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.718 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.719 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.720 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.721 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.725 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.726 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.727 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.728 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.274.730 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.737 I llama_model_loader: - type  f32:   37 tensors
0.00.274.739 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.608 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.690 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.678 I llm_load_vocab: special tokens cache size = 5
0.00.611.995 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.061 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.062 I llm_load_print_meta: arch             = gemma
0.00.612.062 I llm_load_print_meta: vocab type       = SPM
0.00.612.063 I llm_load_print_meta: n_vocab          = 256000
0.00.612.066 I llm_load_print_meta: n_merges         = 0
0.00.612.066 I llm_load_print_meta: vocab_only       = 0
0.00.612.066 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.067 I llm_load_print_meta: n_embd           = 2048
0.00.612.067 I llm_load_print_meta: n_layer          = 18
0.00.612.133 I llm_load_print_meta: n_head           = 8
0.00.612.140 I llm_load_print_meta: n_head_kv        = 1
0.00.612.141 I llm_load_print_meta: n_rot            = 256
0.00.612.141 I llm_load_print_meta: n_swa            = 0
0.00.612.142 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.146 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.151 I llm_load_print_meta: n_gqa            = 8
0.00.612.156 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.164 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.165 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.167 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.168 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.168 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.169 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.174 I llm_load_print_meta: n_ff             = 16384
0.00.612.175 I llm_load_print_meta: n_expert         = 0
0.00.612.175 I llm_load_print_meta: n_expert_used    = 0
0.00.612.176 I llm_load_print_meta: causal attn      = 1
0.00.612.176 I llm_load_print_meta: pooling type     = 0
0.00.612.177 I llm_load_print_meta: rope type        = 2
0.00.612.177 I llm_load_print_meta: rope scaling     = linear
0.00.612.178 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.179 I llm_load_print_meta: freq_scale_train = 1
0.00.612.180 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.181 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.182 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.182 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.182 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.182 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.183 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.183 I llm_load_print_meta: model type       = 2B
0.00.612.184 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.185 I llm_load_print_meta: model params     = 2.51 B
0.00.612.193 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.196 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.196 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.197 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.197 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.198 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.198 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.198 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.204 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.205 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.206 I llm_load_print_meta: max token length = 93
0.00.710.839 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.716.749 I llama_new_context_with_model: n_seq_max     = 1
0.00.716.755 I llama_new_context_with_model: n_ctx         = 4096
0.00.716.756 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.716.756 I llama_new_context_with_model: n_batch       = 2048
0.00.716.756 I llama_new_context_with_model: n_ubatch      = 512
0.00.716.757 I llama_new_context_with_model: flash_attn    = 0
0.00.716.759 I llama_new_context_with_model: freq_base     = 10000.0
0.00.716.760 I llama_new_context_with_model: freq_scale    = 1
0.00.716.761 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.733.461 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.733.504 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.733.625 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.736.116 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.736.120 I llama_new_context_with_model: graph nodes  = 601
0.00.736.120 I llama_new_context_with_model: graph splits = 1
0.00.736.144 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.344.091 I main: llama threadpool init, n_threads = 4
0.01.344.105 I 
0.01.344.213 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.344.217 I 
0.01.344.450 I sampler seed: 2403349016
0.01.344.463 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.344.469 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.344.472 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.344.472 I 
 increasels, the only ones who can see through the veil of illusion. 

**What is the significance of this line in the context of the story?

0.14.889.924 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.00 tokens per second)
0.14.889.928 I llama_perf_context_print:        load time =    1342.90 ms
0.14.889.930 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.889.932 I llama_perf_context_print:        eval time =   13455.34 ms /    32 runs   (  420.48 ms per token,     2.38 tokens per second)
0.14.889.933 I llama_perf_context_print:       total time =   13545.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4035 (2edbdc8a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.001.092 I main: load the model and apply lora adapter, if any
0.00.026.022 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.026.031 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.117 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.128 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.130 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.134 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.135 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.136 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.137 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.138 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.140 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.146 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.150 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.151 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.152 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.154 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.161.583 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.260.800 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.278.969 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.278.977 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.278.979 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.278.980 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.278.981 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.278.982 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.278.985 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.278.989 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.278.990 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.278.991 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.278.992 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.278.993 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.279.002 I llama_model_loader: - type  f32:   37 tensors
0.00.279.004 I llama_model_loader: - type q8_0:  127 tensors
0.00.466.674 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.526.845 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.527.821 I llm_load_vocab: special tokens cache size = 5
0.00.626.105 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.626.179 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.626.180 I llm_load_print_meta: arch             = gemma
0.00.626.181 I llm_load_print_meta: vocab type       = SPM
0.00.626.181 I llm_load_print_meta: n_vocab          = 256000
0.00.626.183 I llm_load_print_meta: n_merges         = 0
0.00.626.184 I llm_load_print_meta: vocab_only       = 0
0.00.626.184 I llm_load_print_meta: n_ctx_train      = 8192
0.00.626.185 I llm_load_print_meta: n_embd           = 2048
0.00.626.185 I llm_load_print_meta: n_layer          = 18
0.00.626.249 I llm_load_print_meta: n_head           = 8
0.00.626.257 I llm_load_print_meta: n_head_kv        = 1
0.00.626.261 I llm_load_print_meta: n_rot            = 256
0.00.626.261 I llm_load_print_meta: n_swa            = 0
0.00.626.262 I llm_load_print_meta: n_embd_head_k    = 256
0.00.626.262 I llm_load_print_meta: n_embd_head_v    = 256
0.00.626.267 I llm_load_print_meta: n_gqa            = 8
0.00.626.272 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.626.277 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.626.279 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.626.280 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.626.281 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.626.282 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.626.283 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.626.288 I llm_load_print_meta: n_ff             = 16384
0.00.626.288 I llm_load_print_meta: n_expert         = 0
0.00.626.289 I llm_load_print_meta: n_expert_used    = 0
0.00.626.289 I llm_load_print_meta: causal attn      = 1
0.00.626.290 I llm_load_print_meta: pooling type     = 0
0.00.626.290 I llm_load_print_meta: rope type        = 2
0.00.626.291 I llm_load_print_meta: rope scaling     = linear
0.00.626.294 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.626.295 I llm_load_print_meta: freq_scale_train = 1
0.00.626.295 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.626.296 I llm_load_print_meta: rope_finetuned   = unknown
0.00.626.296 I llm_load_print_meta: ssm_d_conv       = 0
0.00.626.296 I llm_load_print_meta: ssm_d_inner      = 0
0.00.626.296 I llm_load_print_meta: ssm_d_state      = 0
0.00.626.297 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.626.297 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.626.298 I llm_load_print_meta: model type       = 2B
0.00.626.299 I llm_load_print_meta: model ftype      = Q8_0
0.00.626.299 I llm_load_print_meta: model params     = 2.51 B
0.00.626.308 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.626.308 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.626.309 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.626.310 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.626.311 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.626.311 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.626.312 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.626.312 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.626.318 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.626.320 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.626.321 I llm_load_print_meta: max token length = 93
0.00.721.566 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.721.572 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.721.573 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.721.574 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.721.575 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.721.576 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.727.468 I llama_new_context_with_model: n_seq_max     = 1
0.00.727.474 I llama_new_context_with_model: n_ctx         = 4096
0.00.727.474 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.727.474 I llama_new_context_with_model: n_batch       = 2048
0.00.727.475 I llama_new_context_with_model: n_ubatch      = 512
0.00.727.475 I llama_new_context_with_model: flash_attn    = 0
0.00.727.477 I llama_new_context_with_model: freq_base     = 10000.0
0.00.727.478 I llama_new_context_with_model: freq_scale    = 1
0.00.727.479 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.743.786 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.743.825 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.743.948 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.746.456 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.746.460 I llama_new_context_with_model: graph nodes  = 601
0.00.746.461 I llama_new_context_with_model: graph splits = 1
0.00.746.485 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.368.225 I main: llama threadpool init, n_threads = 4
0.01.368.238 I 
0.01.368.351 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.368.355 I 
0.01.368.594 I sampler seed: 929693476
0.01.368.606 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.368.615 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.368.616 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.368.616 I 
 seconded
## Question:

How can we analyze and interpret the data generated by a chatbot?

## Answer:

**1. Data Extraction and Cleaning

0.15.068.661 I llama_perf_sampler_print:    sampling time =      49.36 ms /    33 runs   (    1.50 ms per token,   668.53 tokens per second)
0.15.068.664 I llama_perf_context_print:        load time =    1367.04 ms
0.15.068.665 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.068.667 I llama_perf_context_print:        eval time =   13610.37 ms /    32 runs   (  425.32 ms per token,     2.35 tokens per second)
0.15.068.668 I llama_perf_context_print:       total time =   13700.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.696 I build: 4035 (2edbdc8a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.915 I main: llama backend init
0.00.001.184 I main: load the model and apply lora adapter, if any
0.00.023.411 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.422 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.507 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.518 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.520 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.524 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.525 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.526 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.527 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.528 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.529 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.536 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.537 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.538 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.539 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.540 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.999 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.752 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.019 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.028 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.029 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.030 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.031 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.032 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.035 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.039 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.040 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.041 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.042 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.274.043 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.051 I llama_model_loader: - type  f32:   37 tensors
0.00.274.054 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.741 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.058 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.048 I llm_load_vocab: special tokens cache size = 5
0.00.604.776 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.847 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.848 I llm_load_print_meta: arch             = gemma
0.00.604.849 I llm_load_print_meta: vocab type       = SPM
0.00.604.850 I llm_load_print_meta: n_vocab          = 256000
0.00.604.852 I llm_load_print_meta: n_merges         = 0
0.00.604.853 I llm_load_print_meta: vocab_only       = 0
0.00.604.853 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.854 I llm_load_print_meta: n_embd           = 2048
0.00.604.854 I llm_load_print_meta: n_layer          = 18
0.00.604.919 I llm_load_print_meta: n_head           = 8
0.00.604.926 I llm_load_print_meta: n_head_kv        = 1
0.00.604.926 I llm_load_print_meta: n_rot            = 256
0.00.604.927 I llm_load_print_meta: n_swa            = 0
0.00.604.928 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.929 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.934 I llm_load_print_meta: n_gqa            = 8
0.00.604.938 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.943 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.945 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.946 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.947 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.948 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.948 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.953 I llm_load_print_meta: n_ff             = 16384
0.00.604.954 I llm_load_print_meta: n_expert         = 0
0.00.604.954 I llm_load_print_meta: n_expert_used    = 0
0.00.604.955 I llm_load_print_meta: causal attn      = 1
0.00.604.955 I llm_load_print_meta: pooling type     = 0
0.00.604.956 I llm_load_print_meta: rope type        = 2
0.00.604.961 I llm_load_print_meta: rope scaling     = linear
0.00.604.963 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.964 I llm_load_print_meta: freq_scale_train = 1
0.00.604.965 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.965 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.976 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.977 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.978 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.978 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.990 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.999 I llm_load_print_meta: model type       = 2B
0.00.605.008 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.010 I llm_load_print_meta: model params     = 2.51 B
0.00.605.018 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.021 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.022 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.022 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.023 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.023 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.024 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.024 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.031 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.032 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.033 I llm_load_print_meta: max token length = 93
0.00.677.385 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.677.394 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.683.126 I llama_new_context_with_model: n_seq_max     = 1
0.00.683.132 I llama_new_context_with_model: n_ctx         = 4096
0.00.683.133 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.683.133 I llama_new_context_with_model: n_batch       = 2048
0.00.683.133 I llama_new_context_with_model: n_ubatch      = 512
0.00.683.134 I llama_new_context_with_model: flash_attn    = 0
0.00.683.136 I llama_new_context_with_model: freq_base     = 10000.0
0.00.683.136 I llama_new_context_with_model: freq_scale    = 1
0.00.683.137 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.699.422 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.699.462 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.699.598 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.702.193 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.702.196 I llama_new_context_with_model: graph nodes  = 601
0.00.702.197 I llama_new_context_with_model: graph splits = 1
0.00.702.219 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.309.312 I main: llama threadpool init, n_threads = 4
0.01.309.326 I 
0.01.309.438 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.309.442 I 
0.01.309.683 I sampler seed: 3137263268
0.01.309.695 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.309.703 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.309.704 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.309.705 I 
 seconally.

I'm having trouble understanding the concept of a limit. I understand that it is a point where a function's value approaches a specific

0.14.784.906 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.07 tokens per second)
0.14.784.909 I llama_perf_context_print:        load time =    1308.03 ms
0.14.784.911 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.784.913 I llama_perf_context_print:        eval time =   13384.80 ms /    32 runs   (  418.28 ms per token,     2.39 tokens per second)
0.14.784.915 I llama_perf_context_print:       total time =   13475.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.843s
user	3m36.115s
sys	0m9.471s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4035 (2edbdc8a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199527.01 ms
main:    total time = 199527.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4035 (2edbdc8a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.001.113 I main: load the model and apply lora adapter, if any
0.00.023.435 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.447 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.537 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.549 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.551 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.555 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.556 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.558 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.559 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.560 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.561 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.567 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.568 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.569 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.570 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.571 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.892 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.619 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.775 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.783 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.784 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.785 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.786 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.788 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.789 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.793 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.794 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.796 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.797 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.273.798 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.806 I llama_model_loader: - type  f32:   37 tensors
0.00.273.808 I llama_model_loader: - type q4_K:  108 tensors
0.00.273.809 I llama_model_loader: - type q6_K:   19 tensors
0.00.454.517 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.066 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.992 I llm_load_vocab: special tokens cache size = 5
0.00.617.463 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.535 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.536 I llm_load_print_meta: arch             = gemma
0.00.617.537 I llm_load_print_meta: vocab type       = SPM
0.00.617.537 I llm_load_print_meta: n_vocab          = 256000
0.00.617.540 I llm_load_print_meta: n_merges         = 0
0.00.617.540 I llm_load_print_meta: vocab_only       = 0
0.00.617.541 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.541 I llm_load_print_meta: n_embd           = 2048
0.00.617.542 I llm_load_print_meta: n_layer          = 18
0.00.617.606 I llm_load_print_meta: n_head           = 8
0.00.617.613 I llm_load_print_meta: n_head_kv        = 1
0.00.617.613 I llm_load_print_meta: n_rot            = 256
0.00.617.614 I llm_load_print_meta: n_swa            = 0
0.00.617.614 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.615 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.619 I llm_load_print_meta: n_gqa            = 8
0.00.617.624 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.628 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.630 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.632 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.633 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.633 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.633 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.638 I llm_load_print_meta: n_ff             = 16384
0.00.617.639 I llm_load_print_meta: n_expert         = 0
0.00.617.640 I llm_load_print_meta: n_expert_used    = 0
0.00.617.640 I llm_load_print_meta: causal attn      = 1
0.00.617.641 I llm_load_print_meta: pooling type     = 0
0.00.617.641 I llm_load_print_meta: rope type        = 2
0.00.617.642 I llm_load_print_meta: rope scaling     = linear
0.00.617.644 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.644 I llm_load_print_meta: freq_scale_train = 1
0.00.617.645 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.645 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.645 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.646 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.646 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.651 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.651 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.652 I llm_load_print_meta: model type       = 2B
0.00.617.652 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.617.654 I llm_load_print_meta: model params     = 2.51 B
0.00.617.664 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.617.664 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.666 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.666 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.667 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.667 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.668 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.668 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.674 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.676 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.676 I llm_load_print_meta: max token length = 93
0.00.683.144 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.683.154 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.683.155 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.683.155 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.683.156 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.683.157 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.688.977 I llama_new_context_with_model: n_seq_max     = 1
0.00.688.982 I llama_new_context_with_model: n_ctx         = 4096
0.00.688.983 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.688.983 I llama_new_context_with_model: n_batch       = 2048
0.00.688.984 I llama_new_context_with_model: n_ubatch      = 512
0.00.688.984 I llama_new_context_with_model: flash_attn    = 0
0.00.688.986 I llama_new_context_with_model: freq_base     = 10000.0
0.00.688.987 I llama_new_context_with_model: freq_scale    = 1
0.00.688.988 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.706.050 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.706.090 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.706.215 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.708.772 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.708.777 I llama_new_context_with_model: graph nodes  = 601
0.00.708.777 I llama_new_context_with_model: graph splits = 1
0.00.708.800 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.278.930 I main: llama threadpool init, n_threads = 4
0.01.278.943 I 
0.01.279.049 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.279.053 I 
0.01.279.288 I sampler seed: 1113857554
0.01.279.301 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.279.308 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.279.311 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.279.312 I 
 seconally.

I cannot answer the question as I am unable to access personal information or communicate online. [end of text]


0.08.701.850 I llama_perf_sampler_print:    sampling time =      33.88 ms /    23 runs   (    1.47 ms per token,   678.81 tokens per second)
0.08.701.853 I llama_perf_context_print:        load time =    1277.72 ms
0.08.701.869 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.701.871 I llama_perf_context_print:        eval time =    7360.14 ms /    22 runs   (  334.55 ms per token,     2.99 tokens per second)
0.08.701.871 I llama_perf_context_print:       total time =    7422.93 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4035 (2edbdc8a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199810.23 ms
main:    total time = 199810.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 4035 (2edbdc8a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.874 I main: llama backend init
0.00.001.131 I main: load the model and apply lora adapter, if any
0.00.023.593 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.699 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.714 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.718 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.722 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.724 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.725 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.726 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.727 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.728 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.736 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.738 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.739 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.740 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.742 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.089 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.073 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.336 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.345 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.346 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.347 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.348 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.350 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.353 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.357 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.358 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.366 I llama_model_loader: - type  f32:   37 tensors
0.00.275.369 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.370 I llama_model_loader: - type q6_K:   19 tensors
0.00.461.805 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.524.977 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.525.889 I llm_load_vocab: special tokens cache size = 5
0.00.623.369 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.440 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.441 I llm_load_print_meta: arch             = gemma
0.00.623.442 I llm_load_print_meta: vocab type       = SPM
0.00.623.442 I llm_load_print_meta: n_vocab          = 256000
0.00.623.445 I llm_load_print_meta: n_merges         = 0
0.00.623.445 I llm_load_print_meta: vocab_only       = 0
0.00.623.445 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.446 I llm_load_print_meta: n_embd           = 2048
0.00.623.446 I llm_load_print_meta: n_layer          = 18
0.00.623.510 I llm_load_print_meta: n_head           = 8
0.00.623.518 I llm_load_print_meta: n_head_kv        = 1
0.00.623.518 I llm_load_print_meta: n_rot            = 256
0.00.623.519 I llm_load_print_meta: n_swa            = 0
0.00.623.519 I llm_load_print_meta: n_embd_head_k    = 256
0.00.623.519 I llm_load_print_meta: n_embd_head_v    = 256
0.00.623.524 I llm_load_print_meta: n_gqa            = 8
0.00.623.529 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.623.534 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.623.535 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.623.536 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.623.537 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.623.537 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.623.538 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.623.544 I llm_load_print_meta: n_ff             = 16384
0.00.623.544 I llm_load_print_meta: n_expert         = 0
0.00.623.545 I llm_load_print_meta: n_expert_used    = 0
0.00.623.556 I llm_load_print_meta: causal attn      = 1
0.00.623.557 I llm_load_print_meta: pooling type     = 0
0.00.623.557 I llm_load_print_meta: rope type        = 2
0.00.623.562 I llm_load_print_meta: rope scaling     = linear
0.00.623.563 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.623.564 I llm_load_print_meta: freq_scale_train = 1
0.00.623.565 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.623.565 I llm_load_print_meta: rope_finetuned   = unknown
0.00.623.566 I llm_load_print_meta: ssm_d_conv       = 0
0.00.623.566 I llm_load_print_meta: ssm_d_inner      = 0
0.00.623.567 I llm_load_print_meta: ssm_d_state      = 0
0.00.623.568 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.623.568 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.623.568 I llm_load_print_meta: model type       = 2B
0.00.623.569 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.623.570 I llm_load_print_meta: model params     = 2.51 B
0.00.623.580 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.623.580 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.623.584 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.623.585 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.623.586 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.623.586 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.623.586 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.623.587 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.623.592 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.623.594 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.623.594 I llm_load_print_meta: max token length = 93
0.00.682.166 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.688.028 I llama_new_context_with_model: n_seq_max     = 1
0.00.688.036 I llama_new_context_with_model: n_ctx         = 4096
0.00.688.037 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.688.037 I llama_new_context_with_model: n_batch       = 2048
0.00.688.038 I llama_new_context_with_model: n_ubatch      = 512
0.00.688.038 I llama_new_context_with_model: flash_attn    = 0
0.00.688.042 I llama_new_context_with_model: freq_base     = 10000.0
0.00.688.042 I llama_new_context_with_model: freq_scale    = 1
0.00.688.043 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.705.231 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.705.273 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.705.395 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.707.963 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.707.967 I llama_new_context_with_model: graph nodes  = 601
0.00.707.968 I llama_new_context_with_model: graph splits = 1
0.00.707.992 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.279.724 I main: llama threadpool init, n_threads = 4
0.01.279.737 I 
0.01.279.842 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.279.846 I 
0.01.280.073 I sampler seed: 238341788
0.01.280.104 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.280.110 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.280.110 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.280.111 I 
 seconded as a prefix in a scientific name.

**a** It indicates the presence of a mutation.
**b** It indicates the presence of a

0.12.122.715 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.00 tokens per second)
0.12.122.729 I llama_perf_context_print:        load time =    1278.50 ms
0.12.122.732 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.122.734 I llama_perf_context_print:        eval time =   10753.34 ms /    32 runs   (  336.04 ms per token,     2.98 tokens per second)
0.12.122.735 I llama_perf_context_print:       total time =   10843.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.123s
user	50m5.065s
sys	0m6.207s
