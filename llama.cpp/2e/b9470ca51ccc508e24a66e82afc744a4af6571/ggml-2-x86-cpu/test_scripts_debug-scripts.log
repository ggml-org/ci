+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 4100 (2eb9470c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.023.912 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.923 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.007 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.017 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.018 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.023 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.024 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.025 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.026 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.029 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.030 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.037 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.041 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.042 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.043 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.044 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.124 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.609 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.617 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.626 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.627 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.628 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.629 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.644 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.647 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.652 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.653 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.654 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.655 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.274.657 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.666 I llama_model_loader: - type  f32:   37 tensors
0.00.274.668 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.866 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.316 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.307 I llm_load_vocab: special tokens cache size = 5
0.00.611.968 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.037 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.038 I llm_load_print_meta: arch             = gemma
0.00.612.039 I llm_load_print_meta: vocab type       = SPM
0.00.612.039 I llm_load_print_meta: n_vocab          = 256000
0.00.612.042 I llm_load_print_meta: n_merges         = 0
0.00.612.042 I llm_load_print_meta: vocab_only       = 0
0.00.612.043 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.043 I llm_load_print_meta: n_embd           = 2048
0.00.612.043 I llm_load_print_meta: n_layer          = 18
0.00.612.110 I llm_load_print_meta: n_head           = 8
0.00.612.118 I llm_load_print_meta: n_head_kv        = 1
0.00.612.120 I llm_load_print_meta: n_rot            = 256
0.00.612.120 I llm_load_print_meta: n_swa            = 0
0.00.612.121 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.121 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.126 I llm_load_print_meta: n_gqa            = 8
0.00.612.130 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.138 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.139 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.141 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.142 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.142 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.143 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.148 I llm_load_print_meta: n_ff             = 16384
0.00.612.158 I llm_load_print_meta: n_expert         = 0
0.00.612.160 I llm_load_print_meta: n_expert_used    = 0
0.00.612.160 I llm_load_print_meta: causal attn      = 1
0.00.612.160 I llm_load_print_meta: pooling type     = 0
0.00.612.161 I llm_load_print_meta: rope type        = 2
0.00.612.161 I llm_load_print_meta: rope scaling     = linear
0.00.612.163 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.164 I llm_load_print_meta: freq_scale_train = 1
0.00.612.180 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.181 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.182 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.182 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.182 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.183 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.183 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.184 I llm_load_print_meta: model type       = 2B
0.00.612.185 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.196 I llm_load_print_meta: model params     = 2.51 B
0.00.612.197 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.197 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.199 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.200 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.200 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.209 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.211 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.212 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.218 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.220 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.220 I llm_load_print_meta: max token length = 93
0.00.714.431 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.714.442 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.714.443 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.714.444 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.714.445 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.714.445 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.720.412 I llama_new_context_with_model: n_seq_max     = 1
0.00.720.420 I llama_new_context_with_model: n_ctx         = 4096
0.00.720.420 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.720.421 I llama_new_context_with_model: n_batch       = 2048
0.00.720.421 I llama_new_context_with_model: n_ubatch      = 512
0.00.720.422 I llama_new_context_with_model: flash_attn    = 0
0.00.720.424 I llama_new_context_with_model: freq_base     = 10000.0
0.00.720.425 I llama_new_context_with_model: freq_scale    = 1
0.00.720.425 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.735.122 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.735.161 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.735.291 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.006 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.738.010 I llama_new_context_with_model: graph nodes  = 601
0.00.738.011 I llama_new_context_with_model: graph splits = 1
0.00.738.033 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.435 I main: llama threadpool init, n_threads = 4
0.01.345.451 I 
0.01.345.560 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.564 I 
0.01.345.801 I sampler seed: 4134858777
0.01.345.813 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.822 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.345.823 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.823 I 
 increably in the final seconds.

The crowd roared, a deafening roar that shook the very rafters of the arena. As the final buzzer sounded, the players

0.14.871.188 I llama_perf_sampler_print:    sampling time =      49.12 ms /    33 runs   (    1.49 ms per token,   671.77 tokens per second)
0.14.871.192 I llama_perf_context_print:        load time =    1344.49 ms
0.14.871.206 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.871.208 I llama_perf_context_print:        eval time =   13436.54 ms /    32 runs   (  419.89 ms per token,     2.38 tokens per second)
0.14.871.209 I llama_perf_context_print:       total time =   13525.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 4100 (2eb9470c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.000.836 I main: load the model and apply lora adapter, if any
0.00.023.331 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.424 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.437 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.439 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.444 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.446 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.447 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.449 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.450 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.450 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.457 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.458 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.460 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.468 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.470 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.614 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.274 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.453 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.461 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.462 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.463 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.464 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.465 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.467 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.470 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.471 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.473 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.474 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.272.475 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.482 I llama_model_loader: - type  f32:   37 tensors
0.00.272.485 I llama_model_loader: - type q8_0:  127 tensors
0.00.459.266 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.522.833 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.745 I llm_load_vocab: special tokens cache size = 5
0.00.624.469 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.539 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.540 I llm_load_print_meta: arch             = gemma
0.00.624.540 I llm_load_print_meta: vocab type       = SPM
0.00.624.541 I llm_load_print_meta: n_vocab          = 256000
0.00.624.544 I llm_load_print_meta: n_merges         = 0
0.00.624.544 I llm_load_print_meta: vocab_only       = 0
0.00.624.545 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.545 I llm_load_print_meta: n_embd           = 2048
0.00.624.546 I llm_load_print_meta: n_layer          = 18
0.00.624.612 I llm_load_print_meta: n_head           = 8
0.00.624.620 I llm_load_print_meta: n_head_kv        = 1
0.00.624.620 I llm_load_print_meta: n_rot            = 256
0.00.624.621 I llm_load_print_meta: n_swa            = 0
0.00.624.621 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.621 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.626 I llm_load_print_meta: n_gqa            = 8
0.00.624.630 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.635 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.636 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.637 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.638 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.638 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.639 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.644 I llm_load_print_meta: n_ff             = 16384
0.00.624.645 I llm_load_print_meta: n_expert         = 0
0.00.624.671 I llm_load_print_meta: n_expert_used    = 0
0.00.624.672 I llm_load_print_meta: causal attn      = 1
0.00.624.673 I llm_load_print_meta: pooling type     = 0
0.00.624.673 I llm_load_print_meta: rope type        = 2
0.00.624.674 I llm_load_print_meta: rope scaling     = linear
0.00.624.675 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.676 I llm_load_print_meta: freq_scale_train = 1
0.00.624.676 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.677 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.677 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.677 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.678 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.678 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.686 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.687 I llm_load_print_meta: model type       = 2B
0.00.624.689 I llm_load_print_meta: model ftype      = Q8_0
0.00.624.698 I llm_load_print_meta: model params     = 2.51 B
0.00.624.699 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.624.699 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.700 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.708 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.709 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.710 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.717 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.718 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.725 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.727 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.727 I llm_load_print_meta: max token length = 93
0.00.720.669 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.726.594 I llama_new_context_with_model: n_seq_max     = 1
0.00.726.601 I llama_new_context_with_model: n_ctx         = 4096
0.00.726.601 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.726.601 I llama_new_context_with_model: n_batch       = 2048
0.00.726.602 I llama_new_context_with_model: n_ubatch      = 512
0.00.726.602 I llama_new_context_with_model: flash_attn    = 0
0.00.726.605 I llama_new_context_with_model: freq_base     = 10000.0
0.00.726.605 I llama_new_context_with_model: freq_scale    = 1
0.00.726.606 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.741.602 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.741.642 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.741.776 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.744.451 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.744.455 I llama_new_context_with_model: graph nodes  = 601
0.00.744.455 I llama_new_context_with_model: graph splits = 1
0.00.744.477 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.353.031 I main: llama threadpool init, n_threads = 4
0.01.353.046 I 
0.01.353.155 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.353.158 I 
0.01.353.389 I sampler seed: 959414733
0.01.353.401 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.353.408 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.353.409 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.353.409 I 
 increasities with the latest technology and a dash of nostalgia for the golden age of computing.

**The Enigma Machine**

The Enigma Machine is a classic text

0.15.055.821 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   670.99 tokens per second)
0.15.055.824 I llama_perf_context_print:        load time =    1352.11 ms
0.15.055.826 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.055.827 I llama_perf_context_print:        eval time =   13613.17 ms /    32 runs   (  425.41 ms per token,     2.35 tokens per second)
0.15.055.842 I llama_perf_context_print:       total time =   13702.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4100 (2eb9470c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.000.844 I main: load the model and apply lora adapter, if any
0.00.023.189 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.202 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.295 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.308 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.311 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.317 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.321 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.322 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.323 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.324 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.325 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.332 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.333 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.334 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.335 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.336 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.528 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.070 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.214 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.226 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.227 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.228 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.229 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.231 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.232 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.235 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.236 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.238 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.239 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.272.240 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.249 I llama_model_loader: - type  f32:   37 tensors
0.00.272.251 I llama_model_loader: - type q8_0:  127 tensors
0.00.466.150 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.532.310 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.533.272 I llm_load_vocab: special tokens cache size = 5
0.00.630.122 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.630.193 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.630.194 I llm_load_print_meta: arch             = gemma
0.00.630.195 I llm_load_print_meta: vocab type       = SPM
0.00.630.196 I llm_load_print_meta: n_vocab          = 256000
0.00.630.198 I llm_load_print_meta: n_merges         = 0
0.00.630.199 I llm_load_print_meta: vocab_only       = 0
0.00.630.199 I llm_load_print_meta: n_ctx_train      = 8192
0.00.630.200 I llm_load_print_meta: n_embd           = 2048
0.00.630.200 I llm_load_print_meta: n_layer          = 18
0.00.630.267 I llm_load_print_meta: n_head           = 8
0.00.630.274 I llm_load_print_meta: n_head_kv        = 1
0.00.630.275 I llm_load_print_meta: n_rot            = 256
0.00.630.275 I llm_load_print_meta: n_swa            = 0
0.00.630.276 I llm_load_print_meta: n_embd_head_k    = 256
0.00.630.277 I llm_load_print_meta: n_embd_head_v    = 256
0.00.630.282 I llm_load_print_meta: n_gqa            = 8
0.00.630.288 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.630.293 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.630.294 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.630.296 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.630.296 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.630.297 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.630.298 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.630.303 I llm_load_print_meta: n_ff             = 16384
0.00.630.304 I llm_load_print_meta: n_expert         = 0
0.00.630.304 I llm_load_print_meta: n_expert_used    = 0
0.00.630.305 I llm_load_print_meta: causal attn      = 1
0.00.630.306 I llm_load_print_meta: pooling type     = 0
0.00.630.306 I llm_load_print_meta: rope type        = 2
0.00.630.307 I llm_load_print_meta: rope scaling     = linear
0.00.630.309 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.630.310 I llm_load_print_meta: freq_scale_train = 1
0.00.630.311 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.630.311 I llm_load_print_meta: rope_finetuned   = unknown
0.00.630.311 I llm_load_print_meta: ssm_d_conv       = 0
0.00.630.316 I llm_load_print_meta: ssm_d_inner      = 0
0.00.630.316 I llm_load_print_meta: ssm_d_state      = 0
0.00.630.317 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.630.317 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.630.318 I llm_load_print_meta: model type       = 2B
0.00.630.330 I llm_load_print_meta: model ftype      = Q8_0
0.00.630.344 I llm_load_print_meta: model params     = 2.51 B
0.00.630.345 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.630.346 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.630.347 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.630.348 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.630.348 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.630.350 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.630.350 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.630.351 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.630.358 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.630.359 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.630.360 I llm_load_print_meta: max token length = 93
0.00.710.077 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.710.084 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.710.085 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.710.086 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.710.087 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.710.088 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.715.829 I llama_new_context_with_model: n_seq_max     = 1
0.00.715.837 I llama_new_context_with_model: n_ctx         = 4096
0.00.715.837 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.715.838 I llama_new_context_with_model: n_batch       = 2048
0.00.715.838 I llama_new_context_with_model: n_ubatch      = 512
0.00.715.839 I llama_new_context_with_model: flash_attn    = 0
0.00.715.842 I llama_new_context_with_model: freq_base     = 10000.0
0.00.715.843 I llama_new_context_with_model: freq_scale    = 1
0.00.715.843 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.730.943 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.730.983 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.731.119 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.695 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.733.698 I llama_new_context_with_model: graph nodes  = 601
0.00.733.699 I llama_new_context_with_model: graph splits = 1
0.00.733.722 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.344.713 I main: llama threadpool init, n_threads = 4
0.01.344.727 I 
0.01.344.839 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.344.844 I 
0.01.345.083 I sampler seed: 2719519841
0.01.345.094 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.100 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.345.101 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.110 I 
 increasities and anxieties.

I am unable to access personal information of any user, including personally identifiable information, and cannot provide information that could be used to identify

0.14.895.148 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.71 tokens per second)
0.14.895.151 I llama_perf_context_print:        load time =    1343.78 ms
0.14.895.152 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.895.154 I llama_perf_context_print:        eval time =   13460.95 ms /    32 runs   (  420.65 ms per token,     2.38 tokens per second)
0.14.895.168 I llama_perf_context_print:       total time =   13550.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 4100 (2eb9470c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.893 I main: llama backend init
0.00.000.902 I main: load the model and apply lora adapter, if any
0.00.023.343 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.354 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.449 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.462 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.464 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.468 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.473 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.474 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.476 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.477 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.480 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.488 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.493 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.495 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.496 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.498 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.498 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.980 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.282.157 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.282.169 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.282.170 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.282.171 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.282.172 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.282.173 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.282.174 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.282.179 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.282.180 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.282.181 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.282.182 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.282.183 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.282.191 I llama_model_loader: - type  f32:   37 tensors
0.00.282.195 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.379 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.525.373 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.526.432 I llm_load_vocab: special tokens cache size = 5
0.00.625.323 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.625.396 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.625.397 I llm_load_print_meta: arch             = gemma
0.00.625.398 I llm_load_print_meta: vocab type       = SPM
0.00.625.399 I llm_load_print_meta: n_vocab          = 256000
0.00.625.402 I llm_load_print_meta: n_merges         = 0
0.00.625.402 I llm_load_print_meta: vocab_only       = 0
0.00.625.402 I llm_load_print_meta: n_ctx_train      = 8192
0.00.625.403 I llm_load_print_meta: n_embd           = 2048
0.00.625.403 I llm_load_print_meta: n_layer          = 18
0.00.625.469 I llm_load_print_meta: n_head           = 8
0.00.625.476 I llm_load_print_meta: n_head_kv        = 1
0.00.625.477 I llm_load_print_meta: n_rot            = 256
0.00.625.477 I llm_load_print_meta: n_swa            = 0
0.00.625.478 I llm_load_print_meta: n_embd_head_k    = 256
0.00.625.478 I llm_load_print_meta: n_embd_head_v    = 256
0.00.625.483 I llm_load_print_meta: n_gqa            = 8
0.00.625.488 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.625.494 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.625.495 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.625.497 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.625.498 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.625.504 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.625.505 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.625.513 I llm_load_print_meta: n_ff             = 16384
0.00.625.514 I llm_load_print_meta: n_expert         = 0
0.00.625.515 I llm_load_print_meta: n_expert_used    = 0
0.00.625.516 I llm_load_print_meta: causal attn      = 1
0.00.625.528 I llm_load_print_meta: pooling type     = 0
0.00.625.529 I llm_load_print_meta: rope type        = 2
0.00.625.530 I llm_load_print_meta: rope scaling     = linear
0.00.625.533 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.625.535 I llm_load_print_meta: freq_scale_train = 1
0.00.625.535 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.625.536 I llm_load_print_meta: rope_finetuned   = unknown
0.00.625.536 I llm_load_print_meta: ssm_d_conv       = 0
0.00.625.537 I llm_load_print_meta: ssm_d_inner      = 0
0.00.625.538 I llm_load_print_meta: ssm_d_state      = 0
0.00.625.539 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.625.539 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.625.540 I llm_load_print_meta: model type       = 2B
0.00.625.542 I llm_load_print_meta: model ftype      = Q8_0
0.00.625.553 I llm_load_print_meta: model params     = 2.51 B
0.00.625.555 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.625.555 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.625.560 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.625.561 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.625.562 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.625.562 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.625.563 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.625.564 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.625.572 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.625.580 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.625.581 I llm_load_print_meta: max token length = 93
0.00.698.587 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.698.596 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.704.863 I llama_new_context_with_model: n_seq_max     = 1
0.00.704.870 I llama_new_context_with_model: n_ctx         = 4096
0.00.704.870 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.704.870 I llama_new_context_with_model: n_batch       = 2048
0.00.704.871 I llama_new_context_with_model: n_ubatch      = 512
0.00.704.871 I llama_new_context_with_model: flash_attn    = 0
0.00.704.874 I llama_new_context_with_model: freq_base     = 10000.0
0.00.704.874 I llama_new_context_with_model: freq_scale    = 1
0.00.704.875 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.719.222 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.719.265 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.719.392 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.722.014 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.722.018 I llama_new_context_with_model: graph nodes  = 601
0.00.722.018 I llama_new_context_with_model: graph splits = 1
0.00.722.041 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.330.451 I main: llama threadpool init, n_threads = 4
0.01.330.471 I 
0.01.330.589 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.330.594 I 
0.01.330.837 I sampler seed: 2400703642
0.01.330.850 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.330.858 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.330.862 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.330.863 I 
 increasities to enhance the efficiency of a complex data processing pipeline.

**a) What is the purpose of using increasities?**
**b) Explain

0.14.934.495 I llama_perf_sampler_print:    sampling time =      48.95 ms /    33 runs   (    1.48 ms per token,   674.21 tokens per second)
0.14.934.511 I llama_perf_context_print:        load time =    1329.45 ms
0.14.934.512 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.934.514 I llama_perf_context_print:        eval time =   13515.07 ms /    32 runs   (  422.35 ms per token,     2.37 tokens per second)
0.14.934.515 I llama_perf_context_print:       total time =   13604.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.328s
user	3m50.251s
sys	0m9.379s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4100 (2eb9470c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 187065.44 ms
main:    total time = 187065.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 4100 (2eb9470c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.887 I main: llama backend init
0.00.000.895 I main: load the model and apply lora adapter, if any
0.00.023.310 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.321 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.409 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.420 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.422 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.427 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.431 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.432 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.433 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.434 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.436 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.442 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.443 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.444 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.453 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.454 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.668 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.759 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.934 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.944 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.945 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.946 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.948 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.949 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.950 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.954 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.955 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.956 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.957 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.958 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.965 I llama_model_loader: - type  f32:   37 tensors
0.00.271.968 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.969 I llama_model_loader: - type q6_K:   19 tensors
0.00.462.199 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.526.880 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.527.818 I llm_load_vocab: special tokens cache size = 5
0.00.623.783 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.852 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.853 I llm_load_print_meta: arch             = gemma
0.00.623.854 I llm_load_print_meta: vocab type       = SPM
0.00.623.855 I llm_load_print_meta: n_vocab          = 256000
0.00.623.858 I llm_load_print_meta: n_merges         = 0
0.00.623.858 I llm_load_print_meta: vocab_only       = 0
0.00.623.859 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.859 I llm_load_print_meta: n_embd           = 2048
0.00.623.859 I llm_load_print_meta: n_layer          = 18
0.00.623.925 I llm_load_print_meta: n_head           = 8
0.00.623.933 I llm_load_print_meta: n_head_kv        = 1
0.00.623.933 I llm_load_print_meta: n_rot            = 256
0.00.623.934 I llm_load_print_meta: n_swa            = 0
0.00.623.934 I llm_load_print_meta: n_embd_head_k    = 256
0.00.623.935 I llm_load_print_meta: n_embd_head_v    = 256
0.00.623.956 I llm_load_print_meta: n_gqa            = 8
0.00.623.963 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.623.968 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.623.970 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.623.972 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.623.972 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.623.973 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.623.973 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.623.978 I llm_load_print_meta: n_ff             = 16384
0.00.623.979 I llm_load_print_meta: n_expert         = 0
0.00.623.980 I llm_load_print_meta: n_expert_used    = 0
0.00.623.980 I llm_load_print_meta: causal attn      = 1
0.00.623.980 I llm_load_print_meta: pooling type     = 0
0.00.623.981 I llm_load_print_meta: rope type        = 2
0.00.623.981 I llm_load_print_meta: rope scaling     = linear
0.00.623.983 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.623.984 I llm_load_print_meta: freq_scale_train = 1
0.00.623.984 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.623.984 I llm_load_print_meta: rope_finetuned   = unknown
0.00.623.985 I llm_load_print_meta: ssm_d_conv       = 0
0.00.623.985 I llm_load_print_meta: ssm_d_inner      = 0
0.00.623.985 I llm_load_print_meta: ssm_d_state      = 0
0.00.623.996 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.623.997 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.623.998 I llm_load_print_meta: model type       = 2B
0.00.624.000 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.624.012 I llm_load_print_meta: model params     = 2.51 B
0.00.624.013 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.624.013 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.015 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.015 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.016 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.016 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.017 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.025 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.031 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.033 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.034 I llm_load_print_meta: max token length = 93
0.00.687.108 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.687.115 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.687.116 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.687.117 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.687.118 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.687.118 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.692.856 I llama_new_context_with_model: n_seq_max     = 1
0.00.692.863 I llama_new_context_with_model: n_ctx         = 4096
0.00.692.863 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.692.864 I llama_new_context_with_model: n_batch       = 2048
0.00.692.864 I llama_new_context_with_model: n_ubatch      = 512
0.00.692.865 I llama_new_context_with_model: flash_attn    = 0
0.00.692.867 I llama_new_context_with_model: freq_base     = 10000.0
0.00.692.868 I llama_new_context_with_model: freq_scale    = 1
0.00.692.869 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.707.298 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.707.337 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.707.466 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.710.187 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.710.192 I llama_new_context_with_model: graph nodes  = 601
0.00.710.193 I llama_new_context_with_model: graph splits = 1
0.00.710.215 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.297.124 I main: llama threadpool init, n_threads = 4
0.01.297.139 I 
0.01.297.247 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.297.251 I 
0.01.297.482 I sampler seed: 840733768
0.01.297.495 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.297.521 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.297.525 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.297.525 I 
 seconded branches. The roots of these branches were entangled with one another, forming a dense tangle.

**Questions:**

a) What is the main idea

0.12.461.396 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.66 tokens per second)
0.12.461.409 I llama_perf_context_print:        load time =    1296.14 ms
0.12.461.411 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.461.414 I llama_perf_context_print:        eval time =   11074.79 ms /    32 runs   (  346.09 ms per token,     2.89 tokens per second)
0.12.461.415 I llama_perf_context_print:       total time =   11164.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4100 (2eb9470c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186169.33 ms
main:    total time = 186169.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 4100 (2eb9470c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.000.888 I main: load the model and apply lora adapter, if any
0.00.023.574 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.687 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.703 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.707 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.714 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.716 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.717 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.718 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.719 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.721 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.729 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.732 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.734 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.735 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.736 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.515 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.764 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.887 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.897 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.898 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.899 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.900 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.901 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.902 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.906 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.907 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.915 I llama_model_loader: - type  f32:   37 tensors
0.00.271.917 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.918 I llama_model_loader: - type q6_K:   19 tensors
0.00.455.373 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.856 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.795 I llm_load_vocab: special tokens cache size = 5
0.00.623.954 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.022 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.023 I llm_load_print_meta: arch             = gemma
0.00.624.024 I llm_load_print_meta: vocab type       = SPM
0.00.624.025 I llm_load_print_meta: n_vocab          = 256000
0.00.624.027 I llm_load_print_meta: n_merges         = 0
0.00.624.028 I llm_load_print_meta: vocab_only       = 0
0.00.624.028 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.029 I llm_load_print_meta: n_embd           = 2048
0.00.624.029 I llm_load_print_meta: n_layer          = 18
0.00.624.093 I llm_load_print_meta: n_head           = 8
0.00.624.100 I llm_load_print_meta: n_head_kv        = 1
0.00.624.102 I llm_load_print_meta: n_rot            = 256
0.00.624.103 I llm_load_print_meta: n_swa            = 0
0.00.624.103 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.113 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.119 I llm_load_print_meta: n_gqa            = 8
0.00.624.124 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.129 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.131 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.132 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.133 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.134 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.134 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.139 I llm_load_print_meta: n_ff             = 16384
0.00.624.140 I llm_load_print_meta: n_expert         = 0
0.00.624.140 I llm_load_print_meta: n_expert_used    = 0
0.00.624.141 I llm_load_print_meta: causal attn      = 1
0.00.624.141 I llm_load_print_meta: pooling type     = 0
0.00.624.142 I llm_load_print_meta: rope type        = 2
0.00.624.143 I llm_load_print_meta: rope scaling     = linear
0.00.624.158 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.159 I llm_load_print_meta: freq_scale_train = 1
0.00.624.159 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.160 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.173 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.175 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.175 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.176 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.176 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.177 I llm_load_print_meta: model type       = 2B
0.00.624.178 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.624.194 I llm_load_print_meta: model params     = 2.51 B
0.00.624.197 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.624.198 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.199 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.199 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.200 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.200 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.201 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.201 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.208 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.209 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.209 I llm_load_print_meta: max token length = 93
0.00.683.255 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.689.085 I llama_new_context_with_model: n_seq_max     = 1
0.00.689.092 I llama_new_context_with_model: n_ctx         = 4096
0.00.689.092 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.689.093 I llama_new_context_with_model: n_batch       = 2048
0.00.689.093 I llama_new_context_with_model: n_ubatch      = 512
0.00.689.094 I llama_new_context_with_model: flash_attn    = 0
0.00.689.097 I llama_new_context_with_model: freq_base     = 10000.0
0.00.689.098 I llama_new_context_with_model: freq_scale    = 1
0.00.689.099 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.704.709 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.704.753 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.704.886 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.707.482 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.707.486 I llama_new_context_with_model: graph nodes  = 601
0.00.707.487 I llama_new_context_with_model: graph splits = 1
0.00.707.509 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.296.847 I main: llama threadpool init, n_threads = 4
0.01.296.862 I 
0.01.296.970 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.296.974 I 
0.01.297.204 I sampler seed: 628479931
0.01.297.216 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.297.223 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.297.226 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.297.227 I 
 increasities and other discriminatory and harmful behavior persist within our institutions and societies.

It is imperative that we actively dismantle these structures and create a more equitable and inclusive

0.12.417.379 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.00 tokens per second)
0.12.417.383 I llama_perf_context_print:        load time =    1295.85 ms
0.12.417.390 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.417.393 I llama_perf_context_print:        eval time =   11031.61 ms /    32 runs   (  344.74 ms per token,     2.90 tokens per second)
0.12.417.395 I llama_perf_context_print:       total time =   11120.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.971s
user	46m49.005s
sys	0m6.385s
