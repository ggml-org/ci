+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 4100 (2eb9470c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.021.324 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.333 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.341 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.346 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.348 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.352 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.352 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.353 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.354 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.354 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.354 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.358 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.359 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.359 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.360 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.360 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.586 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.838 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.691 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.699 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.700 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.700 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.701 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.702 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.703 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.707 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.708 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.709 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.710 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.711 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.714 I llama_model_loader: - type  f32:   37 tensors
0.00.130.715 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.395 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.650 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.208 I llm_load_vocab: special tokens cache size = 5
0.00.265.055 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.071 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.072 I llm_load_print_meta: arch             = gemma
0.00.265.072 I llm_load_print_meta: vocab type       = SPM
0.00.265.073 I llm_load_print_meta: n_vocab          = 256000
0.00.265.073 I llm_load_print_meta: n_merges         = 0
0.00.265.074 I llm_load_print_meta: vocab_only       = 0
0.00.265.074 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.075 I llm_load_print_meta: n_embd           = 2048
0.00.265.075 I llm_load_print_meta: n_layer          = 18
0.00.265.086 I llm_load_print_meta: n_head           = 8
0.00.265.087 I llm_load_print_meta: n_head_kv        = 1
0.00.265.088 I llm_load_print_meta: n_rot            = 256
0.00.265.088 I llm_load_print_meta: n_swa            = 0
0.00.265.088 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.088 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.089 I llm_load_print_meta: n_gqa            = 8
0.00.265.090 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.091 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.092 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.093 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.094 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.094 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.094 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.095 I llm_load_print_meta: n_ff             = 16384
0.00.265.096 I llm_load_print_meta: n_expert         = 0
0.00.265.096 I llm_load_print_meta: n_expert_used    = 0
0.00.265.096 I llm_load_print_meta: causal attn      = 1
0.00.265.097 I llm_load_print_meta: pooling type     = 0
0.00.265.097 I llm_load_print_meta: rope type        = 2
0.00.265.097 I llm_load_print_meta: rope scaling     = linear
0.00.265.099 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.100 I llm_load_print_meta: freq_scale_train = 1
0.00.265.100 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.101 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.101 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.101 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.102 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.102 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.102 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.102 I llm_load_print_meta: model type       = 2B
0.00.265.103 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.104 I llm_load_print_meta: model params     = 2.51 B
0.00.265.105 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.105 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.106 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.106 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.106 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.107 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.107 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.107 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.108 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.108 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.108 I llm_load_print_meta: max token length = 93
0.00.366.006 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.366.013 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.366.014 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.366.015 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.366.015 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.366.016 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.371.315 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.322 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.323 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.323 I llama_new_context_with_model: n_batch       = 2048
0.00.371.323 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.324 I llama_new_context_with_model: flash_attn    = 0
0.00.371.327 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.329 I llama_new_context_with_model: freq_scale    = 1
0.00.371.330 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.386.290 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.305 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.398 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.760 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.764 I llama_new_context_with_model: graph nodes  = 601
0.00.387.765 I llama_new_context_with_model: graph splits = 1
0.00.387.767 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.354 I main: llama threadpool init, n_threads = 4
0.00.472.368 I 
0.00.472.441 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.472.444 I 
0.00.472.492 I sampler seed: 951843644
0.00.472.503 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.506 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.507 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.510 I 
 seconary effects of prenatal exposure to alcohol depend on the gestational age at which the exposure occurs.

**True or False?** [end of text]


0.02.361.310 I llama_perf_sampler_print:    sampling time =       4.11 ms /    28 runs   (    0.15 ms per token,  6812.65 tokens per second)
0.02.361.312 I llama_perf_context_print:        load time =     471.60 ms
0.02.361.313 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.361.315 I llama_perf_context_print:        eval time =    1872.68 ms /    27 runs   (   69.36 ms per token,    14.42 tokens per second)
0.02.361.315 I llama_perf_context_print:       total time =    1888.96 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.546 I build: 4100 (2eb9470c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.021.322 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.337 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.343 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.344 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.347 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.348 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.349 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.350 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.350 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.351 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.354 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.355 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.355 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.356 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.356 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.980 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.244 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.074 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.081 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.081 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.082 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.082 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.083 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.084 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.086 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.087 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.088 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.089 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.089 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.093 I llama_model_loader: - type  f32:   37 tensors
0.00.131.094 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.036 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.025 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.568 I llm_load_vocab: special tokens cache size = 5
0.00.265.365 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.380 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.381 I llm_load_print_meta: arch             = gemma
0.00.265.381 I llm_load_print_meta: vocab type       = SPM
0.00.265.382 I llm_load_print_meta: n_vocab          = 256000
0.00.265.382 I llm_load_print_meta: n_merges         = 0
0.00.265.383 I llm_load_print_meta: vocab_only       = 0
0.00.265.383 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.383 I llm_load_print_meta: n_embd           = 2048
0.00.265.384 I llm_load_print_meta: n_layer          = 18
0.00.265.395 I llm_load_print_meta: n_head           = 8
0.00.265.396 I llm_load_print_meta: n_head_kv        = 1
0.00.265.396 I llm_load_print_meta: n_rot            = 256
0.00.265.396 I llm_load_print_meta: n_swa            = 0
0.00.265.397 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.397 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.398 I llm_load_print_meta: n_gqa            = 8
0.00.265.398 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.399 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.400 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.401 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.402 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.402 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.403 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.404 I llm_load_print_meta: n_ff             = 16384
0.00.265.404 I llm_load_print_meta: n_expert         = 0
0.00.265.404 I llm_load_print_meta: n_expert_used    = 0
0.00.265.404 I llm_load_print_meta: causal attn      = 1
0.00.265.405 I llm_load_print_meta: pooling type     = 0
0.00.265.405 I llm_load_print_meta: rope type        = 2
0.00.265.405 I llm_load_print_meta: rope scaling     = linear
0.00.265.406 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.407 I llm_load_print_meta: freq_scale_train = 1
0.00.265.408 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.408 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.408 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.409 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.410 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.410 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.410 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.411 I llm_load_print_meta: model type       = 2B
0.00.265.411 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.412 I llm_load_print_meta: model params     = 2.51 B
0.00.265.413 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.414 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.418 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.419 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.419 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.419 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.420 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.420 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.420 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.421 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.421 I llm_load_print_meta: max token length = 93
0.00.359.270 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.364.450 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.457 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.457 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.458 I llama_new_context_with_model: n_batch       = 2048
0.00.364.458 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.459 I llama_new_context_with_model: flash_attn    = 0
0.00.364.461 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.462 I llama_new_context_with_model: freq_scale    = 1
0.00.364.463 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.259 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.273 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.365 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.714 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.720 I llama_new_context_with_model: graph nodes  = 601
0.00.380.721 I llama_new_context_with_model: graph splits = 1
0.00.380.723 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.151 I main: llama threadpool init, n_threads = 4
0.00.462.166 I 
0.00.462.243 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.462.246 I 
0.00.462.289 I sampler seed: 323464790
0.00.462.301 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.303 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.304 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.305 I 
 increasively. [end of text]


0.00.734.910 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8090.61 tokens per second)
0.00.734.912 I llama_perf_context_print:        load time =     461.39 ms
0.00.734.913 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.734.915 I llama_perf_context_print:        eval time =     269.66 ms /     4 runs   (   67.41 ms per token,    14.83 tokens per second)
0.00.734.915 I llama_perf_context_print:       total time =     272.77 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.572 I build: 4100 (2eb9470c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.000.776 I main: load the model and apply lora adapter, if any
0.00.021.049 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.059 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.067 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.071 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.072 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.076 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.076 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.078 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.079 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.079 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.080 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.083 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.084 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.084 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.085 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.085 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.142 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.286 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.111 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.117 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.118 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.118 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.119 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.120 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.121 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.123 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.123 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.124 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.124 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.125 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.129 I llama_model_loader: - type  f32:   37 tensors
0.00.130.130 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.296 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.048 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.619 I llm_load_vocab: special tokens cache size = 5
0.00.263.486 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.501 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.502 I llm_load_print_meta: arch             = gemma
0.00.263.503 I llm_load_print_meta: vocab type       = SPM
0.00.263.504 I llm_load_print_meta: n_vocab          = 256000
0.00.263.504 I llm_load_print_meta: n_merges         = 0
0.00.263.504 I llm_load_print_meta: vocab_only       = 0
0.00.263.505 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.505 I llm_load_print_meta: n_embd           = 2048
0.00.263.505 I llm_load_print_meta: n_layer          = 18
0.00.263.516 I llm_load_print_meta: n_head           = 8
0.00.263.517 I llm_load_print_meta: n_head_kv        = 1
0.00.263.518 I llm_load_print_meta: n_rot            = 256
0.00.263.518 I llm_load_print_meta: n_swa            = 0
0.00.263.528 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.529 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.531 I llm_load_print_meta: n_gqa            = 8
0.00.263.532 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.533 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.534 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.535 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.536 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.536 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.537 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.538 I llm_load_print_meta: n_ff             = 16384
0.00.263.538 I llm_load_print_meta: n_expert         = 0
0.00.263.539 I llm_load_print_meta: n_expert_used    = 0
0.00.263.539 I llm_load_print_meta: causal attn      = 1
0.00.263.539 I llm_load_print_meta: pooling type     = 0
0.00.263.540 I llm_load_print_meta: rope type        = 2
0.00.263.541 I llm_load_print_meta: rope scaling     = linear
0.00.263.542 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.543 I llm_load_print_meta: freq_scale_train = 1
0.00.263.543 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.544 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.545 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.545 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.545 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.545 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.545 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.546 I llm_load_print_meta: model type       = 2B
0.00.263.547 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.548 I llm_load_print_meta: model params     = 2.51 B
0.00.263.549 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.549 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.550 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.551 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.551 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.552 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.552 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.552 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.552 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.553 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.553 I llm_load_print_meta: max token length = 93
0.00.341.973 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.341.979 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.341.980 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.341.981 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.341.982 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.341.982 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.347.176 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.183 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.184 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.184 I llama_new_context_with_model: n_batch       = 2048
0.00.347.185 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.185 I llama_new_context_with_model: flash_attn    = 0
0.00.347.187 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.188 I llama_new_context_with_model: freq_scale    = 1
0.00.347.189 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.016 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.031 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.122 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.354 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.361 I llama_new_context_with_model: graph nodes  = 601
0.00.363.361 I llama_new_context_with_model: graph splits = 1
0.00.363.363 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.606 I main: llama threadpool init, n_threads = 4
0.00.446.620 I 
0.00.446.693 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.446.696 I 
0.00.446.738 I sampler seed: 1635568916
0.00.446.749 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.751 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.752 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.752 I 
 maneuvrage of the following statements:

1. The Earth revolves around the Sun.
2. The Sun revolves around the Earth.

Which statement is

0.02.666.700 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6931.32 tokens per second)
0.02.666.703 I llama_perf_context_print:        load time =     445.81 ms
0.02.666.704 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.666.706 I llama_perf_context_print:        eval time =    2201.77 ms /    32 runs   (   68.81 ms per token,    14.53 tokens per second)
0.02.666.706 I llama_perf_context_print:       total time =    2220.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.540 I build: 4100 (2eb9470c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.751 I main: llama backend init
0.00.000.758 I main: load the model and apply lora adapter, if any
0.00.021.344 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.357 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.369 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.375 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.378 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.384 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.388 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.389 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.390 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.391 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.391 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.398 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.398 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.400 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.400 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.401 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.189 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.701 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.606 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.612 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.613 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.614 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.615 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.616 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.617 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.621 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.621 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.622 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.623 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.624 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.630 I llama_model_loader: - type  f32:   37 tensors
0.00.131.631 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.690 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.810 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.375 I llm_load_vocab: special tokens cache size = 5
0.00.266.157 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.176 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.178 I llm_load_print_meta: arch             = gemma
0.00.266.179 I llm_load_print_meta: vocab type       = SPM
0.00.266.179 I llm_load_print_meta: n_vocab          = 256000
0.00.266.180 I llm_load_print_meta: n_merges         = 0
0.00.266.180 I llm_load_print_meta: vocab_only       = 0
0.00.266.181 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.181 I llm_load_print_meta: n_embd           = 2048
0.00.266.181 I llm_load_print_meta: n_layer          = 18
0.00.266.194 I llm_load_print_meta: n_head           = 8
0.00.266.196 I llm_load_print_meta: n_head_kv        = 1
0.00.266.196 I llm_load_print_meta: n_rot            = 256
0.00.266.198 I llm_load_print_meta: n_swa            = 0
0.00.266.198 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.199 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.200 I llm_load_print_meta: n_gqa            = 8
0.00.266.202 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.204 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.205 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.207 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.210 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.210 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.211 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.212 I llm_load_print_meta: n_ff             = 16384
0.00.266.213 I llm_load_print_meta: n_expert         = 0
0.00.266.213 I llm_load_print_meta: n_expert_used    = 0
0.00.266.214 I llm_load_print_meta: causal attn      = 1
0.00.266.215 I llm_load_print_meta: pooling type     = 0
0.00.266.215 I llm_load_print_meta: rope type        = 2
0.00.266.216 I llm_load_print_meta: rope scaling     = linear
0.00.266.218 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.219 I llm_load_print_meta: freq_scale_train = 1
0.00.266.220 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.220 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.221 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.221 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.222 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.222 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.223 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.223 I llm_load_print_meta: model type       = 2B
0.00.266.224 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.225 I llm_load_print_meta: model params     = 2.51 B
0.00.266.226 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.227 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.228 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.229 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.230 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.230 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.231 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.231 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.232 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.233 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.233 I llm_load_print_meta: max token length = 93
0.00.337.339 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.337.345 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.342.664 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.670 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.670 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.671 I llama_new_context_with_model: n_batch       = 2048
0.00.342.671 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.672 I llama_new_context_with_model: flash_attn    = 0
0.00.342.674 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.674 I llama_new_context_with_model: freq_scale    = 1
0.00.342.675 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.000 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.014 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.111 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.373 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.379 I llama_new_context_with_model: graph nodes  = 601
0.00.358.380 I llama_new_context_with_model: graph splits = 1
0.00.358.382 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.342 I main: llama threadpool init, n_threads = 4
0.00.445.357 I 
0.00.445.443 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.445.447 I 
0.00.445.500 I sampler seed: 1808144820
0.00.445.512 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.516 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.518 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.518 I 
 increamically in size from a small seed to a towering tree. What ecological role does this rapid growth play in the environment?

**Answer:**

**Rapid

0.02.872.939 I llama_perf_sampler_print:    sampling time =       4.75 ms /    33 runs   (    0.14 ms per token,  6953.22 tokens per second)
0.02.872.942 I llama_perf_context_print:        load time =     444.56 ms
0.02.872.943 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.872.945 I llama_perf_context_print:        eval time =    2408.93 ms /    32 runs   (   75.28 ms per token,    13.28 tokens per second)
0.02.872.947 I llama_perf_context_print:       total time =    2427.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.060s
user	0m30.056s
sys	0m9.317s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4100 (2eb9470c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40343.94 ms
main:    total time = 40343.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.535 I build: 4100 (2eb9470c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.744 I main: load the model and apply lora adapter, if any
0.00.021.178 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.187 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.195 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.202 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.206 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.210 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.210 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.211 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.211 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.212 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.212 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.216 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.216 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.217 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.217 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.218 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.227 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.147 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.912 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.918 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.919 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.919 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.920 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.921 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.921 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.924 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.924 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.925 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.926 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.927 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.929 I llama_model_loader: - type  f32:   37 tensors
0.00.129.930 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.931 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.386 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.753 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.338 I llm_load_vocab: special tokens cache size = 5
0.00.264.060 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.077 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.078 I llm_load_print_meta: arch             = gemma
0.00.264.078 I llm_load_print_meta: vocab type       = SPM
0.00.264.079 I llm_load_print_meta: n_vocab          = 256000
0.00.264.079 I llm_load_print_meta: n_merges         = 0
0.00.264.080 I llm_load_print_meta: vocab_only       = 0
0.00.264.080 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.080 I llm_load_print_meta: n_embd           = 2048
0.00.264.080 I llm_load_print_meta: n_layer          = 18
0.00.264.091 I llm_load_print_meta: n_head           = 8
0.00.264.092 I llm_load_print_meta: n_head_kv        = 1
0.00.264.092 I llm_load_print_meta: n_rot            = 256
0.00.264.092 I llm_load_print_meta: n_swa            = 0
0.00.264.093 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.093 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.094 I llm_load_print_meta: n_gqa            = 8
0.00.264.095 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.096 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.097 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.098 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.098 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.099 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.099 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.100 I llm_load_print_meta: n_ff             = 16384
0.00.264.100 I llm_load_print_meta: n_expert         = 0
0.00.264.101 I llm_load_print_meta: n_expert_used    = 0
0.00.264.101 I llm_load_print_meta: causal attn      = 1
0.00.264.101 I llm_load_print_meta: pooling type     = 0
0.00.264.102 I llm_load_print_meta: rope type        = 2
0.00.264.102 I llm_load_print_meta: rope scaling     = linear
0.00.264.104 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.104 I llm_load_print_meta: freq_scale_train = 1
0.00.264.105 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.105 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.105 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.105 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.106 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.106 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.106 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.107 I llm_load_print_meta: model type       = 2B
0.00.264.107 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.108 I llm_load_print_meta: model params     = 2.51 B
0.00.264.109 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.109 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.109 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.110 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.110 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.110 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.111 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.111 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.111 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.112 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.112 I llm_load_print_meta: max token length = 93
0.00.324.984 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.324.989 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.324.990 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.324.991 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.324.991 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.324.992 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.330.069 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.075 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.075 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.076 I llama_new_context_with_model: n_batch       = 2048
0.00.330.076 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.077 I llama_new_context_with_model: flash_attn    = 0
0.00.330.079 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.080 I llama_new_context_with_model: freq_scale    = 1
0.00.330.080 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.135 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.149 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.234 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.573 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.579 I llama_new_context_with_model: graph nodes  = 601
0.00.345.579 I llama_new_context_with_model: graph splits = 1
0.00.345.581 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.833 I main: llama threadpool init, n_threads = 4
0.00.419.847 I 
0.00.419.918 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.419.924 I 
0.00.419.966 I sampler seed: 1479370057
0.00.419.976 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.979 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.980 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.981 I 
 increably.

I am unable to provide a response as requested as I do not have access to personal or sensitive information. [end of text]


0.01.693.628 I llama_perf_sampler_print:    sampling time =       3.92 ms /    27 runs   (    0.15 ms per token,  6884.24 tokens per second)
0.01.693.631 I llama_perf_context_print:        load time =     419.07 ms
0.01.693.632 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.693.633 I llama_perf_context_print:        eval time =    1258.93 ms /    26 runs   (   48.42 ms per token,    20.65 tokens per second)
0.01.693.634 I llama_perf_context_print:       total time =    1273.80 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4100 (2eb9470c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40225.14 ms
main:    total time = 40225.14 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.560 I build: 4100 (2eb9470c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.761 I main: load the model and apply lora adapter, if any
0.00.021.295 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.315 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.322 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.325 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.329 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.330 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.331 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.331 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.332 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.332 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.336 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.336 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.337 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.338 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.338 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.737 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.884 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.673 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.679 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.680 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.681 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.682 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.683 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.684 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.687 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.688 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.692 I llama_model_loader: - type  f32:   37 tensors
0.00.130.693 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.694 I llama_model_loader: - type q6_K:   19 tensors
0.00.215.594 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.092 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.577 I llm_load_vocab: special tokens cache size = 5
0.00.281.426 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.442 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.442 I llm_load_print_meta: arch             = gemma
0.00.281.443 I llm_load_print_meta: vocab type       = SPM
0.00.281.443 I llm_load_print_meta: n_vocab          = 256000
0.00.281.444 I llm_load_print_meta: n_merges         = 0
0.00.281.444 I llm_load_print_meta: vocab_only       = 0
0.00.281.444 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.444 I llm_load_print_meta: n_embd           = 2048
0.00.281.445 I llm_load_print_meta: n_layer          = 18
0.00.281.456 I llm_load_print_meta: n_head           = 8
0.00.281.457 I llm_load_print_meta: n_head_kv        = 1
0.00.281.457 I llm_load_print_meta: n_rot            = 256
0.00.281.458 I llm_load_print_meta: n_swa            = 0
0.00.281.458 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.458 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.459 I llm_load_print_meta: n_gqa            = 8
0.00.281.460 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.461 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.462 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.463 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.463 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.464 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.464 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.465 I llm_load_print_meta: n_ff             = 16384
0.00.281.465 I llm_load_print_meta: n_expert         = 0
0.00.281.466 I llm_load_print_meta: n_expert_used    = 0
0.00.281.466 I llm_load_print_meta: causal attn      = 1
0.00.281.466 I llm_load_print_meta: pooling type     = 0
0.00.281.466 I llm_load_print_meta: rope type        = 2
0.00.281.467 I llm_load_print_meta: rope scaling     = linear
0.00.281.468 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.469 I llm_load_print_meta: freq_scale_train = 1
0.00.281.469 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.470 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.470 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.470 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.470 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.471 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.471 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.471 I llm_load_print_meta: model type       = 2B
0.00.281.472 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.281.472 I llm_load_print_meta: model params     = 2.51 B
0.00.281.473 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.281.473 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.474 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.474 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.475 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.475 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.475 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.476 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.476 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.476 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.477 I llm_load_print_meta: max token length = 93
0.00.340.215 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.345.322 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.328 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.329 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.329 I llama_new_context_with_model: n_batch       = 2048
0.00.345.330 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.330 I llama_new_context_with_model: flash_attn    = 0
0.00.345.332 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.333 I llama_new_context_with_model: freq_scale    = 1
0.00.345.334 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.939 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.954 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.045 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.250 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.257 I llama_new_context_with_model: graph nodes  = 601
0.00.361.257 I llama_new_context_with_model: graph splits = 1
0.00.361.259 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.437.550 I main: llama threadpool init, n_threads = 4
0.00.437.565 I 
0.00.437.650 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.437.654 I 
0.00.437.706 I sampler seed: 1636681366
0.00.437.719 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.437.722 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.437.723 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.437.724 I 
 guaranteering with the expression of love.

I am unable to provide a response that includes sexually suggestive or inappropriate content. [end of text]


0.01.659.093 I llama_perf_sampler_print:    sampling time =       4.08 ms /    26 runs   (    0.16 ms per token,  6370.99 tokens per second)
0.01.659.095 I llama_perf_context_print:        load time =     436.77 ms
0.01.659.096 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.659.097 I llama_perf_context_print:        eval time =    1206.57 ms /    25 runs   (   48.26 ms per token,    20.72 tokens per second)
0.01.659.098 I llama_perf_context_print:       total time =    1221.55 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.709s
user	10m21.219s
sys	0m6.733s
