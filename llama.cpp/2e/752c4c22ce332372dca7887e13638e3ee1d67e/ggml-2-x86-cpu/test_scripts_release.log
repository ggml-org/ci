+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.540 I build: 4206 (2e752c4c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.748 I main: load the model and apply lora adapter, if any
0.00.021.211 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.222 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.229 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.234 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.238 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.241 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.242 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.242 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.243 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.243 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.244 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.247 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.248 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.249 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.249 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.250 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.587 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.808 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.670 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.676 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.677 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.678 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.678 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.680 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.681 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.684 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.685 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.686 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.686 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.688 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.690 I llama_model_loader: - type  f32:   37 tensors
0.00.131.692 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.385 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.005 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.495 I llm_load_vocab: special tokens cache size = 5
0.00.266.550 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.566 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.567 I llm_load_print_meta: arch             = gemma
0.00.266.568 I llm_load_print_meta: vocab type       = SPM
0.00.266.568 I llm_load_print_meta: n_vocab          = 256000
0.00.266.569 I llm_load_print_meta: n_merges         = 0
0.00.266.569 I llm_load_print_meta: vocab_only       = 0
0.00.266.569 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.570 I llm_load_print_meta: n_embd           = 2048
0.00.266.570 I llm_load_print_meta: n_layer          = 18
0.00.266.581 I llm_load_print_meta: n_head           = 8
0.00.266.582 I llm_load_print_meta: n_head_kv        = 1
0.00.266.582 I llm_load_print_meta: n_rot            = 256
0.00.266.583 I llm_load_print_meta: n_swa            = 0
0.00.266.583 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.583 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.584 I llm_load_print_meta: n_gqa            = 8
0.00.266.585 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.586 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.587 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.588 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.589 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.590 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.590 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.591 I llm_load_print_meta: n_ff             = 16384
0.00.266.591 I llm_load_print_meta: n_expert         = 0
0.00.266.591 I llm_load_print_meta: n_expert_used    = 0
0.00.266.592 I llm_load_print_meta: causal attn      = 1
0.00.266.592 I llm_load_print_meta: pooling type     = 0
0.00.266.592 I llm_load_print_meta: rope type        = 2
0.00.266.592 I llm_load_print_meta: rope scaling     = linear
0.00.266.594 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.594 I llm_load_print_meta: freq_scale_train = 1
0.00.266.595 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.595 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.595 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.596 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.596 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.596 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.596 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.597 I llm_load_print_meta: model type       = 2B
0.00.266.597 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.598 I llm_load_print_meta: model params     = 2.51 B
0.00.266.599 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.600 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.600 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.600 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.601 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.601 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.601 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.602 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.602 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.603 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.603 I llm_load_print_meta: max token length = 93
0.00.368.106 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.368.113 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.368.114 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.368.114 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.368.115 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.368.116 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.373.374 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.380 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.381 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.381 I llama_new_context_with_model: n_batch       = 2048
0.00.373.381 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.382 I llama_new_context_with_model: flash_attn    = 0
0.00.373.384 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.385 I llama_new_context_with_model: freq_scale    = 1
0.00.373.386 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.686 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.700 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.787 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.082 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.089 I llama_new_context_with_model: graph nodes  = 601
0.00.389.090 I llama_new_context_with_model: graph splits = 1
0.00.389.092 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.618 I main: llama threadpool init, n_threads = 4
0.00.475.636 I 
0.00.475.709 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.475.713 I 
0.00.475.755 I sampler seed: 117444599
0.00.475.766 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.774 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.777 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.777 I 
 seconally, focusing on the vocabulary and sentence structure.

**Vocabulary:**

- **Paradox:** A seeming contradiction or inconsistency.
- **Ephemeral:**

0.02.719.923 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6538.54 tokens per second)
0.02.719.925 I llama_perf_context_print:        load time =     474.85 ms
0.02.719.926 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.719.928 I llama_perf_context_print:        eval time =    2225.43 ms /    32 runs   (   69.54 ms per token,    14.38 tokens per second)
0.02.719.928 I llama_perf_context_print:       total time =    2244.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.551 I build: 4206 (2e752c4c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.000.747 I main: load the model and apply lora adapter, if any
0.00.021.411 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.424 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.431 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.432 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.436 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.437 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.437 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.438 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.438 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.439 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.444 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.445 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.445 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.446 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.446 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.101 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.767 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.647 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.653 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.654 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.655 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.655 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.656 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.657 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.660 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.660 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.661 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.662 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.664 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.668 I llama_model_loader: - type  f32:   37 tensors
0.00.132.669 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.428 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.119 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.695 I llm_load_vocab: special tokens cache size = 5
0.00.264.894 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.913 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.914 I llm_load_print_meta: arch             = gemma
0.00.264.914 I llm_load_print_meta: vocab type       = SPM
0.00.264.915 I llm_load_print_meta: n_vocab          = 256000
0.00.264.915 I llm_load_print_meta: n_merges         = 0
0.00.264.916 I llm_load_print_meta: vocab_only       = 0
0.00.264.916 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.916 I llm_load_print_meta: n_embd           = 2048
0.00.264.917 I llm_load_print_meta: n_layer          = 18
0.00.264.927 I llm_load_print_meta: n_head           = 8
0.00.264.928 I llm_load_print_meta: n_head_kv        = 1
0.00.264.928 I llm_load_print_meta: n_rot            = 256
0.00.264.929 I llm_load_print_meta: n_swa            = 0
0.00.264.929 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.929 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.930 I llm_load_print_meta: n_gqa            = 8
0.00.264.931 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.932 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.933 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.935 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.935 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.936 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.936 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.937 I llm_load_print_meta: n_ff             = 16384
0.00.264.937 I llm_load_print_meta: n_expert         = 0
0.00.264.937 I llm_load_print_meta: n_expert_used    = 0
0.00.264.938 I llm_load_print_meta: causal attn      = 1
0.00.264.938 I llm_load_print_meta: pooling type     = 0
0.00.264.938 I llm_load_print_meta: rope type        = 2
0.00.264.939 I llm_load_print_meta: rope scaling     = linear
0.00.264.940 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.941 I llm_load_print_meta: freq_scale_train = 1
0.00.264.941 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.941 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.942 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.942 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.942 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.943 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.943 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.944 I llm_load_print_meta: model type       = 2B
0.00.264.944 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.945 I llm_load_print_meta: model params     = 2.51 B
0.00.264.946 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.946 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.947 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.947 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.948 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.948 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.948 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.949 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.949 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.950 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.950 I llm_load_print_meta: max token length = 93
0.00.361.019 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.287 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.293 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.293 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.294 I llama_new_context_with_model: n_batch       = 2048
0.00.366.294 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.295 I llama_new_context_with_model: flash_attn    = 0
0.00.366.298 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.300 I llama_new_context_with_model: freq_scale    = 1
0.00.366.301 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.541 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.556 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.652 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.932 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.938 I llama_new_context_with_model: graph nodes  = 601
0.00.382.938 I llama_new_context_with_model: graph splits = 1
0.00.382.940 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.831 I main: llama threadpool init, n_threads = 4
0.00.463.846 I 
0.00.463.915 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.463.919 I 
0.00.463.961 I sampler seed: 3797857348
0.00.463.972 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.980 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.981 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.983 I 
 increasively, encompassing not only the immediate environment but also the broader context. This emergent quality arises from the intricate web of relationships between things, revealing a deeper understanding

0.02.627.777 I llama_perf_sampler_print:    sampling time =       4.97 ms /    33 runs   (    0.15 ms per token,  6643.85 tokens per second)
0.02.627.780 I llama_perf_context_print:        load time =     463.06 ms
0.02.627.781 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.627.783 I llama_perf_context_print:        eval time =    2145.27 ms /    32 runs   (   67.04 ms per token,    14.92 tokens per second)
0.02.627.783 I llama_perf_context_print:       total time =    2163.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.543 I build: 4206 (2e752c4c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.021.303 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.312 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.320 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.325 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.329 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.334 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.335 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.336 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.337 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.338 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.339 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.345 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.349 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.350 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.351 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.351 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.961 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.349 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.240 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.247 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.248 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.249 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.249 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.250 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.251 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.253 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.253 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.254 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.255 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.256 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.261 I llama_model_loader: - type  f32:   37 tensors
0.00.132.263 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.746 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.553 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.283 I llm_load_vocab: special tokens cache size = 5
0.00.270.598 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.625 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.626 I llm_load_print_meta: arch             = gemma
0.00.270.626 I llm_load_print_meta: vocab type       = SPM
0.00.270.629 I llm_load_print_meta: n_vocab          = 256000
0.00.270.629 I llm_load_print_meta: n_merges         = 0
0.00.270.630 I llm_load_print_meta: vocab_only       = 0
0.00.270.630 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.630 I llm_load_print_meta: n_embd           = 2048
0.00.270.630 I llm_load_print_meta: n_layer          = 18
0.00.270.643 I llm_load_print_meta: n_head           = 8
0.00.270.645 I llm_load_print_meta: n_head_kv        = 1
0.00.270.645 I llm_load_print_meta: n_rot            = 256
0.00.270.646 I llm_load_print_meta: n_swa            = 0
0.00.270.646 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.647 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.649 I llm_load_print_meta: n_gqa            = 8
0.00.270.652 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.653 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.655 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.657 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.658 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.659 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.660 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.662 I llm_load_print_meta: n_ff             = 16384
0.00.270.662 I llm_load_print_meta: n_expert         = 0
0.00.270.663 I llm_load_print_meta: n_expert_used    = 0
0.00.270.663 I llm_load_print_meta: causal attn      = 1
0.00.270.664 I llm_load_print_meta: pooling type     = 0
0.00.270.664 I llm_load_print_meta: rope type        = 2
0.00.270.665 I llm_load_print_meta: rope scaling     = linear
0.00.270.666 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.667 I llm_load_print_meta: freq_scale_train = 1
0.00.270.667 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.668 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.668 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.669 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.669 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.670 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.671 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.671 I llm_load_print_meta: model type       = 2B
0.00.270.672 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.673 I llm_load_print_meta: model params     = 2.51 B
0.00.270.675 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.675 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.676 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.676 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.677 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.680 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.681 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.682 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.683 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.683 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.684 I llm_load_print_meta: max token length = 93
0.00.345.575 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.345.582 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.583 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.345.583 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.345.584 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.585 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.350.936 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.941 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.942 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.942 I llama_new_context_with_model: n_batch       = 2048
0.00.350.942 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.943 I llama_new_context_with_model: flash_attn    = 0
0.00.350.947 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.948 I llama_new_context_with_model: freq_scale    = 1
0.00.350.948 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.768 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.783 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.885 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.171 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.176 I llama_new_context_with_model: graph nodes  = 601
0.00.367.177 I llama_new_context_with_model: graph splits = 1
0.00.367.179 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.773 I main: llama threadpool init, n_threads = 4
0.00.462.788 I 
0.00.462.890 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.462.894 I 
0.00.462.940 I sampler seed: 228420857
0.00.462.951 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.962 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.966 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.966 I 
 increasively, seeking to engulf the surrounding world in his relentless enthusiasm.

This insatiable hunger consumes him, driving him to consume information like a starving man ravening

0.02.707.532 I llama_perf_sampler_print:    sampling time =       5.17 ms /    33 runs   (    0.16 ms per token,  6376.81 tokens per second)
0.02.707.534 I llama_perf_context_print:        load time =     462.00 ms
0.02.707.535 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.707.537 I llama_perf_context_print:        eval time =    2225.85 ms /    32 runs   (   69.56 ms per token,    14.38 tokens per second)
0.02.707.537 I llama_perf_context_print:       total time =    2244.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.534 I build: 4206 (2e752c4c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.000.734 I main: load the model and apply lora adapter, if any
0.00.021.349 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.359 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.366 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.371 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.373 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.377 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.380 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.380 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.381 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.381 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.382 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.386 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.387 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.388 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.388 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.389 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.161 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.382 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.213 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.219 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.220 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.220 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.221 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.221 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.222 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.224 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.225 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.226 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.227 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.228 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.231 I llama_model_loader: - type  f32:   37 tensors
0.00.132.232 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.386 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.770 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.296 I llm_load_vocab: special tokens cache size = 5
0.00.270.308 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.324 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.324 I llm_load_print_meta: arch             = gemma
0.00.270.325 I llm_load_print_meta: vocab type       = SPM
0.00.270.326 I llm_load_print_meta: n_vocab          = 256000
0.00.270.326 I llm_load_print_meta: n_merges         = 0
0.00.270.327 I llm_load_print_meta: vocab_only       = 0
0.00.270.327 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.327 I llm_load_print_meta: n_embd           = 2048
0.00.270.328 I llm_load_print_meta: n_layer          = 18
0.00.270.339 I llm_load_print_meta: n_head           = 8
0.00.270.340 I llm_load_print_meta: n_head_kv        = 1
0.00.270.341 I llm_load_print_meta: n_rot            = 256
0.00.270.341 I llm_load_print_meta: n_swa            = 0
0.00.270.341 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.342 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.342 I llm_load_print_meta: n_gqa            = 8
0.00.270.343 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.344 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.345 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.346 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.347 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.347 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.347 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.348 I llm_load_print_meta: n_ff             = 16384
0.00.270.349 I llm_load_print_meta: n_expert         = 0
0.00.270.349 I llm_load_print_meta: n_expert_used    = 0
0.00.270.349 I llm_load_print_meta: causal attn      = 1
0.00.270.349 I llm_load_print_meta: pooling type     = 0
0.00.270.350 I llm_load_print_meta: rope type        = 2
0.00.270.350 I llm_load_print_meta: rope scaling     = linear
0.00.270.351 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.352 I llm_load_print_meta: freq_scale_train = 1
0.00.270.352 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.353 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.353 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.353 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.353 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.354 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.354 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.354 I llm_load_print_meta: model type       = 2B
0.00.270.355 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.356 I llm_load_print_meta: model params     = 2.51 B
0.00.270.356 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.357 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.357 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.357 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.358 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.358 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.358 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.359 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.359 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.360 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.360 I llm_load_print_meta: max token length = 93
0.00.341.751 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.341.757 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.346.936 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.942 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.943 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.943 I llama_new_context_with_model: n_batch       = 2048
0.00.346.943 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.944 I llama_new_context_with_model: flash_attn    = 0
0.00.346.947 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.948 I llama_new_context_with_model: freq_scale    = 1
0.00.346.949 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.361.195 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.209 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.301 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.588 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.595 I llama_new_context_with_model: graph nodes  = 601
0.00.362.595 I llama_new_context_with_model: graph splits = 1
0.00.362.597 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.096 I main: llama threadpool init, n_threads = 4
0.00.451.109 I 
0.00.451.178 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.451.182 I 
0.00.451.228 I sampler seed: 3470567220
0.00.451.238 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.250 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.254 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.254 I 
 maneuvously. 🤪 [end of text]


0.00.982.406 I llama_perf_sampler_print:    sampling time =       1.07 ms /     8 runs   (    0.13 ms per token,  7469.65 tokens per second)
0.00.982.408 I llama_perf_context_print:        load time =     450.34 ms
0.00.982.409 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.982.411 I llama_perf_context_print:        eval time =     526.04 ms /     7 runs   (   75.15 ms per token,    13.31 tokens per second)
0.00.982.412 I llama_perf_context_print:       total time =     531.32 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.443s
user	0m31.623s
sys	0m9.290s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4206 (2e752c4c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40197.94 ms
main:    total time = 40197.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.538 I build: 4206 (2e752c4c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.748 I main: load the model and apply lora adapter, if any
0.00.021.340 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.349 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.358 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.363 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.363 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.368 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.370 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.370 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.371 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.372 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.372 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.375 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.376 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.376 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.377 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.377 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.911 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.891 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.748 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.754 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.756 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.757 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.757 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.758 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.760 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.763 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.764 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.765 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.766 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.767 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.771 I llama_model_loader: - type  f32:   37 tensors
0.00.131.772 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.772 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.755 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.352 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.997 I llm_load_vocab: special tokens cache size = 5
0.00.266.152 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.167 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.167 I llm_load_print_meta: arch             = gemma
0.00.266.168 I llm_load_print_meta: vocab type       = SPM
0.00.266.168 I llm_load_print_meta: n_vocab          = 256000
0.00.266.169 I llm_load_print_meta: n_merges         = 0
0.00.266.169 I llm_load_print_meta: vocab_only       = 0
0.00.266.170 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.170 I llm_load_print_meta: n_embd           = 2048
0.00.266.170 I llm_load_print_meta: n_layer          = 18
0.00.266.181 I llm_load_print_meta: n_head           = 8
0.00.266.182 I llm_load_print_meta: n_head_kv        = 1
0.00.266.183 I llm_load_print_meta: n_rot            = 256
0.00.266.183 I llm_load_print_meta: n_swa            = 0
0.00.266.183 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.183 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.185 I llm_load_print_meta: n_gqa            = 8
0.00.266.186 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.187 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.187 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.189 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.189 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.190 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.190 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.191 I llm_load_print_meta: n_ff             = 16384
0.00.266.191 I llm_load_print_meta: n_expert         = 0
0.00.266.191 I llm_load_print_meta: n_expert_used    = 0
0.00.266.192 I llm_load_print_meta: causal attn      = 1
0.00.266.192 I llm_load_print_meta: pooling type     = 0
0.00.266.192 I llm_load_print_meta: rope type        = 2
0.00.266.193 I llm_load_print_meta: rope scaling     = linear
0.00.266.194 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.195 I llm_load_print_meta: freq_scale_train = 1
0.00.266.195 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.195 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.196 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.196 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.196 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.196 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.196 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.197 I llm_load_print_meta: model type       = 2B
0.00.266.197 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.198 I llm_load_print_meta: model params     = 2.51 B
0.00.266.199 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.199 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.200 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.200 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.201 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.201 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.201 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.202 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.202 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.202 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.203 I llm_load_print_meta: max token length = 93
0.00.325.959 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.325.965 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.325.966 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.325.966 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.325.967 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.325.968 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.330.979 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.986 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.986 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.986 I llama_new_context_with_model: n_batch       = 2048
0.00.330.987 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.987 I llama_new_context_with_model: flash_attn    = 0
0.00.330.989 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.990 I llama_new_context_with_model: freq_scale    = 1
0.00.330.991 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.346 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.359 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.448 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.756 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.761 I llama_new_context_with_model: graph nodes  = 601
0.00.346.761 I llama_new_context_with_model: graph splits = 1
0.00.346.763 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.797 I main: llama threadpool init, n_threads = 4
0.00.421.813 I 
0.00.421.902 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.421.905 I 
0.00.421.949 I sampler seed: 193129918
0.00.421.960 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.963 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.964 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.964 I 
 seconally, the sentence is incomplete.

"I am not sure _______ I should do."

The correct completion is:
a) what
b)

0.02.012.484 I llama_perf_sampler_print:    sampling time =       5.22 ms /    33 runs   (    0.16 ms per token,  6320.63 tokens per second)
0.02.012.487 I llama_perf_context_print:        load time =     421.03 ms
0.02.012.489 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.012.492 I llama_perf_context_print:        eval time =    1571.03 ms /    32 runs   (   49.09 ms per token,    20.37 tokens per second)
0.02.012.493 I llama_perf_context_print:       total time =    1590.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4206 (2e752c4c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40170.04 ms
main:    total time = 40170.04 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.556 I build: 4206 (2e752c4c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.000.761 I main: load the model and apply lora adapter, if any
0.00.021.407 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.423 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.430 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.431 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.434 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.436 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.437 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.437 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.438 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.438 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.443 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.443 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.444 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.445 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.445 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.933 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.795 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.691 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.697 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.697 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.698 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.698 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.699 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.699 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.701 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.702 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.704 I llama_model_loader: - type  f32:   37 tensors
0.00.131.705 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.706 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.268 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.455 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.895 I llm_load_vocab: special tokens cache size = 5
0.00.264.677 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.692 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.692 I llm_load_print_meta: arch             = gemma
0.00.264.693 I llm_load_print_meta: vocab type       = SPM
0.00.264.693 I llm_load_print_meta: n_vocab          = 256000
0.00.264.693 I llm_load_print_meta: n_merges         = 0
0.00.264.694 I llm_load_print_meta: vocab_only       = 0
0.00.264.694 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.694 I llm_load_print_meta: n_embd           = 2048
0.00.264.695 I llm_load_print_meta: n_layer          = 18
0.00.264.707 I llm_load_print_meta: n_head           = 8
0.00.264.708 I llm_load_print_meta: n_head_kv        = 1
0.00.264.709 I llm_load_print_meta: n_rot            = 256
0.00.264.709 I llm_load_print_meta: n_swa            = 0
0.00.264.709 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.710 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.711 I llm_load_print_meta: n_gqa            = 8
0.00.264.713 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.714 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.715 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.717 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.717 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.718 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.718 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.719 I llm_load_print_meta: n_ff             = 16384
0.00.264.719 I llm_load_print_meta: n_expert         = 0
0.00.264.720 I llm_load_print_meta: n_expert_used    = 0
0.00.264.720 I llm_load_print_meta: causal attn      = 1
0.00.264.720 I llm_load_print_meta: pooling type     = 0
0.00.264.721 I llm_load_print_meta: rope type        = 2
0.00.264.721 I llm_load_print_meta: rope scaling     = linear
0.00.264.722 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.723 I llm_load_print_meta: freq_scale_train = 1
0.00.264.724 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.726 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.727 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.727 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.727 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.728 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.728 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.729 I llm_load_print_meta: model type       = 2B
0.00.264.730 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.731 I llm_load_print_meta: model params     = 2.51 B
0.00.264.732 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.732 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.735 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.736 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.736 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.736 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.737 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.737 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.737 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.738 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.738 I llm_load_print_meta: max token length = 93
0.00.321.444 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.326.492 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.498 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.498 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.499 I llama_new_context_with_model: n_batch       = 2048
0.00.326.499 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.499 I llama_new_context_with_model: flash_attn    = 0
0.00.326.501 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.503 I llama_new_context_with_model: freq_scale    = 1
0.00.326.504 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.340.781 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.340.795 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.340.886 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.342.108 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.342.115 I llama_new_context_with_model: graph nodes  = 601
0.00.342.115 I llama_new_context_with_model: graph splits = 1
0.00.342.117 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.416.099 I main: llama threadpool init, n_threads = 4
0.00.416.115 I 
0.00.416.186 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.416.190 I 
0.00.416.239 I sampler seed: 450282351
0.00.416.253 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.416.257 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.416.257 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.416.258 I 
 seconal.

**Instructions:**
- Replace the bracketed words with the appropriate vocabulary from the context.
- Use the context to determine the most fitting

0.01.981.349 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6665.32 tokens per second)
0.01.981.352 I llama_perf_context_print:        load time =     415.32 ms
0.01.981.353 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.981.355 I llama_perf_context_print:        eval time =    1546.32 ms /    32 runs   (   48.32 ms per token,    20.69 tokens per second)
0.01.981.355 I llama_perf_context_print:       total time =    1565.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.117s
user	10m23.940s
sys	0m6.792s
