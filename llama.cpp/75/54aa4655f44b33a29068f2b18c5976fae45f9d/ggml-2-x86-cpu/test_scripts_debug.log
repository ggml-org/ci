+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 4012 (7554aa46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.002.814 I main: load the model and apply lora adapter, if any
0.00.025.659 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.671 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.762 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.774 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.776 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.781 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.783 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.793 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.799 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.800 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.802 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.811 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.813 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.815 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.816 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.818 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.386 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.361 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.817 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.826 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.828 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.829 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.830 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.831 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.832 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.836 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.837 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.838 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.839 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.840 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.848 I llama_model_loader: - type  f32:   37 tensors
0.00.267.850 I llama_model_loader: - type q8_0:  127 tensors
0.00.438.645 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.401 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.363 I llm_load_vocab: special tokens cache size = 5
0.00.597.979 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.598.051 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.598.052 I llm_load_print_meta: arch             = gemma
0.00.598.053 I llm_load_print_meta: vocab type       = SPM
0.00.598.054 I llm_load_print_meta: n_vocab          = 256000
0.00.598.056 I llm_load_print_meta: n_merges         = 0
0.00.598.057 I llm_load_print_meta: vocab_only       = 0
0.00.598.057 I llm_load_print_meta: n_ctx_train      = 8192
0.00.598.058 I llm_load_print_meta: n_embd           = 2048
0.00.598.058 I llm_load_print_meta: n_layer          = 18
0.00.598.122 I llm_load_print_meta: n_head           = 8
0.00.598.128 I llm_load_print_meta: n_head_kv        = 1
0.00.598.132 I llm_load_print_meta: n_rot            = 256
0.00.598.132 I llm_load_print_meta: n_swa            = 0
0.00.598.133 I llm_load_print_meta: n_embd_head_k    = 256
0.00.598.133 I llm_load_print_meta: n_embd_head_v    = 256
0.00.598.138 I llm_load_print_meta: n_gqa            = 8
0.00.598.143 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.598.148 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.598.150 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.598.151 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.598.152 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.598.152 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.598.153 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.598.159 I llm_load_print_meta: n_ff             = 16384
0.00.598.160 I llm_load_print_meta: n_expert         = 0
0.00.598.161 I llm_load_print_meta: n_expert_used    = 0
0.00.598.162 I llm_load_print_meta: causal attn      = 1
0.00.598.162 I llm_load_print_meta: pooling type     = 0
0.00.598.172 I llm_load_print_meta: rope type        = 2
0.00.598.173 I llm_load_print_meta: rope scaling     = linear
0.00.598.174 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.598.175 I llm_load_print_meta: freq_scale_train = 1
0.00.598.176 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.598.177 I llm_load_print_meta: rope_finetuned   = unknown
0.00.598.177 I llm_load_print_meta: ssm_d_conv       = 0
0.00.598.178 I llm_load_print_meta: ssm_d_inner      = 0
0.00.598.180 I llm_load_print_meta: ssm_d_state      = 0
0.00.598.180 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.598.181 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.598.182 I llm_load_print_meta: model type       = 2B
0.00.598.183 I llm_load_print_meta: model ftype      = Q8_0
0.00.598.184 I llm_load_print_meta: model params     = 2.51 B
0.00.598.193 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.598.193 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.598.194 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.598.195 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.598.195 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.598.196 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.598.197 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.598.198 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.598.205 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.598.207 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.598.208 I llm_load_print_meta: max token length = 93
0.00.702.420 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.702.430 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.702.431 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.702.432 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.702.433 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.702.433 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.708.573 I llama_new_context_with_model: n_ctx      = 8192
0.00.708.580 I llama_new_context_with_model: n_batch    = 2048
0.00.708.581 I llama_new_context_with_model: n_ubatch   = 512
0.00.708.581 I llama_new_context_with_model: flash_attn = 0
0.00.708.583 I llama_new_context_with_model: freq_base  = 10000.0
0.00.708.584 I llama_new_context_with_model: freq_scale = 1
0.00.737.297 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.737.340 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.737.477 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.740.134 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.740.138 I llama_new_context_with_model: graph nodes  = 601
0.00.740.139 I llama_new_context_with_model: graph splits = 1
0.00.740.165 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.175 I main: llama threadpool init, n_threads = 4
0.01.352.187 I 
0.01.352.306 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.352.311 I 
0.01.352.549 I sampler seed: 662417241
0.01.352.563 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.352.572 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.352.573 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.352.573 I 
 increasities and the consequences of untreated narcissism.

**Section 1: Narcisistic Personality Disorder**

* Definition and characteristics
* Causes and risk factors

0.14.848.160 I llama_perf_sampler_print:    sampling time =      49.39 ms /    33 runs   (    1.50 ms per token,   668.14 tokens per second)
0.14.848.164 I llama_perf_context_print:        load time =    1349.26 ms
0.14.848.166 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.848.168 I llama_perf_context_print:        eval time =   13398.05 ms /    32 runs   (  418.69 ms per token,     2.39 tokens per second)
0.14.848.169 I llama_perf_context_print:       total time =   13496.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4012 (7554aa46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.002.829 I main: load the model and apply lora adapter, if any
0.00.025.390 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.484 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.497 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.498 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.503 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.507 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.508 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.509 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.510 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.511 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.517 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.519 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.520 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.521 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.522 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.519 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.481 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.903 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.912 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.913 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.914 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.915 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.916 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.918 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.921 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.922 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.923 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.924 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.925 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.934 I llama_model_loader: - type  f32:   37 tensors
0.00.266.936 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.795 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.754 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.619 I llm_load_vocab: special tokens cache size = 5
0.00.591.737 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.802 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.803 I llm_load_print_meta: arch             = gemma
0.00.591.804 I llm_load_print_meta: vocab type       = SPM
0.00.591.805 I llm_load_print_meta: n_vocab          = 256000
0.00.591.808 I llm_load_print_meta: n_merges         = 0
0.00.591.808 I llm_load_print_meta: vocab_only       = 0
0.00.591.809 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.810 I llm_load_print_meta: n_embd           = 2048
0.00.591.810 I llm_load_print_meta: n_layer          = 18
0.00.591.873 I llm_load_print_meta: n_head           = 8
0.00.591.881 I llm_load_print_meta: n_head_kv        = 1
0.00.591.882 I llm_load_print_meta: n_rot            = 256
0.00.591.883 I llm_load_print_meta: n_swa            = 0
0.00.591.883 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.883 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.888 I llm_load_print_meta: n_gqa            = 8
0.00.591.893 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.902 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.903 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.905 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.907 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.907 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.917 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.927 I llm_load_print_meta: n_ff             = 16384
0.00.591.929 I llm_load_print_meta: n_expert         = 0
0.00.591.930 I llm_load_print_meta: n_expert_used    = 0
0.00.591.930 I llm_load_print_meta: causal attn      = 1
0.00.591.931 I llm_load_print_meta: pooling type     = 0
0.00.591.931 I llm_load_print_meta: rope type        = 2
0.00.591.932 I llm_load_print_meta: rope scaling     = linear
0.00.591.934 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.935 I llm_load_print_meta: freq_scale_train = 1
0.00.591.935 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.936 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.936 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.936 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.937 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.937 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.937 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.938 I llm_load_print_meta: model type       = 2B
0.00.591.939 I llm_load_print_meta: model ftype      = Q8_0
0.00.591.940 I llm_load_print_meta: model params     = 2.51 B
0.00.591.948 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.591.949 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.950 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.951 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.951 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.591.952 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.952 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.953 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.958 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.591.960 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.591.960 I llm_load_print_meta: max token length = 93
0.00.692.282 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.698.188 I llama_new_context_with_model: n_ctx      = 8192
0.00.698.194 I llama_new_context_with_model: n_batch    = 2048
0.00.698.195 I llama_new_context_with_model: n_ubatch   = 512
0.00.698.195 I llama_new_context_with_model: flash_attn = 0
0.00.698.197 I llama_new_context_with_model: freq_base  = 10000.0
0.00.698.198 I llama_new_context_with_model: freq_scale = 1
0.00.727.234 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.727.277 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.727.400 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.729.972 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.729.976 I llama_new_context_with_model: graph nodes  = 601
0.00.729.977 I llama_new_context_with_model: graph splits = 1
0.00.730.001 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.340.307 I main: llama threadpool init, n_threads = 4
0.01.340.320 I 
0.01.340.424 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.340.425 I 
0.01.340.659 I sampler seed: 3938640497
0.01.340.672 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.340.679 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.340.680 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.340.681 I 
 increasively, and then abruptly stopped.

I'd appreciate it if you could explain what happened and why it stopped abruptly.

[Additional information: The

0.14.986.105 I llama_perf_sampler_print:    sampling time =      49.74 ms /    33 runs   (    1.51 ms per token,   663.44 tokens per second)
0.14.986.108 I llama_perf_context_print:        load time =    1337.38 ms
0.14.986.110 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.986.112 I llama_perf_context_print:        eval time =   13547.07 ms /    32 runs   (  423.35 ms per token,     2.36 tokens per second)
0.14.986.113 I llama_perf_context_print:       total time =   13645.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.621 I build: 4012 (7554aa46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.002.759 I main: load the model and apply lora adapter, if any
0.00.027.254 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.027.264 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.027.354 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.365 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.367 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.372 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.376 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.377 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.379 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.380 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.381 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.388 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.389 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.390 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.391 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.393 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.588 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.739 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.283 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.293 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.294 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.295 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.296 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.297 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.299 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.302 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.303 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.304 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.305 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.306 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.315 I llama_model_loader: - type  f32:   37 tensors
0.00.268.318 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.236 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.522.124 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.078 I llm_load_vocab: special tokens cache size = 5
0.00.620.590 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.620.665 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.620.666 I llm_load_print_meta: arch             = gemma
0.00.620.667 I llm_load_print_meta: vocab type       = SPM
0.00.620.668 I llm_load_print_meta: n_vocab          = 256000
0.00.620.670 I llm_load_print_meta: n_merges         = 0
0.00.620.671 I llm_load_print_meta: vocab_only       = 0
0.00.620.672 I llm_load_print_meta: n_ctx_train      = 8192
0.00.620.672 I llm_load_print_meta: n_embd           = 2048
0.00.620.672 I llm_load_print_meta: n_layer          = 18
0.00.620.735 I llm_load_print_meta: n_head           = 8
0.00.620.743 I llm_load_print_meta: n_head_kv        = 1
0.00.620.745 I llm_load_print_meta: n_rot            = 256
0.00.620.745 I llm_load_print_meta: n_swa            = 0
0.00.620.746 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.746 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.751 I llm_load_print_meta: n_gqa            = 8
0.00.620.756 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.764 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.765 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.768 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.768 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.769 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.769 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.774 I llm_load_print_meta: n_ff             = 16384
0.00.620.775 I llm_load_print_meta: n_expert         = 0
0.00.620.775 I llm_load_print_meta: n_expert_used    = 0
0.00.620.776 I llm_load_print_meta: causal attn      = 1
0.00.620.776 I llm_load_print_meta: pooling type     = 0
0.00.620.777 I llm_load_print_meta: rope type        = 2
0.00.620.777 I llm_load_print_meta: rope scaling     = linear
0.00.620.778 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.779 I llm_load_print_meta: freq_scale_train = 1
0.00.620.780 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.780 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.780 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.780 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.781 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.782 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.782 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.783 I llm_load_print_meta: model type       = 2B
0.00.620.784 I llm_load_print_meta: model ftype      = Q8_0
0.00.620.784 I llm_load_print_meta: model params     = 2.51 B
0.00.620.793 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.620.796 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.797 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.798 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.798 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.807 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.813 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.814 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.820 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.822 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.822 I llm_load_print_meta: max token length = 93
0.00.717.334 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.717.343 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.717.343 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.717.344 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.717.345 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.717.346 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.723.153 I llama_new_context_with_model: n_ctx      = 8192
0.00.723.160 I llama_new_context_with_model: n_batch    = 2048
0.00.723.161 I llama_new_context_with_model: n_ubatch   = 512
0.00.723.161 I llama_new_context_with_model: flash_attn = 0
0.00.723.164 I llama_new_context_with_model: freq_base  = 10000.0
0.00.723.165 I llama_new_context_with_model: freq_scale = 1
0.00.752.997 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.753.037 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.753.205 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.755.774 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.755.778 I llama_new_context_with_model: graph nodes  = 601
0.00.755.779 I llama_new_context_with_model: graph splits = 1
0.00.755.803 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.368.650 I main: llama threadpool init, n_threads = 4
0.01.368.664 I 
0.01.368.772 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.368.776 I 
0.01.369.010 I sampler seed: 370463476
0.01.369.023 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.369.030 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.369.033 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.369.033 I 
 increasities:

I. The Earth is flat.
II. The Earth is spherical.
III. The Earth revolves around the Sun.
IV.

0.14.865.499 I llama_perf_sampler_print:    sampling time =      49.28 ms /    33 runs   (    1.49 ms per token,   669.59 tokens per second)
0.14.865.502 I llama_perf_context_print:        load time =    1365.79 ms
0.14.865.503 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.865.524 I llama_perf_context_print:        eval time =   13399.43 ms /    32 runs   (  418.73 ms per token,     2.39 tokens per second)
0.14.865.526 I llama_perf_context_print:       total time =   13496.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 4012 (7554aa46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.821 I main: load the model and apply lora adapter, if any
0.00.025.569 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.578 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.665 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.675 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.677 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.681 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.683 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.684 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.685 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.686 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.688 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.694 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.696 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.697 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.698 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.700 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.228 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.911 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.312 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.319 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.320 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.321 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.322 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.324 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.325 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.328 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.329 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.330 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.331 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.332 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.340 I llama_model_loader: - type  f32:   37 tensors
0.00.266.342 I llama_model_loader: - type q8_0:  127 tensors
0.00.455.578 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.171 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.043 I llm_load_vocab: special tokens cache size = 5
0.00.616.494 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.563 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.564 I llm_load_print_meta: arch             = gemma
0.00.616.565 I llm_load_print_meta: vocab type       = SPM
0.00.616.566 I llm_load_print_meta: n_vocab          = 256000
0.00.616.569 I llm_load_print_meta: n_merges         = 0
0.00.616.569 I llm_load_print_meta: vocab_only       = 0
0.00.616.569 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.570 I llm_load_print_meta: n_embd           = 2048
0.00.616.571 I llm_load_print_meta: n_layer          = 18
0.00.616.656 I llm_load_print_meta: n_head           = 8
0.00.616.666 I llm_load_print_meta: n_head_kv        = 1
0.00.616.667 I llm_load_print_meta: n_rot            = 256
0.00.616.668 I llm_load_print_meta: n_swa            = 0
0.00.616.668 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.669 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.674 I llm_load_print_meta: n_gqa            = 8
0.00.616.680 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.685 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.687 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.688 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.688 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.689 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.690 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.695 I llm_load_print_meta: n_ff             = 16384
0.00.616.696 I llm_load_print_meta: n_expert         = 0
0.00.616.697 I llm_load_print_meta: n_expert_used    = 0
0.00.616.697 I llm_load_print_meta: causal attn      = 1
0.00.616.698 I llm_load_print_meta: pooling type     = 0
0.00.616.698 I llm_load_print_meta: rope type        = 2
0.00.616.699 I llm_load_print_meta: rope scaling     = linear
0.00.616.700 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.702 I llm_load_print_meta: freq_scale_train = 1
0.00.616.702 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.703 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.704 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.704 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.704 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.705 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.705 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.706 I llm_load_print_meta: model type       = 2B
0.00.616.707 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.708 I llm_load_print_meta: model params     = 2.51 B
0.00.616.718 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.719 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.720 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.721 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.726 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.726 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.733 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.733 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.739 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.741 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.741 I llm_load_print_meta: max token length = 93
0.00.690.171 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.690.180 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.695.969 I llama_new_context_with_model: n_ctx      = 8192
0.00.695.976 I llama_new_context_with_model: n_batch    = 2048
0.00.695.976 I llama_new_context_with_model: n_ubatch   = 512
0.00.695.977 I llama_new_context_with_model: flash_attn = 0
0.00.695.979 I llama_new_context_with_model: freq_base  = 10000.0
0.00.695.980 I llama_new_context_with_model: freq_scale = 1
0.00.724.546 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.724.587 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.724.713 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.727.261 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.727.265 I llama_new_context_with_model: graph nodes  = 601
0.00.727.265 I llama_new_context_with_model: graph splits = 1
0.00.727.289 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.335.902 I main: llama threadpool init, n_threads = 4
0.01.335.918 I 
0.01.336.028 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.336.032 I 
0.01.336.267 I sampler seed: 3294182789
0.01.336.280 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.336.287 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.336.290 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.336.290 I 
 maneurages.

I am unable to generate a response because the provided context does not contain any information regarding the requested data. [end of text]


0.12.308.687 I llama_perf_sampler_print:    sampling time =      40.19 ms /    27 runs   (    1.49 ms per token,   671.81 tokens per second)
0.12.308.690 I llama_perf_context_print:        load time =    1332.99 ms
0.12.308.692 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.308.693 I llama_perf_context_print:        eval time =   10893.37 ms /    26 runs   (  418.98 ms per token,     2.39 tokens per second)
0.12.308.694 I llama_perf_context_print:       total time =   10972.79 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m6.732s
user	3m39.082s
sys	0m9.504s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4012 (7554aa46)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198466.64 ms
main:    total time = 198466.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4012 (7554aa46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.002.819 I main: load the model and apply lora adapter, if any
0.00.025.633 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.643 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.740 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.752 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.754 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.759 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.763 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.764 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.765 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.766 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.767 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.774 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.776 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.778 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.779 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.782 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.512 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.907 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.286 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.294 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.295 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.297 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.298 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.299 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.300 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.304 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.305 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.306 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.307 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.308 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.316 I llama_model_loader: - type  f32:   37 tensors
0.00.265.318 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.319 I llama_model_loader: - type q6_K:   19 tensors
0.00.446.075 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.616 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.620 I llm_load_vocab: special tokens cache size = 5
0.00.617.890 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.964 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.965 I llm_load_print_meta: arch             = gemma
0.00.617.966 I llm_load_print_meta: vocab type       = SPM
0.00.617.966 I llm_load_print_meta: n_vocab          = 256000
0.00.617.969 I llm_load_print_meta: n_merges         = 0
0.00.617.969 I llm_load_print_meta: vocab_only       = 0
0.00.617.970 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.970 I llm_load_print_meta: n_embd           = 2048
0.00.617.971 I llm_load_print_meta: n_layer          = 18
0.00.618.035 I llm_load_print_meta: n_head           = 8
0.00.618.042 I llm_load_print_meta: n_head_kv        = 1
0.00.618.043 I llm_load_print_meta: n_rot            = 256
0.00.618.043 I llm_load_print_meta: n_swa            = 0
0.00.618.043 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.044 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.048 I llm_load_print_meta: n_gqa            = 8
0.00.618.053 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.058 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.060 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.061 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.062 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.062 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.063 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.068 I llm_load_print_meta: n_ff             = 16384
0.00.618.069 I llm_load_print_meta: n_expert         = 0
0.00.618.069 I llm_load_print_meta: n_expert_used    = 0
0.00.618.071 I llm_load_print_meta: causal attn      = 1
0.00.618.071 I llm_load_print_meta: pooling type     = 0
0.00.618.071 I llm_load_print_meta: rope type        = 2
0.00.618.094 I llm_load_print_meta: rope scaling     = linear
0.00.618.096 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.097 I llm_load_print_meta: freq_scale_train = 1
0.00.618.097 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.102 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.103 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.104 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.104 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.105 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.106 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.107 I llm_load_print_meta: model type       = 2B
0.00.618.108 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.618.109 I llm_load_print_meta: model params     = 2.51 B
0.00.618.118 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.618.119 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.126 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.127 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.128 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.128 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.129 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.129 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.143 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.146 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.146 I llm_load_print_meta: max token length = 93
0.00.681.364 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.681.373 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.681.374 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.681.375 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.681.376 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.681.376 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.687.254 I llama_new_context_with_model: n_ctx      = 8192
0.00.687.263 I llama_new_context_with_model: n_batch    = 2048
0.00.687.263 I llama_new_context_with_model: n_ubatch   = 512
0.00.687.264 I llama_new_context_with_model: flash_attn = 0
0.00.687.267 I llama_new_context_with_model: freq_base  = 10000.0
0.00.687.268 I llama_new_context_with_model: freq_scale = 1
0.00.718.062 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.718.102 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.718.228 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.720.829 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.833 I llama_new_context_with_model: graph nodes  = 601
0.00.720.834 I llama_new_context_with_model: graph splits = 1
0.00.720.859 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.298.499 I main: llama threadpool init, n_threads = 4
0.01.298.513 I 
0.01.298.617 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.298.620 I 
0.01.298.852 I sampler seed: 3899862201
0.01.298.865 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.298.872 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.298.873 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.298.873 I 
 maneuphering.

## Love in the Time of Cholera

**Introduction:**

The year is 1850. The world is gripped by the

0.12.155.308 I llama_perf_sampler_print:    sampling time =      49.35 ms /    33 runs   (    1.50 ms per token,   668.65 tokens per second)
0.12.155.311 I llama_perf_context_print:        load time =    1295.58 ms
0.12.155.312 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.155.314 I llama_perf_context_print:        eval time =   10759.27 ms /    32 runs   (  336.23 ms per token,     2.97 tokens per second)
0.12.155.314 I llama_perf_context_print:       total time =   10856.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4012 (7554aa46)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199130.91 ms
main:    total time = 199130.91 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.611 I build: 4012 (7554aa46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.816 I main: llama backend init
0.00.002.748 I main: load the model and apply lora adapter, if any
0.00.025.347 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.448 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.462 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.469 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.473 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.475 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.476 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.478 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.479 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.488 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.494 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.495 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.497 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.498 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.499 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.470 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.184 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.690 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.698 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.699 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.700 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.701 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.702 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.704 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.707 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.708 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.716 I llama_model_loader: - type  f32:   37 tensors
0.00.265.719 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.719 I llama_model_loader: - type q6_K:   19 tensors
0.00.451.904 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.340 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.274 I llm_load_vocab: special tokens cache size = 5
0.00.613.199 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.266 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.270 I llm_load_print_meta: arch             = gemma
0.00.613.271 I llm_load_print_meta: vocab type       = SPM
0.00.613.272 I llm_load_print_meta: n_vocab          = 256000
0.00.613.274 I llm_load_print_meta: n_merges         = 0
0.00.613.274 I llm_load_print_meta: vocab_only       = 0
0.00.613.275 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.275 I llm_load_print_meta: n_embd           = 2048
0.00.613.276 I llm_load_print_meta: n_layer          = 18
0.00.613.341 I llm_load_print_meta: n_head           = 8
0.00.613.351 I llm_load_print_meta: n_head_kv        = 1
0.00.613.351 I llm_load_print_meta: n_rot            = 256
0.00.613.352 I llm_load_print_meta: n_swa            = 0
0.00.613.352 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.353 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.358 I llm_load_print_meta: n_gqa            = 8
0.00.613.363 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.368 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.369 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.371 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.372 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.372 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.373 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.379 I llm_load_print_meta: n_ff             = 16384
0.00.613.380 I llm_load_print_meta: n_expert         = 0
0.00.613.380 I llm_load_print_meta: n_expert_used    = 0
0.00.613.381 I llm_load_print_meta: causal attn      = 1
0.00.613.381 I llm_load_print_meta: pooling type     = 0
0.00.613.381 I llm_load_print_meta: rope type        = 2
0.00.613.382 I llm_load_print_meta: rope scaling     = linear
0.00.613.383 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.384 I llm_load_print_meta: freq_scale_train = 1
0.00.613.384 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.386 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.386 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.387 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.387 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.387 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.397 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.398 I llm_load_print_meta: model type       = 2B
0.00.613.399 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.613.400 I llm_load_print_meta: model params     = 2.51 B
0.00.613.409 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.613.410 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.410 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.411 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.422 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.423 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.424 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.424 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.430 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.432 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.432 I llm_load_print_meta: max token length = 93
0.00.674.292 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.680.049 I llama_new_context_with_model: n_ctx      = 8192
0.00.680.056 I llama_new_context_with_model: n_batch    = 2048
0.00.680.056 I llama_new_context_with_model: n_ubatch   = 512
0.00.680.057 I llama_new_context_with_model: flash_attn = 0
0.00.680.059 I llama_new_context_with_model: freq_base  = 10000.0
0.00.680.060 I llama_new_context_with_model: freq_scale = 1
0.00.709.870 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.709.913 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.710.037 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.641 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.712.645 I llama_new_context_with_model: graph nodes  = 601
0.00.712.646 I llama_new_context_with_model: graph splits = 1
0.00.712.672 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.289.511 I main: llama threadpool init, n_threads = 4
0.01.289.523 I 
0.01.289.628 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.289.631 I 
0.01.289.860 I sampler seed: 774874608
0.01.289.872 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.289.879 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.289.880 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.289.880 I 
 maneupher.

I'm not sure if I understand the question. Could you please rephrase it?

I apologize, but I am unable to assist

0.12.180.292 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.06 tokens per second)
0.12.180.295 I llama_perf_context_print:        load time =    1286.67 ms
0.12.180.297 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.180.298 I llama_perf_context_print:        eval time =   10793.94 ms /    32 runs   (  337.31 ms per token,     2.96 tokens per second)
0.12.180.299 I llama_perf_context_print:       total time =   10890.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.805s
user	50m10.422s
sys	0m6.324s
