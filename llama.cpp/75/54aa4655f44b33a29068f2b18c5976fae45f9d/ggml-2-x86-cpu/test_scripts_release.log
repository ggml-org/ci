+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.528 I build: 4012 (7554aa46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.001.834 I main: load the model and apply lora adapter, if any
0.00.022.455 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.464 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.472 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.477 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.478 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.482 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.483 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.484 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.484 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.484 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.485 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.490 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.490 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.491 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.491 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.492 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.746 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.360 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.161 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.170 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.170 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.171 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.171 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.172 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.173 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.175 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.176 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.177 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.178 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.179 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.182 I llama_model_loader: - type  f32:   37 tensors
0.00.132.183 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.322 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.463 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.025 I llm_load_vocab: special tokens cache size = 5
0.00.273.117 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.133 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.133 I llm_load_print_meta: arch             = gemma
0.00.273.134 I llm_load_print_meta: vocab type       = SPM
0.00.273.135 I llm_load_print_meta: n_vocab          = 256000
0.00.273.135 I llm_load_print_meta: n_merges         = 0
0.00.273.136 I llm_load_print_meta: vocab_only       = 0
0.00.273.136 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.136 I llm_load_print_meta: n_embd           = 2048
0.00.273.137 I llm_load_print_meta: n_layer          = 18
0.00.273.149 I llm_load_print_meta: n_head           = 8
0.00.273.150 I llm_load_print_meta: n_head_kv        = 1
0.00.273.151 I llm_load_print_meta: n_rot            = 256
0.00.273.151 I llm_load_print_meta: n_swa            = 0
0.00.273.151 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.151 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.152 I llm_load_print_meta: n_gqa            = 8
0.00.273.153 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.154 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.155 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.156 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.157 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.157 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.157 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.158 I llm_load_print_meta: n_ff             = 16384
0.00.273.159 I llm_load_print_meta: n_expert         = 0
0.00.273.159 I llm_load_print_meta: n_expert_used    = 0
0.00.273.159 I llm_load_print_meta: causal attn      = 1
0.00.273.160 I llm_load_print_meta: pooling type     = 0
0.00.273.160 I llm_load_print_meta: rope type        = 2
0.00.273.160 I llm_load_print_meta: rope scaling     = linear
0.00.273.161 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.162 I llm_load_print_meta: freq_scale_train = 1
0.00.273.163 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.163 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.163 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.163 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.164 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.164 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.164 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.164 I llm_load_print_meta: model type       = 2B
0.00.273.165 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.166 I llm_load_print_meta: model params     = 2.51 B
0.00.273.167 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.167 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.167 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.168 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.168 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.168 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.169 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.169 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.170 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.170 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.170 I llm_load_print_meta: max token length = 93
0.00.376.558 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.376.567 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.376.567 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.376.568 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.376.568 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.376.569 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.381.847 I llama_new_context_with_model: n_ctx      = 8192
0.00.381.852 I llama_new_context_with_model: n_batch    = 2048
0.00.381.852 I llama_new_context_with_model: n_ubatch   = 512
0.00.381.853 I llama_new_context_with_model: flash_attn = 0
0.00.381.855 I llama_new_context_with_model: freq_base  = 10000.0
0.00.381.856 I llama_new_context_with_model: freq_scale = 1
0.00.410.878 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.410.897 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.410.998 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.412.277 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.412.284 I llama_new_context_with_model: graph nodes  = 601
0.00.412.285 I llama_new_context_with_model: graph splits = 1
0.00.412.287 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.504.216 I main: llama threadpool init, n_threads = 4
0.00.504.231 I 
0.00.504.309 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.504.312 I 
0.00.504.355 I sampler seed: 3311836319
0.00.504.366 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.504.370 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.504.371 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.504.371 I 
 increasities and provide a brief justification for your answer.

I cannot generate responses that are sexually suggestive in nature. [end of text]


0.02.198.179 I llama_perf_sampler_print:    sampling time =       3.75 ms /    25 runs   (    0.15 ms per token,  6666.67 tokens per second)
0.02.198.181 I llama_perf_context_print:        load time =     502.36 ms
0.02.198.183 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.198.184 I llama_perf_context_print:        eval time =    1679.13 ms /    24 runs   (   69.96 ms per token,    14.29 tokens per second)
0.02.198.186 I llama_perf_context_print:       total time =    1693.97 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.544 I build: 4012 (7554aa46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.001.843 I main: load the model and apply lora adapter, if any
0.00.022.238 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.252 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.259 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.260 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.263 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.264 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.265 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.266 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.266 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.267 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.271 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.272 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.272 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.273 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.273 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.790 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.213 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.048 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.055 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.056 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.056 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.057 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.057 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.058 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.060 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.062 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.063 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.063 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.064 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.068 I llama_model_loader: - type  f32:   37 tensors
0.00.132.069 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.347 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.991 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.598 I llm_load_vocab: special tokens cache size = 5
0.00.266.400 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.414 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.415 I llm_load_print_meta: arch             = gemma
0.00.266.415 I llm_load_print_meta: vocab type       = SPM
0.00.266.418 I llm_load_print_meta: n_vocab          = 256000
0.00.266.418 I llm_load_print_meta: n_merges         = 0
0.00.266.419 I llm_load_print_meta: vocab_only       = 0
0.00.266.419 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.419 I llm_load_print_meta: n_embd           = 2048
0.00.266.420 I llm_load_print_meta: n_layer          = 18
0.00.266.432 I llm_load_print_meta: n_head           = 8
0.00.266.433 I llm_load_print_meta: n_head_kv        = 1
0.00.266.433 I llm_load_print_meta: n_rot            = 256
0.00.266.434 I llm_load_print_meta: n_swa            = 0
0.00.266.434 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.434 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.435 I llm_load_print_meta: n_gqa            = 8
0.00.266.437 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.438 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.439 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.441 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.442 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.442 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.442 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.443 I llm_load_print_meta: n_ff             = 16384
0.00.266.443 I llm_load_print_meta: n_expert         = 0
0.00.266.444 I llm_load_print_meta: n_expert_used    = 0
0.00.266.446 I llm_load_print_meta: causal attn      = 1
0.00.266.446 I llm_load_print_meta: pooling type     = 0
0.00.266.447 I llm_load_print_meta: rope type        = 2
0.00.266.447 I llm_load_print_meta: rope scaling     = linear
0.00.266.449 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.450 I llm_load_print_meta: freq_scale_train = 1
0.00.266.450 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.450 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.451 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.451 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.451 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.452 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.452 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.452 I llm_load_print_meta: model type       = 2B
0.00.266.453 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.454 I llm_load_print_meta: model params     = 2.51 B
0.00.266.455 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.455 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.456 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.456 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.457 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.457 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.457 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.458 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.458 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.459 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.459 I llm_load_print_meta: max token length = 93
0.00.364.750 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.976 I llama_new_context_with_model: n_ctx      = 8192
0.00.369.982 I llama_new_context_with_model: n_batch    = 2048
0.00.369.982 I llama_new_context_with_model: n_ubatch   = 512
0.00.369.983 I llama_new_context_with_model: flash_attn = 0
0.00.369.985 I llama_new_context_with_model: freq_base  = 10000.0
0.00.369.986 I llama_new_context_with_model: freq_scale = 1
0.00.400.603 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.400.620 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.400.717 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.402.006 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.402.011 I llama_new_context_with_model: graph nodes  = 601
0.00.402.012 I llama_new_context_with_model: graph splits = 1
0.00.402.013 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.491.412 I main: llama threadpool init, n_threads = 4
0.00.491.427 I 
0.00.491.504 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.491.507 I 
0.00.491.551 I sampler seed: 1154580249
0.00.491.563 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.566 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.491.566 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.567 I 
 increasities in the text are explained.

The provided text does not contain any information regarding the explanation of increasities, so I am unable to provide an explanation

0.02.710.980 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6763.68 tokens per second)
0.02.710.983 I llama_perf_context_print:        load time =     489.55 ms
0.02.710.984 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.710.985 I llama_perf_context_print:        eval time =    2200.39 ms /    32 runs   (   68.76 ms per token,    14.54 tokens per second)
0.02.710.986 I llama_perf_context_print:       total time =    2219.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.538 I build: 4012 (7554aa46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.805 I main: llama backend init
0.00.002.076 I main: load the model and apply lora adapter, if any
0.00.028.309 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.028.319 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.028.327 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.332 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.333 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.337 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.338 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.338 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.339 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.339 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.340 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.344 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.345 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.345 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.346 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.028.346 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.481 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.137.760 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.144.600 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.144.607 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.144.607 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.144.608 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.144.608 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.144.609 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.144.610 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.144.612 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.144.612 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.144.613 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.144.613 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.144.614 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.144.618 I llama_model_loader: - type  f32:   37 tensors
0.00.144.619 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.877 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.927 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.462 I llm_load_vocab: special tokens cache size = 5
0.00.283.373 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.388 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.389 I llm_load_print_meta: arch             = gemma
0.00.283.390 I llm_load_print_meta: vocab type       = SPM
0.00.283.390 I llm_load_print_meta: n_vocab          = 256000
0.00.283.391 I llm_load_print_meta: n_merges         = 0
0.00.283.391 I llm_load_print_meta: vocab_only       = 0
0.00.283.391 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.392 I llm_load_print_meta: n_embd           = 2048
0.00.283.392 I llm_load_print_meta: n_layer          = 18
0.00.283.404 I llm_load_print_meta: n_head           = 8
0.00.283.405 I llm_load_print_meta: n_head_kv        = 1
0.00.283.405 I llm_load_print_meta: n_rot            = 256
0.00.283.406 I llm_load_print_meta: n_swa            = 0
0.00.283.406 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.406 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.407 I llm_load_print_meta: n_gqa            = 8
0.00.283.408 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.409 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.410 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.411 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.412 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.412 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.412 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.413 I llm_load_print_meta: n_ff             = 16384
0.00.283.413 I llm_load_print_meta: n_expert         = 0
0.00.283.414 I llm_load_print_meta: n_expert_used    = 0
0.00.283.414 I llm_load_print_meta: causal attn      = 1
0.00.283.414 I llm_load_print_meta: pooling type     = 0
0.00.283.415 I llm_load_print_meta: rope type        = 2
0.00.283.415 I llm_load_print_meta: rope scaling     = linear
0.00.283.417 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.417 I llm_load_print_meta: freq_scale_train = 1
0.00.283.417 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.418 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.418 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.418 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.419 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.419 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.419 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.419 I llm_load_print_meta: model type       = 2B
0.00.283.420 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.421 I llm_load_print_meta: model params     = 2.51 B
0.00.283.422 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.422 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.422 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.423 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.423 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.423 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.424 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.424 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.424 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.425 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.425 I llm_load_print_meta: max token length = 93
0.00.383.036 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.383.042 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.383.043 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.383.044 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.383.045 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.383.045 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.388.198 I llama_new_context_with_model: n_ctx      = 8192
0.00.388.205 I llama_new_context_with_model: n_batch    = 2048
0.00.388.206 I llama_new_context_with_model: n_ubatch   = 512
0.00.388.206 I llama_new_context_with_model: flash_attn = 0
0.00.388.208 I llama_new_context_with_model: freq_base  = 10000.0
0.00.388.209 I llama_new_context_with_model: freq_scale = 1
0.00.418.386 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.418.402 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.418.499 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.419.768 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.419.775 I llama_new_context_with_model: graph nodes  = 601
0.00.419.775 I llama_new_context_with_model: graph splits = 1
0.00.419.777 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.510.860 I main: llama threadpool init, n_threads = 4
0.00.510.876 I 
0.00.510.971 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.510.974 I 
0.00.511.015 I sampler seed: 3300567292
0.00.511.025 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.511.027 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.511.028 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.511.028 I 
 increasels. [end of text]


0.00.784.386 I llama_perf_sampler_print:    sampling time =       0.64 ms /     5 runs   (    0.13 ms per token,  7788.16 tokens per second)
0.00.784.388 I llama_perf_context_print:        load time =     508.76 ms
0.00.784.390 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.784.391 I llama_perf_context_print:        eval time =     270.29 ms /     4 runs   (   67.57 ms per token,    14.80 tokens per second)
0.00.784.392 I llama_perf_context_print:       total time =     273.53 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.601 I build: 4012 (7554aa46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.833 I main: llama backend init
0.00.001.986 I main: load the model and apply lora adapter, if any
0.00.022.365 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.374 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.382 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.388 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.389 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.393 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.394 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.395 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.395 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.396 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.396 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.401 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.401 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.402 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.402 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.403 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.973 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.602 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.443 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.449 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.450 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.450 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.451 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.452 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.452 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.454 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.455 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.456 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.456 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.457 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.460 I llama_model_loader: - type  f32:   37 tensors
0.00.132.461 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.352 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.696 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.159 I llm_load_vocab: special tokens cache size = 5
0.00.260.712 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.727 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.728 I llm_load_print_meta: arch             = gemma
0.00.260.728 I llm_load_print_meta: vocab type       = SPM
0.00.260.729 I llm_load_print_meta: n_vocab          = 256000
0.00.260.729 I llm_load_print_meta: n_merges         = 0
0.00.260.730 I llm_load_print_meta: vocab_only       = 0
0.00.260.730 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.730 I llm_load_print_meta: n_embd           = 2048
0.00.260.731 I llm_load_print_meta: n_layer          = 18
0.00.260.743 I llm_load_print_meta: n_head           = 8
0.00.260.744 I llm_load_print_meta: n_head_kv        = 1
0.00.260.745 I llm_load_print_meta: n_rot            = 256
0.00.260.745 I llm_load_print_meta: n_swa            = 0
0.00.260.746 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.746 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.747 I llm_load_print_meta: n_gqa            = 8
0.00.260.748 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.749 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.750 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.752 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.752 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.752 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.753 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.753 I llm_load_print_meta: n_ff             = 16384
0.00.260.754 I llm_load_print_meta: n_expert         = 0
0.00.260.756 I llm_load_print_meta: n_expert_used    = 0
0.00.260.756 I llm_load_print_meta: causal attn      = 1
0.00.260.757 I llm_load_print_meta: pooling type     = 0
0.00.260.757 I llm_load_print_meta: rope type        = 2
0.00.260.757 I llm_load_print_meta: rope scaling     = linear
0.00.260.758 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.759 I llm_load_print_meta: freq_scale_train = 1
0.00.260.759 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.760 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.760 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.760 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.760 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.761 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.761 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.762 I llm_load_print_meta: model type       = 2B
0.00.260.763 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.764 I llm_load_print_meta: model params     = 2.51 B
0.00.260.765 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.766 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.767 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.768 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.768 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.768 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.769 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.769 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.769 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.770 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.770 I llm_load_print_meta: max token length = 93
0.00.334.010 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.334.016 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.338.957 I llama_new_context_with_model: n_ctx      = 8192
0.00.338.963 I llama_new_context_with_model: n_batch    = 2048
0.00.338.963 I llama_new_context_with_model: n_ubatch   = 512
0.00.338.964 I llama_new_context_with_model: flash_attn = 0
0.00.338.966 I llama_new_context_with_model: freq_base  = 10000.0
0.00.338.967 I llama_new_context_with_model: freq_scale = 1
0.00.367.008 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.367.024 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.367.116 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.333 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.368.339 I llama_new_context_with_model: graph nodes  = 601
0.00.368.340 I llama_new_context_with_model: graph splits = 1
0.00.368.341 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.101 I main: llama threadpool init, n_threads = 4
0.00.460.114 I 
0.00.460.189 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.460.192 I 
0.00.460.232 I sampler seed: 879946446
0.00.460.244 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.252 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.255 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.255 I 
 maneuvously.

I'm not sure what you're trying to say. Can you please rephrase your question? [end of text]


0.02.411.660 I llama_perf_sampler_print:    sampling time =       4.08 ms /    28 runs   (    0.15 ms per token,  6856.02 tokens per second)
0.02.411.663 I llama_perf_context_print:        load time =     458.08 ms
0.02.411.664 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.411.667 I llama_perf_context_print:        eval time =    1934.82 ms /    27 runs   (   71.66 ms per token,    13.95 tokens per second)
0.02.411.668 I llama_perf_context_print:       total time =    1951.57 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.635s
user	0m27.386s
sys	0m9.553s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4012 (7554aa46)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32180.67 ms
main:    total time = 32180.67 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.543 I build: 4012 (7554aa46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.001.829 I main: load the model and apply lora adapter, if any
0.00.022.477 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.486 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.494 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.503 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.507 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.511 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.511 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.513 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.513 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.514 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.514 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.517 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.518 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.518 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.519 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.520 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.450 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.250 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.086 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.093 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.093 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.094 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.094 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.095 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.096 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.098 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.099 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.099 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.100 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.101 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.104 I llama_model_loader: - type  f32:   37 tensors
0.00.132.105 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.106 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.326 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.242 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.745 I llm_load_vocab: special tokens cache size = 5
0.00.267.558 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.575 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.575 I llm_load_print_meta: arch             = gemma
0.00.267.576 I llm_load_print_meta: vocab type       = SPM
0.00.267.577 I llm_load_print_meta: n_vocab          = 256000
0.00.267.577 I llm_load_print_meta: n_merges         = 0
0.00.267.577 I llm_load_print_meta: vocab_only       = 0
0.00.267.578 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.578 I llm_load_print_meta: n_embd           = 2048
0.00.267.578 I llm_load_print_meta: n_layer          = 18
0.00.267.590 I llm_load_print_meta: n_head           = 8
0.00.267.591 I llm_load_print_meta: n_head_kv        = 1
0.00.267.591 I llm_load_print_meta: n_rot            = 256
0.00.267.592 I llm_load_print_meta: n_swa            = 0
0.00.267.592 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.592 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.593 I llm_load_print_meta: n_gqa            = 8
0.00.267.594 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.595 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.596 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.597 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.597 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.598 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.598 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.599 I llm_load_print_meta: n_ff             = 16384
0.00.267.599 I llm_load_print_meta: n_expert         = 0
0.00.267.600 I llm_load_print_meta: n_expert_used    = 0
0.00.267.600 I llm_load_print_meta: causal attn      = 1
0.00.267.601 I llm_load_print_meta: pooling type     = 0
0.00.267.601 I llm_load_print_meta: rope type        = 2
0.00.267.602 I llm_load_print_meta: rope scaling     = linear
0.00.267.603 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.604 I llm_load_print_meta: freq_scale_train = 1
0.00.267.604 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.604 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.605 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.605 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.605 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.605 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.606 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.606 I llm_load_print_meta: model type       = 2B
0.00.267.606 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.607 I llm_load_print_meta: model params     = 2.51 B
0.00.267.608 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.608 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.609 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.609 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.609 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.610 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.610 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.610 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.611 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.611 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.611 I llm_load_print_meta: max token length = 93
0.00.330.129 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.330.137 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.330.137 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.330.138 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.330.138 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.330.139 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.335.418 I llama_new_context_with_model: n_ctx      = 8192
0.00.335.423 I llama_new_context_with_model: n_batch    = 2048
0.00.335.424 I llama_new_context_with_model: n_ubatch   = 512
0.00.335.424 I llama_new_context_with_model: flash_attn = 0
0.00.335.427 I llama_new_context_with_model: freq_base  = 10000.0
0.00.335.427 I llama_new_context_with_model: freq_scale = 1
0.00.365.887 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.365.902 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.365.995 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.298 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.367.303 I llama_new_context_with_model: graph nodes  = 601
0.00.367.303 I llama_new_context_with_model: graph splits = 1
0.00.367.306 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.175 I main: llama threadpool init, n_threads = 4
0.00.450.190 I 
0.00.450.268 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.450.268 I 
0.00.450.309 I sampler seed: 2434901446
0.00.450.318 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.320 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.321 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.321 I 
 fufillingly.

I am unable to generate responses that are sexually suggestive in nature. My purpose is to assist with tasks that are within the boundaries of ethical

0.02.120.257 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6720.98 tokens per second)
0.02.120.260 I llama_perf_context_print:        load time =     448.32 ms
0.02.120.261 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.120.262 I llama_perf_context_print:        eval time =    1650.36 ms /    32 runs   (   51.57 ms per token,    19.39 tokens per second)
0.02.120.263 I llama_perf_context_print:       total time =    1670.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4012 (7554aa46)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32001.08 ms
main:    total time = 32001.08 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.555 I build: 4012 (7554aa46) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.777 I main: llama backend init
0.00.001.876 I main: load the model and apply lora adapter, if any
0.00.022.404 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.419 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.426 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.430 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.435 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.437 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.438 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.439 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.440 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.440 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.445 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.445 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.447 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.448 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.449 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.552 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.316 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.173 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.179 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.179 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.180 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.180 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.181 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.182 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.185 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.186 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.190 I llama_model_loader: - type  f32:   37 tensors
0.00.132.191 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.192 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.756 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.464 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.958 I llm_load_vocab: special tokens cache size = 5
0.00.264.478 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.495 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.495 I llm_load_print_meta: arch             = gemma
0.00.264.496 I llm_load_print_meta: vocab type       = SPM
0.00.264.497 I llm_load_print_meta: n_vocab          = 256000
0.00.264.497 I llm_load_print_meta: n_merges         = 0
0.00.264.497 I llm_load_print_meta: vocab_only       = 0
0.00.264.498 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.498 I llm_load_print_meta: n_embd           = 2048
0.00.264.499 I llm_load_print_meta: n_layer          = 18
0.00.264.510 I llm_load_print_meta: n_head           = 8
0.00.264.511 I llm_load_print_meta: n_head_kv        = 1
0.00.264.512 I llm_load_print_meta: n_rot            = 256
0.00.264.512 I llm_load_print_meta: n_swa            = 0
0.00.264.513 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.513 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.514 I llm_load_print_meta: n_gqa            = 8
0.00.264.515 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.516 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.517 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.518 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.518 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.519 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.519 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.520 I llm_load_print_meta: n_ff             = 16384
0.00.264.520 I llm_load_print_meta: n_expert         = 0
0.00.264.521 I llm_load_print_meta: n_expert_used    = 0
0.00.264.521 I llm_load_print_meta: causal attn      = 1
0.00.264.521 I llm_load_print_meta: pooling type     = 0
0.00.264.521 I llm_load_print_meta: rope type        = 2
0.00.264.522 I llm_load_print_meta: rope scaling     = linear
0.00.264.523 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.524 I llm_load_print_meta: freq_scale_train = 1
0.00.264.524 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.525 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.525 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.525 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.525 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.526 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.526 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.526 I llm_load_print_meta: model type       = 2B
0.00.264.527 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.528 I llm_load_print_meta: model params     = 2.51 B
0.00.264.529 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.529 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.530 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.530 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.531 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.531 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.531 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.532 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.532 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.533 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.533 I llm_load_print_meta: max token length = 93
0.00.324.593 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.329.827 I llama_new_context_with_model: n_ctx      = 8192
0.00.329.833 I llama_new_context_with_model: n_batch    = 2048
0.00.329.834 I llama_new_context_with_model: n_ubatch   = 512
0.00.329.834 I llama_new_context_with_model: flash_attn = 0
0.00.329.836 I llama_new_context_with_model: freq_base  = 10000.0
0.00.329.837 I llama_new_context_with_model: freq_scale = 1
0.00.358.378 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.358.395 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.358.485 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.759 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.359.765 I llama_new_context_with_model: graph nodes  = 601
0.00.359.766 I llama_new_context_with_model: graph splits = 1
0.00.359.768 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.753 I main: llama threadpool init, n_threads = 4
0.00.441.768 I 
0.00.441.859 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.441.864 I 
0.00.441.917 I sampler seed: 3999816662
0.00.441.928 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.932 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.441.933 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.933 I 
 seconded,
I need to rewrite the given sentence with the correct usage of tenses and structure.

**Original sentence:**

> The company hired a new

0.02.037.296 I llama_perf_sampler_print:    sampling time =       4.63 ms /    33 runs   (    0.14 ms per token,  7128.97 tokens per second)
0.02.037.299 I llama_perf_context_print:        load time =     439.85 ms
0.02.037.301 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.037.303 I llama_perf_context_print:        eval time =    1576.06 ms /    32 runs   (   49.25 ms per token,    20.30 tokens per second)
0.02.037.304 I llama_perf_context_print:       total time =    1595.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.466s
user	8m14.669s
sys	0m7.001s
