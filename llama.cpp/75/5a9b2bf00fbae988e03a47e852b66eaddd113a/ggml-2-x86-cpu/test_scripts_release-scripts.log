+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.604 I build: 3922 (755a9b2b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.821 I main: llama backend init
0.00.001.925 I main: load the model and apply lora adapter, if any
0.00.022.356 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.405 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.416 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.421 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.425 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.431 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.432 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.432 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.433 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.433 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.434 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.439 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.439 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.440 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.440 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.441 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.036 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.424 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.329 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.337 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.338 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.338 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.339 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.340 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.341 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.345 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.346 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.347 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.347 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.349 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.352 I llama_model_loader: - type  f32:   37 tensors
0.00.133.356 I llama_model_loader: - type q8_0:  127 tensors
0.00.220.289 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.764 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.257.220 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.261.877 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.270.915 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.271.498 I llm_load_vocab: special tokens cache size = 5
0.00.292.313 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.292.332 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.292.332 I llm_load_print_meta: arch             = gemma
0.00.292.333 I llm_load_print_meta: vocab type       = SPM
0.00.292.334 I llm_load_print_meta: n_vocab          = 256000
0.00.292.334 I llm_load_print_meta: n_merges         = 0
0.00.292.335 I llm_load_print_meta: vocab_only       = 0
0.00.292.335 I llm_load_print_meta: n_ctx_train      = 8192
0.00.292.336 I llm_load_print_meta: n_embd           = 2048
0.00.292.336 I llm_load_print_meta: n_layer          = 18
0.00.292.347 I llm_load_print_meta: n_head           = 8
0.00.292.348 I llm_load_print_meta: n_head_kv        = 1
0.00.292.348 I llm_load_print_meta: n_rot            = 256
0.00.292.349 I llm_load_print_meta: n_swa            = 0
0.00.292.349 I llm_load_print_meta: n_embd_head_k    = 256
0.00.292.349 I llm_load_print_meta: n_embd_head_v    = 256
0.00.292.350 I llm_load_print_meta: n_gqa            = 8
0.00.292.351 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.292.352 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.292.353 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.292.354 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.292.355 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.292.355 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.292.355 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.292.356 I llm_load_print_meta: n_ff             = 16384
0.00.292.356 I llm_load_print_meta: n_expert         = 0
0.00.292.357 I llm_load_print_meta: n_expert_used    = 0
0.00.292.357 I llm_load_print_meta: causal attn      = 1
0.00.292.357 I llm_load_print_meta: pooling type     = 0
0.00.292.358 I llm_load_print_meta: rope type        = 2
0.00.292.358 I llm_load_print_meta: rope scaling     = linear
0.00.292.359 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.292.360 I llm_load_print_meta: freq_scale_train = 1
0.00.292.360 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.292.361 I llm_load_print_meta: rope_finetuned   = unknown
0.00.292.361 I llm_load_print_meta: ssm_d_conv       = 0
0.00.292.361 I llm_load_print_meta: ssm_d_inner      = 0
0.00.292.361 I llm_load_print_meta: ssm_d_state      = 0
0.00.292.361 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.292.362 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.292.362 I llm_load_print_meta: model type       = 2B
0.00.292.363 I llm_load_print_meta: model ftype      = Q8_0
0.00.292.364 I llm_load_print_meta: model params     = 2.51 B
0.00.292.365 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.292.365 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.292.366 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.292.366 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.292.366 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.292.367 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.292.367 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.292.367 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.292.368 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.292.368 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.292.368 I llm_load_print_meta: max token length = 93
0.00.292.388 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.392.290 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.392.298 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.392.299 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.392.300 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.392.300 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.392.301 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.397.597 I llama_new_context_with_model: n_ctx      = 8192
0.00.397.604 I llama_new_context_with_model: n_batch    = 2048
0.00.397.604 I llama_new_context_with_model: n_ubatch   = 512
0.00.397.605 I llama_new_context_with_model: flash_attn = 0
0.00.397.608 I llama_new_context_with_model: freq_base  = 10000.0
0.00.397.609 I llama_new_context_with_model: freq_scale = 1
0.00.426.718 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.426.731 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.426.822 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.427.708 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.427.717 I llama_new_context_with_model: graph nodes  = 601
0.00.427.717 I llama_new_context_with_model: graph splits = 1
0.00.427.719 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.519.998 I main: llama threadpool init, n_threads = 4
0.00.520.009 I 
0.00.520.083 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.520.087 I 
0.00.520.127 I sampler seed: 892588970
0.00.520.137 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.520.144 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.520.147 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.520.148 I 
 increasels, but also wears a pair of glasses and a bow tie.

Who is this?

The answer is: Sherlock Holmes.

He is a

0.02.819.769 I llama_perf_sampler_print:    sampling time =       5.35 ms /    33 runs   (    0.16 ms per token,  6164.77 tokens per second)
0.02.819.772 I llama_perf_context_print:        load time =     518.05 ms
0.02.819.773 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.819.775 I llama_perf_context_print:        eval time =    2280.71 ms /    32 runs   (   71.27 ms per token,    14.03 tokens per second)
0.02.819.776 I llama_perf_context_print:       total time =    2299.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.562 I build: 3922 (755a9b2b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.001.854 I main: load the model and apply lora adapter, if any
0.00.022.355 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.365 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.373 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.374 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.378 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.379 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.380 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.381 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.381 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.382 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.386 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.386 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.387 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.387 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.388 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.969 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.162 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.018 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.025 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.025 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.026 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.027 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.028 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.029 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.032 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.032 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.033 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.033 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.034 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.037 I llama_model_loader: - type  f32:   37 tensors
0.00.133.040 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.994 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.111 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.252.504 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.256.762 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.265.406 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.003 I llm_load_vocab: special tokens cache size = 5
0.00.286.639 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.655 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.656 I llm_load_print_meta: arch             = gemma
0.00.286.656 I llm_load_print_meta: vocab type       = SPM
0.00.286.657 I llm_load_print_meta: n_vocab          = 256000
0.00.286.657 I llm_load_print_meta: n_merges         = 0
0.00.286.658 I llm_load_print_meta: vocab_only       = 0
0.00.286.658 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.658 I llm_load_print_meta: n_embd           = 2048
0.00.286.659 I llm_load_print_meta: n_layer          = 18
0.00.286.670 I llm_load_print_meta: n_head           = 8
0.00.286.671 I llm_load_print_meta: n_head_kv        = 1
0.00.286.671 I llm_load_print_meta: n_rot            = 256
0.00.286.672 I llm_load_print_meta: n_swa            = 0
0.00.286.672 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.672 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.674 I llm_load_print_meta: n_gqa            = 8
0.00.286.675 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.675 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.676 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.678 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.678 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.678 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.678 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.679 I llm_load_print_meta: n_ff             = 16384
0.00.286.680 I llm_load_print_meta: n_expert         = 0
0.00.286.680 I llm_load_print_meta: n_expert_used    = 0
0.00.286.680 I llm_load_print_meta: causal attn      = 1
0.00.286.681 I llm_load_print_meta: pooling type     = 0
0.00.286.681 I llm_load_print_meta: rope type        = 2
0.00.286.681 I llm_load_print_meta: rope scaling     = linear
0.00.286.683 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.684 I llm_load_print_meta: freq_scale_train = 1
0.00.286.684 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.684 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.684 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.685 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.685 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.685 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.685 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.686 I llm_load_print_meta: model type       = 2B
0.00.286.687 I llm_load_print_meta: model ftype      = Q8_0
0.00.286.688 I llm_load_print_meta: model params     = 2.51 B
0.00.286.689 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.286.689 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.690 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.690 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.691 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.691 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.691 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.691 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.692 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.692 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.692 I llm_load_print_meta: max token length = 93
0.00.286.721 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.381.532 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.386.690 I llama_new_context_with_model: n_ctx      = 8192
0.00.386.696 I llama_new_context_with_model: n_batch    = 2048
0.00.386.696 I llama_new_context_with_model: n_ubatch   = 512
0.00.386.696 I llama_new_context_with_model: flash_attn = 0
0.00.386.699 I llama_new_context_with_model: freq_base  = 10000.0
0.00.386.700 I llama_new_context_with_model: freq_scale = 1
0.00.415.978 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.415.993 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.416.081 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.416.924 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.416.932 I llama_new_context_with_model: graph nodes  = 601
0.00.416.932 I llama_new_context_with_model: graph splits = 1
0.00.416.934 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.504.874 I main: llama threadpool init, n_threads = 4
0.00.504.885 I 
0.00.504.960 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.504.964 I 
0.00.505.002 I sampler seed: 2637556225
0.00.505.012 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.505.016 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.505.016 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.505.017 I 
 increasively.

I am having trouble understanding the concept of possessive adjectives.

Can someone please explain them in simple terms?

A possessive adjective is a word

0.02.727.590 I llama_perf_sampler_print:    sampling time =       4.72 ms /    33 runs   (    0.14 ms per token,  6994.49 tokens per second)
0.02.727.592 I llama_perf_context_print:        load time =     503.00 ms
0.02.727.594 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.727.595 I llama_perf_context_print:        eval time =    2204.56 ms /    32 runs   (   68.89 ms per token,    14.52 tokens per second)
0.02.727.596 I llama_perf_context_print:       total time =    2222.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.556 I build: 3922 (755a9b2b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.001.999 I main: load the model and apply lora adapter, if any
0.00.022.207 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.261 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.272 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.278 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.278 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.283 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.283 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.284 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.285 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.285 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.285 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.290 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.290 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.291 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.291 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.293 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.793 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.487 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.139.353 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.139.362 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.139.363 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.139.364 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.139.364 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.139.365 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.139.366 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.139.369 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.139.370 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.139.371 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.139.372 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.139.372 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.139.377 I llama_model_loader: - type  f32:   37 tensors
0.00.139.380 I llama_model_loader: - type q8_0:  127 tensors
0.00.224.328 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.307 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.260.820 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.265.564 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.276.248 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.276.952 I llm_load_vocab: special tokens cache size = 5
0.00.298.104 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.298.125 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.298.126 I llm_load_print_meta: arch             = gemma
0.00.298.126 I llm_load_print_meta: vocab type       = SPM
0.00.298.127 I llm_load_print_meta: n_vocab          = 256000
0.00.298.127 I llm_load_print_meta: n_merges         = 0
0.00.298.127 I llm_load_print_meta: vocab_only       = 0
0.00.298.128 I llm_load_print_meta: n_ctx_train      = 8192
0.00.298.128 I llm_load_print_meta: n_embd           = 2048
0.00.298.129 I llm_load_print_meta: n_layer          = 18
0.00.298.141 I llm_load_print_meta: n_head           = 8
0.00.298.142 I llm_load_print_meta: n_head_kv        = 1
0.00.298.143 I llm_load_print_meta: n_rot            = 256
0.00.298.143 I llm_load_print_meta: n_swa            = 0
0.00.298.144 I llm_load_print_meta: n_embd_head_k    = 256
0.00.298.144 I llm_load_print_meta: n_embd_head_v    = 256
0.00.298.145 I llm_load_print_meta: n_gqa            = 8
0.00.298.146 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.298.147 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.298.147 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.298.148 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.298.149 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.298.149 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.298.149 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.298.150 I llm_load_print_meta: n_ff             = 16384
0.00.298.151 I llm_load_print_meta: n_expert         = 0
0.00.298.151 I llm_load_print_meta: n_expert_used    = 0
0.00.298.151 I llm_load_print_meta: causal attn      = 1
0.00.298.151 I llm_load_print_meta: pooling type     = 0
0.00.298.152 I llm_load_print_meta: rope type        = 2
0.00.298.152 I llm_load_print_meta: rope scaling     = linear
0.00.298.153 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.298.154 I llm_load_print_meta: freq_scale_train = 1
0.00.298.154 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.298.155 I llm_load_print_meta: rope_finetuned   = unknown
0.00.298.155 I llm_load_print_meta: ssm_d_conv       = 0
0.00.298.155 I llm_load_print_meta: ssm_d_inner      = 0
0.00.298.155 I llm_load_print_meta: ssm_d_state      = 0
0.00.298.156 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.298.156 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.298.157 I llm_load_print_meta: model type       = 2B
0.00.298.158 I llm_load_print_meta: model ftype      = Q8_0
0.00.298.159 I llm_load_print_meta: model params     = 2.51 B
0.00.298.160 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.298.160 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.298.161 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.298.162 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.298.163 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.298.163 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.298.163 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.298.164 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.298.164 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.298.164 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.298.165 I llm_load_print_meta: max token length = 93
0.00.298.185 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.375.151 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.375.159 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.375.160 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.375.160 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.375.161 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.375.162 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.380.185 I llama_new_context_with_model: n_ctx      = 8192
0.00.380.192 I llama_new_context_with_model: n_batch    = 2048
0.00.380.193 I llama_new_context_with_model: n_ubatch   = 512
0.00.380.193 I llama_new_context_with_model: flash_attn = 0
0.00.380.197 I llama_new_context_with_model: freq_base  = 10000.0
0.00.380.198 I llama_new_context_with_model: freq_scale = 1
0.00.411.038 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.411.056 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.411.151 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.412.038 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.412.047 I llama_new_context_with_model: graph nodes  = 601
0.00.412.048 I llama_new_context_with_model: graph splits = 1
0.00.412.050 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.506.130 I main: llama threadpool init, n_threads = 4
0.00.506.141 I 
0.00.506.219 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.506.223 I 
0.00.506.266 I sampler seed: 2907407052
0.00.506.276 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.506.279 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.506.280 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.506.280 I 
 increamically.

I'm sorry, I am unable to generate responses that are sexually suggestive in nature. My purpose is to assist with tasks and questions that

0.02.798.362 I llama_perf_sampler_print:    sampling time =       4.73 ms /    33 runs   (    0.14 ms per token,  6975.27 tokens per second)
0.02.798.365 I llama_perf_context_print:        load time =     504.11 ms
0.02.798.366 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.798.368 I llama_perf_context_print:        eval time =    2273.63 ms /    32 runs   (   71.05 ms per token,    14.07 tokens per second)
0.02.798.369 I llama_perf_context_print:       total time =    2292.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.565 I build: 3922 (755a9b2b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.786 I main: llama backend init
0.00.001.941 I main: load the model and apply lora adapter, if any
0.00.022.555 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.605 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.615 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.622 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.626 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.632 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.633 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.635 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.636 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.637 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.638 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.644 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.645 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.646 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.650 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.651 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.318 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.722 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.649 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.656 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.657 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.657 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.658 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.659 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.659 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.662 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.662 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.663 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.664 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.665 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.668 I llama_model_loader: - type  f32:   37 tensors
0.00.133.671 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.112 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.559 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.251.971 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.256.135 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.265.445 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.071 I llm_load_vocab: special tokens cache size = 5
0.00.286.690 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.708 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.709 I llm_load_print_meta: arch             = gemma
0.00.286.709 I llm_load_print_meta: vocab type       = SPM
0.00.286.710 I llm_load_print_meta: n_vocab          = 256000
0.00.286.710 I llm_load_print_meta: n_merges         = 0
0.00.286.710 I llm_load_print_meta: vocab_only       = 0
0.00.286.711 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.711 I llm_load_print_meta: n_embd           = 2048
0.00.286.711 I llm_load_print_meta: n_layer          = 18
0.00.286.724 I llm_load_print_meta: n_head           = 8
0.00.286.725 I llm_load_print_meta: n_head_kv        = 1
0.00.286.725 I llm_load_print_meta: n_rot            = 256
0.00.286.725 I llm_load_print_meta: n_swa            = 0
0.00.286.726 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.726 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.727 I llm_load_print_meta: n_gqa            = 8
0.00.286.728 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.729 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.730 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.731 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.731 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.731 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.732 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.733 I llm_load_print_meta: n_ff             = 16384
0.00.286.733 I llm_load_print_meta: n_expert         = 0
0.00.286.733 I llm_load_print_meta: n_expert_used    = 0
0.00.286.734 I llm_load_print_meta: causal attn      = 1
0.00.286.734 I llm_load_print_meta: pooling type     = 0
0.00.286.734 I llm_load_print_meta: rope type        = 2
0.00.286.735 I llm_load_print_meta: rope scaling     = linear
0.00.286.736 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.737 I llm_load_print_meta: freq_scale_train = 1
0.00.286.737 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.737 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.738 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.738 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.738 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.738 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.739 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.739 I llm_load_print_meta: model type       = 2B
0.00.286.740 I llm_load_print_meta: model ftype      = Q8_0
0.00.286.741 I llm_load_print_meta: model params     = 2.51 B
0.00.286.741 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.286.742 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.742 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.743 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.743 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.743 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.743 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.744 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.744 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.745 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.745 I llm_load_print_meta: max token length = 93
0.00.286.772 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.357.323 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.357.334 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.362.423 I llama_new_context_with_model: n_ctx      = 8192
0.00.362.431 I llama_new_context_with_model: n_batch    = 2048
0.00.362.431 I llama_new_context_with_model: n_ubatch   = 512
0.00.362.432 I llama_new_context_with_model: flash_attn = 0
0.00.362.436 I llama_new_context_with_model: freq_base  = 10000.0
0.00.362.437 I llama_new_context_with_model: freq_scale = 1
0.00.392.244 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.392.260 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.392.361 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.284 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.393.291 I llama_new_context_with_model: graph nodes  = 601
0.00.393.292 I llama_new_context_with_model: graph splits = 1
0.00.393.294 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.705 I main: llama threadpool init, n_threads = 4
0.00.489.719 I 
0.00.489.805 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.489.808 I 
0.00.489.851 I sampler seed: 85075594
0.00.489.863 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.867 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.489.867 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.868 I 
 increasively to the size of the Earth, engulfing all land and sea.

Answer: The provided statement is speculative and not scientifically plausible. [end of text]


0.02.804.209 I llama_perf_sampler_print:    sampling time =       4.71 ms /    31 runs   (    0.15 ms per token,  6574.76 tokens per second)
0.02.804.211 I llama_perf_context_print:        load time =     487.74 ms
0.02.804.213 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.804.215 I llama_perf_context_print:        eval time =    2296.60 ms /    30 runs   (   76.55 ms per token,    13.06 tokens per second)
0.02.804.216 I llama_perf_context_print:       total time =    2314.51 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.885s
user	0m39.576s
sys	0m9.528s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3922 (755a9b2b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32050.98 ms
main:    total time = 32050.98 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.578 I build: 3922 (755a9b2b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.775 I main: llama backend init
0.00.001.867 I main: load the model and apply lora adapter, if any
0.00.022.083 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.133 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.140 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.146 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.147 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.152 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.152 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.153 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.153 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.154 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.154 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.158 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.159 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.160 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.160 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.161 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.788 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.192 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.061 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.068 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.068 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.069 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.069 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.070 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.071 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.073 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.074 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.075 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.076 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.077 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.080 I llama_model_loader: - type  f32:   37 tensors
0.00.133.083 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.084 I llama_model_loader: - type q6_K:   19 tensors
0.00.221.430 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.089 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.259.690 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.264.642 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.275.669 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.276.420 I llm_load_vocab: special tokens cache size = 5
0.00.297.518 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.297.537 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.297.538 I llm_load_print_meta: arch             = gemma
0.00.297.538 I llm_load_print_meta: vocab type       = SPM
0.00.297.540 I llm_load_print_meta: n_vocab          = 256000
0.00.297.540 I llm_load_print_meta: n_merges         = 0
0.00.297.541 I llm_load_print_meta: vocab_only       = 0
0.00.297.541 I llm_load_print_meta: n_ctx_train      = 8192
0.00.297.541 I llm_load_print_meta: n_embd           = 2048
0.00.297.542 I llm_load_print_meta: n_layer          = 18
0.00.297.553 I llm_load_print_meta: n_head           = 8
0.00.297.554 I llm_load_print_meta: n_head_kv        = 1
0.00.297.554 I llm_load_print_meta: n_rot            = 256
0.00.297.555 I llm_load_print_meta: n_swa            = 0
0.00.297.555 I llm_load_print_meta: n_embd_head_k    = 256
0.00.297.556 I llm_load_print_meta: n_embd_head_v    = 256
0.00.297.557 I llm_load_print_meta: n_gqa            = 8
0.00.297.558 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.297.559 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.297.560 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.297.561 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.297.561 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.297.561 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.297.562 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.297.563 I llm_load_print_meta: n_ff             = 16384
0.00.297.563 I llm_load_print_meta: n_expert         = 0
0.00.297.563 I llm_load_print_meta: n_expert_used    = 0
0.00.297.564 I llm_load_print_meta: causal attn      = 1
0.00.297.564 I llm_load_print_meta: pooling type     = 0
0.00.297.564 I llm_load_print_meta: rope type        = 2
0.00.297.565 I llm_load_print_meta: rope scaling     = linear
0.00.297.566 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.297.566 I llm_load_print_meta: freq_scale_train = 1
0.00.297.567 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.297.567 I llm_load_print_meta: rope_finetuned   = unknown
0.00.297.567 I llm_load_print_meta: ssm_d_conv       = 0
0.00.297.567 I llm_load_print_meta: ssm_d_inner      = 0
0.00.297.568 I llm_load_print_meta: ssm_d_state      = 0
0.00.297.568 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.297.568 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.297.569 I llm_load_print_meta: model type       = 2B
0.00.297.569 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.297.570 I llm_load_print_meta: model params     = 2.51 B
0.00.297.571 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.297.571 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.297.572 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.297.572 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.297.572 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.297.573 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.297.573 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.297.573 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.297.574 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.297.574 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.297.574 I llm_load_print_meta: max token length = 93
0.00.297.597 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.356.908 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.356.917 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.356.918 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.356.918 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.356.919 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.356.919 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.362.093 I llama_new_context_with_model: n_ctx      = 8192
0.00.362.099 I llama_new_context_with_model: n_batch    = 2048
0.00.362.100 I llama_new_context_with_model: n_ubatch   = 512
0.00.362.100 I llama_new_context_with_model: flash_attn = 0
0.00.362.103 I llama_new_context_with_model: freq_base  = 10000.0
0.00.362.104 I llama_new_context_with_model: freq_scale = 1
0.00.393.385 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.393.400 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.393.493 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.358 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.394.366 I llama_new_context_with_model: graph nodes  = 601
0.00.394.366 I llama_new_context_with_model: graph splits = 1
0.00.394.368 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.260 I main: llama threadpool init, n_threads = 4
0.00.478.274 I 
0.00.478.353 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.478.357 I 
0.00.478.396 I sampler seed: 2515956838
0.00.478.407 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.410 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.478.411 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.411 I 
 seconally. [end of text]


0.00.689.569 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8250.83 tokens per second)
0.00.689.573 I llama_perf_context_print:        load time =     476.37 ms
0.00.689.574 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.689.576 I llama_perf_context_print:        eval time =     208.19 ms /     4 runs   (   52.05 ms per token,    19.21 tokens per second)
0.00.689.577 I llama_perf_context_print:       total time =     211.32 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3922 (755a9b2b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32181.97 ms
main:    total time = 32181.97 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.584 I build: 3922 (755a9b2b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.779 I main: llama backend init
0.00.001.926 I main: load the model and apply lora adapter, if any
0.00.021.917 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.929 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.940 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.941 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.945 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.946 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.947 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.947 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.948 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.948 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.953 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.953 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.954 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.955 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.955 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.840 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.181 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.199 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.206 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.206 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.207 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.208 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.209 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.210 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.212 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.213 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.217 I llama_model_loader: - type  f32:   37 tensors
0.00.133.220 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.221 I llama_model_loader: - type q6_K:   19 tensors
0.00.220.832 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.285 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.257.747 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.262.429 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.272.439 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.273.085 I llm_load_vocab: special tokens cache size = 5
0.00.293.942 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.293.959 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.293.960 I llm_load_print_meta: arch             = gemma
0.00.293.961 I llm_load_print_meta: vocab type       = SPM
0.00.293.962 I llm_load_print_meta: n_vocab          = 256000
0.00.293.962 I llm_load_print_meta: n_merges         = 0
0.00.293.963 I llm_load_print_meta: vocab_only       = 0
0.00.293.963 I llm_load_print_meta: n_ctx_train      = 8192
0.00.293.963 I llm_load_print_meta: n_embd           = 2048
0.00.293.964 I llm_load_print_meta: n_layer          = 18
0.00.293.975 I llm_load_print_meta: n_head           = 8
0.00.293.976 I llm_load_print_meta: n_head_kv        = 1
0.00.293.977 I llm_load_print_meta: n_rot            = 256
0.00.293.977 I llm_load_print_meta: n_swa            = 0
0.00.293.977 I llm_load_print_meta: n_embd_head_k    = 256
0.00.293.977 I llm_load_print_meta: n_embd_head_v    = 256
0.00.293.978 I llm_load_print_meta: n_gqa            = 8
0.00.293.980 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.293.980 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.293.981 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.293.982 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.293.983 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.293.983 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.293.983 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.293.984 I llm_load_print_meta: n_ff             = 16384
0.00.293.984 I llm_load_print_meta: n_expert         = 0
0.00.293.985 I llm_load_print_meta: n_expert_used    = 0
0.00.293.985 I llm_load_print_meta: causal attn      = 1
0.00.293.985 I llm_load_print_meta: pooling type     = 0
0.00.293.986 I llm_load_print_meta: rope type        = 2
0.00.293.986 I llm_load_print_meta: rope scaling     = linear
0.00.293.987 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.293.988 I llm_load_print_meta: freq_scale_train = 1
0.00.293.988 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.293.988 I llm_load_print_meta: rope_finetuned   = unknown
0.00.293.989 I llm_load_print_meta: ssm_d_conv       = 0
0.00.293.989 I llm_load_print_meta: ssm_d_inner      = 0
0.00.293.989 I llm_load_print_meta: ssm_d_state      = 0
0.00.293.989 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.293.990 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.293.990 I llm_load_print_meta: model type       = 2B
0.00.293.991 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.293.992 I llm_load_print_meta: model params     = 2.51 B
0.00.293.993 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.293.993 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.293.993 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.293.994 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.293.994 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.293.994 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.293.994 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.293.995 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.293.995 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.293.995 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.293.996 I llm_load_print_meta: max token length = 93
0.00.294.015 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.350.587 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.355.746 I llama_new_context_with_model: n_ctx      = 8192
0.00.355.753 I llama_new_context_with_model: n_batch    = 2048
0.00.355.753 I llama_new_context_with_model: n_ubatch   = 512
0.00.355.754 I llama_new_context_with_model: flash_attn = 0
0.00.355.757 I llama_new_context_with_model: freq_base  = 10000.0
0.00.355.758 I llama_new_context_with_model: freq_scale = 1
0.00.385.641 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.385.658 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.385.756 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.621 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.386.629 I llama_new_context_with_model: graph nodes  = 601
0.00.386.629 I llama_new_context_with_model: graph splits = 1
0.00.386.631 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.619 I main: llama threadpool init, n_threads = 4
0.00.468.631 I 
0.00.468.704 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.468.707 I 
0.00.468.748 I sampler seed: 3563466075
0.00.468.757 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.759 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.468.760 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.760 I 
 increamically. 

I am unable to generate a response as requested as I am unable to generate responses that promote or depict harmful activities or endangerment of any

0.02.118.848 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6918.24 tokens per second)
0.02.118.850 I llama_perf_context_print:        load time =     466.67 ms
0.02.118.851 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.118.852 I llama_perf_context_print:        eval time =    1632.02 ms /    32 runs   (   51.00 ms per token,    19.61 tokens per second)
0.02.118.853 I llama_perf_context_print:       total time =    1650.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.015s
user	8m10.065s
sys	0m7.053s
