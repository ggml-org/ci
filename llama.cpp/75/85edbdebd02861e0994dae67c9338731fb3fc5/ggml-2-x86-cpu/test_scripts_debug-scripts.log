+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4361 (7585edbd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.000.863 I main: load the model and apply lora adapter, if any
0.00.023.454 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.466 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.551 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.559 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.561 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.567 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.568 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.569 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.570 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.572 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.573 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.579 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.580 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.582 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.583 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.585 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.661 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.807 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.592 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.601 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.603 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.604 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.605 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.606 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.608 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.612 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.613 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.614 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.615 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.352.617 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.626 I llama_model_loader: - type  f32:   37 tensors
0.00.352.628 I llama_model_loader: - type q8_0:  127 tensors
0.00.568.831 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.625.213 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.626.083 I llm_load_vocab: special tokens cache size = 5
0.00.812.276 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.812.353 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.812.354 I llm_load_print_meta: arch             = gemma
0.00.812.355 I llm_load_print_meta: vocab type       = SPM
0.00.812.356 I llm_load_print_meta: n_vocab          = 256000
0.00.812.358 I llm_load_print_meta: n_merges         = 0
0.00.812.359 I llm_load_print_meta: vocab_only       = 0
0.00.812.359 I llm_load_print_meta: n_ctx_train      = 8192
0.00.812.360 I llm_load_print_meta: n_embd           = 2048
0.00.812.360 I llm_load_print_meta: n_layer          = 18
0.00.812.424 I llm_load_print_meta: n_head           = 8
0.00.812.432 I llm_load_print_meta: n_head_kv        = 1
0.00.812.433 I llm_load_print_meta: n_rot            = 256
0.00.812.433 I llm_load_print_meta: n_swa            = 0
0.00.812.434 I llm_load_print_meta: n_embd_head_k    = 256
0.00.812.434 I llm_load_print_meta: n_embd_head_v    = 256
0.00.812.439 I llm_load_print_meta: n_gqa            = 8
0.00.812.444 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.812.449 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.812.450 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.812.453 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.812.453 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.812.454 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.812.455 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.812.465 I llm_load_print_meta: n_ff             = 16384
0.00.812.466 I llm_load_print_meta: n_expert         = 0
0.00.812.466 I llm_load_print_meta: n_expert_used    = 0
0.00.812.467 I llm_load_print_meta: causal attn      = 1
0.00.812.468 I llm_load_print_meta: pooling type     = 0
0.00.812.468 I llm_load_print_meta: rope type        = 2
0.00.812.469 I llm_load_print_meta: rope scaling     = linear
0.00.812.470 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.812.471 I llm_load_print_meta: freq_scale_train = 1
0.00.812.471 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.812.472 I llm_load_print_meta: rope_finetuned   = unknown
0.00.812.472 I llm_load_print_meta: ssm_d_conv       = 0
0.00.812.473 I llm_load_print_meta: ssm_d_inner      = 0
0.00.812.474 I llm_load_print_meta: ssm_d_state      = 0
0.00.812.475 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.812.475 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.812.477 I llm_load_print_meta: model type       = 2B
0.00.812.479 I llm_load_print_meta: model ftype      = Q8_0
0.00.812.480 I llm_load_print_meta: model params     = 2.51 B
0.00.812.480 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.812.481 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.812.482 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.812.482 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.812.483 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.812.483 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.812.484 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.812.484 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.812.490 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.812.491 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.812.492 I llm_load_print_meta: max token length = 93
0.00.913.775 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.913.784 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.913.785 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.913.785 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.913.786 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.913.787 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.919.672 I llama_new_context_with_model: n_seq_max     = 1
0.00.919.679 I llama_new_context_with_model: n_ctx         = 4096
0.00.919.680 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.919.680 I llama_new_context_with_model: n_batch       = 2048
0.00.919.681 I llama_new_context_with_model: n_ubatch      = 512
0.00.919.681 I llama_new_context_with_model: flash_attn    = 0
0.00.919.683 I llama_new_context_with_model: freq_base     = 10000.0
0.00.919.684 I llama_new_context_with_model: freq_scale    = 1
0.00.919.685 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.919.771 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.933.940 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.933.977 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.934.093 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.936.678 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.936.682 I llama_new_context_with_model: graph nodes  = 601
0.00.936.683 I llama_new_context_with_model: graph splits = 1
0.00.936.707 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.936.710 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.548.208 I main: llama threadpool init, n_threads = 4
0.01.548.225 I 
0.01.548.345 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.548.349 I 
0.01.548.592 I sampler seed: 1247287669
0.01.548.606 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.548.615 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.548.619 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.548.619 I 
 increadibly well with my questions.

I am unable to access the details of our conversation history due to privacy restrictions. However, I can confirm that our discussion

0.15.031.351 I llama_perf_sampler_print:    sampling time =      48.23 ms /    33 runs   (    1.46 ms per token,   684.25 tokens per second)
0.15.031.367 I llama_perf_context_print:        load time =    1547.25 ms
0.15.031.369 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.031.370 I llama_perf_context_print:        eval time =   13395.10 ms /    32 runs   (  418.60 ms per token,     2.39 tokens per second)
0.15.031.371 I llama_perf_context_print:       total time =   13483.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.621 I build: 4361 (7585edbd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.821 I main: llama backend init
0.00.000.829 I main: load the model and apply lora adapter, if any
0.00.023.078 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.169 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.183 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.184 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.190 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.194 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.195 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.197 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.198 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.199 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.205 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.207 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.209 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.210 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.212 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.362 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.134 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.928 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.935 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.937 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.938 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.939 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.941 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.942 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.964 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.971 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.972 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.973 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.351.975 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.984 I llama_model_loader: - type  f32:   37 tensors
0.00.351.986 I llama_model_loader: - type q8_0:  127 tensors
0.00.564.162 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.623.189 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.624.110 I llm_load_vocab: special tokens cache size = 5
0.00.810.750 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.810.826 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.810.827 I llm_load_print_meta: arch             = gemma
0.00.810.828 I llm_load_print_meta: vocab type       = SPM
0.00.810.829 I llm_load_print_meta: n_vocab          = 256000
0.00.810.832 I llm_load_print_meta: n_merges         = 0
0.00.810.832 I llm_load_print_meta: vocab_only       = 0
0.00.810.833 I llm_load_print_meta: n_ctx_train      = 8192
0.00.810.833 I llm_load_print_meta: n_embd           = 2048
0.00.810.833 I llm_load_print_meta: n_layer          = 18
0.00.810.900 I llm_load_print_meta: n_head           = 8
0.00.810.908 I llm_load_print_meta: n_head_kv        = 1
0.00.810.909 I llm_load_print_meta: n_rot            = 256
0.00.810.909 I llm_load_print_meta: n_swa            = 0
0.00.810.909 I llm_load_print_meta: n_embd_head_k    = 256
0.00.810.910 I llm_load_print_meta: n_embd_head_v    = 256
0.00.810.914 I llm_load_print_meta: n_gqa            = 8
0.00.810.919 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.810.924 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.810.926 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.810.927 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.810.928 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.810.928 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.810.929 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.810.934 I llm_load_print_meta: n_ff             = 16384
0.00.810.935 I llm_load_print_meta: n_expert         = 0
0.00.810.936 I llm_load_print_meta: n_expert_used    = 0
0.00.810.936 I llm_load_print_meta: causal attn      = 1
0.00.810.937 I llm_load_print_meta: pooling type     = 0
0.00.810.938 I llm_load_print_meta: rope type        = 2
0.00.810.939 I llm_load_print_meta: rope scaling     = linear
0.00.810.940 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.810.941 I llm_load_print_meta: freq_scale_train = 1
0.00.810.942 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.810.942 I llm_load_print_meta: rope_finetuned   = unknown
0.00.810.943 I llm_load_print_meta: ssm_d_conv       = 0
0.00.810.943 I llm_load_print_meta: ssm_d_inner      = 0
0.00.810.944 I llm_load_print_meta: ssm_d_state      = 0
0.00.810.944 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.810.945 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.810.946 I llm_load_print_meta: model type       = 2B
0.00.810.946 I llm_load_print_meta: model ftype      = Q8_0
0.00.810.947 I llm_load_print_meta: model params     = 2.51 B
0.00.810.948 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.810.949 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.810.950 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.810.950 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.810.951 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.810.951 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.810.952 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.810.952 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.810.959 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.810.961 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.810.961 I llm_load_print_meta: max token length = 93
0.00.908.365 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.914.086 I llama_new_context_with_model: n_seq_max     = 1
0.00.914.091 I llama_new_context_with_model: n_ctx         = 4096
0.00.914.092 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.914.092 I llama_new_context_with_model: n_batch       = 2048
0.00.914.093 I llama_new_context_with_model: n_ubatch      = 512
0.00.914.093 I llama_new_context_with_model: flash_attn    = 0
0.00.914.095 I llama_new_context_with_model: freq_base     = 10000.0
0.00.914.096 I llama_new_context_with_model: freq_scale    = 1
0.00.914.097 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.914.183 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.928.693 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.928.734 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.928.844 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.931.408 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.931.412 I llama_new_context_with_model: graph nodes  = 601
0.00.931.412 I llama_new_context_with_model: graph splits = 1
0.00.931.436 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.931.439 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.543.107 I main: llama threadpool init, n_threads = 4
0.01.543.125 I 
0.01.543.246 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.543.251 I 
0.01.543.486 I sampler seed: 2258610604
0.01.543.500 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.543.511 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.543.512 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.543.512 I 
 maneuvred.

I am unable to answer this question as it contains potentially offensive and discriminatory language. [end of text]


0.10.877.656 I llama_perf_sampler_print:    sampling time =      33.28 ms /    23 runs   (    1.45 ms per token,   691.02 tokens per second)
0.10.877.660 I llama_perf_context_print:        load time =    1542.19 ms
0.10.877.661 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.877.663 I llama_perf_context_print:        eval time =    9272.70 ms /    22 runs   (  421.49 ms per token,     2.37 tokens per second)
0.10.877.675 I llama_perf_context_print:       total time =    9334.56 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 4361 (7585edbd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.000.843 I main: load the model and apply lora adapter, if any
0.00.023.198 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.209 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.302 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.315 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.318 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.325 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.330 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.333 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.335 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.337 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.339 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.351 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.353 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.356 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.358 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.360 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.742 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.227 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.092 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.099 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.101 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.102 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.103 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.105 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.106 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.110 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.111 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.112 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.114 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.352.116 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.124 I llama_model_loader: - type  f32:   37 tensors
0.00.352.126 I llama_model_loader: - type q8_0:  127 tensors
0.00.563.534 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.627.892 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.628.870 I llm_load_vocab: special tokens cache size = 5
0.00.820.522 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.820.600 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.820.601 I llm_load_print_meta: arch             = gemma
0.00.820.602 I llm_load_print_meta: vocab type       = SPM
0.00.820.603 I llm_load_print_meta: n_vocab          = 256000
0.00.820.605 I llm_load_print_meta: n_merges         = 0
0.00.820.606 I llm_load_print_meta: vocab_only       = 0
0.00.820.606 I llm_load_print_meta: n_ctx_train      = 8192
0.00.820.607 I llm_load_print_meta: n_embd           = 2048
0.00.820.607 I llm_load_print_meta: n_layer          = 18
0.00.820.674 I llm_load_print_meta: n_head           = 8
0.00.820.684 I llm_load_print_meta: n_head_kv        = 1
0.00.820.685 I llm_load_print_meta: n_rot            = 256
0.00.820.686 I llm_load_print_meta: n_swa            = 0
0.00.820.686 I llm_load_print_meta: n_embd_head_k    = 256
0.00.820.687 I llm_load_print_meta: n_embd_head_v    = 256
0.00.820.694 I llm_load_print_meta: n_gqa            = 8
0.00.820.701 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.820.708 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.820.712 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.820.714 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.820.715 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.820.715 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.820.716 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.820.723 I llm_load_print_meta: n_ff             = 16384
0.00.820.734 I llm_load_print_meta: n_expert         = 0
0.00.820.737 I llm_load_print_meta: n_expert_used    = 0
0.00.820.738 I llm_load_print_meta: causal attn      = 1
0.00.820.738 I llm_load_print_meta: pooling type     = 0
0.00.820.739 I llm_load_print_meta: rope type        = 2
0.00.820.739 I llm_load_print_meta: rope scaling     = linear
0.00.820.742 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.820.742 I llm_load_print_meta: freq_scale_train = 1
0.00.820.743 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.820.744 I llm_load_print_meta: rope_finetuned   = unknown
0.00.820.756 I llm_load_print_meta: ssm_d_conv       = 0
0.00.820.757 I llm_load_print_meta: ssm_d_inner      = 0
0.00.820.758 I llm_load_print_meta: ssm_d_state      = 0
0.00.820.759 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.820.760 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.820.761 I llm_load_print_meta: model type       = 2B
0.00.820.765 I llm_load_print_meta: model ftype      = Q8_0
0.00.820.767 I llm_load_print_meta: model params     = 2.51 B
0.00.820.769 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.820.769 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.820.770 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.820.771 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.820.772 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.820.773 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.820.773 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.820.774 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.820.782 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.820.785 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.820.786 I llm_load_print_meta: max token length = 93
0.00.900.254 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.900.266 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.900.267 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.900.268 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.900.268 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.900.269 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.906.598 I llama_new_context_with_model: n_seq_max     = 1
0.00.906.605 I llama_new_context_with_model: n_ctx         = 4096
0.00.906.605 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.906.606 I llama_new_context_with_model: n_batch       = 2048
0.00.906.606 I llama_new_context_with_model: n_ubatch      = 512
0.00.906.607 I llama_new_context_with_model: flash_attn    = 0
0.00.906.609 I llama_new_context_with_model: freq_base     = 10000.0
0.00.906.610 I llama_new_context_with_model: freq_scale    = 1
0.00.906.611 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.906.707 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.921.167 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.921.208 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.921.324 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.923.973 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.923.977 I llama_new_context_with_model: graph nodes  = 601
0.00.923.977 I llama_new_context_with_model: graph splits = 1
0.00.924.003 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.924.007 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.534.007 I main: llama threadpool init, n_threads = 4
0.01.534.025 I 
0.01.534.161 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.534.165 I 
0.01.534.415 I sampler seed: 3692602247
0.01.534.429 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.534.448 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.534.451 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.534.451 I 
 increamically.

Answer: Slowly but surely. [end of text]


0.06.179.849 I llama_perf_sampler_print:    sampling time =      16.68 ms /    12 runs   (    1.39 ms per token,   719.51 tokens per second)
0.06.179.853 I llama_perf_context_print:        load time =    1533.07 ms
0.06.179.855 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.179.857 I llama_perf_context_print:        eval time =    4613.95 ms /    11 runs   (  419.45 ms per token,     2.38 tokens per second)
0.06.179.858 I llama_perf_context_print:       total time =    4645.85 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4361 (7585edbd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.023.130 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.142 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.228 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.240 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.245 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.250 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.251 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.253 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.254 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.256 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.260 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.266 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.268 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.269 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.273 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.274 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.248.525 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.351.720 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.375.503 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.375.514 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.375.516 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.375.517 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.375.518 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.375.520 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.375.522 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.375.525 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.375.527 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.375.528 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.375.529 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.375.531 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.375.541 I llama_model_loader: - type  f32:   37 tensors
0.00.375.543 I llama_model_loader: - type q8_0:  127 tensors
0.00.608.933 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.680.661 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.681.637 I llm_load_vocab: special tokens cache size = 5
0.00.874.314 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.874.390 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.874.394 I llm_load_print_meta: arch             = gemma
0.00.874.395 I llm_load_print_meta: vocab type       = SPM
0.00.874.396 I llm_load_print_meta: n_vocab          = 256000
0.00.874.399 I llm_load_print_meta: n_merges         = 0
0.00.874.399 I llm_load_print_meta: vocab_only       = 0
0.00.874.400 I llm_load_print_meta: n_ctx_train      = 8192
0.00.874.400 I llm_load_print_meta: n_embd           = 2048
0.00.874.401 I llm_load_print_meta: n_layer          = 18
0.00.874.467 I llm_load_print_meta: n_head           = 8
0.00.874.477 I llm_load_print_meta: n_head_kv        = 1
0.00.874.478 I llm_load_print_meta: n_rot            = 256
0.00.874.479 I llm_load_print_meta: n_swa            = 0
0.00.874.479 I llm_load_print_meta: n_embd_head_k    = 256
0.00.874.479 I llm_load_print_meta: n_embd_head_v    = 256
0.00.874.491 I llm_load_print_meta: n_gqa            = 8
0.00.874.496 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.874.504 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.874.505 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.874.517 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.874.519 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.874.519 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.874.519 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.874.525 I llm_load_print_meta: n_ff             = 16384
0.00.874.525 I llm_load_print_meta: n_expert         = 0
0.00.874.528 I llm_load_print_meta: n_expert_used    = 0
0.00.874.529 I llm_load_print_meta: causal attn      = 1
0.00.874.529 I llm_load_print_meta: pooling type     = 0
0.00.874.529 I llm_load_print_meta: rope type        = 2
0.00.874.530 I llm_load_print_meta: rope scaling     = linear
0.00.874.531 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.874.532 I llm_load_print_meta: freq_scale_train = 1
0.00.874.532 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.874.532 I llm_load_print_meta: rope_finetuned   = unknown
0.00.874.532 I llm_load_print_meta: ssm_d_conv       = 0
0.00.874.533 I llm_load_print_meta: ssm_d_inner      = 0
0.00.874.533 I llm_load_print_meta: ssm_d_state      = 0
0.00.874.533 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.874.534 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.874.536 I llm_load_print_meta: model type       = 2B
0.00.874.537 I llm_load_print_meta: model ftype      = Q8_0
0.00.874.538 I llm_load_print_meta: model params     = 2.51 B
0.00.874.539 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.874.539 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.874.540 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.874.540 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.874.541 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.874.541 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.874.541 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.874.551 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.874.558 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.874.559 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.874.560 I llm_load_print_meta: max token length = 93
0.00.947.136 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.947.149 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.952.919 I llama_new_context_with_model: n_seq_max     = 1
0.00.952.927 I llama_new_context_with_model: n_ctx         = 4096
0.00.952.927 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.952.928 I llama_new_context_with_model: n_batch       = 2048
0.00.952.928 I llama_new_context_with_model: n_ubatch      = 512
0.00.952.928 I llama_new_context_with_model: flash_attn    = 0
0.00.952.931 I llama_new_context_with_model: freq_base     = 10000.0
0.00.952.932 I llama_new_context_with_model: freq_scale    = 1
0.00.952.933 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.953.022 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.967.483 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.967.527 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.967.650 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.970.255 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.970.260 I llama_new_context_with_model: graph nodes  = 601
0.00.970.260 I llama_new_context_with_model: graph splits = 1
0.00.970.283 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.970.286 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.580.306 I main: llama threadpool init, n_threads = 4
0.01.580.324 I 
0.01.580.456 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.580.460 I 
0.01.580.703 I sampler seed: 2053328264
0.01.580.718 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.580.731 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.580.731 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.580.732 I 
 seconary.

## The Importance of Intuition in Decision Making

**Intuition** is the ability to make decisions based on a deep understanding of a situation without

0.15.266.050 I llama_perf_sampler_print:    sampling time =      48.71 ms /    33 runs   (    1.48 ms per token,   677.42 tokens per second)
0.15.266.054 I llama_perf_context_print:        load time =    1579.37 ms
0.15.266.056 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.266.058 I llama_perf_context_print:        eval time =   13596.86 ms /    32 runs   (  424.90 ms per token,     2.35 tokens per second)
0.15.266.060 I llama_perf_context_print:       total time =   13685.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m56.892s
user	2m58.196s
sys	0m9.296s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4361 (7585edbd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186958.59 ms
main:    total time = 186958.59 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4361 (7585edbd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.000.841 I main: load the model and apply lora adapter, if any
0.00.023.147 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.157 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.243 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.254 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.256 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.261 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.263 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.264 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.266 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.267 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.268 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.274 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.278 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.279 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.280 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.282 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.902 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.684 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.522 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.530 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.532 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.533 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.534 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.535 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.537 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.541 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.542 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.543 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.545 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.354.547 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.555 I llama_model_loader: - type  f32:   37 tensors
0.00.354.557 I llama_model_loader: - type q4_K:  108 tensors
0.00.354.558 I llama_model_loader: - type q6_K:   19 tensors
0.00.575.866 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.648.018 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.649.091 I llm_load_vocab: special tokens cache size = 5
0.00.839.553 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.839.625 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.839.626 I llm_load_print_meta: arch             = gemma
0.00.839.627 I llm_load_print_meta: vocab type       = SPM
0.00.839.628 I llm_load_print_meta: n_vocab          = 256000
0.00.839.631 I llm_load_print_meta: n_merges         = 0
0.00.839.632 I llm_load_print_meta: vocab_only       = 0
0.00.839.632 I llm_load_print_meta: n_ctx_train      = 8192
0.00.839.632 I llm_load_print_meta: n_embd           = 2048
0.00.839.633 I llm_load_print_meta: n_layer          = 18
0.00.839.701 I llm_load_print_meta: n_head           = 8
0.00.839.711 I llm_load_print_meta: n_head_kv        = 1
0.00.839.711 I llm_load_print_meta: n_rot            = 256
0.00.839.712 I llm_load_print_meta: n_swa            = 0
0.00.839.712 I llm_load_print_meta: n_embd_head_k    = 256
0.00.839.713 I llm_load_print_meta: n_embd_head_v    = 256
0.00.839.718 I llm_load_print_meta: n_gqa            = 8
0.00.839.722 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.839.727 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.839.729 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.839.730 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.839.731 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.839.732 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.839.732 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.839.737 I llm_load_print_meta: n_ff             = 16384
0.00.839.738 I llm_load_print_meta: n_expert         = 0
0.00.839.738 I llm_load_print_meta: n_expert_used    = 0
0.00.839.738 I llm_load_print_meta: causal attn      = 1
0.00.839.739 I llm_load_print_meta: pooling type     = 0
0.00.839.739 I llm_load_print_meta: rope type        = 2
0.00.839.740 I llm_load_print_meta: rope scaling     = linear
0.00.839.741 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.839.743 I llm_load_print_meta: freq_scale_train = 1
0.00.839.743 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.839.743 I llm_load_print_meta: rope_finetuned   = unknown
0.00.839.744 I llm_load_print_meta: ssm_d_conv       = 0
0.00.839.744 I llm_load_print_meta: ssm_d_inner      = 0
0.00.839.744 I llm_load_print_meta: ssm_d_state      = 0
0.00.839.745 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.839.748 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.839.749 I llm_load_print_meta: model type       = 2B
0.00.839.750 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.839.750 I llm_load_print_meta: model params     = 2.51 B
0.00.839.751 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.839.751 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.839.752 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.839.752 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.839.753 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.839.753 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.839.753 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.839.754 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.839.759 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.839.761 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.839.761 I llm_load_print_meta: max token length = 93
0.00.903.327 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.903.334 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.903.335 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.903.336 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.903.337 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.903.338 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.909.150 I llama_new_context_with_model: n_seq_max     = 1
0.00.909.158 I llama_new_context_with_model: n_ctx         = 4096
0.00.909.159 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.909.159 I llama_new_context_with_model: n_batch       = 2048
0.00.909.159 I llama_new_context_with_model: n_ubatch      = 512
0.00.909.160 I llama_new_context_with_model: flash_attn    = 0
0.00.909.163 I llama_new_context_with_model: freq_base     = 10000.0
0.00.909.164 I llama_new_context_with_model: freq_scale    = 1
0.00.909.164 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.909.252 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.924.095 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.924.137 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.924.261 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.926.959 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.926.963 I llama_new_context_with_model: graph nodes  = 601
0.00.926.963 I llama_new_context_with_model: graph splits = 1
0.00.926.987 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.926.989 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.506.970 I main: llama threadpool init, n_threads = 4
0.01.506.985 I 
0.01.507.109 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.507.113 I 
0.01.507.346 I sampler seed: 2640374262
0.01.507.359 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.507.367 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.507.369 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.507.369 I 
 seconally!

I am unable to generate a response because I am unable to comprehend the context or intent of the provided prompt. [end of text]


0.10.911.699 I llama_perf_sampler_print:    sampling time =      40.99 ms /    28 runs   (    1.46 ms per token,   683.09 tokens per second)
0.10.911.702 I llama_perf_context_print:        load time =    1506.04 ms
0.10.911.705 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.911.706 I llama_perf_context_print:        eval time =    9329.69 ms /    27 runs   (  345.54 ms per token,     2.89 tokens per second)
0.10.911.719 I llama_perf_context_print:       total time =    9404.74 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4361 (7585edbd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186312.51 ms
main:    total time = 186312.51 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4361 (7585edbd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.000.867 I main: load the model and apply lora adapter, if any
0.00.023.300 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.396 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.409 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.411 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.417 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.421 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.423 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.424 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.425 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.427 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.433 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.434 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.435 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.437 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.438 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.046 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.560 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.411 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.420 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.422 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.423 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.424 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.425 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.427 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.431 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.432 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.440 I llama_model_loader: - type  f32:   37 tensors
0.00.353.442 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.443 I llama_model_loader: - type q6_K:   19 tensors
0.00.575.210 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.647.387 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.648.369 I llm_load_vocab: special tokens cache size = 5
0.00.834.634 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.834.703 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.834.704 I llm_load_print_meta: arch             = gemma
0.00.834.705 I llm_load_print_meta: vocab type       = SPM
0.00.834.706 I llm_load_print_meta: n_vocab          = 256000
0.00.834.708 I llm_load_print_meta: n_merges         = 0
0.00.834.709 I llm_load_print_meta: vocab_only       = 0
0.00.834.709 I llm_load_print_meta: n_ctx_train      = 8192
0.00.834.710 I llm_load_print_meta: n_embd           = 2048
0.00.834.710 I llm_load_print_meta: n_layer          = 18
0.00.834.775 I llm_load_print_meta: n_head           = 8
0.00.834.782 I llm_load_print_meta: n_head_kv        = 1
0.00.834.783 I llm_load_print_meta: n_rot            = 256
0.00.834.784 I llm_load_print_meta: n_swa            = 0
0.00.834.785 I llm_load_print_meta: n_embd_head_k    = 256
0.00.834.785 I llm_load_print_meta: n_embd_head_v    = 256
0.00.834.790 I llm_load_print_meta: n_gqa            = 8
0.00.834.795 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.834.800 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.834.802 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.834.804 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.834.805 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.834.806 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.834.806 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.834.811 I llm_load_print_meta: n_ff             = 16384
0.00.834.811 I llm_load_print_meta: n_expert         = 0
0.00.834.812 I llm_load_print_meta: n_expert_used    = 0
0.00.834.812 I llm_load_print_meta: causal attn      = 1
0.00.834.813 I llm_load_print_meta: pooling type     = 0
0.00.834.817 I llm_load_print_meta: rope type        = 2
0.00.834.817 I llm_load_print_meta: rope scaling     = linear
0.00.834.819 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.834.820 I llm_load_print_meta: freq_scale_train = 1
0.00.834.821 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.834.821 I llm_load_print_meta: rope_finetuned   = unknown
0.00.834.822 I llm_load_print_meta: ssm_d_conv       = 0
0.00.834.822 I llm_load_print_meta: ssm_d_inner      = 0
0.00.834.823 I llm_load_print_meta: ssm_d_state      = 0
0.00.834.824 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.834.824 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.834.825 I llm_load_print_meta: model type       = 2B
0.00.834.827 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.834.828 I llm_load_print_meta: model params     = 2.51 B
0.00.834.829 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.834.829 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.834.830 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.834.830 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.834.832 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.834.832 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.834.833 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.834.833 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.834.839 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.834.841 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.834.841 I llm_load_print_meta: max token length = 93
0.00.895.319 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.901.039 I llama_new_context_with_model: n_seq_max     = 1
0.00.901.045 I llama_new_context_with_model: n_ctx         = 4096
0.00.901.046 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.901.046 I llama_new_context_with_model: n_batch       = 2048
0.00.901.047 I llama_new_context_with_model: n_ubatch      = 512
0.00.901.047 I llama_new_context_with_model: flash_attn    = 0
0.00.901.049 I llama_new_context_with_model: freq_base     = 10000.0
0.00.901.050 I llama_new_context_with_model: freq_scale    = 1
0.00.901.051 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.901.134 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.915.766 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.915.803 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.915.918 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.918.565 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.918.568 I llama_new_context_with_model: graph nodes  = 601
0.00.918.569 I llama_new_context_with_model: graph splits = 1
0.00.918.592 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.918.595 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.496.911 I main: llama threadpool init, n_threads = 4
0.01.496.928 I 
0.01.497.051 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.497.055 I 
0.01.497.296 I sampler seed: 1859945635
0.01.497.310 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.497.320 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.497.322 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.497.322 I 
 fufilling with your eyes, a soft chuckle escapes your lips, and you lean into the crook of your armchair, feet tucked beneath you. The world outside fades

0.12.646.466 I llama_perf_sampler_print:    sampling time =      48.27 ms /    33 runs   (    1.46 ms per token,   683.60 tokens per second)
0.12.646.470 I llama_perf_context_print:        load time =    1495.95 ms
0.12.646.471 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.646.473 I llama_perf_context_print:        eval time =   11061.19 ms /    32 runs   (  345.66 ms per token,     2.89 tokens per second)
0.12.646.486 I llama_perf_context_print:       total time =   11149.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.671s
user	46m41.308s
sys	0m6.451s
