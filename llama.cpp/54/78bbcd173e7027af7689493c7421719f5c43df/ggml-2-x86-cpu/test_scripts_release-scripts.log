+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.554 I build: 4331 (5478bbcd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.776 I main: load the model and apply lora adapter, if any
0.00.021.199 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.207 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.218 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.222 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.227 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.230 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.231 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.232 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.233 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.233 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.234 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.238 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.238 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.239 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.239 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.240 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.400 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.938 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.843 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.849 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.851 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.851 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.852 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.853 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.855 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.858 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.858 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.859 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.860 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.861 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.865 I llama_model_loader: - type  f32:   37 tensors
0.00.130.867 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.766 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.554 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.106 I llm_load_vocab: special tokens cache size = 5
0.00.263.709 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.724 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.724 I llm_load_print_meta: arch             = gemma
0.00.263.725 I llm_load_print_meta: vocab type       = SPM
0.00.263.726 I llm_load_print_meta: n_vocab          = 256000
0.00.263.726 I llm_load_print_meta: n_merges         = 0
0.00.263.726 I llm_load_print_meta: vocab_only       = 0
0.00.263.727 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.727 I llm_load_print_meta: n_embd           = 2048
0.00.263.727 I llm_load_print_meta: n_layer          = 18
0.00.263.739 I llm_load_print_meta: n_head           = 8
0.00.263.739 I llm_load_print_meta: n_head_kv        = 1
0.00.263.740 I llm_load_print_meta: n_rot            = 256
0.00.263.740 I llm_load_print_meta: n_swa            = 0
0.00.263.740 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.741 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.742 I llm_load_print_meta: n_gqa            = 8
0.00.263.742 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.743 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.745 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.746 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.747 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.747 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.747 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.748 I llm_load_print_meta: n_ff             = 16384
0.00.263.749 I llm_load_print_meta: n_expert         = 0
0.00.263.749 I llm_load_print_meta: n_expert_used    = 0
0.00.263.749 I llm_load_print_meta: causal attn      = 1
0.00.263.749 I llm_load_print_meta: pooling type     = 0
0.00.263.750 I llm_load_print_meta: rope type        = 2
0.00.263.750 I llm_load_print_meta: rope scaling     = linear
0.00.263.751 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.752 I llm_load_print_meta: freq_scale_train = 1
0.00.263.752 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.753 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.753 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.753 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.753 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.754 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.754 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.754 I llm_load_print_meta: model type       = 2B
0.00.263.755 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.756 I llm_load_print_meta: model params     = 2.51 B
0.00.263.757 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.757 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.758 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.758 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.758 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.758 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.759 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.759 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.759 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.760 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.760 I llm_load_print_meta: max token length = 93
0.00.363.486 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.363.493 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.363.494 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.363.495 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.363.495 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.363.496 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.368.657 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.663 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.664 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.664 I llama_new_context_with_model: n_batch       = 2048
0.00.368.665 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.665 I llama_new_context_with_model: flash_attn    = 0
0.00.368.667 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.668 I llama_new_context_with_model: freq_scale    = 1
0.00.368.669 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.966 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.979 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.064 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.369 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.375 I llama_new_context_with_model: graph nodes  = 601
0.00.384.375 I llama_new_context_with_model: graph splits = 1
0.00.384.377 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.611 I main: llama threadpool init, n_threads = 4
0.00.469.626 I 
0.00.469.698 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.469.702 I 
0.00.469.745 I sampler seed: 524623149
0.00.469.755 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.763 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.766 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.766 I 
 increadibly high profile. I would like to know your thoughts on how to best communicate this news to the public.

[Answer]

**1. Transparency

0.02.705.103 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6915.34 tokens per second)
0.02.705.106 I llama_perf_context_print:        load time =     468.82 ms
0.02.705.107 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.705.108 I llama_perf_context_print:        eval time =    2216.57 ms /    32 runs   (   69.27 ms per token,    14.44 tokens per second)
0.02.705.109 I llama_perf_context_print:       total time =    2235.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.545 I build: 4331 (5478bbcd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.772 I main: load the model and apply lora adapter, if any
0.00.021.154 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.171 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.178 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.181 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.185 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.186 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.187 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.188 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.189 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.190 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.195 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.196 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.197 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.198 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.199 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.042 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.008 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.971 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.979 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.979 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.980 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.981 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.982 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.983 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.986 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.987 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.988 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.989 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.990 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.993 I llama_model_loader: - type  f32:   37 tensors
0.00.131.994 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.461 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.795 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.346 I llm_load_vocab: special tokens cache size = 5
0.00.263.890 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.905 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.906 I llm_load_print_meta: arch             = gemma
0.00.263.906 I llm_load_print_meta: vocab type       = SPM
0.00.263.907 I llm_load_print_meta: n_vocab          = 256000
0.00.263.907 I llm_load_print_meta: n_merges         = 0
0.00.263.907 I llm_load_print_meta: vocab_only       = 0
0.00.263.908 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.908 I llm_load_print_meta: n_embd           = 2048
0.00.263.908 I llm_load_print_meta: n_layer          = 18
0.00.263.919 I llm_load_print_meta: n_head           = 8
0.00.263.920 I llm_load_print_meta: n_head_kv        = 1
0.00.263.920 I llm_load_print_meta: n_rot            = 256
0.00.263.920 I llm_load_print_meta: n_swa            = 0
0.00.263.921 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.921 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.922 I llm_load_print_meta: n_gqa            = 8
0.00.263.923 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.924 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.924 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.926 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.926 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.926 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.927 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.927 I llm_load_print_meta: n_ff             = 16384
0.00.263.928 I llm_load_print_meta: n_expert         = 0
0.00.263.928 I llm_load_print_meta: n_expert_used    = 0
0.00.263.928 I llm_load_print_meta: causal attn      = 1
0.00.263.929 I llm_load_print_meta: pooling type     = 0
0.00.263.929 I llm_load_print_meta: rope type        = 2
0.00.263.930 I llm_load_print_meta: rope scaling     = linear
0.00.263.931 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.932 I llm_load_print_meta: freq_scale_train = 1
0.00.263.933 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.933 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.933 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.934 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.934 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.938 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.938 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.939 I llm_load_print_meta: model type       = 2B
0.00.263.939 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.940 I llm_load_print_meta: model params     = 2.51 B
0.00.263.941 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.942 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.942 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.942 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.943 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.943 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.943 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.943 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.944 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.945 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.945 I llm_load_print_meta: max token length = 93
0.00.360.801 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.365.953 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.960 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.960 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.961 I llama_new_context_with_model: n_batch       = 2048
0.00.365.961 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.961 I llama_new_context_with_model: flash_attn    = 0
0.00.365.964 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.965 I llama_new_context_with_model: freq_scale    = 1
0.00.365.966 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.532 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.546 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.644 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.957 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.964 I llama_new_context_with_model: graph nodes  = 601
0.00.381.965 I llama_new_context_with_model: graph splits = 1
0.00.381.967 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.064 I main: llama threadpool init, n_threads = 4
0.00.463.078 I 
0.00.463.162 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.463.166 I 
0.00.463.222 I sampler seed: 3769376788
0.00.463.233 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.241 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.245 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.245 I 
 increasities. [end of text]


0.00.734.965 I llama_perf_sampler_print:    sampling time =       0.64 ms /     5 runs   (    0.13 ms per token,  7812.50 tokens per second)
0.00.734.968 I llama_perf_context_print:        load time =     462.27 ms
0.00.734.969 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.734.970 I llama_perf_context_print:        eval time =     268.38 ms /     4 runs   (   67.09 ms per token,    14.90 tokens per second)
0.00.734.970 I llama_perf_context_print:       total time =     271.91 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.558 I build: 4331 (5478bbcd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.775 I main: llama backend init
0.00.000.781 I main: load the model and apply lora adapter, if any
0.00.021.256 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.265 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.276 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.281 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.285 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.291 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.292 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.292 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.293 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.294 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.294 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.298 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.299 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.299 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.300 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.300 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.641 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.343 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.230 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.237 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.238 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.239 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.239 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.240 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.240 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.243 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.244 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.245 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.245 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.246 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.250 I llama_model_loader: - type  f32:   37 tensors
0.00.131.251 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.523 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.577 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.186 I llm_load_vocab: special tokens cache size = 5
0.00.270.851 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.868 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.869 I llm_load_print_meta: arch             = gemma
0.00.270.869 I llm_load_print_meta: vocab type       = SPM
0.00.270.870 I llm_load_print_meta: n_vocab          = 256000
0.00.270.870 I llm_load_print_meta: n_merges         = 0
0.00.270.870 I llm_load_print_meta: vocab_only       = 0
0.00.270.871 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.871 I llm_load_print_meta: n_embd           = 2048
0.00.270.871 I llm_load_print_meta: n_layer          = 18
0.00.270.883 I llm_load_print_meta: n_head           = 8
0.00.270.884 I llm_load_print_meta: n_head_kv        = 1
0.00.270.884 I llm_load_print_meta: n_rot            = 256
0.00.270.885 I llm_load_print_meta: n_swa            = 0
0.00.270.885 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.885 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.886 I llm_load_print_meta: n_gqa            = 8
0.00.270.887 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.888 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.888 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.889 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.890 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.890 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.890 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.891 I llm_load_print_meta: n_ff             = 16384
0.00.270.892 I llm_load_print_meta: n_expert         = 0
0.00.270.892 I llm_load_print_meta: n_expert_used    = 0
0.00.270.892 I llm_load_print_meta: causal attn      = 1
0.00.270.893 I llm_load_print_meta: pooling type     = 0
0.00.270.893 I llm_load_print_meta: rope type        = 2
0.00.270.893 I llm_load_print_meta: rope scaling     = linear
0.00.270.895 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.895 I llm_load_print_meta: freq_scale_train = 1
0.00.270.895 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.896 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.896 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.896 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.896 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.897 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.897 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.897 I llm_load_print_meta: model type       = 2B
0.00.270.898 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.899 I llm_load_print_meta: model params     = 2.51 B
0.00.270.900 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.900 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.900 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.901 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.901 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.901 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.901 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.902 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.902 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.903 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.903 I llm_load_print_meta: max token length = 93
0.00.346.261 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.346.269 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.346.270 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.346.271 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.346.271 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.346.272 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.351.862 I llama_new_context_with_model: n_seq_max     = 1
0.00.351.869 I llama_new_context_with_model: n_ctx         = 4096
0.00.351.870 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.351.870 I llama_new_context_with_model: n_batch       = 2048
0.00.351.870 I llama_new_context_with_model: n_ubatch      = 512
0.00.351.871 I llama_new_context_with_model: flash_attn    = 0
0.00.351.874 I llama_new_context_with_model: freq_base     = 10000.0
0.00.351.875 I llama_new_context_with_model: freq_scale    = 1
0.00.351.876 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.367.192 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.367.207 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.367.302 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.635 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.368.642 I llama_new_context_with_model: graph nodes  = 601
0.00.368.643 I llama_new_context_with_model: graph splits = 1
0.00.368.645 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.130 I main: llama threadpool init, n_threads = 4
0.00.455.146 I 
0.00.455.226 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.455.230 I 
0.00.455.299 I sampler seed: 2436767158
0.00.455.311 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.314 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.315 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.316 I 
 increasities, and other forms of sexual harassment, are never acceptable.

If you experience sexual harassment or believe someone you know is, please seek help immediately.

0.02.757.304 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6897.99 tokens per second)
0.02.757.307 I llama_perf_context_print:        load time =     454.33 ms
0.02.757.309 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.757.311 I llama_perf_context_print:        eval time =    2283.55 ms /    32 runs   (   71.36 ms per token,    14.01 tokens per second)
0.02.757.312 I llama_perf_context_print:       total time =    2302.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.160 I build: 4331 (5478bbcd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.364 I main: llama backend init
0.00.000.372 I main: load the model and apply lora adapter, if any
0.00.020.474 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.484 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.497 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.508 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.513 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.517 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.521 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.522 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.523 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.524 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.525 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.531 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.532 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.533 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.534 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.534 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.951 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.567 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.451 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.457 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.458 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.459 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.459 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.460 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.460 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.463 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.464 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.465 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.466 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.467 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.470 I llama_model_loader: - type  f32:   37 tensors
0.00.130.472 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.059 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.763 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.319 I llm_load_vocab: special tokens cache size = 5
0.00.260.210 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.226 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.227 I llm_load_print_meta: arch             = gemma
0.00.260.228 I llm_load_print_meta: vocab type       = SPM
0.00.260.229 I llm_load_print_meta: n_vocab          = 256000
0.00.260.229 I llm_load_print_meta: n_merges         = 0
0.00.260.229 I llm_load_print_meta: vocab_only       = 0
0.00.260.230 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.230 I llm_load_print_meta: n_embd           = 2048
0.00.260.230 I llm_load_print_meta: n_layer          = 18
0.00.260.241 I llm_load_print_meta: n_head           = 8
0.00.260.242 I llm_load_print_meta: n_head_kv        = 1
0.00.260.243 I llm_load_print_meta: n_rot            = 256
0.00.260.243 I llm_load_print_meta: n_swa            = 0
0.00.260.243 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.244 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.244 I llm_load_print_meta: n_gqa            = 8
0.00.260.245 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.247 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.248 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.249 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.250 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.251 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.251 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.253 I llm_load_print_meta: n_ff             = 16384
0.00.260.253 I llm_load_print_meta: n_expert         = 0
0.00.260.254 I llm_load_print_meta: n_expert_used    = 0
0.00.260.254 I llm_load_print_meta: causal attn      = 1
0.00.260.254 I llm_load_print_meta: pooling type     = 0
0.00.260.255 I llm_load_print_meta: rope type        = 2
0.00.260.255 I llm_load_print_meta: rope scaling     = linear
0.00.260.258 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.259 I llm_load_print_meta: freq_scale_train = 1
0.00.260.259 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.260 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.261 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.261 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.262 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.263 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.264 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.265 I llm_load_print_meta: model type       = 2B
0.00.260.266 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.267 I llm_load_print_meta: model params     = 2.51 B
0.00.260.268 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.269 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.269 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.270 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.270 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.271 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.272 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.273 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.273 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.274 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.275 I llm_load_print_meta: max token length = 93
0.00.331.605 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.331.611 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.336.879 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.885 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.886 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.886 I llama_new_context_with_model: n_batch       = 2048
0.00.336.887 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.887 I llama_new_context_with_model: flash_attn    = 0
0.00.336.889 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.890 I llama_new_context_with_model: freq_scale    = 1
0.00.336.891 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.153 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.167 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.266 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.472 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.479 I llama_new_context_with_model: graph nodes  = 601
0.00.352.479 I llama_new_context_with_model: graph splits = 1
0.00.352.481 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.245 I main: llama threadpool init, n_threads = 4
0.00.441.260 I 
0.00.441.345 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.441.348 I 
0.00.441.396 I sampler seed: 4244984298
0.00.441.407 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.412 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.441.413 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.413 I 
 increamically. [end of text]


0.00.747.959 I llama_perf_sampler_print:    sampling time =       0.71 ms /     5 runs   (    0.14 ms per token,  7012.62 tokens per second)
0.00.747.962 I llama_perf_context_print:        load time =     440.86 ms
0.00.747.964 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.747.967 I llama_perf_context_print:        eval time =     303.31 ms /     4 runs   (   75.83 ms per token,    13.19 tokens per second)
0.00.747.969 I llama_perf_context_print:       total time =     306.72 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.307s
user	0m23.279s
sys	0m9.375s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4331 (5478bbcd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40187.68 ms
main:    total time = 40187.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.171 I build: 4331 (5478bbcd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.361 I main: llama backend init
0.00.000.366 I main: load the model and apply lora adapter, if any
0.00.020.544 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.553 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.561 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.565 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.566 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.569 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.570 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.570 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.571 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.571 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.572 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.575 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.575 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.576 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.577 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.577 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.550 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.860 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.705 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.711 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.712 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.712 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.713 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.713 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.714 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.717 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.717 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.718 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.718 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.719 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.723 I llama_model_loader: - type  f32:   37 tensors
0.00.129.725 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.726 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.087 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.576 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.167 I llm_load_vocab: special tokens cache size = 5
0.00.270.898 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.914 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.915 I llm_load_print_meta: arch             = gemma
0.00.270.915 I llm_load_print_meta: vocab type       = SPM
0.00.270.916 I llm_load_print_meta: n_vocab          = 256000
0.00.270.916 I llm_load_print_meta: n_merges         = 0
0.00.270.917 I llm_load_print_meta: vocab_only       = 0
0.00.270.917 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.917 I llm_load_print_meta: n_embd           = 2048
0.00.270.918 I llm_load_print_meta: n_layer          = 18
0.00.270.929 I llm_load_print_meta: n_head           = 8
0.00.270.930 I llm_load_print_meta: n_head_kv        = 1
0.00.270.930 I llm_load_print_meta: n_rot            = 256
0.00.270.930 I llm_load_print_meta: n_swa            = 0
0.00.270.931 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.931 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.932 I llm_load_print_meta: n_gqa            = 8
0.00.270.933 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.934 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.934 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.936 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.937 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.937 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.937 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.938 I llm_load_print_meta: n_ff             = 16384
0.00.270.939 I llm_load_print_meta: n_expert         = 0
0.00.270.940 I llm_load_print_meta: n_expert_used    = 0
0.00.270.940 I llm_load_print_meta: causal attn      = 1
0.00.270.940 I llm_load_print_meta: pooling type     = 0
0.00.270.940 I llm_load_print_meta: rope type        = 2
0.00.270.941 I llm_load_print_meta: rope scaling     = linear
0.00.270.942 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.943 I llm_load_print_meta: freq_scale_train = 1
0.00.270.943 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.943 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.944 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.944 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.944 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.944 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.945 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.945 I llm_load_print_meta: model type       = 2B
0.00.270.946 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.947 I llm_load_print_meta: model params     = 2.51 B
0.00.270.947 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.948 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.948 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.948 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.949 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.949 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.949 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.950 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.950 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.950 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.951 I llm_load_print_meta: max token length = 93
0.00.331.523 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.331.530 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.331.531 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.331.531 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.331.532 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.331.532 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.336.618 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.624 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.625 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.625 I llama_new_context_with_model: n_batch       = 2048
0.00.336.626 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.626 I llama_new_context_with_model: flash_attn    = 0
0.00.336.628 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.629 I llama_new_context_with_model: freq_scale    = 1
0.00.336.630 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.290 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.304 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.402 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.657 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.664 I llama_new_context_with_model: graph nodes  = 601
0.00.352.665 I llama_new_context_with_model: graph splits = 1
0.00.352.667 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.297 I main: llama threadpool init, n_threads = 4
0.00.427.313 I 
0.00.427.387 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.427.390 I 
0.00.427.432 I sampler seed: 933228133
0.00.427.444 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.455 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.458 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.459 I 
 increamically. [end of text]


0.00.624.933 I llama_perf_sampler_print:    sampling time =       0.64 ms /     5 runs   (    0.13 ms per token,  7800.31 tokens per second)
0.00.624.935 I llama_perf_context_print:        load time =     426.92 ms
0.00.624.936 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.624.937 I llama_perf_context_print:        eval time =     194.44 ms /     4 runs   (   48.61 ms per token,    20.57 tokens per second)
0.00.624.938 I llama_perf_context_print:       total time =     197.64 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4331 (5478bbcd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40172.36 ms
main:    total time = 40172.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.570 I build: 4331 (5478bbcd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.777 I main: llama backend init
0.00.000.785 I main: load the model and apply lora adapter, if any
0.00.021.035 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.052 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.058 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.059 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.063 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.066 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.066 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.067 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.068 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.068 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.072 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.072 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.073 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.073 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.074 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.591 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.050 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.855 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.862 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.863 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.864 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.864 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.866 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.866 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.869 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.869 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.872 I llama_model_loader: - type  f32:   37 tensors
0.00.130.873 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.874 I llama_model_loader: - type q6_K:   19 tensors
0.00.213.503 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.942 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.567 I llm_load_vocab: special tokens cache size = 5
0.00.288.434 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.288.449 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.288.449 I llm_load_print_meta: arch             = gemma
0.00.288.450 I llm_load_print_meta: vocab type       = SPM
0.00.288.451 I llm_load_print_meta: n_vocab          = 256000
0.00.288.451 I llm_load_print_meta: n_merges         = 0
0.00.288.451 I llm_load_print_meta: vocab_only       = 0
0.00.288.452 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.452 I llm_load_print_meta: n_embd           = 2048
0.00.288.453 I llm_load_print_meta: n_layer          = 18
0.00.288.463 I llm_load_print_meta: n_head           = 8
0.00.288.464 I llm_load_print_meta: n_head_kv        = 1
0.00.288.464 I llm_load_print_meta: n_rot            = 256
0.00.288.465 I llm_load_print_meta: n_swa            = 0
0.00.288.465 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.465 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.466 I llm_load_print_meta: n_gqa            = 8
0.00.288.467 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.468 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.469 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.470 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.471 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.471 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.472 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.472 I llm_load_print_meta: n_ff             = 16384
0.00.288.473 I llm_load_print_meta: n_expert         = 0
0.00.288.473 I llm_load_print_meta: n_expert_used    = 0
0.00.288.473 I llm_load_print_meta: causal attn      = 1
0.00.288.474 I llm_load_print_meta: pooling type     = 0
0.00.288.474 I llm_load_print_meta: rope type        = 2
0.00.288.474 I llm_load_print_meta: rope scaling     = linear
0.00.288.476 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.477 I llm_load_print_meta: freq_scale_train = 1
0.00.288.477 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.478 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.478 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.478 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.479 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.479 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.479 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.480 I llm_load_print_meta: model type       = 2B
0.00.288.480 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.288.481 I llm_load_print_meta: model params     = 2.51 B
0.00.288.482 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.288.482 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.483 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.483 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.483 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.484 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.484 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.484 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.484 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.485 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.485 I llm_load_print_meta: max token length = 93
0.00.345.238 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.350.207 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.212 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.212 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.213 I llama_new_context_with_model: n_batch       = 2048
0.00.350.213 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.213 I llama_new_context_with_model: flash_attn    = 0
0.00.350.215 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.216 I llama_new_context_with_model: freq_scale    = 1
0.00.350.217 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.988 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.002 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.089 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.273 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.279 I llama_new_context_with_model: graph nodes  = 601
0.00.366.280 I llama_new_context_with_model: graph splits = 1
0.00.366.282 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.470 I main: llama threadpool init, n_threads = 4
0.00.440.487 I 
0.00.440.560 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.440.563 I 
0.00.440.611 I sampler seed: 1384825107
0.00.440.622 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.440.633 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.440.635 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.440.635 I 
 maneucled in the passage?

The passage does not contain any information regarding the maneucled, so I am unable to answer this question from the provided context.

0.02.013.910 I llama_perf_sampler_print:    sampling time =       5.02 ms /    33 runs   (    0.15 ms per token,  6573.71 tokens per second)
0.02.013.913 I llama_perf_context_print:        load time =     439.67 ms
0.02.013.914 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.013.917 I llama_perf_context_print:        eval time =    1554.33 ms /    32 runs   (   48.57 ms per token,    20.59 tokens per second)
0.02.013.918 I llama_perf_context_print:       total time =    1573.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.791s
user	10m18.428s
sys	0m6.958s
