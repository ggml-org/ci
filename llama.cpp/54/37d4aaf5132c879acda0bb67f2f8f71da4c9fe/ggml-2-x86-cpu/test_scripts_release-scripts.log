+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 4348 (5437d4aa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.715 I main: llama backend init
0.00.000.723 I main: load the model and apply lora adapter, if any
0.00.021.080 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.091 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.102 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.110 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.114 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.118 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.119 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.119 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.120 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.121 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.121 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.126 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.126 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.127 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.128 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.128 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.540 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.188 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.123 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.130 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.130 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.131 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.132 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.132 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.134 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.136 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.137 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.139 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.139 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.140 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.144 I llama_model_loader: - type  f32:   37 tensors
0.00.131.145 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.863 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.132 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.740 I llm_load_vocab: special tokens cache size = 5
0.00.278.888 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.906 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.907 I llm_load_print_meta: arch             = gemma
0.00.278.907 I llm_load_print_meta: vocab type       = SPM
0.00.278.908 I llm_load_print_meta: n_vocab          = 256000
0.00.278.908 I llm_load_print_meta: n_merges         = 0
0.00.278.909 I llm_load_print_meta: vocab_only       = 0
0.00.278.909 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.909 I llm_load_print_meta: n_embd           = 2048
0.00.278.910 I llm_load_print_meta: n_layer          = 18
0.00.278.922 I llm_load_print_meta: n_head           = 8
0.00.278.923 I llm_load_print_meta: n_head_kv        = 1
0.00.278.923 I llm_load_print_meta: n_rot            = 256
0.00.278.923 I llm_load_print_meta: n_swa            = 0
0.00.278.924 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.924 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.925 I llm_load_print_meta: n_gqa            = 8
0.00.278.926 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.927 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.927 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.929 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.929 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.930 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.930 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.931 I llm_load_print_meta: n_ff             = 16384
0.00.278.931 I llm_load_print_meta: n_expert         = 0
0.00.278.932 I llm_load_print_meta: n_expert_used    = 0
0.00.278.932 I llm_load_print_meta: causal attn      = 1
0.00.278.932 I llm_load_print_meta: pooling type     = 0
0.00.278.933 I llm_load_print_meta: rope type        = 2
0.00.278.933 I llm_load_print_meta: rope scaling     = linear
0.00.278.934 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.935 I llm_load_print_meta: freq_scale_train = 1
0.00.278.935 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.935 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.936 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.936 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.936 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.936 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.937 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.937 I llm_load_print_meta: model type       = 2B
0.00.278.938 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.939 I llm_load_print_meta: model params     = 2.51 B
0.00.278.940 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.940 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.941 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.941 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.941 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.941 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.942 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.942 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.942 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.943 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.943 I llm_load_print_meta: max token length = 93
0.00.379.584 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.379.592 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.379.593 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.379.593 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.379.594 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.379.595 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.384.879 I llama_new_context_with_model: n_seq_max     = 1
0.00.384.885 I llama_new_context_with_model: n_ctx         = 4096
0.00.384.886 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.384.886 I llama_new_context_with_model: n_batch       = 2048
0.00.384.887 I llama_new_context_with_model: n_ubatch      = 512
0.00.384.887 I llama_new_context_with_model: flash_attn    = 0
0.00.384.889 I llama_new_context_with_model: freq_base     = 10000.0
0.00.384.890 I llama_new_context_with_model: freq_scale    = 1
0.00.384.891 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.398.921 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.398.935 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.399.024 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.267 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.400.273 I llama_new_context_with_model: graph nodes  = 601
0.00.400.273 I llama_new_context_with_model: graph splits = 1
0.00.400.276 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.400.276 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.485.896 I main: llama threadpool init, n_threads = 4
0.00.485.912 I 
0.00.485.992 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.485.997 I 
0.00.486.045 I sampler seed: 136752643
0.00.486.056 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.066 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.486.071 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.071 I 
 increably in the year 1992.

This was the year that Nirvana recorded their iconic album Nevermind, a landmark album that revolutionized rock

0.02.747.053 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7021.28 tokens per second)
0.02.747.056 I llama_perf_context_print:        load time =     485.16 ms
0.02.747.058 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.747.059 I llama_perf_context_print:        eval time =    2240.88 ms /    32 runs   (   70.03 ms per token,    14.28 tokens per second)
0.02.747.060 I llama_perf_context_print:       total time =    2261.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.569 I build: 4348 (5437d4aa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.000.773 I main: load the model and apply lora adapter, if any
0.00.021.306 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.322 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.330 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.331 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.336 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.337 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.338 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.339 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.339 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.339 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.345 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.346 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.347 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.348 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.348 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.214 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.724 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.646 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.652 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.653 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.654 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.655 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.656 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.657 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.660 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.661 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.662 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.663 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.664 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.667 I llama_model_loader: - type  f32:   37 tensors
0.00.131.668 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.178 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.901 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.605 I llm_load_vocab: special tokens cache size = 5
0.00.278.110 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.128 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.129 I llm_load_print_meta: arch             = gemma
0.00.278.129 I llm_load_print_meta: vocab type       = SPM
0.00.278.130 I llm_load_print_meta: n_vocab          = 256000
0.00.278.130 I llm_load_print_meta: n_merges         = 0
0.00.278.131 I llm_load_print_meta: vocab_only       = 0
0.00.278.131 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.131 I llm_load_print_meta: n_embd           = 2048
0.00.278.131 I llm_load_print_meta: n_layer          = 18
0.00.278.142 I llm_load_print_meta: n_head           = 8
0.00.278.143 I llm_load_print_meta: n_head_kv        = 1
0.00.278.143 I llm_load_print_meta: n_rot            = 256
0.00.278.143 I llm_load_print_meta: n_swa            = 0
0.00.278.143 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.144 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.144 I llm_load_print_meta: n_gqa            = 8
0.00.278.146 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.146 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.147 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.149 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.149 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.149 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.150 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.151 I llm_load_print_meta: n_ff             = 16384
0.00.278.151 I llm_load_print_meta: n_expert         = 0
0.00.278.151 I llm_load_print_meta: n_expert_used    = 0
0.00.278.151 I llm_load_print_meta: causal attn      = 1
0.00.278.152 I llm_load_print_meta: pooling type     = 0
0.00.278.152 I llm_load_print_meta: rope type        = 2
0.00.278.153 I llm_load_print_meta: rope scaling     = linear
0.00.278.154 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.154 I llm_load_print_meta: freq_scale_train = 1
0.00.278.155 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.155 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.155 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.155 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.156 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.156 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.156 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.157 I llm_load_print_meta: model type       = 2B
0.00.278.157 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.158 I llm_load_print_meta: model params     = 2.51 B
0.00.278.159 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.159 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.159 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.160 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.160 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.160 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.160 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.161 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.161 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.162 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.162 I llm_load_print_meta: max token length = 93
0.00.374.915 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.380.137 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.143 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.143 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.144 I llama_new_context_with_model: n_batch       = 2048
0.00.380.144 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.145 I llama_new_context_with_model: flash_attn    = 0
0.00.380.147 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.148 I llama_new_context_with_model: freq_scale    = 1
0.00.380.149 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.394.975 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.394.989 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.395.083 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.331 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.396.336 I llama_new_context_with_model: graph nodes  = 601
0.00.396.337 I llama_new_context_with_model: graph splits = 1
0.00.396.339 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.396.340 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.805 I main: llama threadpool init, n_threads = 4
0.00.477.819 I 
0.00.477.893 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.477.896 I 
0.00.477.937 I sampler seed: 2173096076
0.00.477.947 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.959 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.962 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.963 I 
 secon, and his companions form the notorious group known as the Crimson Guard.

The Crimson Guard is a symbol of tyranny and oppression, representing the corrupt power structures

0.02.715.964 I llama_perf_sampler_print:    sampling time =       5.43 ms /    33 runs   (    0.16 ms per token,  6072.87 tokens per second)
0.02.715.967 I llama_perf_context_print:        load time =     477.01 ms
0.02.715.968 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.715.969 I llama_perf_context_print:        eval time =    2218.23 ms /    32 runs   (   69.32 ms per token,    14.43 tokens per second)
0.02.715.970 I llama_perf_context_print:       total time =    2238.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.176 I build: 4348 (5437d4aa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.380 I main: llama backend init
0.00.000.386 I main: load the model and apply lora adapter, if any
0.00.020.690 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.702 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.709 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.714 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.715 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.719 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.719 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.720 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.720 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.721 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.721 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.727 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.728 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.728 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.729 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.730 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.155 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.658 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.587 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.594 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.595 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.595 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.596 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.597 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.598 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.601 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.601 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.602 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.603 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.604 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.608 I llama_model_loader: - type  f32:   37 tensors
0.00.130.608 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.199 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.562 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.287 I llm_load_vocab: special tokens cache size = 5
0.00.283.569 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.588 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.589 I llm_load_print_meta: arch             = gemma
0.00.283.589 I llm_load_print_meta: vocab type       = SPM
0.00.283.590 I llm_load_print_meta: n_vocab          = 256000
0.00.283.591 I llm_load_print_meta: n_merges         = 0
0.00.283.591 I llm_load_print_meta: vocab_only       = 0
0.00.283.591 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.592 I llm_load_print_meta: n_embd           = 2048
0.00.283.592 I llm_load_print_meta: n_layer          = 18
0.00.283.605 I llm_load_print_meta: n_head           = 8
0.00.283.606 I llm_load_print_meta: n_head_kv        = 1
0.00.283.607 I llm_load_print_meta: n_rot            = 256
0.00.283.607 I llm_load_print_meta: n_swa            = 0
0.00.283.607 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.608 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.608 I llm_load_print_meta: n_gqa            = 8
0.00.283.609 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.610 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.611 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.612 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.613 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.613 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.617 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.618 I llm_load_print_meta: n_ff             = 16384
0.00.283.619 I llm_load_print_meta: n_expert         = 0
0.00.283.619 I llm_load_print_meta: n_expert_used    = 0
0.00.283.619 I llm_load_print_meta: causal attn      = 1
0.00.283.620 I llm_load_print_meta: pooling type     = 0
0.00.283.620 I llm_load_print_meta: rope type        = 2
0.00.283.620 I llm_load_print_meta: rope scaling     = linear
0.00.283.621 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.622 I llm_load_print_meta: freq_scale_train = 1
0.00.283.622 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.623 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.623 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.623 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.623 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.624 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.624 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.625 I llm_load_print_meta: model type       = 2B
0.00.283.626 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.628 I llm_load_print_meta: model params     = 2.51 B
0.00.283.629 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.629 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.630 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.630 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.630 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.631 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.631 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.632 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.632 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.633 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.635 I llm_load_print_meta: max token length = 93
0.00.360.861 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.360.868 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.360.869 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.360.870 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.360.870 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.360.871 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.365.992 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.998 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.999 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.999 I llama_new_context_with_model: n_batch       = 2048
0.00.366.000 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.000 I llama_new_context_with_model: flash_attn    = 0
0.00.366.002 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.004 I llama_new_context_with_model: freq_scale    = 1
0.00.366.005 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.622 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.635 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.728 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.005 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.011 I llama_new_context_with_model: graph nodes  = 601
0.00.382.011 I llama_new_context_with_model: graph splits = 1
0.00.382.014 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.382.014 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.016 I main: llama threadpool init, n_threads = 4
0.00.466.033 I 
0.00.466.107 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.466.110 I 
0.00.466.153 I sampler seed: 2922107615
0.00.466.165 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.178 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.181 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.181 I 
 increasels, and other monsters.

In the dark, shadowy corners of the forest, a chilling laughter echoed through the trees.

A group of brave adventurers

0.02.761.290 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6560.64 tokens per second)
0.02.761.292 I llama_perf_context_print:        load time =     465.62 ms
0.02.761.293 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.761.295 I llama_perf_context_print:        eval time =    2276.38 ms /    32 runs   (   71.14 ms per token,    14.06 tokens per second)
0.02.761.296 I llama_perf_context_print:       total time =    2295.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.463 I build: 4348 (5437d4aa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.654 I main: llama backend init
0.00.000.661 I main: load the model and apply lora adapter, if any
0.00.021.039 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.051 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.062 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.066 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.071 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.074 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.075 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.076 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.077 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.078 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.078 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.082 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.083 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.084 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.084 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.085 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.427 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.159 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.032 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.038 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.038 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.039 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.039 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.040 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.041 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.044 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.044 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.046 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.047 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.048 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.052 I llama_model_loader: - type  f32:   37 tensors
0.00.131.053 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.127 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.110 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.751 I llm_load_vocab: special tokens cache size = 5
0.00.278.040 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.060 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.060 I llm_load_print_meta: arch             = gemma
0.00.278.061 I llm_load_print_meta: vocab type       = SPM
0.00.278.062 I llm_load_print_meta: n_vocab          = 256000
0.00.278.062 I llm_load_print_meta: n_merges         = 0
0.00.278.062 I llm_load_print_meta: vocab_only       = 0
0.00.278.063 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.063 I llm_load_print_meta: n_embd           = 2048
0.00.278.063 I llm_load_print_meta: n_layer          = 18
0.00.278.075 I llm_load_print_meta: n_head           = 8
0.00.278.076 I llm_load_print_meta: n_head_kv        = 1
0.00.278.076 I llm_load_print_meta: n_rot            = 256
0.00.278.077 I llm_load_print_meta: n_swa            = 0
0.00.278.077 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.077 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.078 I llm_load_print_meta: n_gqa            = 8
0.00.278.079 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.080 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.081 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.082 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.083 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.084 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.084 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.085 I llm_load_print_meta: n_ff             = 16384
0.00.278.086 I llm_load_print_meta: n_expert         = 0
0.00.278.086 I llm_load_print_meta: n_expert_used    = 0
0.00.278.087 I llm_load_print_meta: causal attn      = 1
0.00.278.087 I llm_load_print_meta: pooling type     = 0
0.00.278.087 I llm_load_print_meta: rope type        = 2
0.00.278.088 I llm_load_print_meta: rope scaling     = linear
0.00.278.089 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.090 I llm_load_print_meta: freq_scale_train = 1
0.00.278.090 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.091 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.091 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.092 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.092 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.093 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.093 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.094 I llm_load_print_meta: model type       = 2B
0.00.278.095 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.096 I llm_load_print_meta: model params     = 2.51 B
0.00.278.097 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.097 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.098 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.098 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.099 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.099 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.099 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.100 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.100 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.101 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.101 I llm_load_print_meta: max token length = 93
0.00.349.569 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.349.577 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.354.736 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.742 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.743 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.743 I llama_new_context_with_model: n_batch       = 2048
0.00.354.744 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.744 I llama_new_context_with_model: flash_attn    = 0
0.00.354.746 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.747 I llama_new_context_with_model: freq_scale    = 1
0.00.354.749 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.370.254 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.370.269 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.370 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.681 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.688 I llama_new_context_with_model: graph nodes  = 601
0.00.371.688 I llama_new_context_with_model: graph splits = 1
0.00.371.691 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.371.691 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.760 I main: llama threadpool init, n_threads = 4
0.00.464.776 I 
0.00.464.857 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.464.861 I 
0.00.464.904 I sampler seed: 600817527
0.00.464.915 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.919 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.919 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.919 I 
 increasities by creating a unique and immersive experience.

**Step 1: Immersive Storytelling**

- Develop narratives with rich settings, compelling characters, and

0.02.866.953 I llama_perf_sampler_print:    sampling time =       4.94 ms /    33 runs   (    0.15 ms per token,  6686.93 tokens per second)
0.02.866.956 I llama_perf_context_print:        load time =     464.08 ms
0.02.866.957 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.866.958 I llama_perf_context_print:        eval time =    2382.93 ms /    32 runs   (   74.47 ms per token,    13.43 tokens per second)
0.02.866.959 I llama_perf_context_print:       total time =    2402.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.654s
user	0m39.671s
sys	0m9.528s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4348 (5437d4aa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40225.08 ms
main:    total time = 40225.08 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.539 I build: 4348 (5437d4aa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.020.850 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.860 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.868 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.872 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.873 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.877 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.878 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.879 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.880 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.881 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.881 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.885 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.886 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.889 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.890 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.891 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.509 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.934 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.830 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.837 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.837 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.838 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.838 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.839 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.840 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.843 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.843 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.844 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.845 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.846 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.849 I llama_model_loader: - type  f32:   37 tensors
0.00.130.850 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.851 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.060 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.015 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.664 I llm_load_vocab: special tokens cache size = 5
0.00.281.908 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.927 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.928 I llm_load_print_meta: arch             = gemma
0.00.281.928 I llm_load_print_meta: vocab type       = SPM
0.00.281.929 I llm_load_print_meta: n_vocab          = 256000
0.00.281.930 I llm_load_print_meta: n_merges         = 0
0.00.281.930 I llm_load_print_meta: vocab_only       = 0
0.00.281.931 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.932 I llm_load_print_meta: n_embd           = 2048
0.00.281.932 I llm_load_print_meta: n_layer          = 18
0.00.281.942 I llm_load_print_meta: n_head           = 8
0.00.281.943 I llm_load_print_meta: n_head_kv        = 1
0.00.281.944 I llm_load_print_meta: n_rot            = 256
0.00.281.944 I llm_load_print_meta: n_swa            = 0
0.00.281.944 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.945 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.946 I llm_load_print_meta: n_gqa            = 8
0.00.281.947 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.948 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.949 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.951 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.951 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.952 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.952 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.953 I llm_load_print_meta: n_ff             = 16384
0.00.281.953 I llm_load_print_meta: n_expert         = 0
0.00.281.954 I llm_load_print_meta: n_expert_used    = 0
0.00.281.954 I llm_load_print_meta: causal attn      = 1
0.00.281.954 I llm_load_print_meta: pooling type     = 0
0.00.281.955 I llm_load_print_meta: rope type        = 2
0.00.281.955 I llm_load_print_meta: rope scaling     = linear
0.00.281.956 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.957 I llm_load_print_meta: freq_scale_train = 1
0.00.281.957 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.958 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.958 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.959 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.959 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.959 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.960 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.960 I llm_load_print_meta: model type       = 2B
0.00.281.961 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.281.962 I llm_load_print_meta: model params     = 2.51 B
0.00.281.963 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.281.964 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.965 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.965 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.965 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.966 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.966 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.967 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.967 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.968 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.968 I llm_load_print_meta: max token length = 93
0.00.342.222 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.342.228 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.342.229 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.342.229 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.342.230 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.342.230 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.347.447 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.455 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.455 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.456 I llama_new_context_with_model: n_batch       = 2048
0.00.347.456 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.457 I llama_new_context_with_model: flash_attn    = 0
0.00.347.460 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.460 I llama_new_context_with_model: freq_scale    = 1
0.00.347.461 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.311 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.323 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.413 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.659 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.666 I llama_new_context_with_model: graph nodes  = 601
0.00.363.667 I llama_new_context_with_model: graph splits = 1
0.00.363.669 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.363.669 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.703 I main: llama threadpool init, n_threads = 4
0.00.441.719 I 
0.00.441.796 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.441.800 I 
0.00.441.849 I sampler seed: 3508647970
0.00.441.860 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.872 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.441.876 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.876 I 
 fufilling music and a swirling visual display set the tone for this immersive experience. [end of text]


0.01.290.460 I llama_perf_sampler_print:    sampling time =       2.71 ms /    18 runs   (    0.15 ms per token,  6649.43 tokens per second)
0.01.290.463 I llama_perf_context_print:        load time =     440.93 ms
0.01.290.464 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.290.466 I llama_perf_context_print:        eval time =     837.36 ms /    17 runs   (   49.26 ms per token,    20.30 tokens per second)
0.01.290.467 I llama_perf_context_print:       total time =     848.77 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4348 (5437d4aa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40194.19 ms
main:    total time = 40194.19 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.531 I build: 4348 (5437d4aa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.720 I main: llama backend init
0.00.000.726 I main: load the model and apply lora adapter, if any
0.00.020.862 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.876 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.884 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.885 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.889 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.890 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.890 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.891 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.891 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.893 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.898 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.898 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.899 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.900 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.901 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.758 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.352 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.275 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.284 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.285 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.286 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.286 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.287 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.288 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.290 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.291 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.295 I llama_model_loader: - type  f32:   37 tensors
0.00.131.296 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.296 I llama_model_loader: - type q6_K:   19 tensors
0.00.219.554 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.947 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.498 I llm_load_vocab: special tokens cache size = 5
0.00.286.547 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.566 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.566 I llm_load_print_meta: arch             = gemma
0.00.286.567 I llm_load_print_meta: vocab type       = SPM
0.00.286.568 I llm_load_print_meta: n_vocab          = 256000
0.00.286.568 I llm_load_print_meta: n_merges         = 0
0.00.286.568 I llm_load_print_meta: vocab_only       = 0
0.00.286.569 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.569 I llm_load_print_meta: n_embd           = 2048
0.00.286.569 I llm_load_print_meta: n_layer          = 18
0.00.286.579 I llm_load_print_meta: n_head           = 8
0.00.286.580 I llm_load_print_meta: n_head_kv        = 1
0.00.286.580 I llm_load_print_meta: n_rot            = 256
0.00.286.581 I llm_load_print_meta: n_swa            = 0
0.00.286.581 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.581 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.582 I llm_load_print_meta: n_gqa            = 8
0.00.286.583 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.584 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.585 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.586 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.586 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.587 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.587 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.588 I llm_load_print_meta: n_ff             = 16384
0.00.286.588 I llm_load_print_meta: n_expert         = 0
0.00.286.588 I llm_load_print_meta: n_expert_used    = 0
0.00.286.589 I llm_load_print_meta: causal attn      = 1
0.00.286.589 I llm_load_print_meta: pooling type     = 0
0.00.286.589 I llm_load_print_meta: rope type        = 2
0.00.286.590 I llm_load_print_meta: rope scaling     = linear
0.00.286.591 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.591 I llm_load_print_meta: freq_scale_train = 1
0.00.286.592 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.592 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.592 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.592 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.593 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.593 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.593 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.594 I llm_load_print_meta: model type       = 2B
0.00.286.595 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.286.596 I llm_load_print_meta: model params     = 2.51 B
0.00.286.597 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.286.598 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.599 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.599 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.600 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.600 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.600 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.601 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.612 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.618 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.618 I llm_load_print_meta: max token length = 93
0.00.345.164 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.350.257 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.263 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.263 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.264 I llama_new_context_with_model: n_batch       = 2048
0.00.350.264 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.264 I llama_new_context_with_model: flash_attn    = 0
0.00.350.267 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.268 I llama_new_context_with_model: freq_scale    = 1
0.00.350.269 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.425 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.440 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.556 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.867 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.874 I llama_new_context_with_model: graph nodes  = 601
0.00.366.875 I llama_new_context_with_model: graph splits = 1
0.00.366.878 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.366.878 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.810 I main: llama threadpool init, n_threads = 4
0.00.441.825 I 
0.00.441.897 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.441.901 I 
0.00.441.945 I sampler seed: 773209247
0.00.441.956 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.959 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.441.961 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.961 I 
 seconally, drawing attention to the following aspects:

**1. Timely Response:** Highlight the immediate response of the government to the COVID-19 crisis.

0.02.028.223 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6401.55 tokens per second)
0.02.028.226 I llama_perf_context_print:        load time =     441.07 ms
0.02.028.227 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.028.229 I llama_perf_context_print:        eval time =    1567.26 ms /    32 runs   (   48.98 ms per token,    20.42 tokens per second)
0.02.028.230 I llama_perf_context_print:       total time =    1586.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.533s
user	10m21.065s
sys	0m7.000s
