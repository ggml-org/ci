+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.528 I build: 4048 (5464b08d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.708 I main: llama backend init
0.00.000.846 I main: load the model and apply lora adapter, if any
0.00.021.406 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.415 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.423 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.432 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.433 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.438 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.441 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.442 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.443 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.443 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.444 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.448 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.449 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.449 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.450 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.451 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.917 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.079 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.939 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.944 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.945 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.945 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.946 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.947 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.948 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.950 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.951 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.953 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.954 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.954 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.958 I llama_model_loader: - type  f32:   37 tensors
0.00.131.960 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.980 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.623 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.173 I llm_load_vocab: special tokens cache size = 5
0.00.263.573 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.588 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.589 I llm_load_print_meta: arch             = gemma
0.00.263.589 I llm_load_print_meta: vocab type       = SPM
0.00.263.590 I llm_load_print_meta: n_vocab          = 256000
0.00.263.590 I llm_load_print_meta: n_merges         = 0
0.00.263.590 I llm_load_print_meta: vocab_only       = 0
0.00.263.591 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.591 I llm_load_print_meta: n_embd           = 2048
0.00.263.591 I llm_load_print_meta: n_layer          = 18
0.00.263.602 I llm_load_print_meta: n_head           = 8
0.00.263.603 I llm_load_print_meta: n_head_kv        = 1
0.00.263.604 I llm_load_print_meta: n_rot            = 256
0.00.263.604 I llm_load_print_meta: n_swa            = 0
0.00.263.604 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.605 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.605 I llm_load_print_meta: n_gqa            = 8
0.00.263.606 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.607 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.608 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.610 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.610 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.610 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.611 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.611 I llm_load_print_meta: n_ff             = 16384
0.00.263.612 I llm_load_print_meta: n_expert         = 0
0.00.263.612 I llm_load_print_meta: n_expert_used    = 0
0.00.263.612 I llm_load_print_meta: causal attn      = 1
0.00.263.613 I llm_load_print_meta: pooling type     = 0
0.00.263.613 I llm_load_print_meta: rope type        = 2
0.00.263.613 I llm_load_print_meta: rope scaling     = linear
0.00.263.615 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.615 I llm_load_print_meta: freq_scale_train = 1
0.00.263.616 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.616 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.616 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.617 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.617 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.617 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.617 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.618 I llm_load_print_meta: model type       = 2B
0.00.263.618 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.619 I llm_load_print_meta: model params     = 2.51 B
0.00.263.620 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.620 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.621 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.621 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.622 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.622 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.622 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.623 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.623 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.623 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.624 I llm_load_print_meta: max token length = 93
0.00.363.951 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.363.959 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.363.960 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.363.961 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.363.961 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.363.962 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.369.146 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.153 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.153 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.154 I llama_new_context_with_model: n_batch       = 2048
0.00.369.154 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.154 I llama_new_context_with_model: flash_attn    = 0
0.00.369.157 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.157 I llama_new_context_with_model: freq_scale    = 1
0.00.369.158 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.911 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.925 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.009 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.215 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.222 I llama_new_context_with_model: graph nodes  = 601
0.00.385.222 I llama_new_context_with_model: graph splits = 1
0.00.385.224 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.301 I main: llama threadpool init, n_threads = 4
0.00.470.315 I 
0.00.470.390 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.470.393 I 
0.00.470.433 I sampler seed: 1235848500
0.00.470.444 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.447 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.447 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.447 I 
 increasities is a fallacy and should not be used to support an argument. [end of text]


0.01.597.211 I llama_perf_sampler_print:    sampling time =       2.52 ms /    17 runs   (    0.15 ms per token,  6738.01 tokens per second)
0.01.597.214 I llama_perf_context_print:        load time =     469.43 ms
0.01.597.215 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.597.217 I llama_perf_context_print:        eval time =    1116.55 ms /    16 runs   (   69.78 ms per token,    14.33 tokens per second)
0.01.597.218 I llama_perf_context_print:       total time =    1126.92 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.517 I build: 4048 (5464b08d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.721 I main: llama backend init
0.00.000.868 I main: load the model and apply lora adapter, if any
0.00.021.517 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.531 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.538 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.539 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.543 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.544 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.546 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.547 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.548 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.548 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.553 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.553 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.554 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.554 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.555 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.967 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.779 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.638 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.645 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.646 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.647 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.648 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.649 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.650 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.653 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.654 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.655 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.656 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.658 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.661 I llama_model_loader: - type  f32:   37 tensors
0.00.132.663 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.518 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.356 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.014 I llm_load_vocab: special tokens cache size = 5
0.00.286.462 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.481 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.481 I llm_load_print_meta: arch             = gemma
0.00.286.482 I llm_load_print_meta: vocab type       = SPM
0.00.286.483 I llm_load_print_meta: n_vocab          = 256000
0.00.286.484 I llm_load_print_meta: n_merges         = 0
0.00.286.484 I llm_load_print_meta: vocab_only       = 0
0.00.286.485 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.485 I llm_load_print_meta: n_embd           = 2048
0.00.286.485 I llm_load_print_meta: n_layer          = 18
0.00.286.499 I llm_load_print_meta: n_head           = 8
0.00.286.501 I llm_load_print_meta: n_head_kv        = 1
0.00.286.502 I llm_load_print_meta: n_rot            = 256
0.00.286.503 I llm_load_print_meta: n_swa            = 0
0.00.286.503 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.504 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.506 I llm_load_print_meta: n_gqa            = 8
0.00.286.507 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.509 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.510 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.512 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.512 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.513 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.513 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.515 I llm_load_print_meta: n_ff             = 16384
0.00.286.515 I llm_load_print_meta: n_expert         = 0
0.00.286.516 I llm_load_print_meta: n_expert_used    = 0
0.00.286.516 I llm_load_print_meta: causal attn      = 1
0.00.286.517 I llm_load_print_meta: pooling type     = 0
0.00.286.518 I llm_load_print_meta: rope type        = 2
0.00.286.518 I llm_load_print_meta: rope scaling     = linear
0.00.286.520 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.521 I llm_load_print_meta: freq_scale_train = 1
0.00.286.521 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.522 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.522 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.523 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.523 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.523 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.524 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.527 I llm_load_print_meta: model type       = 2B
0.00.286.527 I llm_load_print_meta: model ftype      = Q8_0
0.00.286.528 I llm_load_print_meta: model params     = 2.51 B
0.00.286.530 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.286.530 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.531 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.531 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.532 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.533 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.533 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.534 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.535 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.536 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.536 I llm_load_print_meta: max token length = 93
0.00.381.053 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.386.564 I llama_new_context_with_model: n_seq_max     = 1
0.00.386.571 I llama_new_context_with_model: n_ctx         = 4096
0.00.386.571 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.386.572 I llama_new_context_with_model: n_batch       = 2048
0.00.386.573 I llama_new_context_with_model: n_ubatch      = 512
0.00.386.573 I llama_new_context_with_model: flash_attn    = 0
0.00.386.576 I llama_new_context_with_model: freq_base     = 10000.0
0.00.386.577 I llama_new_context_with_model: freq_scale    = 1
0.00.386.578 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.402.258 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.402.274 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.402.373 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.403.614 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.403.621 I llama_new_context_with_model: graph nodes  = 601
0.00.403.621 I llama_new_context_with_model: graph splits = 1
0.00.403.623 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.485.000 I main: llama threadpool init, n_threads = 4
0.00.485.015 I 
0.00.485.102 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.485.104 I 
0.00.485.150 I sampler seed: 4069898213
0.00.485.163 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.485.167 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.485.169 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.485.169 I 
 maneuvously. 

The answer is cautiously.

Cautiously is a moderate degree of care or caution. It is often used to describe the way someone

0.02.694.484 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6619.86 tokens per second)
0.02.694.487 I llama_perf_context_print:        load time =     484.11 ms
0.02.694.488 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.694.490 I llama_perf_context_print:        eval time =    2190.15 ms /    32 runs   (   68.44 ms per token,    14.61 tokens per second)
0.02.694.503 I llama_perf_context_print:       total time =    2209.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.561 I build: 4048 (5464b08d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.000.887 I main: load the model and apply lora adapter, if any
0.00.020.970 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.980 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.987 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.992 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.993 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.996 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.997 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.997 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.998 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.998 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.999 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.004 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.004 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.005 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.005 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.006 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.702 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.484 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.795 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.805 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.806 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.807 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.808 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.809 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.811 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.814 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.815 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.816 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.817 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.136.818 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.136.822 I llama_model_loader: - type  f32:   37 tensors
0.00.136.824 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.603 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.927 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.496 I llm_load_vocab: special tokens cache size = 5
0.00.281.628 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.645 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.646 I llm_load_print_meta: arch             = gemma
0.00.281.647 I llm_load_print_meta: vocab type       = SPM
0.00.281.647 I llm_load_print_meta: n_vocab          = 256000
0.00.281.648 I llm_load_print_meta: n_merges         = 0
0.00.281.648 I llm_load_print_meta: vocab_only       = 0
0.00.281.648 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.649 I llm_load_print_meta: n_embd           = 2048
0.00.281.649 I llm_load_print_meta: n_layer          = 18
0.00.281.661 I llm_load_print_meta: n_head           = 8
0.00.281.662 I llm_load_print_meta: n_head_kv        = 1
0.00.281.662 I llm_load_print_meta: n_rot            = 256
0.00.281.662 I llm_load_print_meta: n_swa            = 0
0.00.281.663 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.663 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.664 I llm_load_print_meta: n_gqa            = 8
0.00.281.665 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.666 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.667 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.668 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.668 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.669 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.669 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.670 I llm_load_print_meta: n_ff             = 16384
0.00.281.670 I llm_load_print_meta: n_expert         = 0
0.00.281.670 I llm_load_print_meta: n_expert_used    = 0
0.00.281.671 I llm_load_print_meta: causal attn      = 1
0.00.281.671 I llm_load_print_meta: pooling type     = 0
0.00.281.671 I llm_load_print_meta: rope type        = 2
0.00.281.672 I llm_load_print_meta: rope scaling     = linear
0.00.281.673 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.674 I llm_load_print_meta: freq_scale_train = 1
0.00.281.674 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.675 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.675 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.675 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.675 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.676 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.676 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.676 I llm_load_print_meta: model type       = 2B
0.00.281.677 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.678 I llm_load_print_meta: model params     = 2.51 B
0.00.281.678 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.679 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.679 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.680 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.680 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.680 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.680 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.681 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.681 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.681 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.682 I llm_load_print_meta: max token length = 93
0.00.373.122 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.373.129 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.373.130 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.373.130 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.373.131 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.373.132 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.378.220 I llama_new_context_with_model: n_seq_max     = 1
0.00.378.227 I llama_new_context_with_model: n_ctx         = 4096
0.00.378.227 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.378.228 I llama_new_context_with_model: n_batch       = 2048
0.00.378.228 I llama_new_context_with_model: n_ubatch      = 512
0.00.378.229 I llama_new_context_with_model: flash_attn    = 0
0.00.378.231 I llama_new_context_with_model: freq_base     = 10000.0
0.00.378.232 I llama_new_context_with_model: freq_scale    = 1
0.00.378.233 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.394.407 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.394.423 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.394.516 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.752 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.395.756 I llama_new_context_with_model: graph nodes  = 601
0.00.395.757 I llama_new_context_with_model: graph splits = 1
0.00.395.759 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.889 I main: llama threadpool init, n_threads = 4
0.00.482.906 I 
0.00.482.999 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.483.003 I 
0.00.483.053 I sampler seed: 3255769364
0.00.483.067 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.071 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.483.073 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.073 I 
 increasels, and a troll with a penchant for pranks.

What do they have in common?

They are all fictional creatures. [end of text]


0.02.381.097 I llama_perf_sampler_print:    sampling time =       4.39 ms /    29 runs   (    0.15 ms per token,  6599.91 tokens per second)
0.02.381.100 I llama_perf_context_print:        load time =     481.98 ms
0.02.381.101 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.381.102 I llama_perf_context_print:        eval time =    1881.15 ms /    28 runs   (   67.18 ms per token,    14.88 tokens per second)
0.02.381.102 I llama_perf_context_print:       total time =    1898.22 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.527 I build: 4048 (5464b08d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.881 I main: load the model and apply lora adapter, if any
0.00.021.171 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.181 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.189 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.194 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.195 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.200 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.201 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.202 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.203 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.204 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.205 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.211 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.212 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.213 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.214 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.215 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.427 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.289 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.238 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.245 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.245 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.246 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.246 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.247 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.248 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.250 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.251 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.252 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.252 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.135.254 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.258 I llama_model_loader: - type  f32:   37 tensors
0.00.135.259 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.307 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.494 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.122 I llm_load_vocab: special tokens cache size = 5
0.00.282.509 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.526 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.527 I llm_load_print_meta: arch             = gemma
0.00.282.528 I llm_load_print_meta: vocab type       = SPM
0.00.282.529 I llm_load_print_meta: n_vocab          = 256000
0.00.282.529 I llm_load_print_meta: n_merges         = 0
0.00.282.529 I llm_load_print_meta: vocab_only       = 0
0.00.282.530 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.530 I llm_load_print_meta: n_embd           = 2048
0.00.282.530 I llm_load_print_meta: n_layer          = 18
0.00.282.542 I llm_load_print_meta: n_head           = 8
0.00.282.543 I llm_load_print_meta: n_head_kv        = 1
0.00.282.543 I llm_load_print_meta: n_rot            = 256
0.00.282.543 I llm_load_print_meta: n_swa            = 0
0.00.282.544 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.544 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.545 I llm_load_print_meta: n_gqa            = 8
0.00.282.546 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.547 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.548 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.549 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.549 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.550 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.550 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.551 I llm_load_print_meta: n_ff             = 16384
0.00.282.551 I llm_load_print_meta: n_expert         = 0
0.00.282.551 I llm_load_print_meta: n_expert_used    = 0
0.00.282.552 I llm_load_print_meta: causal attn      = 1
0.00.282.552 I llm_load_print_meta: pooling type     = 0
0.00.282.552 I llm_load_print_meta: rope type        = 2
0.00.282.553 I llm_load_print_meta: rope scaling     = linear
0.00.282.554 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.555 I llm_load_print_meta: freq_scale_train = 1
0.00.282.555 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.556 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.556 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.556 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.556 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.557 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.557 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.557 I llm_load_print_meta: model type       = 2B
0.00.282.558 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.559 I llm_load_print_meta: model params     = 2.51 B
0.00.282.560 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.560 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.561 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.561 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.562 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.562 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.562 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.563 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.563 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.563 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.563 I llm_load_print_meta: max token length = 93
0.00.354.017 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.354.025 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.359.427 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.433 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.433 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.433 I llama_new_context_with_model: n_batch       = 2048
0.00.359.434 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.434 I llama_new_context_with_model: flash_attn    = 0
0.00.359.439 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.440 I llama_new_context_with_model: freq_scale    = 1
0.00.359.441 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.506 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.521 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.621 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.873 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.878 I llama_new_context_with_model: graph nodes  = 601
0.00.376.879 I llama_new_context_with_model: graph splits = 1
0.00.376.880 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.335 I main: llama threadpool init, n_threads = 4
0.00.464.348 I 
0.00.464.435 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.464.438 I 
0.00.464.484 I sampler seed: 1124648862
0.00.464.495 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.499 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.499 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.501 I 
 increasities.
I am unable to generate text that is sexually suggestive or inappropriate in nature. [end of text]


0.01.979.296 I llama_perf_sampler_print:    sampling time =       3.19 ms /    21 runs   (    0.15 ms per token,  6587.20 tokens per second)
0.01.979.298 I llama_perf_context_print:        load time =     463.43 ms
0.01.979.299 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.979.301 I llama_perf_context_print:        eval time =    1501.71 ms /    20 runs   (   75.09 ms per token,    13.32 tokens per second)
0.01.979.301 I llama_perf_context_print:       total time =    1514.97 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.586s
user	0m29.928s
sys	0m9.404s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4048 (5464b08d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32232.57 ms
main:    total time = 32232.57 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.547 I build: 4048 (5464b08d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.000.883 I main: load the model and apply lora adapter, if any
0.00.021.836 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.844 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.854 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.859 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.860 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.863 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.864 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.865 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.866 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.867 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.867 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.872 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.872 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.872 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.873 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.873 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.348 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.518 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.451 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.458 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.459 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.459 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.460 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.461 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.462 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.465 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.465 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.466 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.467 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.469 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.473 I llama_model_loader: - type  f32:   37 tensors
0.00.133.474 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.474 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.614 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.670 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.216 I llm_load_vocab: special tokens cache size = 5
0.00.279.556 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.574 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.575 I llm_load_print_meta: arch             = gemma
0.00.279.576 I llm_load_print_meta: vocab type       = SPM
0.00.279.576 I llm_load_print_meta: n_vocab          = 256000
0.00.279.577 I llm_load_print_meta: n_merges         = 0
0.00.279.577 I llm_load_print_meta: vocab_only       = 0
0.00.279.578 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.578 I llm_load_print_meta: n_embd           = 2048
0.00.279.578 I llm_load_print_meta: n_layer          = 18
0.00.279.590 I llm_load_print_meta: n_head           = 8
0.00.279.591 I llm_load_print_meta: n_head_kv        = 1
0.00.279.591 I llm_load_print_meta: n_rot            = 256
0.00.279.591 I llm_load_print_meta: n_swa            = 0
0.00.279.592 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.592 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.593 I llm_load_print_meta: n_gqa            = 8
0.00.279.594 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.595 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.596 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.597 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.597 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.598 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.598 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.599 I llm_load_print_meta: n_ff             = 16384
0.00.279.599 I llm_load_print_meta: n_expert         = 0
0.00.279.599 I llm_load_print_meta: n_expert_used    = 0
0.00.279.600 I llm_load_print_meta: causal attn      = 1
0.00.279.600 I llm_load_print_meta: pooling type     = 0
0.00.279.601 I llm_load_print_meta: rope type        = 2
0.00.279.601 I llm_load_print_meta: rope scaling     = linear
0.00.279.602 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.603 I llm_load_print_meta: freq_scale_train = 1
0.00.279.603 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.604 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.604 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.604 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.604 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.604 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.605 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.606 I llm_load_print_meta: model type       = 2B
0.00.279.606 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.279.607 I llm_load_print_meta: model params     = 2.51 B
0.00.279.608 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.279.608 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.608 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.609 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.609 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.609 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.610 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.610 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.610 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.610 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.611 I llm_load_print_meta: max token length = 93
0.00.340.939 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.340.948 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.340.949 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.340.950 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.340.950 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.340.951 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.346.195 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.202 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.202 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.202 I llama_new_context_with_model: n_batch       = 2048
0.00.346.203 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.203 I llama_new_context_with_model: flash_attn    = 0
0.00.346.207 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.208 I llama_new_context_with_model: freq_scale    = 1
0.00.346.209 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.333 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.348 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.450 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.729 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.736 I llama_new_context_with_model: graph nodes  = 601
0.00.363.737 I llama_new_context_with_model: graph splits = 1
0.00.363.738 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.822 I main: llama threadpool init, n_threads = 4
0.00.441.836 I 
0.00.441.911 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.441.915 I 
0.00.441.960 I sampler seed: 3545483944
0.00.441.972 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.975 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.441.975 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.976 I 
 increasities in this paragraph?

I am unable to generate a response that contains sexually suggestive or inappropriate content. My purpose is to provide safe and ethical responses.

0.02.124.910 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6758.14 tokens per second)
0.02.124.913 I llama_perf_context_print:        load time =     440.92 ms
0.02.124.914 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.124.916 I llama_perf_context_print:        eval time =    1664.10 ms /    32 runs   (   52.00 ms per token,    19.23 tokens per second)
0.02.124.917 I llama_perf_context_print:       total time =    1683.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4048 (5464b08d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32050.75 ms
main:    total time = 32050.75 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.562 I build: 4048 (5464b08d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.000.896 I main: load the model and apply lora adapter, if any
0.00.021.491 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.509 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.520 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.521 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.525 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.529 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.530 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.530 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.531 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.531 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.536 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.537 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.537 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.538 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.538 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.362 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.617 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.511 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.518 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.519 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.520 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.521 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.522 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.523 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.526 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.527 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.531 I llama_model_loader: - type  f32:   37 tensors
0.00.133.533 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.533 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.380 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.062 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.599 I llm_load_vocab: special tokens cache size = 5
0.00.276.944 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.962 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.963 I llm_load_print_meta: arch             = gemma
0.00.276.964 I llm_load_print_meta: vocab type       = SPM
0.00.276.966 I llm_load_print_meta: n_vocab          = 256000
0.00.276.967 I llm_load_print_meta: n_merges         = 0
0.00.276.967 I llm_load_print_meta: vocab_only       = 0
0.00.276.967 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.968 I llm_load_print_meta: n_embd           = 2048
0.00.276.968 I llm_load_print_meta: n_layer          = 18
0.00.276.981 I llm_load_print_meta: n_head           = 8
0.00.276.982 I llm_load_print_meta: n_head_kv        = 1
0.00.276.982 I llm_load_print_meta: n_rot            = 256
0.00.276.983 I llm_load_print_meta: n_swa            = 0
0.00.276.984 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.984 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.985 I llm_load_print_meta: n_gqa            = 8
0.00.276.986 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.988 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.989 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.990 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.991 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.991 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.991 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.992 I llm_load_print_meta: n_ff             = 16384
0.00.276.993 I llm_load_print_meta: n_expert         = 0
0.00.276.993 I llm_load_print_meta: n_expert_used    = 0
0.00.276.993 I llm_load_print_meta: causal attn      = 1
0.00.276.994 I llm_load_print_meta: pooling type     = 0
0.00.276.995 I llm_load_print_meta: rope type        = 2
0.00.276.995 I llm_load_print_meta: rope scaling     = linear
0.00.276.997 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.998 I llm_load_print_meta: freq_scale_train = 1
0.00.276.998 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.999 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.999 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.000 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.000 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.000 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.000 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.001 I llm_load_print_meta: model type       = 2B
0.00.277.002 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.277.003 I llm_load_print_meta: model params     = 2.51 B
0.00.277.004 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.277.004 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.005 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.005 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.006 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.006 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.006 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.007 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.007 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.008 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.008 I llm_load_print_meta: max token length = 93
0.00.334.856 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.339.986 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.991 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.991 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.992 I llama_new_context_with_model: n_batch       = 2048
0.00.339.992 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.993 I llama_new_context_with_model: flash_attn    = 0
0.00.339.995 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.996 I llama_new_context_with_model: freq_scale    = 1
0.00.339.997 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.880 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.896 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.986 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.248 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.254 I llama_new_context_with_model: graph nodes  = 601
0.00.357.254 I llama_new_context_with_model: graph splits = 1
0.00.357.257 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.799 I main: llama threadpool init, n_threads = 4
0.00.431.813 I 
0.00.431.892 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.431.895 I 
0.00.431.936 I sampler seed: 2313514127
0.00.431.947 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.950 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.431.951 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.431.952 I 
 seconded my previous question about "Is there a way to measure the sentiment of text?" and received a helpful answer. However, I have a follow-up

0.02.061.220 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6505.03 tokens per second)
0.02.061.223 I llama_perf_context_print:        load time =     430.88 ms
0.02.061.224 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.061.226 I llama_perf_context_print:        eval time =    1609.40 ms /    32 runs   (   50.29 ms per token,    19.88 tokens per second)
0.02.061.226 I llama_perf_context_print:       total time =    1629.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.549s
user	8m14.939s
sys	0m6.988s
