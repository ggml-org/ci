+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 3972 (5409a21e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.002.769 I main: load the model and apply lora adapter, if any
0.00.024.934 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.138 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.230 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.242 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.244 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.249 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.252 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.253 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.254 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.255 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.256 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.264 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.265 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.266 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.268 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.269 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.828 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.048 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.274 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.283 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.284 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.285 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.286 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.288 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.289 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.292 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.293 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.294 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.295 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.296 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.305 I llama_model_loader: - type  f32:   37 tensors
0.00.271.310 I llama_model_loader: - type q8_0:  127 tensors
0.00.462.626 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.139 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.227 I llm_load_vocab: special tokens cache size = 5
0.00.625.477 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.625.555 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.625.556 I llm_load_print_meta: arch             = gemma
0.00.625.557 I llm_load_print_meta: vocab type       = SPM
0.00.625.558 I llm_load_print_meta: n_vocab          = 256000
0.00.625.560 I llm_load_print_meta: n_merges         = 0
0.00.625.560 I llm_load_print_meta: vocab_only       = 0
0.00.625.561 I llm_load_print_meta: n_ctx_train      = 8192
0.00.625.561 I llm_load_print_meta: n_embd           = 2048
0.00.625.561 I llm_load_print_meta: n_layer          = 18
0.00.625.627 I llm_load_print_meta: n_head           = 8
0.00.625.634 I llm_load_print_meta: n_head_kv        = 1
0.00.625.635 I llm_load_print_meta: n_rot            = 256
0.00.625.635 I llm_load_print_meta: n_swa            = 0
0.00.625.636 I llm_load_print_meta: n_embd_head_k    = 256
0.00.625.636 I llm_load_print_meta: n_embd_head_v    = 256
0.00.625.640 I llm_load_print_meta: n_gqa            = 8
0.00.625.645 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.625.650 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.625.651 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.625.652 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.625.653 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.625.653 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.625.653 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.625.658 I llm_load_print_meta: n_ff             = 16384
0.00.625.684 I llm_load_print_meta: n_expert         = 0
0.00.625.684 I llm_load_print_meta: n_expert_used    = 0
0.00.625.685 I llm_load_print_meta: causal attn      = 1
0.00.625.685 I llm_load_print_meta: pooling type     = 0
0.00.625.686 I llm_load_print_meta: rope type        = 2
0.00.625.686 I llm_load_print_meta: rope scaling     = linear
0.00.625.687 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.625.688 I llm_load_print_meta: freq_scale_train = 1
0.00.625.688 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.625.689 I llm_load_print_meta: rope_finetuned   = unknown
0.00.625.689 I llm_load_print_meta: ssm_d_conv       = 0
0.00.625.689 I llm_load_print_meta: ssm_d_inner      = 0
0.00.625.689 I llm_load_print_meta: ssm_d_state      = 0
0.00.625.690 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.625.690 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.625.691 I llm_load_print_meta: model type       = 2B
0.00.625.699 I llm_load_print_meta: model ftype      = Q8_0
0.00.625.700 I llm_load_print_meta: model params     = 2.51 B
0.00.625.701 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.625.702 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.625.702 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.625.703 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.625.703 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.625.704 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.625.704 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.625.709 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.625.716 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.625.717 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.625.727 I llm_load_print_meta: max token length = 93
0.00.625.896 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.725.121 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.725.133 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.725.133 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.725.134 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.725.135 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.725.136 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.730.783 I llama_new_context_with_model: n_ctx      = 8192
0.00.730.790 I llama_new_context_with_model: n_batch    = 2048
0.00.730.790 I llama_new_context_with_model: n_ubatch   = 512
0.00.730.791 I llama_new_context_with_model: flash_attn = 0
0.00.730.794 I llama_new_context_with_model: freq_base  = 10000.0
0.00.730.794 I llama_new_context_with_model: freq_scale = 1
0.00.762.780 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.762.825 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.762.965 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.764.428 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.764.430 I llama_new_context_with_model: graph nodes  = 601
0.00.764.430 I llama_new_context_with_model: graph splits = 1
0.00.764.448 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.378.630 I main: llama threadpool init, n_threads = 4
0.01.378.644 I 
0.01.378.760 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.378.763 I 
0.01.378.959 I sampler seed: 1024603152
0.01.378.971 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.378.977 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.378.979 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.378.979 I 
 increadibly! [end of text]


0.03.069.253 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   799.23 tokens per second)
0.03.069.255 I llama_perf_context_print:        load time =    1375.75 ms
0.03.069.257 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.069.258 I llama_perf_context_print:        eval time =    1675.88 ms /     4 runs   (  418.97 ms per token,     2.39 tokens per second)
0.03.069.259 I llama_perf_context_print:       total time =    1690.63 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 3972 (5409a21e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.002.833 I main: load the model and apply lora adapter, if any
0.00.026.043 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.026.141 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.157 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.161 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.166 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.168 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.169 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.170 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.171 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.173 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.182 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.183 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.184 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.185 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.186 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.865 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.692 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.067 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.078 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.079 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.080 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.081 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.082 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.083 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.087 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.088 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.089 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.090 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.272.091 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.101 I llama_model_loader: - type  f32:   37 tensors
0.00.272.105 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.887 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.536.259 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.537.267 I llm_load_vocab: special tokens cache size = 5
0.00.632.263 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.632.335 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.632.339 I llm_load_print_meta: arch             = gemma
0.00.632.340 I llm_load_print_meta: vocab type       = SPM
0.00.632.341 I llm_load_print_meta: n_vocab          = 256000
0.00.632.343 I llm_load_print_meta: n_merges         = 0
0.00.632.344 I llm_load_print_meta: vocab_only       = 0
0.00.632.344 I llm_load_print_meta: n_ctx_train      = 8192
0.00.632.344 I llm_load_print_meta: n_embd           = 2048
0.00.632.345 I llm_load_print_meta: n_layer          = 18
0.00.632.409 I llm_load_print_meta: n_head           = 8
0.00.632.419 I llm_load_print_meta: n_head_kv        = 1
0.00.632.421 I llm_load_print_meta: n_rot            = 256
0.00.632.421 I llm_load_print_meta: n_swa            = 0
0.00.632.432 I llm_load_print_meta: n_embd_head_k    = 256
0.00.632.433 I llm_load_print_meta: n_embd_head_v    = 256
0.00.632.440 I llm_load_print_meta: n_gqa            = 8
0.00.632.447 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.632.452 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.632.454 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.632.455 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.632.455 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.632.456 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.632.458 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.632.464 I llm_load_print_meta: n_ff             = 16384
0.00.632.477 I llm_load_print_meta: n_expert         = 0
0.00.632.479 I llm_load_print_meta: n_expert_used    = 0
0.00.632.479 I llm_load_print_meta: causal attn      = 1
0.00.632.479 I llm_load_print_meta: pooling type     = 0
0.00.632.480 I llm_load_print_meta: rope type        = 2
0.00.632.480 I llm_load_print_meta: rope scaling     = linear
0.00.632.482 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.632.483 I llm_load_print_meta: freq_scale_train = 1
0.00.632.484 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.632.484 I llm_load_print_meta: rope_finetuned   = unknown
0.00.632.484 I llm_load_print_meta: ssm_d_conv       = 0
0.00.632.485 I llm_load_print_meta: ssm_d_inner      = 0
0.00.632.486 I llm_load_print_meta: ssm_d_state      = 0
0.00.632.486 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.632.486 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.632.487 I llm_load_print_meta: model type       = 2B
0.00.632.488 I llm_load_print_meta: model ftype      = Q8_0
0.00.632.489 I llm_load_print_meta: model params     = 2.51 B
0.00.632.489 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.632.490 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.632.491 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.632.491 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.632.492 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.632.492 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.632.493 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.632.493 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.632.499 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.632.501 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.632.501 I llm_load_print_meta: max token length = 93
0.00.632.693 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.726.465 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.732.386 I llama_new_context_with_model: n_ctx      = 8192
0.00.732.393 I llama_new_context_with_model: n_batch    = 2048
0.00.732.394 I llama_new_context_with_model: n_ubatch   = 512
0.00.732.394 I llama_new_context_with_model: flash_attn = 0
0.00.732.398 I llama_new_context_with_model: freq_base  = 10000.0
0.00.732.398 I llama_new_context_with_model: freq_scale = 1
0.00.762.779 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.762.822 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.762.941 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.764.326 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.764.330 I llama_new_context_with_model: graph nodes  = 601
0.00.764.331 I llama_new_context_with_model: graph splits = 1
0.00.764.347 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.373.906 I main: llama threadpool init, n_threads = 4
0.01.373.918 I 
0.01.374.037 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.374.042 I 
0.01.374.226 I sampler seed: 4232868873
0.01.374.238 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.374.245 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.374.248 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.374.248 I 
 increadibly, and in an instant, the world was engulfed in an ethereal glow.

This ethereal glow emanated from the summit of Mount Everest, casting an

0.14.916.437 I llama_perf_sampler_print:    sampling time =      49.65 ms /    33 runs   (    1.50 ms per token,   664.67 tokens per second)
0.14.916.458 I llama_perf_context_print:        load time =    1370.97 ms
0.14.916.460 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.916.462 I llama_perf_context_print:        eval time =   13446.90 ms /    32 runs   (  420.22 ms per token,     2.38 tokens per second)
0.14.916.464 I llama_perf_context_print:       total time =   13542.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.715 I build: 3972 (5409a21e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.917 I main: llama backend init
0.00.002.850 I main: load the model and apply lora adapter, if any
0.00.024.966 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.184 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.279 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.291 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.293 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.298 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.302 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.303 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.304 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.305 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.306 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.314 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.315 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.316 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.317 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.318 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.916 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.268.196 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.286.736 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.286.746 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.286.747 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.286.748 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.286.749 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.286.750 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.286.752 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.286.755 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.286.756 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.286.758 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.286.759 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.286.760 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.286.769 I llama_model_loader: - type  f32:   37 tensors
0.00.286.773 I llama_model_loader: - type q8_0:  127 tensors
0.00.470.453 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.535.201 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.536.261 I llm_load_vocab: special tokens cache size = 5
0.00.631.453 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.631.521 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.631.526 I llm_load_print_meta: arch             = gemma
0.00.631.526 I llm_load_print_meta: vocab type       = SPM
0.00.631.527 I llm_load_print_meta: n_vocab          = 256000
0.00.631.529 I llm_load_print_meta: n_merges         = 0
0.00.631.530 I llm_load_print_meta: vocab_only       = 0
0.00.631.530 I llm_load_print_meta: n_ctx_train      = 8192
0.00.631.531 I llm_load_print_meta: n_embd           = 2048
0.00.631.531 I llm_load_print_meta: n_layer          = 18
0.00.631.596 I llm_load_print_meta: n_head           = 8
0.00.631.606 I llm_load_print_meta: n_head_kv        = 1
0.00.631.607 I llm_load_print_meta: n_rot            = 256
0.00.631.608 I llm_load_print_meta: n_swa            = 0
0.00.631.608 I llm_load_print_meta: n_embd_head_k    = 256
0.00.631.609 I llm_load_print_meta: n_embd_head_v    = 256
0.00.631.622 I llm_load_print_meta: n_gqa            = 8
0.00.631.628 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.631.635 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.631.636 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.631.638 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.631.639 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.631.639 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.631.640 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.631.645 I llm_load_print_meta: n_ff             = 16384
0.00.631.646 I llm_load_print_meta: n_expert         = 0
0.00.631.647 I llm_load_print_meta: n_expert_used    = 0
0.00.631.647 I llm_load_print_meta: causal attn      = 1
0.00.631.647 I llm_load_print_meta: pooling type     = 0
0.00.631.648 I llm_load_print_meta: rope type        = 2
0.00.631.649 I llm_load_print_meta: rope scaling     = linear
0.00.631.651 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.631.652 I llm_load_print_meta: freq_scale_train = 1
0.00.631.664 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.631.665 I llm_load_print_meta: rope_finetuned   = unknown
0.00.631.665 I llm_load_print_meta: ssm_d_conv       = 0
0.00.631.665 I llm_load_print_meta: ssm_d_inner      = 0
0.00.631.666 I llm_load_print_meta: ssm_d_state      = 0
0.00.631.675 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.631.683 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.631.684 I llm_load_print_meta: model type       = 2B
0.00.631.685 I llm_load_print_meta: model ftype      = Q8_0
0.00.631.693 I llm_load_print_meta: model params     = 2.51 B
0.00.631.694 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.631.702 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.631.703 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.631.703 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.631.704 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.631.711 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.631.714 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.631.715 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.631.720 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.631.722 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.631.723 I llm_load_print_meta: max token length = 93
0.00.631.888 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.709.009 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.709.017 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.709.018 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.709.019 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.709.019 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.709.020 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.714.801 I llama_new_context_with_model: n_ctx      = 8192
0.00.714.811 I llama_new_context_with_model: n_batch    = 2048
0.00.714.811 I llama_new_context_with_model: n_ubatch   = 512
0.00.714.812 I llama_new_context_with_model: flash_attn = 0
0.00.714.815 I llama_new_context_with_model: freq_base  = 10000.0
0.00.714.816 I llama_new_context_with_model: freq_scale = 1
0.00.746.356 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.746.401 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.746.522 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.748.011 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.748.014 I llama_new_context_with_model: graph nodes  = 601
0.00.748.014 I llama_new_context_with_model: graph splits = 1
0.00.748.031 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.392.098 I main: llama threadpool init, n_threads = 4
0.01.392.111 I 
0.01.392.221 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.392.225 I 
0.01.392.403 I sampler seed: 3708466301
0.01.392.414 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.392.421 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.392.422 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.392.422 I 
 increamically. [end of text]


0.03.079.567 I llama_perf_sampler_print:    sampling time =       6.32 ms /     5 runs   (    1.26 ms per token,   791.01 tokens per second)
0.03.079.571 I llama_perf_context_print:        load time =    1389.16 ms
0.03.079.583 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.079.585 I llama_perf_context_print:        eval time =    1674.03 ms /     4 runs   (  418.51 ms per token,     2.39 tokens per second)
0.03.079.586 I llama_perf_context_print:       total time =    1687.48 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 3972 (5409a21e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.002.794 I main: load the model and apply lora adapter, if any
0.00.024.741 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.940 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.027 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.039 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.040 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.044 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.045 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.046 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.047 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.048 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.049 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.057 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.058 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.060 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.061 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.062 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.716 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.387 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.936 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.945 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.946 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.948 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.948 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.951 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.952 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.956 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.958 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.959 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.960 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.270.961 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.969 I llama_model_loader: - type  f32:   37 tensors
0.00.270.973 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.053 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.503 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.452 I llm_load_vocab: special tokens cache size = 5
0.00.609.619 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.689 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.693 I llm_load_print_meta: arch             = gemma
0.00.609.694 I llm_load_print_meta: vocab type       = SPM
0.00.609.695 I llm_load_print_meta: n_vocab          = 256000
0.00.609.697 I llm_load_print_meta: n_merges         = 0
0.00.609.697 I llm_load_print_meta: vocab_only       = 0
0.00.609.698 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.698 I llm_load_print_meta: n_embd           = 2048
0.00.609.698 I llm_load_print_meta: n_layer          = 18
0.00.609.760 I llm_load_print_meta: n_head           = 8
0.00.609.770 I llm_load_print_meta: n_head_kv        = 1
0.00.609.772 I llm_load_print_meta: n_rot            = 256
0.00.609.772 I llm_load_print_meta: n_swa            = 0
0.00.609.772 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.773 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.777 I llm_load_print_meta: n_gqa            = 8
0.00.609.783 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.790 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.791 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.792 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.794 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.794 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.795 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.800 I llm_load_print_meta: n_ff             = 16384
0.00.609.802 I llm_load_print_meta: n_expert         = 0
0.00.609.803 I llm_load_print_meta: n_expert_used    = 0
0.00.609.803 I llm_load_print_meta: causal attn      = 1
0.00.609.803 I llm_load_print_meta: pooling type     = 0
0.00.609.804 I llm_load_print_meta: rope type        = 2
0.00.609.804 I llm_load_print_meta: rope scaling     = linear
0.00.609.806 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.806 I llm_load_print_meta: freq_scale_train = 1
0.00.609.807 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.807 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.807 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.807 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.808 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.809 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.810 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.833 I llm_load_print_meta: model type       = 2B
0.00.609.836 I llm_load_print_meta: model ftype      = Q8_0
0.00.609.836 I llm_load_print_meta: model params     = 2.51 B
0.00.609.837 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.609.838 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.846 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.847 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.848 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.848 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.849 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.850 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.856 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.859 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.859 I llm_load_print_meta: max token length = 93
0.00.610.031 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.681.183 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.681.194 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.686.911 I llama_new_context_with_model: n_ctx      = 8192
0.00.686.918 I llama_new_context_with_model: n_batch    = 2048
0.00.686.918 I llama_new_context_with_model: n_ubatch   = 512
0.00.686.919 I llama_new_context_with_model: flash_attn = 0
0.00.686.921 I llama_new_context_with_model: freq_base  = 10000.0
0.00.686.922 I llama_new_context_with_model: freq_scale = 1
0.00.716.234 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.716.274 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.716.395 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.717.746 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.717.752 I llama_new_context_with_model: graph nodes  = 601
0.00.717.752 I llama_new_context_with_model: graph splits = 1
0.00.717.768 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.327.714 I main: llama threadpool init, n_threads = 4
0.01.327.726 I 
0.01.327.839 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.327.843 I 
0.01.328.018 I sampler seed: 4047612236
0.01.328.029 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.328.035 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.328.037 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.328.037 I 
 increasities with the allure of a mythical creature. 

The air crackles with tension, the ground trembles beneath the weight of unseen forces. The scent

0.14.714.252 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.70 tokens per second)
0.14.714.256 I llama_perf_context_print:        load time =    1324.84 ms
0.14.714.258 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.714.259 I llama_perf_context_print:        eval time =   13292.51 ms /    32 runs   (  415.39 ms per token,     2.41 tokens per second)
0.14.714.260 I llama_perf_context_print:       total time =   13386.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m45.591s
user	2m14.048s
sys	0m9.606s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3972 (5409a21e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199315.57 ms
main:    total time = 199315.57 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 3972 (5409a21e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.002.854 I main: load the model and apply lora adapter, if any
0.00.024.935 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.144 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.240 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.252 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.254 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.259 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.263 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.264 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.265 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.266 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.267 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.275 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.276 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.277 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.278 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.279 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.709 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.849 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.103 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.111 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.112 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.113 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.114 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.115 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.116 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.120 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.121 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.131 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.133 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.134 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.144 I llama_model_loader: - type  f32:   37 tensors
0.00.271.148 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.149 I llama_model_loader: - type q6_K:   19 tensors
0.00.455.187 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.362 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.367 I llm_load_vocab: special tokens cache size = 5
0.00.619.734 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.808 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.808 I llm_load_print_meta: arch             = gemma
0.00.619.809 I llm_load_print_meta: vocab type       = SPM
0.00.619.810 I llm_load_print_meta: n_vocab          = 256000
0.00.619.813 I llm_load_print_meta: n_merges         = 0
0.00.619.814 I llm_load_print_meta: vocab_only       = 0
0.00.619.814 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.814 I llm_load_print_meta: n_embd           = 2048
0.00.619.815 I llm_load_print_meta: n_layer          = 18
0.00.619.882 I llm_load_print_meta: n_head           = 8
0.00.619.890 I llm_load_print_meta: n_head_kv        = 1
0.00.619.891 I llm_load_print_meta: n_rot            = 256
0.00.619.895 I llm_load_print_meta: n_swa            = 0
0.00.619.896 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.896 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.901 I llm_load_print_meta: n_gqa            = 8
0.00.619.905 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.911 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.914 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.916 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.916 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.917 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.917 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.922 I llm_load_print_meta: n_ff             = 16384
0.00.619.923 I llm_load_print_meta: n_expert         = 0
0.00.619.924 I llm_load_print_meta: n_expert_used    = 0
0.00.619.924 I llm_load_print_meta: causal attn      = 1
0.00.619.925 I llm_load_print_meta: pooling type     = 0
0.00.619.934 I llm_load_print_meta: rope type        = 2
0.00.619.936 I llm_load_print_meta: rope scaling     = linear
0.00.619.951 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.959 I llm_load_print_meta: freq_scale_train = 1
0.00.619.960 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.961 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.961 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.962 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.969 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.977 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.979 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.979 I llm_load_print_meta: model type       = 2B
0.00.619.980 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.619.981 I llm_load_print_meta: model params     = 2.51 B
0.00.619.982 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.619.990 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.991 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.992 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.992 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.993 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.993 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.994 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.002 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.004 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.004 I llm_load_print_meta: max token length = 93
0.00.620.176 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.679.458 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.679.471 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.679.472 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.679.473 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.679.473 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.679.474 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.685.291 I llama_new_context_with_model: n_ctx      = 8192
0.00.685.299 I llama_new_context_with_model: n_batch    = 2048
0.00.685.299 I llama_new_context_with_model: n_ubatch   = 512
0.00.685.300 I llama_new_context_with_model: flash_attn = 0
0.00.685.304 I llama_new_context_with_model: freq_base  = 10000.0
0.00.685.305 I llama_new_context_with_model: freq_scale = 1
0.00.717.223 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.717.268 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.717.393 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.718.836 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.718.842 I llama_new_context_with_model: graph nodes  = 601
0.00.718.842 I llama_new_context_with_model: graph splits = 1
0.00.718.860 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.300.054 I main: llama threadpool init, n_threads = 4
0.01.300.067 I 
0.01.300.177 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.300.181 I 
0.01.300.359 I sampler seed: 3842771195
0.01.300.371 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.300.378 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.300.379 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.300.379 I 
 seconded, the ancient Greek city of Athens, has long been a source of fascination for scholars and visitors alike.

**a) Discuss the historical significance of

0.12.243.935 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.19 tokens per second)
0.12.243.937 I llama_perf_context_print:        load time =    1297.10 ms
0.12.243.957 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.243.959 I llama_perf_context_print:        eval time =   10848.91 ms /    32 runs   (  339.03 ms per token,     2.95 tokens per second)
0.12.243.959 I llama_perf_context_print:       total time =   10943.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3972 (5409a21e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199144.06 ms
main:    total time = 199144.06 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 3972 (5409a21e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.850 I main: load the model and apply lora adapter, if any
0.00.024.845 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.941 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.956 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.957 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.961 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.963 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.964 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.965 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.966 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.968 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.976 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.978 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.979 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.981 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.983 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.852 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.878 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.190 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.198 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.199 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.200 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.201 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.202 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.203 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.208 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.209 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.216 I llama_model_loader: - type  f32:   37 tensors
0.00.271.220 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.221 I llama_model_loader: - type q6_K:   19 tensors
0.00.459.196 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.991 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.531.055 I llm_load_vocab: special tokens cache size = 5
0.00.626.159 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.626.236 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.626.237 I llm_load_print_meta: arch             = gemma
0.00.626.238 I llm_load_print_meta: vocab type       = SPM
0.00.626.239 I llm_load_print_meta: n_vocab          = 256000
0.00.626.241 I llm_load_print_meta: n_merges         = 0
0.00.626.242 I llm_load_print_meta: vocab_only       = 0
0.00.626.242 I llm_load_print_meta: n_ctx_train      = 8192
0.00.626.242 I llm_load_print_meta: n_embd           = 2048
0.00.626.243 I llm_load_print_meta: n_layer          = 18
0.00.626.311 I llm_load_print_meta: n_head           = 8
0.00.626.318 I llm_load_print_meta: n_head_kv        = 1
0.00.626.318 I llm_load_print_meta: n_rot            = 256
0.00.626.318 I llm_load_print_meta: n_swa            = 0
0.00.626.319 I llm_load_print_meta: n_embd_head_k    = 256
0.00.626.319 I llm_load_print_meta: n_embd_head_v    = 256
0.00.626.324 I llm_load_print_meta: n_gqa            = 8
0.00.626.329 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.626.334 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.626.335 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.626.337 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.626.337 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.626.338 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.626.338 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.626.343 I llm_load_print_meta: n_ff             = 16384
0.00.626.344 I llm_load_print_meta: n_expert         = 0
0.00.626.344 I llm_load_print_meta: n_expert_used    = 0
0.00.626.345 I llm_load_print_meta: causal attn      = 1
0.00.626.350 I llm_load_print_meta: pooling type     = 0
0.00.626.350 I llm_load_print_meta: rope type        = 2
0.00.626.351 I llm_load_print_meta: rope scaling     = linear
0.00.626.352 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.626.355 I llm_load_print_meta: freq_scale_train = 1
0.00.626.356 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.626.356 I llm_load_print_meta: rope_finetuned   = unknown
0.00.626.357 I llm_load_print_meta: ssm_d_conv       = 0
0.00.626.357 I llm_load_print_meta: ssm_d_inner      = 0
0.00.626.357 I llm_load_print_meta: ssm_d_state      = 0
0.00.626.357 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.626.358 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.626.358 I llm_load_print_meta: model type       = 2B
0.00.626.359 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.626.360 I llm_load_print_meta: model params     = 2.51 B
0.00.626.361 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.626.361 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.626.362 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.626.362 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.626.363 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.626.364 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.626.365 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.626.365 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.626.371 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.626.372 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.626.373 I llm_load_print_meta: max token length = 93
0.00.626.540 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.684.894 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.690.666 I llama_new_context_with_model: n_ctx      = 8192
0.00.690.673 I llama_new_context_with_model: n_batch    = 2048
0.00.690.674 I llama_new_context_with_model: n_ubatch   = 512
0.00.690.674 I llama_new_context_with_model: flash_attn = 0
0.00.690.678 I llama_new_context_with_model: freq_base  = 10000.0
0.00.690.679 I llama_new_context_with_model: freq_scale = 1
0.00.720.570 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.720.614 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.720.735 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.722.079 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.722.084 I llama_new_context_with_model: graph nodes  = 601
0.00.722.084 I llama_new_context_with_model: graph splits = 1
0.00.722.100 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.301.583 I main: llama threadpool init, n_threads = 4
0.01.301.598 I 
0.01.301.712 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.301.712 I 
0.01.301.900 I sampler seed: 1169152097
0.01.301.912 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.301.919 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.301.919 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.301.920 I 
 squaRED, a company specializing in cloud storage solutions, has decided to offer a limited-time promotion on their storage services.

**Promotion Details:**

-

0.12.246.164 I llama_perf_sampler_print:    sampling time =      49.59 ms /    33 runs   (    1.50 ms per token,   665.43 tokens per second)
0.12.246.168 I llama_perf_context_print:        load time =    1298.64 ms
0.12.246.169 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.246.172 I llama_perf_context_print:        eval time =   10849.56 ms /    32 runs   (  339.05 ms per token,     2.95 tokens per second)
0.12.246.173 I llama_perf_context_print:       total time =   10944.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.943s
user	50m11.901s
sys	0m6.361s
