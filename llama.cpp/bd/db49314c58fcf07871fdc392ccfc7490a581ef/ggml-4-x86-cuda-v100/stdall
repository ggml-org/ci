Requirement already satisfied: numpy~=1.26.4 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 1)) (1.26.4)
Requirement already satisfied: sentencepiece~=0.2.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 2)) (0.2.0)
Requirement already satisfied: transformers<5.0.0,>=4.40.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 3)) (4.40.1)
Requirement already satisfied: gguf>=0.1.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 4)) (0.9.0)
Requirement already satisfied: protobuf<5.0.0,>=4.21.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 5)) (4.25.3)
Requirement already satisfied: torch~=2.2.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (2.2.2)
Requirement already satisfied: safetensors>=0.4.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 3)) (0.4.2)
Requirement already satisfied: filelock in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 3)) (3.13.1)
Requirement already satisfied: tqdm>=4.27 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 3)) (4.66.2)
Requirement already satisfied: regex!=2019.12.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 3)) (2023.12.25)
Requirement already satisfied: pyyaml>=5.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 3)) (6.0.1)
Requirement already satisfied: packaging>=20.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 3)) (23.2)
Requirement already satisfied: requests in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 3)) (2.31.0)
Requirement already satisfied: huggingface-hub<1.0,>=0.19.3 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 3)) (0.20.3)
Requirement already satisfied: tokenizers<0.20,>=0.19 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 3)) (0.19.1)
Requirement already satisfied: nvidia-cudnn-cu12==8.9.2.26 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (8.9.2.26)
Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (11.4.5.107)
Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (12.1.0.106)
Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (12.1.105)
Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (12.1.105)
Requirement already satisfied: nvidia-nccl-cu12==2.19.3 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (2.19.3)
Requirement already satisfied: sympy in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (1.12)
Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (12.1.105)
Requirement already satisfied: triton==2.2.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (2.2.0)
Requirement already satisfied: jinja2 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (3.1.3)
Requirement already satisfied: networkx in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (3.2.1)
Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (12.1.105)
Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (11.0.2.54)
Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (10.3.2.106)
Requirement already satisfied: fsspec in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (2024.2.0)
Requirement already satisfied: typing-extensions>=4.8.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (4.9.0)
Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (12.1.3.1)
Requirement already satisfied: nvidia-nvjitlink-cu12 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from nvidia-cusolver-cu12==11.4.5.107->torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (12.3.101)
Requirement already satisfied: MarkupSafe>=2.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from jinja2->torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (2.1.5)
Requirement already satisfied: idna<4,>=2.5 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 3)) (3.6)
Requirement already satisfied: certifi>=2017.4.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 3)) (2024.2.2)
Requirement already satisfied: charset-normalizer<4,>=2 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 3)) (3.3.2)
Requirement already satisfied: urllib3<3,>=1.21.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-legacy-llama.txt (line 3)) (2.2.1)
Requirement already satisfied: mpmath>=0.19 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from sympy->torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (1.3.0)
Obtaining file:///home/ggml/work/llama.cpp/gguf-py
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: numpy>=1.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from gguf==0.9.0) (1.26.4)
Requirement already satisfied: tqdm>=4.27 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from gguf==0.9.0) (4.66.2)
Building wheels for collected packages: gguf
  Building editable for gguf (pyproject.toml): started
  Building editable for gguf (pyproject.toml): finished with status 'done'
  Created wheel for gguf: filename=gguf-0.9.0-py3-none-any.whl size=3289 sha256=701cc7c488d402c0e365bf43e84e57e5e97e1457a1f9d18440c8a81f13890b31
  Stored in directory: /tmp/pip-ephem-wheel-cache-25olw5f8/wheels/a3/4c/52/c5934ad001d1a70ca5434f11ddc622cad9c0a484e9bf6feda3
Successfully built gguf
Installing collected packages: gguf
  Attempting uninstall: gguf
    Found existing installation: gguf 0.9.0
    Uninstalling gguf-0.9.0:
      Successfully uninstalled gguf-0.9.0
Successfully installed gguf-0.9.0
+ gg_run_ctest_debug
+ cd /home/ggml/work/llama.cpp
+ tee /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/ctest_debug.log
+ rm -rf build-ci-debug
+ mkdir build-ci-debug
+ cd build-ci-debug
+ set -e
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/ctest_debug-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Debug -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=1 ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- OpenMP found
-- Using ggml SGEMM
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA found
-- Using CUDA architectures: 52;61;70
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- x86 detected
-- Configuring done (4.4s)
CMake Warning (dev) in src/CMakeLists.txt:
  Policy CMP0104 is not set: CMAKE_CUDA_ARCHITECTURES now detected for NVCC,
  empty CUDA_ARCHITECTURES not allowed.  Run "cmake --help-policy CMP0104"
  for policy details.  Use the cmake_policy command to set the policy and
  suppress this warning.

  CUDA_ARCHITECTURES is empty for target "llama".
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) in examples/gguf/CMakeLists.txt:
  Policy CMP0104 is not set: CMAKE_CUDA_ARCHITECTURES now detected for NVCC,
  empty CUDA_ARCHITECTURES not allowed.  Run "cmake --help-policy CMP0104"
  for policy details.  Use the cmake_policy command to set the policy and
  suppress this warning.

  CUDA_ARCHITECTURES is empty for target "llama-gguf".
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) in examples/llava/CMakeLists.txt:
  Policy CMP0104 is not set: CMAKE_CUDA_ARCHITECTURES now detected for NVCC,
  empty CUDA_ARCHITECTURES not allowed.  Run "cmake --help-policy CMP0104"
  for policy details.  Use the cmake_policy command to set the policy and
  suppress this warning.

  CUDA_ARCHITECTURES is empty for target "llava_shared".
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-debug

real	0m4.681s
user	0m3.591s
sys	0m1.088s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/ctest_debug-make.log
+ make -j
[  0%] Generating build details from Git
[  1%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml.c.o
[  1%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-alloc.c.o
-- Found Git: /usr/bin/git (found version "2.34.1") 
[  2%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-backend.c.o
[  2%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-quants.c.o
[  2%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/acc.cu.o
[  3%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/arange.cu.o
[  3%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/argsort.cu.o
[  4%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/binbcast.cu.o
[  4%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/clamp.cu.o
[  5%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/concat.cu.o
[  5%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/convert.cu.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/cpy.cu.o
[  6%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/diagmask.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/dmmv.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn-tile-f16.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn-tile-f32.cu.o
[  8%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn.cu.o
[  8%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/getrows.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/im2col.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/mmq.cu.o
[ 10%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/mmvq.cu.o
[ 10%] Built target build_info
[ 10%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/norm.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/pad.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/pool2d.cu.o
[ 12%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/quantize.cu.o
[ 12%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/rope.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/scale.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/softmax.cu.o
[ 14%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/tsembd.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/upscale.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/sumrows.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/unary.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda.cu.o
[ 16%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb16.cu.o
[ 16%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb32.cu.o
[ 17%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb16.cu.o
[ 17%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb32.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb8.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q2_k.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q3_k.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_0.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_1.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_k.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_0.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_1.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_k.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q8_0.cu.o
[ 23%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q6_k.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 26%] Building CXX object ggml/src/CMakeFiles/ggml.dir/sgemm.cpp.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 27%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 27%] Built target ggml
[ 27%] Linking CXX static library libggml_static.a
[ 28%] Linking CXX shared library libggml_shared.so
[ 29%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 30%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 30%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 31%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 31%] Linking CXX executable ../../bin/llama-gguf
[ 31%] Built target ggml_shared
[ 31%] Built target llama-gguf
[ 31%] Built target ggml_static
[ 31%] Linking CXX shared library libllama.so
[ 31%] Built target llama
[ 31%] Building CXX object examples/benchmark/CMakeFiles/llama-bench-matmult.dir/benchmark-matmult.cpp.o
[ 31%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 31%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 32%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 32%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 33%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 33%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 34%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 34%] Building CXX object common/CMakeFiles/common.dir/grammar-parser.cpp.o
[ 35%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 35%] Building CXX object common/CMakeFiles/common.dir/train.cpp.o
[ 36%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 37%] Linking C executable ../bin/test-c
[ 37%] Built target test-c
[ 38%] Linking CXX executable ../../bin/llama-bench-matmult
[ 39%] Linking CXX executable ../../bin/llama-quantize-stats
[ 39%] Built target llama-bench-matmult
[ 39%] Built target llama-quantize-stats
[ 39%] Built target llava
[ 40%] Linking CXX static library libllava_static.a
[ 40%] Linking CXX shared library libllava_shared.so
[ 40%] Built target llava_static
[ 40%] Built target llava_shared
[ 40%] Linking CXX static library libcommon.a
[ 40%] Built target common
[ 40%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 40%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 40%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 41%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 41%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 41%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 42%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 43%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 43%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 45%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 45%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 45%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 45%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 46%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 46%] Building CXX object tests/CMakeFiles/test-grad0.dir/test-grad0.cpp.o
[ 47%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 48%] Building CXX object tests/CMakeFiles/test-grad0.dir/get-model.cpp.o
[ 49%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 49%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 49%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 50%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 50%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 51%] Linking CXX executable ../bin/test-rope
[ 51%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 52%] Building CXX object examples/baby-llama/CMakeFiles/llama-baby-llama.dir/baby-llama.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 53%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 53%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 53%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 53%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 54%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 55%] Linking CXX executable ../bin/test-quantize-fns
[ 56%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 56%] Linking CXX executable ../bin/test-model-load-cancel
[ 56%] Linking CXX executable ../bin/test-grad0
[ 57%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 58%] Building CXX object examples/finetune/CMakeFiles/llama-finetune.dir/finetune.cpp.o
[ 58%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 59%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 59%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 60%] Linking CXX executable ../bin/test-chat-template
[ 60%] Linking CXX executable ../bin/test-grammar-parser
[ 60%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 60%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 60%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 60%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 60%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 60%] Linking CXX executable ../../bin/llama-baby-llama
[ 61%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 62%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 63%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 64%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 65%] Linking CXX executable ../bin/test-backend-ops
[ 65%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 66%] Linking CXX executable ../bin/test-sampling
[ 67%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 68%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 68%] Linking CXX executable ../bin/test-autorelease
[ 69%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 69%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 69%] Generating theme-snowstorm.css.hpp
[ 69%] Generating colorthemes.css.hpp
[ 69%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 69%] Generating completion.js.hpp
[ 70%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 70%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 71%] Linking CXX executable ../bin/test-tokenizer-0
[ 70%] Generating index-new.html.hpp
[ 72%] Generating index.html.hpp
[ 73%] Linking CXX executable ../../bin/llama-batched-bench
[ 74%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 74%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 75%] Building CXX object examples/train-text-from-scratch/CMakeFiles/llama-train-text-from-scratch.dir/train-text-from-scratch.cpp.o
[ 76%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 77%] Generating index.js.hpp
[ 78%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 78%] Generating json-schema-to-grammar.mjs.hpp
[ 78%] Generating prompt-formats.js.hpp
[ 79%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 79%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[ 80%] Generating system-prompts.js.hpp
[ 81%] Generating theme-beeninorder.css.hpp
[ 81%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 81%] Generating style.css.hpp
[ 81%] Generating theme-ketivah.css.hpp
[ 82%] Generating theme-mangotango.css.hpp
[ 82%] Linking CXX executable ../bin/test-quantize-perf
[ 82%] Generating theme-playground.css.hpp
[ 83%] Generating theme-polarnight.css.hpp
[ 84%] Linking CXX executable ../../bin/llama-batched
[ 84%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 84%] Linking CXX executable ../../bin/llama-lookup-create
[ 84%] Built target test-grammar-parser
[ 84%] Linking CXX executable ../../bin/llama-eval-callback
[ 85%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 85%] Linking CXX executable ../../bin/llama-embedding
[ 86%] Linking CXX executable ../bin/test-grammar-integration
[ 86%] Linking CXX executable ../../bin/llama-export-lora
[ 87%] Linking CXX executable ../../bin/llama-gritlm
[ 87%] Built target test-rope
[ 87%] Built target test-grad0
[ 87%] Linking CXX executable ../../bin/llama-finetune
[ 87%] Built target test-model-load-cancel
[ 88%] Linking CXX executable ../../bin/llama-gguf-split
[ 89%] Linking CXX executable ../../bin/llama-q8dot
[ 90%] Linking CXX executable ../../bin/llama-infill
[ 90%] Built target test-quantize-fns
[ 90%] Linking CXX executable ../../bin/llama-lookahead
[ 91%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[ 91%] Linking CXX executable ../../bin/llama-lookup-merge
[ 92%] Linking CXX executable ../../bin/llama-save-load-state
[ 92%] Built target test-chat-template
[ 93%] Linking CXX executable ../../bin/llama-imatrix
[ 94%] Linking CXX executable ../../bin/llama-llava-cli
[ 94%] Linking CXX executable ../../bin/llama-vdot
[ 94%] Linking CXX executable ../../bin/llama-passkey
[ 94%] Linking CXX executable ../../bin/llama-lookup
[ 95%] Linking CXX executable ../../bin/llama-cli
[ 95%] Linking CXX executable ../../bin/llama-tokenize
[ 96%] Linking CXX executable ../../bin/llama-perplexity
[ 96%] Linking CXX executable ../../bin/llama-lookup-stats
[ 96%] Linking CXX executable ../../bin/llama-parallel
[ 97%] Linking CXX executable ../../bin/llama-retrieval
[ 98%] Linking CXX executable ../../bin/llama-quantize
[ 98%] Linking CXX executable ../../bin/llama-train-text-from-scratch
[ 98%] Linking CXX executable ../../bin/llama-simple
[ 98%] Linking CXX executable ../../bin/llama-speculative
[ 98%] Built target test-autorelease
[ 98%] Built target test-sampling
[ 98%] Built target test-backend-ops
[ 98%] Built target llama-export-lora
[ 98%] Built target test-quantize-perf
[ 98%] Built target llama-gbnf-validator
[ 98%] Built target llama-convert-llama2c-to-ggml
[ 98%] Built target llama-gguf-split
[ 98%] Built target llama-q8dot
[ 98%] Built target llama-lookup-merge
[ 98%] Built target llama-vdot
[ 98%] Built target test-grammar-integration
[ 98%] Linking CXX executable ../../bin/llama-server
[ 98%] Built target llama-batched
[ 98%] Built target test-json-schema-to-grammar
[ 98%] Built target test-tokenizer-1-bpe
[ 98%] Built target test-tokenizer-1-spm
[ 98%] Built target llama-embedding
[ 98%] Built target llama-baby-llama
[ 98%] Built target test-tokenizer-0
[ 98%] Built target llama-lookahead
[ 98%] Built target llama-lookup-create
[ 98%] Built target llama-gritlm
[ 98%] Built target llama-batched-bench
[ 98%] Built target llama-eval-callback
[ 98%] Built target llama-finetune
[ 98%] Built target llama-quantize
[ 98%] Built target llama-perplexity
[ 98%] Built target llama-infill
[ 98%] Built target llama-save-load-state
[ 98%] Built target llama-simple
[ 98%] Built target llama-cli
[ 98%] Built target llama-parallel
[ 98%] Built target llama-speculative
[ 98%] Built target llama-tokenize
[ 98%] Built target llama-passkey
[ 98%] Built target llama-train-text-from-scratch
[ 98%] Built target llama-retrieval
[ 98%] Built target llama-lookup-stats
[ 98%] Built target llama-lookup
[ 98%] Built target llama-imatrix
[ 98%] Built target llama-llava-cli
[ 98%] Built target llama-server
[ 98%] Linking CXX executable ../../bin/llama-cvector-generator
[ 98%] Built target llama-cvector-generator
[ 99%] Linking CXX executable ../../bin/llama-bench
[ 99%] Built target llama-bench
[100%] Linking CXX executable ../bin/test-llama-grammar
[100%] Built target test-llama-grammar

real	0m40.901s
user	1m17.678s
sys	0m10.943s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/ctest_debug-ctest.log
+ ctest --output-on-failure -L main -E test-opt
Test project /home/ggml/work/llama.cpp/build-ci-debug
      Start  1: test-tokenizer-0-llama-spm
 1/22 Test  #1: test-tokenizer-0-llama-spm .......   Passed    0.18 sec
      Start  2: test-tokenizer-0-llama-bpe
 2/22 Test  #2: test-tokenizer-0-llama-bpe .......   Passed    2.10 sec
      Start  3: test-tokenizer-0-phi-3
 3/22 Test  #3: test-tokenizer-0-phi-3 ...........   Passed    0.17 sec
      Start  4: test-tokenizer-0-falcon
 4/22 Test  #4: test-tokenizer-0-falcon ..........   Passed    0.73 sec
      Start  5: test-tokenizer-0-bert-bge
 5/22 Test  #5: test-tokenizer-0-bert-bge ........   Passed    0.18 sec
      Start  6: test-tokenizer-0-starcoder
 6/22 Test  #6: test-tokenizer-0-starcoder .......   Passed    0.56 sec
      Start  7: test-tokenizer-0-gpt-2
 7/22 Test  #7: test-tokenizer-0-gpt-2 ...........   Passed    0.56 sec
      Start  8: test-tokenizer-0-refact
 8/22 Test  #8: test-tokenizer-0-refact ..........   Passed    0.55 sec
      Start  9: test-tokenizer-0-command-r
 9/22 Test  #9: test-tokenizer-0-command-r .......   Passed    3.19 sec
      Start 10: test-tokenizer-0-qwen2
10/22 Test #10: test-tokenizer-0-qwen2 ...........   Passed    1.78 sec
      Start 11: test-tokenizer-1-llama-spm
11/22 Test #11: test-tokenizer-1-llama-spm .......   Passed    3.27 sec
      Start 12: test-quantize-fns
12/22 Test #12: test-quantize-fns ................   Passed   35.61 sec
      Start 13: test-quantize-perf
13/22 Test #13: test-quantize-perf ...............   Passed   10.59 sec
      Start 14: test-sampling
14/22 Test #14: test-sampling ....................   Passed    0.08 sec
      Start 15: test-chat-template
15/22 Test #15: test-chat-template ...............   Passed    0.04 sec
      Start 16: test-grammar-parser
16/22 Test #16: test-grammar-parser ..............   Passed    0.04 sec
      Start 17: test-llama-grammar
17/22 Test #17: test-llama-grammar ...............   Passed    0.04 sec
      Start 18: test-grammar-integration
18/22 Test #18: test-grammar-integration .........   Passed    0.07 sec
      Start 19: test-grad0
19/22 Test #19: test-grad0 .......................   Passed    0.34 sec
      Start 20: test-backend-ops
20/22 Test #20: test-backend-ops .................   Passed  209.11 sec
      Start 21: test-rope
21/22 Test #21: test-rope ........................   Passed    0.11 sec
      Start 24: test-json-schema-to-grammar
22/22 Test #24: test-json-schema-to-grammar ......   Passed    1.69 sec

100% tests passed, 0 tests failed out of 22

Label Time Summary:
main    = 270.99 sec*proc (22 tests)

Total Test time (real) = 271.00 sec

real	4m31.034s
user	10m4.571s
sys	0m5.138s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_release
+ cd /home/ggml/work/llama.cpp
+ tee /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/ctest_release.log
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/ctest_release-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=1 ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- OpenMP found
-- Using ggml SGEMM
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA found
-- Using CUDA architectures: 52;61;70
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- x86 detected
-- Configuring done (4.4s)
CMake Warning (dev) in src/CMakeLists.txt:
  Policy CMP0104 is not set: CMAKE_CUDA_ARCHITECTURES now detected for NVCC,
  empty CUDA_ARCHITECTURES not allowed.  Run "cmake --help-policy CMP0104"
  for policy details.  Use the cmake_policy command to set the policy and
  suppress this warning.

  CUDA_ARCHITECTURES is empty for target "llama".
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) in examples/gguf/CMakeLists.txt:
  Policy CMP0104 is not set: CMAKE_CUDA_ARCHITECTURES now detected for NVCC,
  empty CUDA_ARCHITECTURES not allowed.  Run "cmake --help-policy CMP0104"
  for policy details.  Use the cmake_policy command to set the policy and
  suppress this warning.

  CUDA_ARCHITECTURES is empty for target "llama-gguf".
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) in examples/llava/CMakeLists.txt:
  Policy CMP0104 is not set: CMAKE_CUDA_ARCHITECTURES now detected for NVCC,
  empty CUDA_ARCHITECTURES not allowed.  Run "cmake --help-policy CMP0104"
  for policy details.  Use the cmake_policy command to set the policy and
  suppress this warning.

  CUDA_ARCHITECTURES is empty for target "llava_shared".
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m4.648s
user	0m3.538s
sys	0m1.104s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/ctest_release-make.log
+ make -j
[  0%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  1%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml.c.o
[  1%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-alloc.c.o
[  1%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-backend.c.o
[  1%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/acc.cu.o
[  2%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-quants.c.o
[  3%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/arange.cu.o
[  3%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/argsort.cu.o
[  4%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/binbcast.cu.o
[  4%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/clamp.cu.o
[  5%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/concat.cu.o
[  5%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/convert.cu.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/dmmv.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/cpy.cu.o
[  7%] Built target build_info
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/diagmask.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn-tile-f16.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn-tile-f32.cu.o
[  8%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn.cu.o
[  8%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/getrows.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/im2col.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/mmq.cu.o
[ 10%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/mmvq.cu.o
[ 10%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/norm.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/pad.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/pool2d.cu.o
[ 12%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/quantize.cu.o
[ 12%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/rope.cu.o
[ 12%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/softmax.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/scale.cu.o
[ 14%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/tsembd.cu.o
[ 14%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/unary.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/upscale.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/sumrows.cu.o
[ 16%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda.cu.o
[ 16%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb16.cu.o
[ 16%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb32.cu.o
[ 17%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb16.cu.o
[ 17%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb32.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb8.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q2_k.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q3_k.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_0.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_k.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_1.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_0.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_1.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_k.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q6_k.cu.o
[ 23%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 23%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q8_0.cu.o
[ 23%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 27%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 27%] Building CXX object ggml/src/CMakeFiles/ggml.dir/sgemm.cpp.o
[ 27%] Built target ggml
[ 27%] Linking CXX static library libggml_static.a
[ 28%] Linking CXX shared library libggml_shared.so
[ 29%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 29%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 30%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 31%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 31%] Linking CXX executable ../../bin/llama-gguf
[ 31%] Built target ggml_shared
[ 31%] Built target llama-gguf
[ 31%] Built target ggml_static
[ 31%] Linking CXX shared library libllama.so
[ 31%] Built target llama
[ 32%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 32%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 32%] Building CXX object examples/benchmark/CMakeFiles/llama-bench-matmult.dir/benchmark-matmult.cpp.o
[ 32%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 32%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 33%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 33%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 34%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 34%] Building CXX object common/CMakeFiles/common.dir/grammar-parser.cpp.o
[ 35%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 35%] Building CXX object common/CMakeFiles/common.dir/train.cpp.o
[ 36%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 37%] Linking C executable ../bin/test-c
[ 37%] Built target test-c
[ 38%] Linking CXX executable ../../bin/llama-bench-matmult
[ 39%] Linking CXX executable ../../bin/llama-quantize-stats
[ 39%] Built target llama-bench-matmult
[ 39%] Built target llama-quantize-stats
[ 39%] Built target llava
[ 40%] Linking CXX static library libllava_static.a
[ 40%] Linking CXX shared library libllava_shared.so
[ 40%] Built target llava_static
[ 40%] Built target llava_shared
[ 40%] Linking CXX static library libcommon.a
[ 40%] Built target common
[ 40%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 40%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 41%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 41%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 41%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 42%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 42%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 42%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 42%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 43%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 45%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 46%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 46%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 46%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 47%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 47%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 48%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 48%] Building CXX object tests/CMakeFiles/test-grad0.dir/test-grad0.cpp.o
[ 49%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 50%] Building CXX object tests/CMakeFiles/test-grad0.dir/get-model.cpp.o
[ 50%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 50%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 52%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 53%] Building CXX object examples/baby-llama/CMakeFiles/llama-baby-llama.dir/baby-llama.cpp.o
[ 53%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 53%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 53%] Linking CXX executable ../bin/test-grammar-parser
[ 54%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 54%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 54%] Linking CXX executable ../bin/test-model-load-cancel
[ 55%] Linking CXX executable ../bin/test-chat-template
[ 56%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 57%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 57%] Linking CXX executable ../bin/test-rope
[ 58%] Building CXX object examples/finetune/CMakeFiles/llama-finetune.dir/finetune.cpp.o
[ 58%] Linking CXX executable ../bin/test-grad0
[ 59%] Linking CXX executable ../bin/test-quantize-fns
[ 60%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 60%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 60%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 60%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 60%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 60%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 60%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 60%] Linking CXX executable ../bin/test-autorelease
[ 60%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 61%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 62%] Linking CXX executable ../bin/test-sampling
[ 63%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 64%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 65%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 66%] Linking CXX executable ../bin/test-backend-ops
[ 66%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 67%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 68%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 68%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 68%] Generating theme-snowstorm.css.hpp
[ 68%] Built target test-model-load-cancel
[ 68%] Generating colorthemes.css.hpp
[ 68%] Linking CXX executable ../../bin/llama-baby-llama
[ 68%] Built target test-chat-template
[ 68%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 69%] Linking CXX executable ../bin/test-tokenizer-0
[ 69%] Generating completion.js.hpp
[ 70%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 70%] Built target test-grammar-parser
[ 70%] Generating index-new.html.hpp
[ 70%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 70%] Linking CXX executable ../../bin/llama-embedding
[ 71%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 72%] Generating index.html.hpp
[ 72%] Linking CXX executable ../bin/test-quantize-perf
[ 72%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 73%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 74%] Generating index.js.hpp
[ 74%] Generating json-schema-to-grammar.mjs.hpp
[ 74%] Generating prompt-formats.js.hpp
[ 74%] Generating style.css.hpp
[ 75%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 76%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 77%] Building CXX object examples/train-text-from-scratch/CMakeFiles/llama-train-text-from-scratch.dir/train-text-from-scratch.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-export-lora
[ 78%] Generating system-prompts.js.hpp
[ 79%] Linking CXX executable ../../bin/llama-batched-bench
[ 80%] Generating theme-beeninorder.css.hpp
[ 80%] Built target test-rope
[ 81%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 81%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[ 81%] Generating theme-ketivah.css.hpp
[ 82%] Generating theme-mangotango.css.hpp
[ 82%] Built target test-grad0
[ 82%] Generating theme-playground.css.hpp
[ 83%] Linking CXX executable ../../bin/llama-batched
[ 84%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 85%] Generating theme-polarnight.css.hpp
[ 85%] Built target test-quantize-fns
[ 86%] Linking CXX executable ../bin/test-grammar-integration
[ 86%] Built target test-sampling
[ 86%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 86%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 86%] Linking CXX executable ../../bin/llama-finetune
[ 86%] Built target test-autorelease
[ 87%] Linking CXX executable ../../bin/llama-infill
[ 87%] Linking CXX executable ../../bin/llama-eval-callback
[ 88%] Linking CXX executable ../../bin/llama-imatrix
[ 89%] Linking CXX executable ../../bin/llama-gritlm
[ 90%] Linking CXX executable ../../bin/llama-gguf-split
[ 90%] Linking CXX executable ../../bin/llama-lookup-merge
[ 90%] Linking CXX executable ../../bin/llama-lookup-create
[ 90%] Built target test-tokenizer-1-spm
[ 91%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[ 92%] Linking CXX executable ../../bin/llama-llava-cli
[ 93%] Linking CXX executable ../../bin/llama-q8dot
[ 93%] Linking CXX executable ../../bin/llama-simple
[ 93%] Built target test-backend-ops
[ 93%] Built target llama-embedding
[ 93%] Linking CXX executable ../../bin/llama-parallel
[ 93%] Linking CXX executable ../../bin/llama-lookahead
[ 93%] Built target test-quantize-perf
[ 93%] Linking CXX executable ../../bin/llama-lookup-stats
[ 93%] Linking CXX executable ../../bin/llama-passkey
[ 93%] Linking CXX executable ../../bin/llama-lookup
[ 93%] Linking CXX executable ../../bin/llama-vdot
[ 94%] Linking CXX executable ../../bin/llama-save-load-state
[ 94%] Built target llama-export-lora
[ 94%] Built target llama-gbnf-validator
[ 94%] Built target test-json-schema-to-grammar
[ 94%] Built target test-tokenizer-0
[ 95%] Linking CXX executable ../../bin/llama-perplexity
[ 96%] Linking CXX executable ../../bin/llama-retrieval
[ 97%] Linking CXX executable ../../bin/llama-cli
[ 97%] Built target test-grammar-integration
[ 97%] Built target llama-batched-bench
[ 97%] Built target llama-baby-llama
[ 98%] Linking CXX executable ../../bin/llama-quantize
[ 98%] Built target test-tokenizer-1-bpe
[ 98%] Built target llama-gguf-split
[ 98%] Built target llama-convert-llama2c-to-ggml
[ 98%] Linking CXX executable ../../bin/llama-tokenize
[ 98%] Built target llama-gritlm
[ 98%] Linking CXX executable ../../bin/llama-speculative
[ 98%] Linking CXX executable ../../bin/llama-train-text-from-scratch
[ 98%] Built target llama-lookup-merge
[ 98%] Built target llama-batched
[ 98%] Built target llama-imatrix
[ 98%] Built target llama-finetune
[ 98%] Built target llama-passkey
[ 98%] Built target llama-q8dot
[ 98%] Built target llama-infill
[ 98%] Built target llama-eval-callback
[ 98%] Built target llama-lookup-create
[ 98%] Built target llama-llava-cli
[ 98%] Built target llama-simple
[ 98%] Built target llama-vdot
[ 98%] Built target llama-lookahead
[ 98%] Built target llama-lookup
[ 98%] Built target llama-lookup-stats
[ 98%] Built target llama-parallel
[ 98%] Built target llama-cli
[ 98%] Built target llama-save-load-state
[ 98%] Built target llama-speculative
[ 98%] Built target llama-perplexity
[ 98%] Built target llama-retrieval
[ 98%] Built target llama-quantize
[ 98%] Built target llama-train-text-from-scratch
[ 98%] Built target llama-tokenize
[ 98%] Linking CXX executable ../../bin/llama-server
[ 98%] Built target llama-server
[ 98%] Linking CXX executable ../../bin/llama-cvector-generator
[ 98%] Built target llama-cvector-generator
[ 99%] Linking CXX executable ../../bin/llama-bench
[ 99%] Built target llama-bench
[100%] Linking CXX executable ../bin/test-llama-grammar
[100%] Built target test-llama-grammar

real	1m28.886s
user	2m1.829s
sys	0m7.774s
+ '[' -z ']'
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/ctest_release-ctest.log
+ ctest --output-on-failure -L main
Test project /home/ggml/work/llama.cpp/build-ci-release
      Start  1: test-tokenizer-0-llama-spm
 1/22 Test  #1: test-tokenizer-0-llama-spm .......   Passed    0.09 sec
      Start  2: test-tokenizer-0-llama-bpe
 2/22 Test  #2: test-tokenizer-0-llama-bpe .......   Passed    0.62 sec
      Start  3: test-tokenizer-0-phi-3
 3/22 Test  #3: test-tokenizer-0-phi-3 ...........   Passed    0.09 sec
      Start  4: test-tokenizer-0-falcon
 4/22 Test  #4: test-tokenizer-0-falcon ..........   Passed    0.21 sec
      Start  5: test-tokenizer-0-bert-bge
 5/22 Test  #5: test-tokenizer-0-bert-bge ........   Passed    0.07 sec
      Start  6: test-tokenizer-0-starcoder
 6/22 Test  #6: test-tokenizer-0-starcoder .......   Passed    0.16 sec
      Start  7: test-tokenizer-0-gpt-2
 7/22 Test  #7: test-tokenizer-0-gpt-2 ...........   Passed    0.16 sec
      Start  8: test-tokenizer-0-refact
 8/22 Test  #8: test-tokenizer-0-refact ..........   Passed    0.17 sec
      Start  9: test-tokenizer-0-command-r
 9/22 Test  #9: test-tokenizer-0-command-r .......   Passed    0.93 sec
      Start 10: test-tokenizer-0-qwen2
10/22 Test #10: test-tokenizer-0-qwen2 ...........   Passed    0.48 sec
      Start 11: test-tokenizer-1-llama-spm
11/22 Test #11: test-tokenizer-1-llama-spm .......   Passed    0.51 sec
      Start 12: test-quantize-fns
12/22 Test #12: test-quantize-fns ................   Passed   20.35 sec
      Start 13: test-quantize-perf
13/22 Test #13: test-quantize-perf ...............   Passed    5.72 sec
      Start 14: test-sampling
14/22 Test #14: test-sampling ....................   Passed    0.05 sec
      Start 15: test-chat-template
15/22 Test #15: test-chat-template ...............   Passed    0.04 sec
      Start 16: test-grammar-parser
16/22 Test #16: test-grammar-parser ..............   Passed    0.00 sec
      Start 17: test-llama-grammar
17/22 Test #17: test-llama-grammar ...............   Passed    0.04 sec
      Start 18: test-grammar-integration
18/22 Test #18: test-grammar-integration .........   Passed    0.04 sec
      Start 19: test-grad0
19/22 Test #19: test-grad0 .......................   Passed    0.29 sec
      Start 20: test-backend-ops
20/22 Test #20: test-backend-ops .................   Passed   44.54 sec
      Start 21: test-rope
21/22 Test #21: test-rope ........................   Passed    0.09 sec
      Start 24: test-json-schema-to-grammar
22/22 Test #24: test-json-schema-to-grammar ......   Passed    1.62 sec

100% tests passed, 0 tests failed out of 22

Label Time Summary:
main    =  76.25 sec*proc (22 tests)

Total Test time (real) =  76.27 sec

real	1m16.304s
user	1m20.521s
sys	0m3.781s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_embd_bge_small
+ tee /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/embd_bge_small.log
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2024-06-24 14:00:20 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json [743/743] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer.json
Last-modified header missing -- time-stamps turned off.
2024-06-24 14:00:21 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer.json [711396/711396] -> "tokenizer.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
Last-modified header missing -- time-stamps turned off.
2024-06-24 14:00:21 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json [366/366] -> "tokenizer_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
Last-modified header missing -- time-stamps turned off.
2024-06-24 14:00:21 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json [125/125] -> "special_tokens_map.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
Last-modified header missing -- time-stamps turned off.
2024-06-24 14:00:21 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json [52/52] -> "sentence_bert_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
Last-modified header missing -- time-stamps turned off.
2024-06-24 14:00:21 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt [231508/231508] -> "vocab.txt" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
Last-modified header missing -- time-stamps turned off.
2024-06-24 14:00:22 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json [349/349] -> "modules.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2024-06-24 14:00:22 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json [743/743] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/1_Pooling https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
+ local out=models-mnt/bge-small/1_Pooling
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/1_Pooling
+ cd models-mnt/bge-small/1_Pooling
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
Last-modified header missing -- time-stamps turned off.
2024-06-24 14:00:22 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json [190/190] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ path_models=../models-mnt/bge-small
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/embd_bge_small-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=1 ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- OpenMP found
-- Using ggml SGEMM
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA found
-- Using CUDA architectures: 52;61;70
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- x86 detected
-- Configuring done (4.3s)
CMake Warning (dev) in src/CMakeLists.txt:
  Policy CMP0104 is not set: CMAKE_CUDA_ARCHITECTURES now detected for NVCC,
  empty CUDA_ARCHITECTURES not allowed.  Run "cmake --help-policy CMP0104"
  for policy details.  Use the cmake_policy command to set the policy and
  suppress this warning.

  CUDA_ARCHITECTURES is empty for target "llama".
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) in examples/gguf/CMakeLists.txt:
  Policy CMP0104 is not set: CMAKE_CUDA_ARCHITECTURES now detected for NVCC,
  empty CUDA_ARCHITECTURES not allowed.  Run "cmake --help-policy CMP0104"
  for policy details.  Use the cmake_policy command to set the policy and
  suppress this warning.

  CUDA_ARCHITECTURES is empty for target "llama-gguf".
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) in examples/llava/CMakeLists.txt:
  Policy CMP0104 is not set: CMAKE_CUDA_ARCHITECTURES now detected for NVCC,
  empty CUDA_ARCHITECTURES not allowed.  Run "cmake --help-policy CMP0104"
  for policy details.  Use the cmake_policy command to set the policy and
  suppress this warning.

  CUDA_ARCHITECTURES is empty for target "llava_shared".
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m4.651s
user	0m3.505s
sys	0m1.142s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/embd_bge_small-make.log
+ make -j
[  0%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  1%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml.c.o
[  1%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-alloc.c.o
[  1%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-backend.c.o
[  2%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-quants.c.o
[  2%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/acc.cu.o
[  3%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/arange.cu.o
[  3%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/argsort.cu.o
[  3%] Built target build_info
[  4%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/binbcast.cu.o
[  4%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/clamp.cu.o
[  4%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/convert.cu.o
[  5%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/concat.cu.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/cpy.cu.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/diagmask.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/dmmv.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn-tile-f16.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn-tile-f32.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/getrows.cu.o
[  8%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/im2col.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/mmq.cu.o
[ 10%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/mmvq.cu.o
[ 10%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/norm.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/pad.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/pool2d.cu.o
[ 12%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/quantize.cu.o
[ 12%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/rope.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/scale.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/softmax.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/sumrows.cu.o
[ 14%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/tsembd.cu.o
[ 14%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/unary.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/upscale.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda.cu.o
[ 16%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb16.cu.o
[ 16%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb32.cu.o
[ 17%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb16.cu.o
[ 17%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb32.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb8.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q3_k.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q2_k.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_1.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_k.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_0.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_0.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_1.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_k.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q6_k.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q8_0.cu.o
[ 23%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 23%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 26%] Building CXX object ggml/src/CMakeFiles/ggml.dir/sgemm.cpp.o
[ 27%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 27%] Built target ggml
[ 27%] Linking CXX static library libggml_static.a
[ 29%] Linking CXX shared library libggml_shared.so
[ 29%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 30%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 30%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 31%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 31%] Linking CXX executable ../../bin/llama-gguf
[ 31%] Linking CXX shared library libllama.so
[ 31%] Built target ggml_shared
[ 31%] Built target llama-gguf
[ 31%] Built target llama
[ 32%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 32%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 32%] Building CXX object examples/benchmark/CMakeFiles/llama-bench-matmult.dir/benchmark-matmult.cpp.o
[ 32%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 33%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 33%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 33%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 33%] Building CXX object common/CMakeFiles/common.dir/grammar-parser.cpp.o
[ 34%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 35%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 35%] Building CXX object common/CMakeFiles/common.dir/train.cpp.o
[ 36%] Linking C executable ../bin/test-c
[ 37%] Linking CXX executable ../../bin/llama-bench-matmult
[ 37%] Built target llava
[ 38%] Linking CXX executable ../../bin/llama-quantize-stats
[ 39%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 39%] Linking CXX shared library libllava_shared.so
[ 40%] Linking CXX static library libllava_static.a
[ 40%] Linking CXX static library libcommon.a
[ 40%] Built target test-c
[ 40%] Built target llama-bench-matmult
[ 40%] Built target llama-quantize-stats
[ 40%] Built target llava_static
[ 40%] Built target common
[ 40%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 40%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 41%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 41%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 41%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 42%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 42%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 43%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 43%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 43%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 43%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 45%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 46%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 47%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 48%] Linking CXX executable ../bin/test-sampling
[ 49%] Linking CXX executable ../bin/test-quantize-fns
[ 50%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 50%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 51%] Linking CXX executable ../bin/test-grammar-parser
[ 51%] Linking CXX executable ../bin/test-tokenizer-0
[ 51%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 51%] Linking CXX executable ../bin/test-quantize-perf
[ 52%] Linking CXX executable ../bin/test-chat-template
[ 53%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-grad0.dir/test-grad0.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 54%] Linking CXX executable ../bin/test-grammar-integration
[ 55%] Building CXX object tests/CMakeFiles/test-grad0.dir/get-model.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 56%] Linking CXX executable ../bin/test-llama-grammar
[ 57%] Linking CXX executable ../bin/test-backend-ops
[ 58%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 58%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 59%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 59%] Linking CXX executable ../bin/test-grad0
[ 59%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 60%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 60%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 62%] Building CXX object examples/baby-llama/CMakeFiles/llama-baby-llama.dir/baby-llama.cpp.o
[ 62%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 62%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 62%] Linking CXX executable ../bin/test-model-load-cancel
[ 62%] Linking CXX executable ../../bin/llama-cvector-generator
[ 62%] Linking CXX executable ../bin/test-rope
[ 62%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 62%] Linking CXX executable ../bin/test-autorelease
[ 62%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 63%] Linking CXX executable ../../bin/llama-batched-bench
[ 63%] Linking CXX executable ../../bin/llama-baby-llama
[ 64%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 65%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 65%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 66%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 67%] Building CXX object examples/finetune/CMakeFiles/llama-finetune.dir/finetune.cpp.o
[ 67%] Built target test-grammar-parser
[ 67%] Linking CXX executable ../../bin/llama-eval-callback
[ 67%] Linking CXX executable ../../bin/llama-embedding
[ 68%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 69%] Linking CXX executable ../../bin/llama-batched
[ 70%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 70%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 70%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 70%] Linking CXX executable ../../bin/llama-export-lora
[ 70%] Linking CXX executable ../../bin/llama-finetune
[ 70%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 70%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 71%] Linking CXX executable ../../bin/llama-gguf-split
[ 71%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 71%] Built target test-tokenizer-1-spm
[ 71%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 72%] Linking CXX executable ../../bin/llama-gritlm
[ 72%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 73%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 73%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 74%] Linking CXX executable ../../bin/llama-imatrix
[ 74%] Built target test-chat-template
[ 75%] Linking CXX executable ../../bin/llama-bench
[ 76%] Linking CXX executable ../../bin/llama-infill
[ 76%] Built target test-quantize-fns
[ 77%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-lookahead
[ 78%] Linking CXX executable ../../bin/llama-llava-cli
[ 79%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 79%] Built target test-quantize-perf
[ 79%] Built target test-sampling
[ 79%] Linking CXX executable ../../bin/llama-lookup
[ 79%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 80%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 80%] Built target test-tokenizer-0
[ 80%] Linking CXX executable ../../bin/llama-lookup-create
[ 80%] Linking CXX executable ../../bin/llama-lookup-merge
[ 80%] Built target test-grad0
[ 81%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 82%] Linking CXX executable ../../bin/llama-cli
[ 82%] Linking CXX executable ../../bin/llama-lookup-stats
[ 82%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 83%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 83%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 83%] Built target test-grammar-integration
[ 83%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 83%] Built target test-tokenizer-1-bpe
[ 83%] Built target llama-baby-llama
[ 83%] Generating theme-snowstorm.css.hpp
[ 83%] Generating colorthemes.css.hpp
[ 83%] Linking CXX executable ../../bin/llama-parallel
[ 83%] Generating completion.js.hpp
[ 83%] Linking CXX executable ../../bin/llama-passkey
[ 83%] Built target test-autorelease
[ 83%] Built target test-model-load-cancel
[ 83%] Built target test-rope
[ 84%] Linking CXX executable ../../bin/llama-quantize
[ 84%] Built target test-json-schema-to-grammar
[ 84%] Generating index-new.html.hpp
[ 85%] Linking CXX executable ../../bin/llama-perplexity
[ 85%] Built target test-backend-ops
[ 86%] Generating index.html.hpp
[ 86%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 87%] Generating index.js.hpp
[ 88%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 89%] Linking CXX executable ../../bin/llama-retrieval
[ 89%] Generating json-schema-to-grammar.mjs.hpp
[ 89%] Built target test-llama-grammar
[ 89%] Generating prompt-formats.js.hpp
[ 89%] Built target llava_shared
[ 89%] Built target llama-embedding
[ 89%] Built target llama-eval-callback
[ 89%] Linking CXX executable ../../bin/llama-simple
[ 90%] Linking CXX executable ../../bin/llama-save-load-state
[ 90%] Built target llama-gguf-split
[ 91%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 91%] Generating style.css.hpp
[ 92%] Generating system-prompts.js.hpp
[ 93%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 94%] Building CXX object examples/train-text-from-scratch/CMakeFiles/llama-train-text-from-scratch.dir/train-text-from-scratch.cpp.o
[ 95%] Generating theme-beeninorder.css.hpp
[ 95%] Built target llama-cvector-generator
[ 95%] Built target ggml_static
[ 95%] Generating theme-ketivah.css.hpp
[ 95%] Built target llama-batched-bench
[ 96%] Generating theme-mangotango.css.hpp
[ 96%] Built target llama-batched
[ 96%] Linking CXX executable ../../bin/llama-speculative
[ 96%] Linking CXX executable ../../bin/llama-tokenize
[ 96%] Generating theme-playground.css.hpp
[ 96%] Built target llama-convert-llama2c-to-ggml
[ 97%] Generating theme-polarnight.css.hpp
[ 97%] Built target llama-export-lora
[ 97%] Linking CXX executable ../../bin/llama-train-text-from-scratch
[ 97%] Built target llama-gbnf-validator
[ 97%] Built target llama-infill
[ 98%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 98%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[ 98%] Built target llama-gritlm
[ 98%] Built target llama-finetune
[ 98%] Linking CXX executable ../../bin/llama-vdot
[ 99%] Linking CXX executable ../../bin/llama-q8dot
[ 99%] Built target llama-cli
[ 99%] Built target llama-lookahead
[ 99%] Built target llama-imatrix
[ 99%] Built target llama-lookup-merge
[ 99%] Built target llama-perplexity
[ 99%] Built target llama-lookup-stats
[ 99%] Built target llama-bench
[ 99%] Built target llama-llava-cli
[ 99%] Built target llama-lookup
[ 99%] Built target llama-lookup-create
[ 99%] Built target llama-passkey
[ 99%] Built target llama-parallel
[ 99%] Built target llama-quantize
[ 99%] Built target llama-save-load-state
[100%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[100%] Built target llama-retrieval
[100%] Built target llama-simple
[100%] Built target llama-speculative
[100%] Built target llama-train-text-from-scratch
[100%] Built target llama-tokenize
[100%] Linking CXX executable ../../bin/llama-server
[100%] Built target llama-q8dot
[100%] Built target llama-vdot
[100%] Built target llama-server

real	0m3.076s
user	0m10.078s
sys	0m3.821s
+ python3 ../convert-hf-to-gguf.py ../models-mnt/bge-small --outfile ../models-mnt/bge-small/ggml-model-f16.gguf
INFO:hf-to-gguf:Loading model: bge-small
INFO:gguf.gguf_writer:gguf: This GGUF file is for Little Endian only
INFO:hf-to-gguf:Set model parameters
INFO:hf-to-gguf:gguf: context length = 512
INFO:hf-to-gguf:gguf: embedding length = 384
INFO:hf-to-gguf:gguf: feed forward length = 1536
INFO:hf-to-gguf:gguf: head count = 12
INFO:hf-to-gguf:gguf: layer norm epsilon = 1e-12
INFO:hf-to-gguf:gguf: file type = 1
INFO:hf-to-gguf:Set model tokenizer
INFO:gguf.vocab:Setting special token type unk to 100
INFO:gguf.vocab:Setting special token type sep to 102
INFO:gguf.vocab:Setting special token type pad to 0
INFO:gguf.vocab:Setting special token type cls to 101
INFO:gguf.vocab:Setting special token type mask to 103
INFO:hf-to-gguf:Exporting model...
INFO:hf-to-gguf:gguf: loading model part 'pytorch_model.bin'
INFO:hf-to-gguf:token_embd.weight,               torch.float32 --> F16, shape = {384, 30522}
INFO:hf-to-gguf:position_embd.weight,            torch.float32 --> F32, shape = {384, 512}
INFO:hf-to-gguf:token_types.weight,              torch.float32 --> F32, shape = {384, 2}
INFO:hf-to-gguf:token_embd_norm.weight,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:token_embd_norm.bias,            torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.0.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.0.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.0.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.1.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.1.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.1.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.2.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.2.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.2.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.3.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.3.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.3.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.4.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.4.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.4.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.4.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.4.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.4.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.4.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.5.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.5.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.5.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.5.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.5.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.5.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.5.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.6.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.6.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.6.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.6.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.6.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.6.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.6.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.7.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.7.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.7.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.7.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.7.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.7.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.7.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.8.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.8.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.8.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.8.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.8.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.8.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.8.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.9.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.9.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.9.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.9.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.9.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.9.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.9.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_q.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.10.attn_q.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_k.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.10.attn_k.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_v.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.10.attn_v.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_output.weight,       torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.10.attn_output.bias,         torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.ffn_up.weight,            torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.10.ffn_up.bias,              torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.10.ffn_down.weight,          torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.10.ffn_down.bias,            torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.layer_output_norm.weight, torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.layer_output_norm.bias,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_q.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.11.attn_q.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_k.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.11.attn_k.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_v.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.11.attn_v.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_output.weight,       torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.11.attn_output.bias,         torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.ffn_up.weight,            torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.11.ffn_up.bias,              torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.11.ffn_down.weight,          torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.11.ffn_down.bias,            torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.layer_output_norm.weight, torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.layer_output_norm.bias,   torch.float32 --> F32, shape = {384}
INFO:gguf.gguf_writer:Writing the following files:
INFO:gguf.gguf_writer:../models-mnt/bge-small/ggml-model-f16.gguf: n_tensors = 197, total_size = 66.9M
Writing:   0%|          | 0.00/66.9M [00:00<?, ?byte/s]Writing:  48%|████▊     | 32.2M/66.9M [00:00<00:00, 320Mbyte/s]Writing:  96%|█████████▌| 64.3M/66.9M [00:00<00:00, 315Mbyte/s]Writing: 100%|██████████| 66.9M/66.9M [00:00<00:00, 307Mbyte/s]
INFO:hf-to-gguf:Model successfully exported.
+ model_f16=../models-mnt/bge-small/ggml-model-f16.gguf
+ model_q8_0=../models-mnt/bge-small/ggml-model-q8_0.gguf
+ ./bin/llama-quantize ../models-mnt/bge-small/ggml-model-f16.gguf ../models-mnt/bge-small/ggml-model-q8_0.gguf q8_0
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/bge-small/ggml-model-f16.gguf' to '../models-mnt/bge-small/ggml-model-q8_0.gguf' as Q8_0
llama_model_loader: loaded meta data with 22 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = bert
llama_model_loader: - kv   1:                               general.name str              = bge-small
llama_model_loader: - kv   2:                           bert.block_count u32              = 12
llama_model_loader: - kv   3:                        bert.context_length u32              = 512
llama_model_loader: - kv   4:                      bert.embedding_length u32              = 384
llama_model_loader: - kv   5:                   bert.feed_forward_length u32              = 1536
llama_model_loader: - kv   6:                  bert.attention.head_count u32              = 12
llama_model_loader: - kv   7:          bert.attention.layer_norm_epsilon f32              = 0.000000
llama_model_loader: - kv   8:                          general.file_type u32              = 1
llama_model_loader: - kv   9:                      bert.attention.causal bool             = false
llama_model_loader: - kv  10:                          bert.pooling_type u32              = 2
llama_model_loader: - kv  11:            tokenizer.ggml.token_type_count u32              = 2
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = bert
llama_model_loader: - kv  13:                         tokenizer.ggml.pre str              = jina-v2-en
llama_model_loader: - kv  14:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:            tokenizer.ggml.unknown_token_id u32              = 100
llama_model_loader: - kv  17:          tokenizer.ggml.seperator_token_id u32              = 102
llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.cls_token_id u32              = 101
llama_model_loader: - kv  20:               tokenizer.ggml.mask_token_id u32              = 103
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  124 tensors
llama_model_loader: - type  f16:   73 tensors
[   1/ 197]                    token_embd.weight - [  384, 30522,     1,     1], type =    f16, converting to q8_0 .. size =    22.35 MiB ->    11.88 MiB
[   2/ 197]                 position_embd.weight - [  384,   512,     1,     1], type =    f32, size =    0.750 MB
[   3/ 197]                   token_types.weight - [  384,     2,     1,     1], type =    f32, size =    0.003 MB
[   4/ 197]               token_embd_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   5/ 197]                 token_embd_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   6/ 197]                  blk.0.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[   7/ 197]                    blk.0.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   8/ 197]                  blk.0.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[   9/ 197]                    blk.0.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  10/ 197]                  blk.0.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  11/ 197]                    blk.0.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  12/ 197]             blk.0.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  13/ 197]               blk.0.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  14/ 197]        blk.0.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  15/ 197]          blk.0.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  16/ 197]                  blk.0.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  17/ 197]                    blk.0.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  18/ 197]                blk.0.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  19/ 197]                  blk.0.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  20/ 197]       blk.0.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  21/ 197]         blk.0.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  22/ 197]                  blk.1.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  23/ 197]                    blk.1.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  24/ 197]                  blk.1.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  25/ 197]                    blk.1.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  26/ 197]                  blk.1.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  27/ 197]                    blk.1.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  28/ 197]             blk.1.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  29/ 197]               blk.1.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  30/ 197]        blk.1.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  31/ 197]          blk.1.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  32/ 197]                  blk.1.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  33/ 197]                    blk.1.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  34/ 197]                blk.1.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  35/ 197]                  blk.1.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  36/ 197]       blk.1.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  37/ 197]         blk.1.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  38/ 197]                  blk.2.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  39/ 197]                    blk.2.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  40/ 197]                  blk.2.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  41/ 197]                    blk.2.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  42/ 197]                  blk.2.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  43/ 197]                    blk.2.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  44/ 197]             blk.2.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  45/ 197]               blk.2.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  46/ 197]        blk.2.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  47/ 197]          blk.2.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  48/ 197]                  blk.2.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  49/ 197]                    blk.2.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  50/ 197]                blk.2.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  51/ 197]                  blk.2.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  52/ 197]       blk.2.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  53/ 197]         blk.2.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  54/ 197]                  blk.3.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  55/ 197]                    blk.3.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  56/ 197]                  blk.3.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  57/ 197]                    blk.3.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  58/ 197]                  blk.3.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  59/ 197]                    blk.3.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  60/ 197]             blk.3.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  61/ 197]               blk.3.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  62/ 197]        blk.3.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  63/ 197]          blk.3.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  64/ 197]                  blk.3.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  65/ 197]                    blk.3.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  66/ 197]                blk.3.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  67/ 197]                  blk.3.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  68/ 197]       blk.3.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  69/ 197]         blk.3.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  70/ 197]                  blk.4.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  71/ 197]                    blk.4.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  72/ 197]                  blk.4.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  73/ 197]                    blk.4.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  74/ 197]                  blk.4.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  75/ 197]                    blk.4.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  76/ 197]             blk.4.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  77/ 197]               blk.4.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  78/ 197]        blk.4.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  79/ 197]          blk.4.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  80/ 197]                  blk.4.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  81/ 197]                    blk.4.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  82/ 197]                blk.4.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  83/ 197]                  blk.4.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  84/ 197]       blk.4.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  85/ 197]         blk.4.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  86/ 197]                  blk.5.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  87/ 197]                    blk.5.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  88/ 197]                  blk.5.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  89/ 197]                    blk.5.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  90/ 197]                  blk.5.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  91/ 197]                    blk.5.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  92/ 197]             blk.5.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  93/ 197]               blk.5.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  94/ 197]        blk.5.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  95/ 197]          blk.5.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  96/ 197]                  blk.5.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  97/ 197]                    blk.5.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  98/ 197]                blk.5.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  99/ 197]                  blk.5.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 100/ 197]       blk.5.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 101/ 197]         blk.5.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 102/ 197]                  blk.6.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 103/ 197]                    blk.6.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 104/ 197]                  blk.6.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 105/ 197]                    blk.6.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 106/ 197]                  blk.6.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 107/ 197]                    blk.6.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 108/ 197]             blk.6.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 109/ 197]               blk.6.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 110/ 197]        blk.6.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 111/ 197]          blk.6.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 112/ 197]                  blk.6.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 113/ 197]                    blk.6.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 114/ 197]                blk.6.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 115/ 197]                  blk.6.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 116/ 197]       blk.6.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 117/ 197]         blk.6.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 118/ 197]                  blk.7.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 119/ 197]                    blk.7.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 120/ 197]                  blk.7.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 121/ 197]                    blk.7.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 122/ 197]                  blk.7.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 123/ 197]                    blk.7.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 124/ 197]             blk.7.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 125/ 197]               blk.7.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 126/ 197]        blk.7.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 127/ 197]          blk.7.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 128/ 197]                  blk.7.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 129/ 197]                    blk.7.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 130/ 197]                blk.7.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 131/ 197]                  blk.7.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 132/ 197]       blk.7.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 133/ 197]         blk.7.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 134/ 197]                  blk.8.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 135/ 197]                    blk.8.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 136/ 197]                  blk.8.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 137/ 197]                    blk.8.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 138/ 197]                  blk.8.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 139/ 197]                    blk.8.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 140/ 197]             blk.8.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 141/ 197]               blk.8.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 142/ 197]        blk.8.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 143/ 197]          blk.8.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 144/ 197]                  blk.8.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 145/ 197]                    blk.8.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 146/ 197]                blk.8.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 147/ 197]                  blk.8.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 148/ 197]       blk.8.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 149/ 197]         blk.8.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 150/ 197]                  blk.9.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 151/ 197]                    blk.9.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 152/ 197]                  blk.9.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 153/ 197]                    blk.9.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 154/ 197]                  blk.9.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 155/ 197]                    blk.9.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 156/ 197]             blk.9.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 157/ 197]               blk.9.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 158/ 197]        blk.9.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 159/ 197]          blk.9.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 160/ 197]                  blk.9.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 161/ 197]                    blk.9.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 162/ 197]                blk.9.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 163/ 197]                  blk.9.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 164/ 197]       blk.9.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 165/ 197]         blk.9.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 166/ 197]                 blk.10.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 167/ 197]                   blk.10.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 168/ 197]                 blk.10.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 169/ 197]                   blk.10.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 170/ 197]                 blk.10.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 171/ 197]                   blk.10.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 172/ 197]            blk.10.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 173/ 197]              blk.10.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 174/ 197]       blk.10.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 175/ 197]         blk.10.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 176/ 197]                 blk.10.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 177/ 197]                   blk.10.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 178/ 197]               blk.10.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 179/ 197]                 blk.10.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 180/ 197]      blk.10.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 181/ 197]        blk.10.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 182/ 197]                 blk.11.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 183/ 197]                   blk.11.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 184/ 197]                 blk.11.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 185/ 197]                   blk.11.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 186/ 197]                 blk.11.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 187/ 197]                   blk.11.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 188/ 197]            blk.11.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 189/ 197]              blk.11.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 190/ 197]       blk.11.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 191/ 197]         blk.11.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 192/ 197]                 blk.11.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 193/ 197]                   blk.11.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 194/ 197]               blk.11.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 195/ 197]                 blk.11.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 196/ 197]      blk.11.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 197/ 197]        blk.11.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
llama_model_quantize_internal: model size  =    63.84 MB
llama_model_quantize_internal: quant size  =    34.38 MB

main: quantize time =   172.14 ms
main:    total time =   172.14 ms
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/embd_bge_small-tg-f16.log
+ ./bin/llama-embedding --model ../models-mnt/bge-small/ggml-model-f16.gguf -p 'I believe the meaning of life is'
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1719237633
llama_model_loader: loaded meta data with 22 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = bert
llama_model_loader: - kv   1:                               general.name str              = bge-small
llama_model_loader: - kv   2:                           bert.block_count u32              = 12
llama_model_loader: - kv   3:                        bert.context_length u32              = 512
llama_model_loader: - kv   4:                      bert.embedding_length u32              = 384
llama_model_loader: - kv   5:                   bert.feed_forward_length u32              = 1536
llama_model_loader: - kv   6:                  bert.attention.head_count u32              = 12
llama_model_loader: - kv   7:          bert.attention.layer_norm_epsilon f32              = 0.000000
llama_model_loader: - kv   8:                          general.file_type u32              = 1
llama_model_loader: - kv   9:                      bert.attention.causal bool             = false
llama_model_loader: - kv  10:                          bert.pooling_type u32              = 2
llama_model_loader: - kv  11:            tokenizer.ggml.token_type_count u32              = 2
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = bert
llama_model_loader: - kv  13:                         tokenizer.ggml.pre str              = jina-v2-en
llama_model_loader: - kv  14:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:            tokenizer.ggml.unknown_token_id u32              = 100
llama_model_loader: - kv  17:          tokenizer.ggml.seperator_token_id u32              = 102
llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.cls_token_id u32              = 101
llama_model_loader: - kv  20:               tokenizer.ggml.mask_token_id u32              = 103
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  124 tensors
llama_model_loader: - type  f16:   73 tensors
llm_load_vocab: special tokens cache size = 5
llm_load_vocab: token to piece cache size = 0.2032 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = bert
llm_load_print_meta: vocab type       = WPM
llm_load_print_meta: n_vocab          = 30522
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 512
llm_load_print_meta: n_embd           = 384
llm_load_print_meta: n_head           = 12
llm_load_print_meta: n_head_kv        = 12
llm_load_print_meta: n_layer          = 12
llm_load_print_meta: n_rot            = 32
llm_load_print_meta: n_embd_head_k    = 32
llm_load_print_meta: n_embd_head_v    = 32
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 384
llm_load_print_meta: n_embd_v_gqa     = 384
llm_load_print_meta: f_norm_eps       = 1.0e-12
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 1536
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 0
llm_load_print_meta: pooling type     = 2
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 512
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 33M
llm_load_print_meta: model ftype      = F16
llm_load_print_meta: model params     = 33.21 M
llm_load_print_meta: model size       = 63.84 MiB (16.12 BPW) 
llm_load_print_meta: general.name     = bge-small
llm_load_print_meta: UNK token        = 100 '[UNK]'
llm_load_print_meta: SEP token        = 102 '[SEP]'
llm_load_print_meta: PAD token        = 0 '[PAD]'
llm_load_print_meta: CLS token        = 101 '[CLS]'
llm_load_print_meta: MASK token       = 103 '[MASK]'
llm_load_print_meta: LF token         = 0 '[PAD]'
llm_load_print_meta: max token length = 21
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.08 MiB
llm_load_tensors: offloading 0 repeating layers to GPU
llm_load_tensors: offloaded 0/13 layers to GPU
llm_load_tensors:        CPU buffer size =    63.84 MiB
...............................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 2048
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:  CUDA_Host KV buffer size =     9.00 MiB
llama_new_context_with_model: KV self size  =    9.00 MiB, K (f16):    4.50 MiB, V (f16):    4.50 MiB
llama_new_context_with_model:        CPU  output buffer size =     0.00 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =    16.28 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     2.51 MiB
llama_new_context_with_model: graph nodes  = 429
llama_new_context_with_model: graph splits = 196

system_info: n_threads = 6 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
batch_decode: n_tokens = 9, n_seq = 1

llama_print_timings:        load time =     428.59 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =       5.21 ms /     9 tokens (    0.58 ms per token,  1726.12 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =       7.18 ms /    10 tokens

embedding 0: -0.043971 -0.019887  0.007663 -0.000824  0.001372 -0.037041  0.109431  0.042579  0.092050 -0.015921  0.006796 -0.035682 -0.017892  0.015058  0.018117  0.015870 -0.011307  0.010421 -0.085232 -0.008456  0.091377 -0.017067 -0.060337 -0.024495  0.027518  0.076072  0.027974 -0.014562  0.017653 -0.033285 -0.037865 -0.019007  0.068672 -0.009835 -0.025036  0.072342 -0.046554  0.011027 -0.050256  0.047714  0.032397 -0.011750  0.022052  0.049647  0.010470  0.005795 -0.028867  0.008937 -0.018510 -0.051475 -0.046052  0.030481 -0.035416  0.054213 -0.069654  0.044246  0.029789  0.046301  0.073410 -0.042580  0.076097  0.038863 -0.181172  0.082497  0.042278 -0.064545 -0.060106 -0.017856  0.006471  0.005889  0.017175 -0.026632  0.064571  0.112595  0.035141 -0.067417  0.027090 -0.067273 -0.033473 -0.033230  0.033242  0.013526 -0.003331 -0.037474 -0.052065  0.055143 -0.001984 -0.038295  0.064454  0.028827 -0.043337 -0.029241 -0.039464  0.036320  0.008383 -0.015458 -0.036589  0.018140  0.028600  0.342822 -0.044477  0.056102  0.017634 -0.020864 -0.066809  0.000154 -0.037905 -0.030073 -0.008543 -0.021586  0.000541 -0.003217  0.004011  0.018914 -0.008555  0.025829  0.049449  0.000081  0.050945 -0.042485 -0.031907  0.023605  0.030692 -0.023156 -0.046272 -0.079275  0.115182  0.046762  0.027836 -0.040734  0.067783 -0.022958  0.010323 -0.032946 -0.018314  0.043840  0.024255  0.052406  0.007480  0.008893  0.011244 -0.074651 -0.065568 -0.026751 -0.041200 -0.023880  0.026733  0.006902  0.027742  0.052874 -0.036661  0.057705 -0.000184  0.031742 -0.019777 -0.022070  0.041034 -0.058905  0.019605  0.043142  0.043589  0.041584 -0.022513  0.027057 -0.021825  0.005437 -0.041311 -0.001238  0.024444  0.002093  0.044337 -0.022741  0.043659  0.064765  0.055427  0.037071 -0.000925  0.046119  0.045812 -0.008494  0.063036 -0.073246 -0.011939  0.032116  0.023947  0.014722 -0.033678  0.001097 -0.015835 -0.019013  0.047876  0.110832  0.028430  0.031357 -0.013289 -0.057524  0.006646  0.005143 -0.012263 -0.051455 -0.000979 -0.017652 -0.019425 -0.040925  0.009179 -0.057956  0.050957  0.052340 -0.009602 -0.040253 -0.014084 -0.024886 -0.017274  0.006299  0.006589 -0.026932  0.015615  0.030755  0.002572  0.023215 -0.022197 -0.098550 -0.051096 -0.278021 -0.014996 -0.061568 -0.027221  0.017664 -0.010950 -0.017082  0.035070  0.046994 -0.015423  0.015225 -0.025470  0.047855 -0.005946 -0.000738 -0.061018 -0.068947 -0.060381 -0.035951  0.043324 -0.055042  0.015084  0.000538 -0.058191 -0.010447  0.012633  0.151499  0.127104 -0.013609  0.042008 -0.025671  0.014024 -0.001044 -0.150460  0.044855  0.005313 -0.036279 -0.029804 -0.020186 -0.034881  0.010230  0.033543 -0.048173 -0.051793 -0.017468 -0.023487  0.047365  0.052072 -0.016783 -0.055454  0.025828 -0.005707  0.010721  0.038705  0.008205 -0.009767 -0.105785 -0.027439 -0.096108  0.025063 -0.011246  0.092368  0.056099  0.003770  0.027797  0.002083 -0.051086 -0.039897 -0.013538 -0.044971 -0.015324  0.002920 -0.043506 -0.077937  0.065218 -0.006821 -0.001601 -0.014660  0.071550  0.023712 -0.037178  0.009176  0.001552 -0.032268  0.015464  0.037877  0.000362 -0.053205  0.021316 -0.039832  0.000026  0.013399  0.019805 -0.057878  0.006469 -0.049538 -0.267840  0.039152 -0.067975  0.038245 -0.012331  0.041494 -0.016127  0.052387 -0.071354  0.011362  0.024713 -0.007220  0.082106  0.028553 -0.021513  0.040503 -0.004554 -0.074587 -0.014753  0.020038  0.002303  0.023149  0.197202 -0.043238 -0.025992 -0.004957 -0.019292  0.074261  0.001716 -0.031988 -0.036595 -0.045076  0.000545 -0.011566  0.018119 -0.029467 -0.008452  0.006423  0.050808 -0.014955  0.006184  0.026096 -0.030803  0.048055  0.114093 -0.040820 -0.011463  0.005396 -0.003588  0.025159 -0.059132  0.013757 -0.010400  0.038709  0.051460  0.035404  0.035044 -0.017036  0.026371 -0.014494 -0.050020  0.003220  0.054129  0.039730 -0.039134 

real	0m0.614s
user	0m0.144s
sys	0m0.494s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/embd_bge_small-tg-q8_0.log
+ ./bin/llama-embedding --model ../models-mnt/bge-small/ggml-model-q8_0.gguf -p 'I believe the meaning of life is'
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1719237633
llama_model_loader: loaded meta data with 22 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-q8_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = bert
llama_model_loader: - kv   1:                               general.name str              = bge-small
llama_model_loader: - kv   2:                           bert.block_count u32              = 12
llama_model_loader: - kv   3:                        bert.context_length u32              = 512
llama_model_loader: - kv   4:                      bert.embedding_length u32              = 384
llama_model_loader: - kv   5:                   bert.feed_forward_length u32              = 1536
llama_model_loader: - kv   6:                  bert.attention.head_count u32              = 12
llama_model_loader: - kv   7:          bert.attention.layer_norm_epsilon f32              = 0.000000
llama_model_loader: - kv   8:                          general.file_type u32              = 7
llama_model_loader: - kv   9:                      bert.attention.causal bool             = false
llama_model_loader: - kv  10:                          bert.pooling_type u32              = 2
llama_model_loader: - kv  11:            tokenizer.ggml.token_type_count u32              = 2
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = bert
llama_model_loader: - kv  13:                         tokenizer.ggml.pre str              = jina-v2-en
llama_model_loader: - kv  14:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:            tokenizer.ggml.unknown_token_id u32              = 100
llama_model_loader: - kv  17:          tokenizer.ggml.seperator_token_id u32              = 102
llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.cls_token_id u32              = 101
llama_model_loader: - kv  20:               tokenizer.ggml.mask_token_id u32              = 103
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  124 tensors
llama_model_loader: - type q8_0:   73 tensors
llm_load_vocab: special tokens cache size = 5
llm_load_vocab: token to piece cache size = 0.2032 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = bert
llm_load_print_meta: vocab type       = WPM
llm_load_print_meta: n_vocab          = 30522
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 512
llm_load_print_meta: n_embd           = 384
llm_load_print_meta: n_head           = 12
llm_load_print_meta: n_head_kv        = 12
llm_load_print_meta: n_layer          = 12
llm_load_print_meta: n_rot            = 32
llm_load_print_meta: n_embd_head_k    = 32
llm_load_print_meta: n_embd_head_v    = 32
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 384
llm_load_print_meta: n_embd_v_gqa     = 384
llm_load_print_meta: f_norm_eps       = 1.0e-12
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 1536
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 0
llm_load_print_meta: pooling type     = 2
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 512
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 33M
llm_load_print_meta: model ftype      = Q8_0
llm_load_print_meta: model params     = 33.21 M
llm_load_print_meta: model size       = 34.38 MiB (8.68 BPW) 
llm_load_print_meta: general.name     = bge-small
llm_load_print_meta: UNK token        = 100 '[UNK]'
llm_load_print_meta: SEP token        = 102 '[SEP]'
llm_load_print_meta: PAD token        = 0 '[PAD]'
llm_load_print_meta: CLS token        = 101 '[CLS]'
llm_load_print_meta: MASK token       = 103 '[MASK]'
llm_load_print_meta: LF token         = 0 '[PAD]'
llm_load_print_meta: max token length = 21
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.08 MiB
llm_load_tensors: offloading 0 repeating layers to GPU
llm_load_tensors: offloaded 0/13 layers to GPU
llm_load_tensors:        CPU buffer size =    34.38 MiB
.................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 2048
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:  CUDA_Host KV buffer size =     9.00 MiB
llama_new_context_with_model: KV self size  =    9.00 MiB, K (f16):    4.50 MiB, V (f16):    4.50 MiB
llama_new_context_with_model:        CPU  output buffer size =     0.00 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =    16.90 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     2.51 MiB
llama_new_context_with_model: graph nodes  = 429
llama_new_context_with_model: graph splits = 196

system_info: n_threads = 6 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
batch_decode: n_tokens = 9, n_seq = 1

llama_print_timings:        load time =     397.99 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =       4.99 ms /     9 tokens (    0.55 ms per token,  1805.05 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =       7.09 ms /    10 tokens

embedding 0: -0.044922 -0.019413  0.009515 -0.002102  0.002819 -0.037346  0.108884  0.042320  0.092050 -0.015802  0.006203 -0.037483 -0.019315  0.014838  0.017312  0.014293 -0.014406  0.012199 -0.084337 -0.007969  0.092391 -0.017228 -0.062058 -0.024418  0.027417  0.077134  0.028219 -0.014623  0.017895 -0.035334 -0.038133 -0.018044  0.068934 -0.010808 -0.024000  0.071910 -0.045750  0.011734 -0.050866  0.050023  0.032255 -0.012384  0.022736  0.051037  0.009457  0.005324 -0.028037  0.007784 -0.019140 -0.054168 -0.047119  0.029088 -0.036035  0.053016 -0.067690  0.044014  0.029616  0.047229  0.073648 -0.043168  0.075918  0.037900 -0.183180  0.081508  0.042762 -0.066165 -0.059699 -0.017308  0.007110  0.005047  0.016962 -0.027730  0.064833  0.111964  0.034996 -0.068446  0.026829 -0.066310 -0.034038 -0.035547  0.032486  0.014914 -0.004339 -0.037040 -0.051606  0.053873 -0.002577 -0.037109  0.062467  0.029008 -0.041969 -0.029640 -0.039698  0.037257  0.007866 -0.014732 -0.036933  0.018711  0.029345  0.345662 -0.043828  0.055518  0.015965 -0.021585 -0.062967  0.000030 -0.037829 -0.031117 -0.008600 -0.019632  0.000917 -0.003949  0.004752  0.017646 -0.010475  0.024866  0.048859 -0.001073  0.050841 -0.042711 -0.029936  0.023056  0.031158 -0.023216 -0.044477 -0.079865  0.114434  0.046968  0.027606 -0.040895  0.067793 -0.022368  0.009769 -0.034681 -0.016154  0.044193  0.022540  0.051639  0.007797  0.007391  0.010083 -0.074316 -0.064372 -0.025101 -0.041340 -0.024550  0.027224  0.005440  0.026617  0.051940 -0.036700  0.058742  0.001461  0.032451 -0.020921 -0.021366  0.040976 -0.059863  0.019722  0.043085  0.042850  0.040582 -0.022107  0.029685 -0.022324  0.007497 -0.040081  0.000397  0.023739  0.002122  0.044315 -0.022987  0.043469  0.064731  0.056117  0.038352  0.000367  0.048953  0.045241 -0.009339  0.060821 -0.073344 -0.011166  0.032674  0.022647  0.014999 -0.033428  0.000347 -0.015448 -0.018743  0.048620  0.110470  0.029597  0.030962 -0.011328 -0.056829  0.006497  0.004694 -0.012985 -0.051779 -0.003150 -0.017702 -0.019727 -0.040388  0.009924 -0.059078  0.050095  0.052471 -0.010575 -0.039471 -0.015563 -0.023734 -0.016019  0.005706  0.007087 -0.027253  0.016754  0.030656  0.001635  0.023381 -0.021934 -0.097271 -0.050370 -0.277306 -0.014223 -0.061428 -0.027445  0.017050 -0.009608 -0.017319  0.033824  0.048471 -0.016368  0.016177 -0.022949  0.049435 -0.005335  0.000750 -0.060800 -0.068838 -0.059804 -0.036057  0.042588 -0.054961  0.014508 -0.000423 -0.059416 -0.009816  0.010768  0.150426  0.126644 -0.011118  0.042668 -0.025554  0.015019 -0.000210 -0.150502  0.042745  0.005784 -0.036606 -0.029014 -0.019236 -0.034275  0.009913  0.034990 -0.049935 -0.053754 -0.017105 -0.024232  0.048749  0.050670 -0.016684 -0.056609  0.023764 -0.005639  0.011582  0.038581  0.006578 -0.008041 -0.106921 -0.027615 -0.097465  0.025000 -0.011210  0.092479  0.055639  0.005293  0.026939  0.001806 -0.051768 -0.038913 -0.013483 -0.046246 -0.014757  0.001830 -0.044614 -0.077737  0.066446 -0.006428 -0.000018 -0.014871  0.071112  0.024387 -0.036434  0.008250  0.001929 -0.033247  0.017147  0.038480  0.001671 -0.051957  0.021081 -0.038685  0.000496  0.012745  0.021241 -0.057647  0.004903 -0.049491 -0.267161  0.038997 -0.067915  0.037074 -0.011075  0.043293 -0.015534  0.050443 -0.070772  0.012405  0.024955 -0.006946  0.082643  0.029026 -0.022356  0.042367 -0.003229 -0.074061 -0.015830  0.020035  0.002637  0.023772  0.196120 -0.044049 -0.024944 -0.004666 -0.017908  0.073222  0.001813 -0.031931 -0.035815 -0.044377 -0.000573 -0.011445  0.018698 -0.027002 -0.010099  0.005813  0.048950 -0.014805  0.006814  0.027005 -0.030880  0.048526  0.111968 -0.039582 -0.012955  0.004347 -0.002677  0.025424 -0.060709  0.014993 -0.008847  0.037792  0.050273  0.035482  0.036962 -0.017363  0.025554 -0.016189 -0.050841  0.003358  0.054623  0.039363 -0.039516 

real	0m0.581s
user	0m0.121s
sys	0m0.499s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_pythia_2_8b
+ tee /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b.log
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/config.json
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2024-06-24 14:00:34 URL:https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/config.json [571/571] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer.json
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer.json
Last-modified header missing -- time-stamps turned off.
2024-06-24 14:00:34 URL:https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer.json [2113710/2113710] -> "tokenizer.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer_config.json
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer_config.json
Last-modified header missing -- time-stamps turned off.
2024-06-24 14:00:34 URL:https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer_config.json [396/396] -> "tokenizer_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/special_tokens_map.json
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/special_tokens_map.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/special_tokens_map.json
Last-modified header missing -- time-stamps turned off.
2024-06-24 14:00:35 URL:https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/special_tokens_map.json [99/99] -> "special_tokens_map.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/resolve/main/pytorch_model.bin
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/resolve/main/pytorch_model.bin
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/resolve/main/pytorch_model.bin
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/wikitext/ https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
+ local out=models-mnt/wikitext/
+ local url=https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/wikitext/
+ cd models-mnt/wikitext/
+ wget -nv -N https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
+ cd /home/ggml/work/llama.cpp
+ unzip -o models-mnt/wikitext/wikitext-2-raw-v1.zip -d models-mnt/wikitext/
Archive:  models-mnt/wikitext/wikitext-2-raw-v1.zip
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.test.raw  
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.valid.raw  
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.train.raw  
+ path_models=../models-mnt/pythia/2.8B
+ path_wiki=../models-mnt/wikitext/wikitext-2-raw
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=1 -DGGML_CUDA=1 ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- OpenMP found
-- Using ggml SGEMM
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA found
-- Using CUDA architectures: 52;61;70
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- x86 detected
-- Configuring done (4.4s)
CMake Warning (dev) in src/CMakeLists.txt:
  Policy CMP0104 is not set: CMAKE_CUDA_ARCHITECTURES now detected for NVCC,
  empty CUDA_ARCHITECTURES not allowed.  Run "cmake --help-policy CMP0104"
  for policy details.  Use the cmake_policy command to set the policy and
  suppress this warning.

  CUDA_ARCHITECTURES is empty for target "llama".
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) in examples/gguf/CMakeLists.txt:
  Policy CMP0104 is not set: CMAKE_CUDA_ARCHITECTURES now detected for NVCC,
  empty CUDA_ARCHITECTURES not allowed.  Run "cmake --help-policy CMP0104"
  for policy details.  Use the cmake_policy command to set the policy and
  suppress this warning.

  CUDA_ARCHITECTURES is empty for target "llama-gguf".
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) in examples/llava/CMakeLists.txt:
  Policy CMP0104 is not set: CMAKE_CUDA_ARCHITECTURES now detected for NVCC,
  empty CUDA_ARCHITECTURES not allowed.  Run "cmake --help-policy CMP0104"
  for policy details.  Use the cmake_policy command to set the policy and
  suppress this warning.

  CUDA_ARCHITECTURES is empty for target "llava_shared".
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m4.687s
user	0m3.540s
sys	0m1.145s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-make.log
+ make -j
[  0%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  1%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml.c.o
[  1%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-alloc.c.o
[  1%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-backend.c.o
[  2%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-quants.c.o
[  2%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/acc.cu.o
[  2%] Built target build_info
[  3%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/arange.cu.o
[  4%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/binbcast.cu.o
[  4%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/clamp.cu.o
[  4%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/argsort.cu.o
[  5%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/concat.cu.o
[  5%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/convert.cu.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/cpy.cu.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/diagmask.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/dmmv.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn-tile-f16.cu.o
[  8%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn.cu.o
[  8%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn-tile-f32.cu.o
[  8%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/getrows.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/im2col.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/mmq.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/norm.cu.o
[ 10%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/pad.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/mmvq.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/pool2d.cu.o
[ 12%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/quantize.cu.o
[ 12%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/rope.cu.o
[ 12%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/softmax.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/tsembd.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/sumrows.cu.o
[ 14%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/scale.cu.o
[ 14%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/unary.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/upscale.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda.cu.o
[ 16%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb16.cu.o
[ 17%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb16.cu.o
[ 17%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb32.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb8.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q3_k.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb32.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_0.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_1.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q2_k.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_k.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_0.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_1.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_k.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q6_k.cu.o
[ 23%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 23%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q8_0.cu.o
[ 23%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 26%] Building CXX object ggml/src/CMakeFiles/ggml.dir/sgemm.cpp.o
[ 27%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 27%] Built target ggml
[ 27%] Linking CXX static library libggml_static.a
[ 29%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 29%] Linking CXX shared library libggml_shared.so
[ 30%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 30%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 31%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 31%] Linking CXX executable ../../bin/llama-gguf
[ 31%] Linking CXX shared library libllama.so
[ 31%] Built target ggml_shared
[ 31%] Built target llama-gguf
[ 31%] Built target llama
[ 31%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 31%] Building CXX object examples/benchmark/CMakeFiles/llama-bench-matmult.dir/benchmark-matmult.cpp.o
[ 32%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 32%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 32%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 33%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 33%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 34%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 34%] Building CXX object common/CMakeFiles/common.dir/grammar-parser.cpp.o
[ 35%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 36%] Linking C executable ../bin/test-c
[ 36%] Building CXX object common/CMakeFiles/common.dir/train.cpp.o
[ 37%] Linking CXX executable ../../bin/llama-quantize-stats
[ 38%] Linking CXX executable ../../bin/llama-bench-matmult
[ 38%] Built target llava
[ 39%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 39%] Linking CXX shared library libllava_shared.so
[ 40%] Linking CXX static library libllava_static.a
[ 40%] Linking CXX static library libcommon.a
[ 40%] Built target test-c
[ 40%] Built target llama-bench-matmult
[ 40%] Built target llama-quantize-stats
[ 40%] Built target llava_static
[ 40%] Built target common
[ 40%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 40%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 41%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 41%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 41%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 42%] Linking CXX executable ../bin/test-tokenizer-0
[ 43%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 43%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 44%] Linking CXX executable ../bin/test-quantize-fns
[ 44%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 45%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 46%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 46%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 47%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 47%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 48%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 49%] Linking CXX executable ../bin/test-quantize-perf
[ 49%] Linking CXX executable ../bin/test-sampling
[ 50%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 52%] Linking CXX executable ../bin/test-chat-template
[ 52%] Building CXX object tests/CMakeFiles/test-grad0.dir/test-grad0.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-grad0.dir/get-model.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 56%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 56%] Linking CXX executable ../bin/test-grammar-parser
[ 57%] Linking CXX executable ../bin/test-grammar-integration
[ 57%] Linking CXX executable ../bin/test-grad0
[ 57%] Linking CXX executable ../bin/test-rope
[ 57%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 57%] Linking CXX executable ../bin/test-model-load-cancel
[ 58%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 59%] Linking CXX executable ../bin/test-backend-ops
[ 60%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 60%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 61%] Linking CXX executable ../bin/test-llama-grammar
[ 61%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 62%] Building CXX object examples/baby-llama/CMakeFiles/llama-baby-llama.dir/baby-llama.cpp.o
[ 62%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 62%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 62%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 62%] Linking CXX executable ../bin/test-autorelease
[ 62%] Linking CXX executable ../../bin/llama-cvector-generator
[ 62%] Built target ggml_static
[ 62%] Linking CXX executable ../../bin/llama-baby-llama
[ 62%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 63%] Linking CXX executable ../../bin/llama-batched-bench
[ 64%] Linking CXX executable ../../bin/llama-batched
[ 65%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 66%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 67%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 68%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 69%] Building CXX object examples/finetune/CMakeFiles/llama-finetune.dir/finetune.cpp.o
[ 69%] Built target test-quantize-perf
[ 69%] Linking CXX executable ../../bin/llama-eval-callback
[ 69%] Built target test-model-load-cancel
[ 70%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 70%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 70%] Built target test-chat-template
[ 70%] Linking CXX executable ../../bin/llama-export-lora
[ 70%] Linking CXX executable ../../bin/llama-finetune
[ 70%] Linking CXX executable ../../bin/llama-embedding
[ 70%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 71%] Linking CXX executable ../../bin/llama-gguf-split
[ 71%] Built target test-quantize-fns
[ 71%] Built target test-tokenizer-1-bpe
[ 71%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 71%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 71%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 71%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 72%] Linking CXX executable ../../bin/llama-gritlm
[ 72%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 72%] Built target test-sampling
[ 72%] Built target test-grammar-parser
[ 72%] Built target test-grad0
[ 73%] Linking CXX executable ../../bin/llama-imatrix
[ 74%] Linking CXX executable ../../bin/llama-infill
[ 74%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 74%] Built target test-tokenizer-0
[ 75%] Linking CXX executable ../../bin/llama-bench
[ 76%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-llava-cli
[ 77%] Built target test-tokenizer-1-spm
[ 78%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 78%] Built target test-rope
[ 78%] Linking CXX executable ../../bin/llama-lookahead
[ 79%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 79%] Linking CXX executable ../../bin/llama-lookup
[ 79%] Built target test-backend-ops
[ 79%] Built target test-autorelease
[ 80%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 80%] Built target llama-batched
[ 80%] Linking CXX executable ../../bin/llama-lookup-create
[ 80%] Built target llama-convert-llama2c-to-ggml
[ 80%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 80%] Linking CXX executable ../../bin/llama-lookup-merge
[ 80%] Built target llama-baby-llama
[ 80%] Linking CXX executable ../../bin/llama-lookup-stats
[ 80%] Built target test-grammar-integration
[ 80%] Built target llava_shared
[ 80%] Built target llama-batched-bench
[ 80%] Built target llama-cvector-generator
[ 80%] Built target llama-export-lora
[ 81%] Linking CXX executable ../../bin/llama-cli
[ 82%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 82%] Built target test-llama-grammar
[ 83%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 83%] Built target llama-llava-cli
[ 83%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 83%] Generating theme-snowstorm.css.hpp
[ 83%] Generating colorthemes.css.hpp
[ 83%] Built target test-json-schema-to-grammar
[ 83%] Built target llama-gguf-split
[ 83%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 83%] Generating index-new.html.hpp
[ 83%] Linking CXX executable ../../bin/llama-passkey
[ 83%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 83%] Linking CXX executable ../../bin/llama-parallel
[ 83%] Generating completion.js.hpp
[ 84%] Generating index.html.hpp
[ 84%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 85%] Linking CXX executable ../../bin/llama-perplexity
[ 86%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 86%] Built target llama-embedding
[ 87%] Generating index.js.hpp
[ 87%] Built target llama-eval-callback
[ 87%] Built target llama-finetune
[ 87%] Built target llama-gbnf-validator
[ 88%] Linking CXX executable ../../bin/llama-retrieval
[ 89%] Linking CXX executable ../../bin/llama-quantize
[ 90%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 90%] Generating json-schema-to-grammar.mjs.hpp
[ 91%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 91%] Generating prompt-formats.js.hpp
[ 91%] Generating style.css.hpp
[ 92%] Linking CXX executable ../../bin/llama-save-load-state
[ 92%] Linking CXX executable ../../bin/llama-simple
[ 93%] Generating system-prompts.js.hpp
[ 94%] Building CXX object examples/train-text-from-scratch/CMakeFiles/llama-train-text-from-scratch.dir/train-text-from-scratch.cpp.o
[ 95%] Generating theme-beeninorder.css.hpp
[ 95%] Generating theme-ketivah.css.hpp
[ 95%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[ 95%] Linking CXX executable ../../bin/llama-tokenize
[ 96%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 96%] Linking CXX executable ../../bin/llama-speculative
[ 97%] Generating theme-mangotango.css.hpp
[ 97%] Generating theme-playground.css.hpp
[ 97%] Linking CXX executable ../../bin/llama-train-text-from-scratch
[ 98%] Generating theme-polarnight.css.hpp
[ 99%] Linking CXX executable ../../bin/llama-q8dot
[ 99%] Built target llama-lookup-merge
[ 99%] Built target llama-lookahead
[ 99%] Linking CXX executable ../../bin/llama-vdot
[ 99%] Built target llama-lookup-create
[ 99%] Built target llama-bench
[ 99%] Built target llama-gritlm
[ 99%] Built target llama-cli
[100%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[100%] Built target llama-infill
[100%] Built target llama-imatrix
[100%] Built target llama-lookup-stats
[100%] Built target llama-perplexity
[100%] Linking CXX executable ../../bin/llama-server
[100%] Built target llama-lookup
[100%] Built target llama-train-text-from-scratch
[100%] Built target llama-q8dot
[100%] Built target llama-quantize
[100%] Built target llama-retrieval
[100%] Built target llama-parallel
[100%] Built target llama-save-load-state
[100%] Built target llama-passkey
[100%] Built target llama-tokenize
[100%] Built target llama-vdot
[100%] Built target llama-simple
[100%] Built target llama-speculative
[100%] Built target llama-server

real	0m2.867s
user	0m10.052s
sys	0m3.947s
+ python3 ../convert-hf-to-gguf.py ../models-mnt/pythia/2.8B --outfile ../models-mnt/pythia/2.8B/ggml-model-f16.gguf
INFO:hf-to-gguf:Loading model: 2.8B
INFO:gguf.gguf_writer:gguf: This GGUF file is for Little Endian only
INFO:hf-to-gguf:Set model parameters
INFO:hf-to-gguf:Set model tokenizer
Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.
INFO:gguf.vocab:Adding 50009 merge(s).
INFO:gguf.vocab:Setting special token type bos to 0
INFO:gguf.vocab:Setting special token type eos to 0
INFO:gguf.vocab:Setting special token type unk to 0
INFO:hf-to-gguf:Exporting model...
INFO:hf-to-gguf:gguf: loading model part 'pytorch_model.bin'
INFO:hf-to-gguf:token_embd.weight,         torch.float16 --> F16, shape = {2560, 50304}
INFO:hf-to-gguf:blk.0.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.0.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.0.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.0.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.0.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.0.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.0.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.0.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.0.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.0.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.0.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.0.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.1.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.1.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.1.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.1.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.1.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.1.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.1.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.2.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.2.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.2.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.2.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.2.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.2.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.2.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.3.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.3.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.3.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.3.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.3.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.3.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.3.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.4.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.4.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.4.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.4.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.4.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.4.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.4.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.5.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.5.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.5.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.5.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.5.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.5.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.5.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.6.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.6.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.6.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.6.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.6.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.6.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.6.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.7.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.7.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.7.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.7.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.7.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.7.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.7.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.8.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.8.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.8.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.8.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.8.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.8.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.8.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.9.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.9.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.9.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.9.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.9.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.9.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.9.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.10.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.10.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.10.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.10.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.10.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.10.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.10.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.11.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.11.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.11.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.11.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.11.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.11.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.11.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.12.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.12.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.12.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.12.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.12.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.12.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.12.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.13.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.13.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.13.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.13.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.13.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.13.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.13.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.14.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.14.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.14.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.14.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.14.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.14.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.14.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.15.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.15.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.15.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.15.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.15.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.15.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.15.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.16.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.16.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.16.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.16.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.16.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.16.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.16.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.17.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.17.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.17.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.17.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.17.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.17.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.17.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.18.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.18.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.18.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.18.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.18.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.18.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.18.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.19.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.19.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.19.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.19.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.19.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.19.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.19.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.20.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.20.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.20.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.20.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.20.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.20.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.20.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.21.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.21.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.21.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.21.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.21.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.21.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.21.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.22.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.22.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.22.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.22.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.22.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.22.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.22.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.23.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.23.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.23.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.23.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.23.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.23.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.23.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.24.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.24.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.24.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.24.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.24.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.24.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.24.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.25.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.25.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.25.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.25.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.25.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.25.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.25.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.26.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.26.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.26.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.26.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.26.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.26.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.26.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.27.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.27.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.27.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.27.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.27.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.27.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.27.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.28.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.28.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.28.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.28.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.28.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.28.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.28.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.29.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.29.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.29.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.29.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.29.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.29.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.29.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.30.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.30.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.30.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.30.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.30.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.30.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.30.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.31.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.31.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.31.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.31.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.31.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.31.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.31.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:output_norm.weight,        torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:output_norm.bias,          torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:output.weight,             torch.float16 --> F16, shape = {2560, 50304}
INFO:gguf.gguf_writer:Writing the following files:
INFO:gguf.gguf_writer:../models-mnt/pythia/2.8B/ggml-model-f16.gguf: n_tensors = 388, total_size = 5.6G
Writing:   0%|          | 0.00/5.55G [00:00<?, ?byte/s]Writing:   5%|▍         | 258M/5.55G [00:00<00:04, 1.10Gbyte/s]Writing:   7%|▋         | 415M/5.55G [00:00<00:04, 1.06Gbyte/s]Writing:  10%|█         | 572M/5.55G [00:00<00:04, 1.07Gbyte/s]Writing:  13%|█▎        | 730M/5.55G [00:00<00:04, 1.05Gbyte/s]Writing:  15%|█▌        | 835M/5.55G [00:00<00:04, 1.05Gbyte/s]Writing:  17%|█▋        | 940M/5.55G [00:00<00:04, 1.04Gbyte/s]Writing:  20%|█▉        | 1.08G/5.55G [00:01<00:04, 1.05Gbyte/s]Writing:  22%|██▏       | 1.20G/5.55G [00:01<00:04, 1.04Gbyte/s]Writing:  24%|██▎       | 1.31G/5.55G [00:01<00:04, 1.04Gbyte/s]Writing:  26%|██▋       | 1.46G/5.55G [00:01<00:03, 1.07Gbyte/s]Writing:  29%|██▉       | 1.62G/5.55G [00:01<00:03, 1.08Gbyte/s]Writing:  32%|███▏      | 1.78G/5.55G [00:01<00:03, 1.06Gbyte/s]Writing:  35%|███▍      | 1.94G/5.55G [00:01<00:03, 1.07Gbyte/s]Writing:  38%|███▊      | 2.09G/5.55G [00:01<00:03, 1.08Gbyte/s]Writing:  41%|████      | 2.25G/5.55G [00:02<00:03, 1.09Gbyte/s]Writing:  43%|████▎     | 2.41G/5.55G [00:02<00:02, 1.10Gbyte/s]Writing:  46%|████▌     | 2.57G/5.55G [00:02<00:02, 1.10Gbyte/s]Writing:  49%|████▉     | 2.72G/5.55G [00:02<00:02, 1.10Gbyte/s]Writing:  52%|█████▏    | 2.88G/5.55G [00:02<00:02, 1.11Gbyte/s]Writing:  55%|█████▍    | 3.04G/5.55G [00:02<00:02, 1.11Gbyte/s]Writing:  58%|█████▊    | 3.20G/5.55G [00:02<00:02, 1.11Gbyte/s]Writing:  60%|██████    | 3.35G/5.55G [00:03<00:02, 1.09Gbyte/s]Writing:  63%|██████▎   | 3.51G/5.55G [00:03<00:01, 1.09Gbyte/s]Writing:  66%|██████▌   | 3.67G/5.55G [00:03<00:01, 1.10Gbyte/s]Writing:  69%|██████▉   | 3.83G/5.55G [00:03<00:01, 1.11Gbyte/s]Writing:  72%|███████▏  | 3.98G/5.55G [00:03<00:01, 1.12Gbyte/s]Writing:  75%|███████▍  | 4.14G/5.55G [00:03<00:01, 1.12Gbyte/s]Writing:  77%|███████▋  | 4.30G/5.55G [00:03<00:01, 1.11Gbyte/s]Writing:  80%|████████  | 4.46G/5.55G [00:04<00:00, 1.11Gbyte/s]Writing:  83%|████████▎ | 4.61G/5.55G [00:04<00:00, 1.11Gbyte/s]Writing:  86%|████████▌ | 4.77G/5.55G [00:04<00:00, 1.11Gbyte/s]Writing:  89%|████████▊ | 4.93G/5.55G [00:04<00:00, 1.11Gbyte/s]Writing:  92%|█████████▏| 5.09G/5.55G [00:04<00:00, 1.10Gbyte/s]Writing:  94%|█████████▍| 5.24G/5.55G [00:04<00:00, 1.09Gbyte/s]Writing: 100%|██████████| 5.55G/5.55G [00:05<00:00, 1.12Gbyte/s]Writing: 100%|██████████| 5.55G/5.55G [00:05<00:00, 1.07Gbyte/s]
INFO:hf-to-gguf:Model successfully exported.
+ model_f16=../models-mnt/pythia/2.8B/ggml-model-f16.gguf
+ model_q8_0=../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf
+ model_q4_0=../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf
+ model_q4_1=../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf
+ model_q5_0=../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf
+ model_q5_1=../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf
+ model_q2_k=../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf
+ model_q3_k=../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf
+ model_q4_k=../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf
+ model_q5_k=../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf
+ model_q6_k=../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf
+ wiki_test=../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf q8_0
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf' as Q8_0
llama_model_loader: loaded meta data with 19 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q8_0 .. size =   245.62 MiB ->   130.49 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q8_0 .. size =   245.62 MiB ->   130.49 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  2815.06 MB

main: quantize time = 20612.91 ms
main:    total time = 20612.91 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf q4_0
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf' as Q4_0
llama_model_loader: loaded meta data with 19 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q4_0 .. size =   245.62 MiB ->    69.08 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1523.91 MB

main: quantize time = 12016.05 ms
main:    total time = 12016.05 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf q4_1
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf' as Q4_1
llama_model_loader: loaded meta data with 19 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q4_1 .. size =   245.62 MiB ->    76.76 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1681.58 MB

main: quantize time = 12749.04 ms
main:    total time = 12749.04 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf q5_0
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf' as Q5_0
llama_model_loader: loaded meta data with 19 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q5_0 .. size =   245.62 MiB ->    84.43 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1839.26 MB

main: quantize time = 13785.28 ms
main:    total time = 13785.28 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf q5_1
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf' as Q5_1
llama_model_loader: loaded meta data with 19 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q5_1 .. size =   245.62 MiB ->    92.11 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1996.94 MB

main: quantize time = 15037.07 ms
main:    total time = 15037.07 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf q2_k
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf' as Q2_K
llama_model_loader: loaded meta data with 19 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q2_K .. size =   245.62 MiB ->    40.30 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1034.19 MB

main: quantize time = 33446.57 ms
main:    total time = 33446.57 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf q3_k
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf' as Q3_K
llama_model_loader: loaded meta data with 19 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q3_K .. size =   245.62 MiB ->    52.77 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1407.60 MB

main: quantize time = 40650.65 ms
main:    total time = 40650.65 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf q4_k
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf' as Q4_K
llama_model_loader: loaded meta data with 19 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q4_K .. size =   245.62 MiB ->    69.08 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1702.03 MB

main: quantize time = 51400.57 ms
main:    total time = 51400.57 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf q5_k
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf' as Q5_K
llama_model_loader: loaded meta data with 19 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q5_K .. size =   245.62 MiB ->    84.43 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1972.07 MB

main: quantize time = 44508.00 ms
main:    total time = 44508.00 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf q6_k
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf' as Q6_K
llama_model_loader: loaded meta data with 19 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  2174.32 MB

main: quantize time = 33068.48 ms
main:    total time = 33068.48 ms
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-f16.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-f16.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 19 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = all F32 (guessed)
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 5.17 GiB (16.01 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =   245.62 MiB
llm_load_tensors:      CUDA0 buffer size =  5049.71 MiB
.............................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0


I believe the meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live
llama_print_timings:        load time =    1638.21 ms
llama_print_timings:      sample time =      10.23 ms /   256 runs   (    0.04 ms per token, 25021.99 tokens per second)
llama_print_timings: prompt eval time =      14.54 ms /     7 tokens (    2.08 ms per token,   481.56 tokens per second)
llama_print_timings:        eval time =    2839.84 ms /   255 runs   (   11.14 ms per token,    89.79 tokens per second)
llama_print_timings:       total time =    2999.57 ms /   262 tokens
Log end

real	0m4.936s
user	0m3.892s
sys	0m1.023s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q8_0.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 7
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q8_0:  130 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q8_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 2.75 GiB (8.51 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =   130.49 MiB
llm_load_tensors:      CUDA0 buffer size =  2684.57 MiB
.............................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0


I believe the meaning of life is to help people
<mneptok> h00k: i'm not a Christian. i'm a humanist. and you're a humanist, so you can help people.
<h00k> mneptok, I'm also a Christian
<h00k> mneptok, I just have a different perspective on things
<mneptok> h00k: and i know how to help people, so i'm happy to help people.
<h00k> mneptok, I'm sure that you're very busy, so I'll give you the chance to help people :)
<mneptok> h00k: i'll be here.
<mneptok> h00k: i think you and i are on the same side of the issue. i'm not going to make a decision on the issue for you, though.
<h00k> mneptok, I know, I just figured that you'd be more likely to help me out than the people who aren't there
<mneptok> h00k: i don't know how to help you.
<mneptok> h00k: i don
llama_print_timings:        load time =    1167.61 ms
llama_print_timings:      sample time =      10.73 ms /   256 runs   (    0.04 ms per token, 23867.24 tokens per second)
llama_print_timings: prompt eval time =      11.54 ms /     7 tokens (    1.65 ms per token,   606.38 tokens per second)
llama_print_timings:        eval time =    2116.85 ms /   255 runs   (    8.30 ms per token,   120.46 tokens per second)
llama_print_timings:       total time =    2252.35 ms /   262 tokens
Log end

real	0m3.714s
user	0m2.848s
sys	0m0.864s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_0.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    69.08 MiB
llm_load_tensors:      CUDA0 buffer size =  1454.83 MiB
...........................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0


I believe the meaning of life is to strive for perfection."

"Why?"

"I don't know. It's just something I've always felt, whether it's true or not."

"What do you want to do when you grow up?"

"I don't know. I suppose I'd like to work on my own, but I don't know what I'd do. I don't know anything about anything. But I have a feeling that if I find the right thing, I can work out all the kinks in it. I feel I can get a handle on it."

"What are your hobbies?"

"I don

t have any."

"Do you want to be an inventor?"

"No. Not really."

"What would you like to do with your life?"

"I don

t know. I don

t know anything. I don

t know where to go. I don

t know what I want to do."

"What about your family? Do you want to be a doctor or a lawyer or anything like that?"

"I don

t know. I don

t know anything. I don

llama_print_timings:        load time =     864.31 ms
llama_print_timings:      sample time =      11.14 ms /   256 runs   (    0.04 ms per token, 22988.51 tokens per second)
llama_print_timings: prompt eval time =       9.60 ms /     7 tokens (    1.37 ms per token,   729.17 tokens per second)
llama_print_timings:        eval time =    1665.65 ms /   255 runs   (    6.53 ms per token,   153.09 tokens per second)
llama_print_timings:       total time =    1798.51 ms /   262 tokens
Log end

real	0m2.975s
user	0m2.229s
sys	0m0.744s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_1.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 3
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_1:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_1
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.64 GiB (5.08 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    76.76 MiB
llm_load_tensors:      CUDA0 buffer size =  1604.83 MiB
............................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0


I believe the meaning of life is to help people live more fulfilling lives, and to help people live their lives to the fullest.

I believe the most important thing we can do as individuals is to make conscious decisions that help us live a life that's more meaningful to ourselves.

I believe we all have the power to make a difference in the world, but we have to put our full effort into making those positive changes.

I believe that the key to solving our social problems lies in solving the problems in our own neighborhoods.

I believe that the key to solving our social problems lies in solving the problems in our own neighborhoods.

I believe that the most important thing we can do for the environment is to make conscious choices that help us reduce our personal carbon footprints.

I believe that the most important thing we can do for the environment is to make conscious choices that help us reduce our personal carbon footprints.

I believe that we need to take care of the people we love.

I believe we need to take care of the people we love.

I believe that we need to take care of our families.

I believe that we need to take care of our families.

I believe that the key to solving the problems
llama_print_timings:        load time =     899.31 ms
llama_print_timings:      sample time =      10.76 ms /   256 runs   (    0.04 ms per token, 23800.67 tokens per second)
llama_print_timings: prompt eval time =       9.38 ms /     7 tokens (    1.34 ms per token,   746.03 tokens per second)
llama_print_timings:        eval time =    1684.73 ms /   255 runs   (    6.61 ms per token,   151.36 tokens per second)
llama_print_timings:       total time =    1818.10 ms /   262 tokens
Log end

real	0m3.004s
user	0m2.256s
sys	0m0.745s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_0.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 8
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q5_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q5_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.80 GiB (5.56 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    84.43 MiB
llm_load_tensors:      CUDA0 buffer size =  1754.83 MiB
............................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0


I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to
llama_print_timings:        load time =     931.70 ms
llama_print_timings:      sample time =      10.36 ms /   256 runs   (    0.04 ms per token, 24708.04 tokens per second)
llama_print_timings: prompt eval time =      10.51 ms /     7 tokens (    1.50 ms per token,   666.29 tokens per second)
llama_print_timings:        eval time =    1744.23 ms /   255 runs   (    6.84 ms per token,   146.20 tokens per second)
llama_print_timings:       total time =    1877.78 ms /   262 tokens
Log end

real	0m3.095s
user	0m2.347s
sys	0m0.746s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_1.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 9
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q5_1:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q5_1
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.95 GiB (6.04 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    92.11 MiB
llm_load_tensors:      CUDA0 buffer size =  1904.83 MiB
.............................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0


I believe the meaning of life is to love people. It's not a competition. It's not a game. It's not a competition. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game.
llama_print_timings:        load time =     974.60 ms
llama_print_timings:      sample time =      10.27 ms /   256 runs   (    0.04 ms per token, 24922.12 tokens per second)
llama_print_timings: prompt eval time =       9.71 ms /     7 tokens (    1.39 ms per token,   720.76 tokens per second)
llama_print_timings:        eval time =    1767.82 ms /   255 runs   (    6.93 ms per token,   144.25 tokens per second)
llama_print_timings:       total time =    1921.21 ms /   262 tokens
Log end

real	0m3.186s
user	0m2.438s
sys	0m0.743s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q2_k.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 10
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q2_K:   65 tensors
llama_model_loader: - type q3_K:   64 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q2_K - Medium
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.01 GiB (3.13 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    40.30 MiB
llm_load_tensors:      CUDA0 buffer size =   993.89 MiB
......................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0


I believe the meaning of life is the following: (here, here, and here).


 I. The life of the individual is the total and most important form of life in the here-there-here of the present and the life of the individual here, it is the life of the individual, the life of the individual.

 II. The life of the individual is the life of the individual, the life of the individual.

 III. The life of the individual is the life of the individual, the life of the individual.

 O. The life of the individual is the life of the individual, the life of the individual.

 a) The most important factor in the life of the individual is the life of the individual, the life of the individual.

 b) The life of the individual is the life of the individual, the life of the individual.

 c) The life of the individual is the life of the individual, the life of the individual.

 d) The most important factor in the life of the individual is the most important factor in the life of the individual, the most important factor in the life of the individual.

 d) The life of the individual is the life of the individual, the life of the
llama_print_timings:        load time =     729.27 ms
llama_print_timings:      sample time =      10.50 ms /   256 runs   (    0.04 ms per token, 24378.63 tokens per second)
llama_print_timings: prompt eval time =      14.16 ms /     7 tokens (    2.02 ms per token,   494.49 tokens per second)
llama_print_timings:        eval time =    1818.68 ms /   255 runs   (    7.13 ms per token,   140.21 tokens per second)
llama_print_timings:       total time =    1954.00 ms /   262 tokens
Log end

real	0m2.974s
user	0m2.304s
sys	0m0.659s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q3_k.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 12
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q3_K:   33 tensors
llama_model_loader: - type q4_K:   94 tensors
llama_model_loader: - type q5_K:    2 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q3_K - Medium
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.37 GiB (4.25 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    52.77 MiB
llm_load_tensors:      CUDA0 buffer size =  1354.83 MiB
..........................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0


I believe the meaning of life is to get out of your house and go out and do something."

The next day, I was back at my apartment, trying to get the kinks out of my neck from the long day of standing up, and thinking about all that was going on.

"I can't believe I'm here," I said to the air.

I'd just gotten back from my shift at the hospital, where I was taking the temperature and pulse of every patient who walked through the door. I was a little worried that I was going to be put on an overnight rotation. I was sure it was just a coincidence that the night I was at the hospital, I had received a call from my boss.

"You'll be fine," he said. "Just keep going."

My shift had gone well. I had been able to get a lot of patients without too much trouble.

"I'm just going to be a little more careful with them," I said to myself as I made my way to the patient room.

The room was a mess.

"I hope I'm not here long," I said.

The room was full of people.

"I'll be back in a minute," I
llama_print_timings:        load time =     860.07 ms
llama_print_timings:      sample time =      10.81 ms /   256 runs   (    0.04 ms per token, 23679.59 tokens per second)
llama_print_timings: prompt eval time =      12.82 ms /     7 tokens (    1.83 ms per token,   546.02 tokens per second)
llama_print_timings:        eval time =    1856.93 ms /   255 runs   (    7.28 ms per token,   137.32 tokens per second)
llama_print_timings:       total time =    1992.64 ms /   262 tokens
Log end

real	0m3.139s
user	0m2.434s
sys	0m0.701s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_k.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 15
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_K:   81 tensors
llama_model_loader: - type q5_K:   32 tensors
llama_model_loader: - type q6_K:   17 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_K - Medium
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.66 GiB (5.14 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    69.08 MiB
llm_load_tensors:      CUDA0 buffer size =  1632.95 MiB
...................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0


I believe the meaning of life is to create the life we want to live.

I believe that when we know what we want, we can achieve it. I believe that when we love what we want, we find it. I believe that when we believe what we want, we get what we want.

I believe we must trust our dreams and that the universe will support us in achieving them.

I believe that no matter what we choose, we will always be free.

I believe that we are responsible for ourselves. I believe that you are responsible for yourself.

I believe that you must take responsibility for your life.

I believe that you must take responsibility for your world.

I believe that the universe has your back. I believe that you have your back.

I believe that we must take responsibility for the things we can do.

I believe that we must take responsibility for the things we cannot do.

I believe that we can choose to be happy. I believe that we can choose to be unhappy.

I believe that we must have the courage to be ourselves. I believe that we must have the courage to be different.

I believe that we must choose to be happy. I believe that we must choose
llama_print_timings:        load time =     908.50 ms
llama_print_timings:      sample time =      11.32 ms /   256 runs   (    0.04 ms per token, 22614.84 tokens per second)
llama_print_timings: prompt eval time =      12.49 ms /     7 tokens (    1.78 ms per token,   560.58 tokens per second)
llama_print_timings:        eval time =    1771.72 ms /   255 runs   (    6.95 ms per token,   143.93 tokens per second)
llama_print_timings:       total time =    1911.17 ms /   262 tokens
Log end

real	0m3.111s
user	0m2.357s
sys	0m0.749s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_k.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 17
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q5_K:   81 tensors
llama_model_loader: - type q6_K:   49 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q5_K - Medium
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.93 GiB (5.96 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    84.43 MiB
llm_load_tensors:      CUDA0 buffer size =  1887.64 MiB
............................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0


I believe the meaning of life is to create the life that you want to live." "I want to be a good father." "I want to be a good friend." "I want to be a good son." "I want to be a good person." "I want to be a good friend." "I want to be a good son." "And I want to be a good father." "That's a lot of things to want." "You know, I don't know if I'll ever be able to accomplish them all." "But I have to try." "I have to try, and if I'm not able to do everything," "I want to be able to do everything." "I don't want to be a failure at anything, because..." "I don't want to fail." "I don't want to fail at anything." "I don't want to fail." "I don't want to fail." "I don't want to fail." "I don't want to fail." "I don't want to fail." "I don't want to fail." "I don't want to fail." "I don't want to fail." "I don't want to fail." "I don't want to fail." "I don't want to fail."
llama_print_timings:        load time =     953.20 ms
llama_print_timings:      sample time =      10.40 ms /   256 runs   (    0.04 ms per token, 24608.29 tokens per second)
llama_print_timings: prompt eval time =      12.80 ms /     7 tokens (    1.83 ms per token,   547.00 tokens per second)
llama_print_timings:        eval time =    1859.48 ms /   255 runs   (    7.29 ms per token,   137.14 tokens per second)
llama_print_timings:       total time =    1995.39 ms /   262 tokens
Log end

real	0m3.234s
user	0m2.484s
sys	0m0.740s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q6_k.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 18
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q6_K:  130 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q6_K
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 2.12 GiB (6.57 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =   100.74 MiB
llm_load_tensors:      CUDA0 buffer size =  2073.58 MiB
.............................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0


I believe the meaning of life is to create art."

"I do not believe in God," I said. "I believe in a Supreme Being—a higher power—a spirit. I have no proof of this, but I believe this."

"If it is a spirit, it is a spirit of love, not of hate, as you say," she said. "It would not be a spirit of hate and anger against a world that is so cruel, that has killed so many people. It would be a spirit of love, of concern for this world and its people."

I stared at her. She was looking at me with an odd expression, as though she were seeing me for the first time.

"Do you believe that there is a God?" I asked.

"I have no reason not to believe in God," she said. "I believe in God for myself, but I have no reason to believe in God for others."

"You don't believe in God?"

"I do not believe that there is a God," she said. "I believe that there is a Supreme Being."

"You do not believe that there is a God?"

"I do not believe that there is a God," she
llama_print_timings:        load time =    1013.31 ms
llama_print_timings:      sample time =      11.03 ms /   256 runs   (    0.04 ms per token, 23215.74 tokens per second)
llama_print_timings: prompt eval time =      11.58 ms /     7 tokens (    1.65 ms per token,   604.70 tokens per second)
llama_print_timings:        eval time =    1934.08 ms /   255 runs   (    7.58 ms per token,   131.85 tokens per second)
llama_print_timings:       total time =    2076.05 ms /   262 tokens
Log end

real	0m3.378s
user	0m2.591s
sys	0m0.786s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-f16.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-f16.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1719237994
llama_model_loader: loaded meta data with 19 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = all F32 (guessed)
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 5.17 GiB (16.01 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =   245.62 MiB
llm_load_tensors:      CUDA0 buffer size =  5049.71 MiB
.............................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 512
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.77 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 1221.27 ms
perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
perplexity: 0.58 seconds per pass - ETA 0.03 minutes
[1]9.6667,[2]11.4286,[3]11.6311,[4]10.3475,
llama_print_timings:        load time =    1576.87 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =    1804.02 ms /  8192 tokens (    0.22 ms per token,  4540.98 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =    3381.43 ms /  8193 tokens

Final estimate: PPL = 10.3475 +/- 0.42292

real	0m5.278s
user	0m5.023s
sys	0m1.250s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q8_0.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1719237999
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 7
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q8_0:  130 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q8_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 2.75 GiB (8.51 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =   130.49 MiB
llm_load_tensors:      CUDA0 buffer size =  2684.57 MiB
.............................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 512
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.77 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 1207.49 ms
perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
perplexity: 0.62 seconds per pass - ETA 0.03 minutes
[1]9.7126,[2]11.4535,[3]11.6553,[4]10.3702,
llama_print_timings:        load time =    1116.52 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =    1968.65 ms /  8192 tokens (    0.24 ms per token,  4161.23 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =    3530.12 ms /  8193 tokens

Final estimate: PPL = 10.3702 +/- 0.42431

real	0m4.964s
user	0m4.857s
sys	0m1.075s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_0.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1719238004
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    69.08 MiB
llm_load_tensors:      CUDA0 buffer size =  1454.83 MiB
...........................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 512
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.77 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 1161 ms
perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
perplexity: 0.66 seconds per pass - ETA 0.03 minutes
[1]10.2888,[2]12.0611,[3]12.3179,[4]10.9644,
llama_print_timings:        load time =     818.22 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =    2145.73 ms /  8192 tokens (    0.26 ms per token,  3817.81 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =    3664.43 ms /  8193 tokens

Final estimate: PPL = 10.9644 +/- 0.44786

real	0m4.790s
user	0m4.767s
sys	0m0.994s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_1.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1719238009
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 3
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_1:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_1
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.64 GiB (5.08 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    76.76 MiB
llm_load_tensors:      CUDA0 buffer size =  1604.83 MiB
............................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 512
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.77 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 1200.72 ms
perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
perplexity: 0.67 seconds per pass - ETA 0.03 minutes
[1]9.9584,[2]11.8211,[3]12.1418,[4]10.8426,
llama_print_timings:        load time =     857.75 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =    2160.78 ms /  8192 tokens (    0.26 ms per token,  3791.22 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =    3724.90 ms /  8193 tokens

Final estimate: PPL = 10.8426 +/- 0.43892

real	0m4.893s
user	0m4.888s
sys	0m0.983s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_0.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1719238014
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 8
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q5_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q5_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.80 GiB (5.56 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    84.43 MiB
llm_load_tensors:      CUDA0 buffer size =  1754.83 MiB
............................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 512
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.77 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 1187.22 ms
perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
perplexity: 0.62 seconds per pass - ETA 0.03 minutes
[1]9.8047,[2]11.5245,[3]11.8234,[4]10.5057,
llama_print_timings:        load time =     911.76 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =    1974.68 ms /  8192 tokens (    0.24 ms per token,  4148.52 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =    3522.55 ms /  8193 tokens

Final estimate: PPL = 10.5057 +/- 0.42912

real	0m4.748s
user	0m4.774s
sys	0m0.982s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_1.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1719238019
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 9
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q5_1:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q5_1
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.95 GiB (6.04 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    92.11 MiB
llm_load_tensors:      CUDA0 buffer size =  1904.83 MiB
.............................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 512
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.77 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 1178.02 ms
perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
perplexity: 0.62 seconds per pass - ETA 0.03 minutes
[1]9.7281,[2]11.5056,[3]11.7212,[4]10.4307,
llama_print_timings:        load time =     927.31 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =    1975.13 ms /  8192 tokens (    0.24 ms per token,  4147.58 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =    3512.78 ms /  8193 tokens

Final estimate: PPL = 10.4307 +/- 0.42590

real	0m4.759s
user	0m4.771s
sys	0m0.964s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q2_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1719238024
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 10
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q2_K:   65 tensors
llama_model_loader: - type q3_K:   64 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q2_K - Medium
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.01 GiB (3.13 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    40.30 MiB
llm_load_tensors:      CUDA0 buffer size =   993.89 MiB
......................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 512
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.77 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 1201.25 ms
perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
perplexity: 0.66 seconds per pass - ETA 0.03 minutes
[1]55.7748,[2]67.1016,[3]74.2544,[4]74.3759,
llama_print_timings:        load time =     712.53 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =    2100.04 ms /  8192 tokens (    0.26 ms per token,  3900.88 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =    3657.52 ms /  8193 tokens

Final estimate: PPL = 74.3759 +/- 3.84923

real	0m4.676s
user	0m4.701s
sys	0m0.959s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q3_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1719238028
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 12
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q3_K:   33 tensors
llama_model_loader: - type q4_K:   94 tensors
llama_model_loader: - type q5_K:    2 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q3_K - Medium
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.37 GiB (4.25 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    52.77 MiB
llm_load_tensors:      CUDA0 buffer size =  1354.83 MiB
..........................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 512
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.77 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 1176.87 ms
perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
perplexity: 0.67 seconds per pass - ETA 0.03 minutes
[1]10.3341,[2]12.1669,[3]12.5532,[4]11.2762,
llama_print_timings:        load time =     804.17 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =    2155.16 ms /  8192 tokens (    0.26 ms per token,  3801.12 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =    3696.19 ms /  8193 tokens

Final estimate: PPL = 11.2762 +/- 0.46074

real	0m4.810s
user	0m4.879s
sys	0m0.958s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1719238033
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 15
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_K:   81 tensors
llama_model_loader: - type q5_K:   32 tensors
llama_model_loader: - type q6_K:   17 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_K - Medium
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.66 GiB (5.14 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    69.08 MiB
llm_load_tensors:      CUDA0 buffer size =  1632.95 MiB
...................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 512
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.77 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 1188.87 ms
perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
perplexity: 0.66 seconds per pass - ETA 0.03 minutes
[1]9.8572,[2]11.6301,[3]11.8902,[4]10.6112,
llama_print_timings:        load time =     867.56 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =    2118.93 ms /  8192 tokens (    0.26 ms per token,  3866.10 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =    3665.25 ms /  8193 tokens

Final estimate: PPL = 10.6112 +/- 0.43489

real	0m4.848s
user	0m4.858s
sys	0m0.979s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1719238038
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 17
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q5_K:   81 tensors
llama_model_loader: - type q6_K:   49 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q5_K - Medium
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.93 GiB (5.96 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    84.43 MiB
llm_load_tensors:      CUDA0 buffer size =  1887.64 MiB
............................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 512
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.77 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 1171.39 ms
perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
perplexity: 0.64 seconds per pass - ETA 0.03 minutes
[1]9.7086,[2]11.4170,[3]11.6331,[4]10.3824,
llama_print_timings:        load time =     935.80 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =    2062.27 ms /  8192 tokens (    0.25 ms per token,  3972.31 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =    3601.05 ms /  8193 tokens

Final estimate: PPL = 10.3824 +/- 0.42466

real	0m4.846s
user	0m4.807s
sys	0m1.039s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q6_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: seed  = 1719238043
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 18
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q6_K:  130 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q6_K
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 2.12 GiB (6.57 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =   100.74 MiB
llm_load_tensors:      CUDA0 buffer size =  2073.58 MiB
.............................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 512
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.77 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 1225.55 ms
perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
perplexity: 0.65 seconds per pass - ETA 0.03 minutes
[1]9.6946,[2]11.4591,[3]11.6563,[4]10.3851,
llama_print_timings:        load time =     973.42 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =    2082.84 ms /  8192 tokens (    0.25 ms per token,  3933.10 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =    3667.61 ms /  8193 tokens

Final estimate: PPL = 10.3851 +/- 0.42530

real	0m4.973s
user	0m4.896s
sys	0m1.056s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-imatrix.log
+ ./bin/llama-imatrix --model ../models-mnt/pythia/2.8B/ggml-model-f16.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
llama_model_loader: loaded meta data with 19 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = all F32 (guessed)
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 5.17 GiB (16.01 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =   245.62 MiB
llm_load_tensors:      CUDA0 buffer size =  5049.71 MiB
.............................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 512
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2

system_info: n_threads = 1 / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 0 | 
compute_imatrix: tokenizing the input ..
compute_imatrix: tokenization took 1167.02 ms
compute_imatrix: computing over 4 chunks with batch_size 512
compute_imatrix: 3.24 seconds per pass - ETA 0.20 minutes
[1]9.6667,[2]11.4286,
save_imatrix: stored collected data after 10 chunks in imatrix.dat
[3]11.6311,[4]10.3475,
save_imatrix: stored collected data after 16 chunks in imatrix.dat

llama_print_timings:        load time =    3441.08 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   11624.27 ms /  8192 tokens (    1.42 ms per token,   704.73 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   15645.80 ms /  8193 tokens

Final estimate: PPL = 10.3475 +/- 0.42292

real	0m15.963s
user	0m15.089s
sys	0m1.856s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-save-load-state.log
+ ./bin/llama-save-load-state -ngl 10 --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 10 repeating layers to GPU
llm_load_tensors: offloaded 10/33 layers to GPU
llm_load_tensors:        CPU buffer size =  1523.91 MiB
llm_load_tensors:      CUDA0 buffer size =   423.14 MiB
...........................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:  CUDA_Host KV buffer size =   440.00 MiB
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 313
main : serialized state into 1518773 out of a maximum of 1083285560 bytes
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:  CUDA_Host KV buffer size =   440.00 MiB
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 313
main : deserialized state from 1518773 out of a maximum of 1083285560 bytes
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:  CUDA_Host KV buffer size =   440.00 MiB
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 313
main : deserialized state from 1518773 out of a maximum of 1083285560 bytes
main : seq 0 copied, 1311520 bytes
main : kv cache cleared
main : seq 1 restored, 1311520 bytes

main : success

first run: The quick brown fox jumped over the lazy dog life passes
sso swiftly that the latter stood in


second run: The quick brown fox jumped over the lazy dog life passes
sso swiftly that the latter stood in


single seq run: The quick brown fox jumped over the lazy dog life passes
sso swiftly that the latter stood in

real	0m7.139s
user	0m16.329s
sys	0m2.523s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-save-load-state.log
+ ./bin/llama-save-load-state -fa -ngl 10 --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 10 repeating layers to GPU
llm_load_tensors: offloaded 10/33 layers to GPU
llm_load_tensors:        CPU buffer size =  1523.91 MiB
llm_load_tensors:      CUDA0 buffer size =   423.14 MiB
...........................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 1
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:  CUDA_Host KV buffer size =   440.00 MiB
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 313
main : serialized state into 1518751 out of a maximum of 1083285560 bytes
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 1
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:  CUDA_Host KV buffer size =   440.00 MiB
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 313
main : deserialized state from 1518751 out of a maximum of 1083285560 bytes
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 1
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:  CUDA_Host KV buffer size =   440.00 MiB
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 313
main : deserialized state from 1518751 out of a maximum of 1083285560 bytes
main : seq 0 copied, 1311520 bytes
main : kv cache cleared
main : seq 1 restored, 1311520 bytes

main : success

first run: The quick brown fox jumped trees," lisped ouvri boum." "gold snikked


second run: The quick brown fox jumped trees," lisped ouvri boum." "gold snikked


single seq run: The quick brown fox jumped trees," lisped ouvri boum." "gold snikked

real	0m5.986s
user	0m14.806s
sys	0m2.562s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-save-load-state.log
+ ./bin/llama-save-load-state -ngl 99 --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    69.08 MiB
llm_load_tensors:      CUDA0 buffer size =  1454.83 MiB
...........................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2
main : serialized state into 1518779 out of a maximum of 1083285560 bytes
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2
main : deserialized state from 1518779 out of a maximum of 1083285560 bytes
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2
main : deserialized state from 1518779 out of a maximum of 1083285560 bytes
main : seq 0 copied, 1311520 bytes
main : kv cache cleared
main : seq 1 restored, 1311520 bytes

main : success

first run: The quick brown fox jumped over the lazy dog and not only jumped over the lazy dog but over the


second run: The quick brown fox jumped over the lazy dog and not only jumped over the lazy dog but over the


single seq run: The quick brown fox jumped over the lazy dog and not only jumped over the lazy dog but over the

real	0m5.754s
user	0m4.195s
sys	0m1.556s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-save-load-state.log
+ ./bin/llama-save-load-state -fa -ngl 99 --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf
main: build = 3219 (bddb4931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
llama_model_loader: loaded meta data with 20 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.name str              = 2.8B
llama_model_loader: - kv   2:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   3:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   4:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   5:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   6:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv   7:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv   8:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv   9:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  11:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  13:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  14:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - kv  19:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 52
llm_load_vocab: token to piece cache size = 0.2987 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:   no
ggml_cuda_init: CUDA_USE_TENSOR_CORES: yes
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    69.08 MiB
llm_load_tensors:      CUDA0 buffer size =  1454.83 MiB
...........................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 1
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   103.25 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 2
main : serialized state into 1518785 out of a maximum of 1083285560 bytes
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 1
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   103.25 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 2
main : deserialized state from 1518785 out of a maximum of 1083285560 bytes
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 1
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   103.25 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 2
main : deserialized state from 1518785 out of a maximum of 1083285560 bytes
main : seq 0 copied, 1311520 bytes
main : kv cache cleared
main : seq 1 restored, 1311520 bytes

main : success

first run: The quick brown fox..." "Looks like I'm late." "Haven't you got any sort


second run: The quick brown fox..." "Looks like I'm late." "Haven't you got any sort


single seq run: The quick brown fox..." "Looks like I'm late." "Haven't you got any sort

real	0m2.607s
user	0m1.057s
sys	0m1.548s
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-f16.log
++ grep '^\[1\]'
+ check_ppl f16 '[1]9.6667,[2]11.4286,[3]11.6311,[4]10.3475,'
+ qnt=f16
++ echo '[1]9.6667,[2]11.4286,[3]11.6311,[4]10.3475,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.3475
++ echo '10.3475 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' f16 10.3475
+ return 0
  - f16 @ 10.3475 OK
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q8_0.log
++ grep '^\[1\]'
+ check_ppl q8_0 '[1]9.7126,[2]11.4535,[3]11.6553,[4]10.3702,'
+ qnt=q8_0
++ echo '[1]9.7126,[2]11.4535,[3]11.6553,[4]10.3702,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.3702
++ echo '10.3702 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q8_0 10.3702
+ return 0
  - q8_0 @ 10.3702 OK
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_0.log
++ grep '^\[1\]'
+ check_ppl q4_0 '[1]10.2888,[2]12.0611,[3]12.3179,[4]10.9644,'
+ qnt=q4_0
++ echo '[1]10.2888,[2]12.0611,[3]12.3179,[4]10.9644,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.9644
++ echo '10.9644 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_0 10.9644
+ return 0
  - q4_0 @ 10.9644 OK
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_1.log
++ grep '^\[1\]'
+ check_ppl q4_1 '[1]9.9584,[2]11.8211,[3]12.1418,[4]10.8426,'
+ qnt=q4_1
++ echo '[1]9.9584,[2]11.8211,[3]12.1418,[4]10.8426,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.8426
++ echo '10.8426 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_1 10.8426
+ return 0
  - q4_1 @ 10.8426 OK
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_0.log
++ grep '^\[1\]'
+ check_ppl q5_0 '[1]9.8047,[2]11.5245,[3]11.8234,[4]10.5057,'
+ qnt=q5_0
++ echo '[1]9.8047,[2]11.5245,[3]11.8234,[4]10.5057,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.5057
++ echo '10.5057 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_0 10.5057
+ return 0
  - q5_0 @ 10.5057 OK
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_1.log
++ grep '^\[1\]'
+ check_ppl q5_1 '[1]9.7281,[2]11.5056,[3]11.7212,[4]10.4307,'
+ qnt=q5_1
++ echo '[1]9.7281,[2]11.5056,[3]11.7212,[4]10.4307,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.4307
++ echo '10.4307 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_1 10.4307
+ return 0
  - q5_1 @ 10.4307 OK
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q3_k.log
++ grep '^\[1\]'
+ check_ppl q3_k '[1]10.3341,[2]12.1669,[3]12.5532,[4]11.2762,'
+ qnt=q3_k
++ echo '[1]10.3341,[2]12.1669,[3]12.5532,[4]11.2762,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=11.2762
++ echo '11.2762 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q3_k 11.2762
+ return 0
  - q3_k @ 11.2762 OK
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_k.log
++ grep '^\[1\]'
+ check_ppl q4_k '[1]9.8572,[2]11.6301,[3]11.8902,[4]10.6112,'
+ qnt=q4_k
++ echo '[1]9.8572,[2]11.6301,[3]11.8902,[4]10.6112,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.6112
++ echo '10.6112 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_k 10.6112
+ return 0
  - q4_k @ 10.6112 OK
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_k.log
++ grep '^\[1\]'
+ check_ppl q5_k '[1]9.7086,[2]11.4170,[3]11.6331,[4]10.3824,'
+ qnt=q5_k
++ echo '[1]9.7086,[2]11.4170,[3]11.6331,[4]10.3824,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.3824
++ echo '10.3824 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_k 10.3824
+ return 0
  - q5_k @ 10.3824 OK
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q6_k.log
++ grep '^\[1\]'
+ check_ppl q6_k '[1]9.6946,[2]11.4591,[3]11.6563,[4]10.3851,'
+ qnt=q6_k
++ echo '[1]9.6946,[2]11.4591,[3]11.6563,[4]10.3851,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.3851
++ echo '10.3851 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q6_k 10.3851
+ return 0
  - q6_k @ 10.3851 OK
+ cat /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/pythia_2_8b-imatrix.log
+ grep Final
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_with_model_debug
+ cd /home/ggml/work/llama.cpp
+ local model
+ tee /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/ctest_with_model_debug.log
++ gg_get_model
++ local gguf_0=/mnt/llama.cpp/models/pythia/1.4B/ggml-model-f16.gguf
++ local gguf_1=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
++ local gguf_2=/mnt/llama.cpp/models/open-llama/7B-v2/ggml-model-f16.gguf
++ [[ -s /mnt/llama.cpp/models/pythia/1.4B/ggml-model-f16.gguf ]]
++ [[ -s /mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf ]]
++ echo -n /mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ model=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ cd build-ci-debug
+ set -e
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/ctest_with_model_debug-ctest.log
+ LLAMACPP_TEST_MODELFILE=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ time ctest --output-on-failure -L model
Test project /home/ggml/work/llama.cpp/build-ci-debug
    Start 22: test-model-load-cancel
1/2 Test #22: test-model-load-cancel ...........   Passed    4.88 sec
    Start 23: test-autorelease
2/2 Test #23: test-autorelease .................   Passed    1.67 sec

100% tests passed, 0 tests failed out of 2

Label Time Summary:
model    =   6.55 sec*proc (2 tests)

Total Test time (real) =   6.55 sec
1.18user 5.39system 0:06.58elapsed 99%CPU (0avgtext+0avgdata 5876376maxresident)k
0inputs+48outputs (0major+1515043minor)pagefaults 0swaps
+ set +e
+ cd ..
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_with_model_release
+ cd /home/ggml/work/llama.cpp
+ local model
+ tee /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/ctest_with_model_release.log
++ gg_get_model
++ local gguf_0=/mnt/llama.cpp/models/pythia/1.4B/ggml-model-f16.gguf
++ local gguf_1=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
++ local gguf_2=/mnt/llama.cpp/models/open-llama/7B-v2/ggml-model-f16.gguf
++ [[ -s /mnt/llama.cpp/models/pythia/1.4B/ggml-model-f16.gguf ]]
++ [[ -s /mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf ]]
++ echo -n /mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ model=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/bd/db49314c58fcf07871fdc392ccfc7490a581ef/ggml-4-x86-cuda-v100/ctest_with_model_release-ctest.log
+ LLAMACPP_TEST_MODELFILE=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ time ctest --output-on-failure -L model
Test project /home/ggml/work/llama.cpp/build-ci-release
    Start 22: test-model-load-cancel
1/2 Test #22: test-model-load-cancel ...........   Passed    4.43 sec
    Start 23: test-autorelease
2/2 Test #23: test-autorelease .................   Passed    1.25 sec

100% tests passed, 0 tests failed out of 2

Label Time Summary:
model    =   5.68 sec*proc (2 tests)

Total Test time (real) =   5.69 sec
0.38user 5.33system 0:05.71elapsed 99%CPU (0avgtext+0avgdata 5871740maxresident)k
0inputs+40outputs (0major+1514875minor)pagefaults 0swaps
+ set +e
+ cd ..
+ cur=0
+ echo 0
+ set +x
