+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.536 I build: 4161 (bd9f7b42) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.240 I main: llama backend init
0.00.001.247 I main: load the model and apply lora adapter, if any
0.00.022.016 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.024 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.032 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.037 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.037 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.041 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.042 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.042 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.043 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.043 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.044 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.048 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.049 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.049 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.050 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.051 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.475 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.836 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.693 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.699 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.699 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.700 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.700 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.702 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.702 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.704 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.705 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.705 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.706 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.707 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.710 I llama_model_loader: - type  f32:   37 tensors
0.00.131.710 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.188 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.560 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.090 I llm_load_vocab: special tokens cache size = 5
0.00.260.907 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.922 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.923 I llm_load_print_meta: arch             = gemma
0.00.260.923 I llm_load_print_meta: vocab type       = SPM
0.00.260.924 I llm_load_print_meta: n_vocab          = 256000
0.00.260.924 I llm_load_print_meta: n_merges         = 0
0.00.260.924 I llm_load_print_meta: vocab_only       = 0
0.00.260.925 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.925 I llm_load_print_meta: n_embd           = 2048
0.00.260.925 I llm_load_print_meta: n_layer          = 18
0.00.260.936 I llm_load_print_meta: n_head           = 8
0.00.260.938 I llm_load_print_meta: n_head_kv        = 1
0.00.260.938 I llm_load_print_meta: n_rot            = 256
0.00.260.938 I llm_load_print_meta: n_swa            = 0
0.00.260.939 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.939 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.940 I llm_load_print_meta: n_gqa            = 8
0.00.260.941 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.942 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.943 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.944 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.945 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.945 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.945 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.946 I llm_load_print_meta: n_ff             = 16384
0.00.260.947 I llm_load_print_meta: n_expert         = 0
0.00.260.947 I llm_load_print_meta: n_expert_used    = 0
0.00.260.947 I llm_load_print_meta: causal attn      = 1
0.00.260.947 I llm_load_print_meta: pooling type     = 0
0.00.260.948 I llm_load_print_meta: rope type        = 2
0.00.260.948 I llm_load_print_meta: rope scaling     = linear
0.00.260.950 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.951 I llm_load_print_meta: freq_scale_train = 1
0.00.260.951 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.952 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.952 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.952 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.952 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.953 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.953 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.953 I llm_load_print_meta: model type       = 2B
0.00.260.954 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.955 I llm_load_print_meta: model params     = 2.51 B
0.00.260.956 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.956 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.956 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.957 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.957 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.957 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.957 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.958 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.959 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.959 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.959 I llm_load_print_meta: max token length = 93
0.00.361.400 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.361.407 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.361.408 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.361.409 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.361.410 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.361.411 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.366.498 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.504 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.504 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.505 I llama_new_context_with_model: n_batch       = 2048
0.00.366.505 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.506 I llama_new_context_with_model: flash_attn    = 0
0.00.366.508 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.508 I llama_new_context_with_model: freq_scale    = 1
0.00.366.509 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.490 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.505 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.593 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.888 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.894 I llama_new_context_with_model: graph nodes  = 601
0.00.381.895 I llama_new_context_with_model: graph splits = 1
0.00.381.897 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.946 I main: llama threadpool init, n_threads = 4
0.00.466.962 I 
0.00.467.040 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.467.043 I 
0.00.467.088 I sampler seed: 3557140036
0.00.467.099 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.101 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.102 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.102 I 
 increasities with an enigmatic smile.

The woman in the photo has a captivating presence and a captivating smile. Her eyes sparkle with intelligence and intrigue, and her

0.02.705.377 I llama_perf_sampler_print:    sampling time =       4.72 ms /    33 runs   (    0.14 ms per token,  6988.56 tokens per second)
0.02.705.380 I llama_perf_context_print:        load time =     465.68 ms
0.02.705.381 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.705.383 I llama_perf_context_print:        eval time =    2219.31 ms /    32 runs   (   69.35 ms per token,    14.42 tokens per second)
0.02.705.383 I llama_perf_context_print:       total time =    2238.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.176 I build: 4161 (bd9f7b42) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.857 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.021.038 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.053 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.060 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.063 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.067 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.069 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.069 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.070 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.071 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.072 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.076 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.076 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.077 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.078 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.078 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.757 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.194 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.119 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.127 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.128 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.129 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.130 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.131 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.132 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.136 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.136 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.137 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.138 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.140 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.143 I llama_model_loader: - type  f32:   37 tensors
0.00.131.146 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.089 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.483 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.966 I llm_load_vocab: special tokens cache size = 5
0.00.277.730 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.747 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.747 I llm_load_print_meta: arch             = gemma
0.00.277.748 I llm_load_print_meta: vocab type       = SPM
0.00.277.748 I llm_load_print_meta: n_vocab          = 256000
0.00.277.749 I llm_load_print_meta: n_merges         = 0
0.00.277.749 I llm_load_print_meta: vocab_only       = 0
0.00.277.750 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.750 I llm_load_print_meta: n_embd           = 2048
0.00.277.750 I llm_load_print_meta: n_layer          = 18
0.00.277.762 I llm_load_print_meta: n_head           = 8
0.00.277.763 I llm_load_print_meta: n_head_kv        = 1
0.00.277.763 I llm_load_print_meta: n_rot            = 256
0.00.277.764 I llm_load_print_meta: n_swa            = 0
0.00.277.764 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.764 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.765 I llm_load_print_meta: n_gqa            = 8
0.00.277.766 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.767 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.767 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.768 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.769 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.769 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.769 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.770 I llm_load_print_meta: n_ff             = 16384
0.00.277.771 I llm_load_print_meta: n_expert         = 0
0.00.277.771 I llm_load_print_meta: n_expert_used    = 0
0.00.277.771 I llm_load_print_meta: causal attn      = 1
0.00.277.772 I llm_load_print_meta: pooling type     = 0
0.00.277.772 I llm_load_print_meta: rope type        = 2
0.00.277.772 I llm_load_print_meta: rope scaling     = linear
0.00.277.774 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.775 I llm_load_print_meta: freq_scale_train = 1
0.00.277.775 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.775 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.776 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.776 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.776 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.776 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.777 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.777 I llm_load_print_meta: model type       = 2B
0.00.277.778 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.779 I llm_load_print_meta: model params     = 2.51 B
0.00.277.780 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.780 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.781 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.781 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.781 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.781 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.782 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.782 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.782 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.783 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.783 I llm_load_print_meta: max token length = 93
0.00.373.157 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.378.177 I llama_new_context_with_model: n_seq_max     = 1
0.00.378.184 I llama_new_context_with_model: n_ctx         = 4096
0.00.378.184 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.378.185 I llama_new_context_with_model: n_batch       = 2048
0.00.378.185 I llama_new_context_with_model: n_ubatch      = 512
0.00.378.186 I llama_new_context_with_model: flash_attn    = 0
0.00.378.188 I llama_new_context_with_model: freq_base     = 10000.0
0.00.378.189 I llama_new_context_with_model: freq_scale    = 1
0.00.378.190 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.392.531 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.392.545 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.392.629 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.802 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.393.809 I llama_new_context_with_model: graph nodes  = 601
0.00.393.810 I llama_new_context_with_model: graph splits = 1
0.00.393.812 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.029 I main: llama threadpool init, n_threads = 4
0.00.474.044 I 
0.00.474.115 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.474.119 I 
0.00.474.162 I sampler seed: 2400972826
0.00.474.173 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.185 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.189 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.189 I 
 increasities to the true nature of the universe and the existence of consciousness.

**A. The Universe as a Conscious Construct**

* Consciousness is not merely

0.02.626.181 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6915.34 tokens per second)
0.02.626.183 I llama_perf_context_print:        load time =     473.15 ms
0.02.626.185 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.626.187 I llama_perf_context_print:        eval time =    2134.02 ms /    32 runs   (   66.69 ms per token,    15.00 tokens per second)
0.02.626.187 I llama_perf_context_print:       total time =    2152.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.546 I build: 4161 (bd9f7b42) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.241 I main: llama backend init
0.00.001.248 I main: load the model and apply lora adapter, if any
0.00.021.980 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.991 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.999 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.004 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.005 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.009 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.012 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.013 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.014 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.014 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.015 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.018 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.019 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.020 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.020 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.021 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.181 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.540 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.724 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.730 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.731 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.731 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.732 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.733 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.733 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.735 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.736 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.737 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.737 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.134.739 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.743 I llama_model_loader: - type  f32:   37 tensors
0.00.134.744 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.263 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.407 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.939 I llm_load_vocab: special tokens cache size = 5
0.00.265.866 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.882 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.883 I llm_load_print_meta: arch             = gemma
0.00.265.883 I llm_load_print_meta: vocab type       = SPM
0.00.265.884 I llm_load_print_meta: n_vocab          = 256000
0.00.265.885 I llm_load_print_meta: n_merges         = 0
0.00.265.885 I llm_load_print_meta: vocab_only       = 0
0.00.265.885 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.885 I llm_load_print_meta: n_embd           = 2048
0.00.265.886 I llm_load_print_meta: n_layer          = 18
0.00.265.897 I llm_load_print_meta: n_head           = 8
0.00.265.897 I llm_load_print_meta: n_head_kv        = 1
0.00.265.898 I llm_load_print_meta: n_rot            = 256
0.00.265.898 I llm_load_print_meta: n_swa            = 0
0.00.265.898 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.899 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.899 I llm_load_print_meta: n_gqa            = 8
0.00.265.900 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.901 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.902 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.904 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.904 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.904 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.905 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.906 I llm_load_print_meta: n_ff             = 16384
0.00.265.906 I llm_load_print_meta: n_expert         = 0
0.00.265.906 I llm_load_print_meta: n_expert_used    = 0
0.00.265.907 I llm_load_print_meta: causal attn      = 1
0.00.265.907 I llm_load_print_meta: pooling type     = 0
0.00.265.907 I llm_load_print_meta: rope type        = 2
0.00.265.908 I llm_load_print_meta: rope scaling     = linear
0.00.265.909 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.909 I llm_load_print_meta: freq_scale_train = 1
0.00.265.910 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.910 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.910 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.911 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.911 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.911 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.912 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.912 I llm_load_print_meta: model type       = 2B
0.00.265.913 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.914 I llm_load_print_meta: model params     = 2.51 B
0.00.265.915 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.915 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.915 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.916 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.916 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.916 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.916 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.917 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.917 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.918 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.918 I llm_load_print_meta: max token length = 93
0.00.339.824 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.339.830 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.339.831 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.339.832 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.339.832 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.339.833 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.345.002 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.009 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.010 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.010 I llama_new_context_with_model: n_batch       = 2048
0.00.345.010 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.011 I llama_new_context_with_model: flash_attn    = 0
0.00.345.013 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.014 I llama_new_context_with_model: freq_scale    = 1
0.00.345.015 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.440 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.456 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.566 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.820 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.827 I llama_new_context_with_model: graph nodes  = 601
0.00.360.827 I llama_new_context_with_model: graph splits = 1
0.00.360.829 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.037 I main: llama threadpool init, n_threads = 4
0.00.447.054 I 
0.00.447.129 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.447.133 I 
0.00.447.176 I sampler seed: 694198261
0.00.447.187 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.198 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.447.202 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.202 I 
 maneuvred.

I am unable to access the specified URL due to the following reasons:

* The server is down.
* The requested resource is

0.02.702.787 I llama_perf_sampler_print:    sampling time =       4.65 ms /    33 runs   (    0.14 ms per token,  7096.77 tokens per second)
0.02.702.790 I llama_perf_context_print:        load time =     445.77 ms
0.02.702.790 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.702.792 I llama_perf_context_print:        eval time =    2237.60 ms /    32 runs   (   69.92 ms per token,    14.30 tokens per second)
0.02.702.793 I llama_perf_context_print:       total time =    2255.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.539 I build: 4161 (bd9f7b42) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.253 I main: llama backend init
0.00.001.260 I main: load the model and apply lora adapter, if any
0.00.022.620 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.629 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.638 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.648 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.652 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.659 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.660 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.661 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.662 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.662 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.663 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.669 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.670 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.670 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.671 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.672 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.039 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.895 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.760 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.766 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.767 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.768 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.769 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.770 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.771 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.775 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.776 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.777 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.778 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.780 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.787 I llama_model_loader: - type  f32:   37 tensors
0.00.132.788 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.798 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.020 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.580 I llm_load_vocab: special tokens cache size = 5
0.00.268.459 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.475 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.476 I llm_load_print_meta: arch             = gemma
0.00.268.476 I llm_load_print_meta: vocab type       = SPM
0.00.268.477 I llm_load_print_meta: n_vocab          = 256000
0.00.268.478 I llm_load_print_meta: n_merges         = 0
0.00.268.478 I llm_load_print_meta: vocab_only       = 0
0.00.268.478 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.479 I llm_load_print_meta: n_embd           = 2048
0.00.268.479 I llm_load_print_meta: n_layer          = 18
0.00.268.489 I llm_load_print_meta: n_head           = 8
0.00.268.490 I llm_load_print_meta: n_head_kv        = 1
0.00.268.491 I llm_load_print_meta: n_rot            = 256
0.00.268.491 I llm_load_print_meta: n_swa            = 0
0.00.268.491 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.492 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.492 I llm_load_print_meta: n_gqa            = 8
0.00.268.493 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.494 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.495 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.497 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.497 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.498 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.498 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.500 I llm_load_print_meta: n_ff             = 16384
0.00.268.500 I llm_load_print_meta: n_expert         = 0
0.00.268.501 I llm_load_print_meta: n_expert_used    = 0
0.00.268.502 I llm_load_print_meta: causal attn      = 1
0.00.268.503 I llm_load_print_meta: pooling type     = 0
0.00.268.504 I llm_load_print_meta: rope type        = 2
0.00.268.507 I llm_load_print_meta: rope scaling     = linear
0.00.268.509 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.510 I llm_load_print_meta: freq_scale_train = 1
0.00.268.510 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.511 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.511 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.512 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.513 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.513 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.514 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.515 I llm_load_print_meta: model type       = 2B
0.00.268.516 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.517 I llm_load_print_meta: model params     = 2.51 B
0.00.268.518 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.518 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.519 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.519 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.524 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.525 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.525 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.526 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.527 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.527 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.528 I llm_load_print_meta: max token length = 93
0.00.339.829 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.339.836 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.344.880 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.887 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.887 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.888 I llama_new_context_with_model: n_batch       = 2048
0.00.344.888 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.889 I llama_new_context_with_model: flash_attn    = 0
0.00.344.891 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.892 I llama_new_context_with_model: freq_scale    = 1
0.00.344.892 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.298 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.311 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.401 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.629 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.636 I llama_new_context_with_model: graph nodes  = 601
0.00.360.636 I llama_new_context_with_model: graph splits = 1
0.00.360.638 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.333 I main: llama threadpool init, n_threads = 4
0.00.449.348 I 
0.00.449.443 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.449.446 I 
0.00.449.494 I sampler seed: 2730893878
0.00.449.506 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.510 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.512 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.513 I 
 increamentalism, and the philosophy of mind.

## The Intersection of Consciousness and Cognition

The relationship between consciousness and cognition is a complex and multifaceted issue that

0.02.851.525 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6476.94 tokens per second)
0.02.851.528 I llama_perf_context_print:        load time =     448.06 ms
0.02.851.529 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.851.531 I llama_perf_context_print:        eval time =    2383.16 ms /    32 runs   (   74.47 ms per token,    13.43 tokens per second)
0.02.851.532 I llama_perf_context_print:       total time =    2402.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.236s
user	0m39.035s
sys	0m9.255s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4161 (bd9f7b42)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40185.46 ms
main:    total time = 40185.46 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.566 I build: 4161 (bd9f7b42) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.264 I main: llama backend init
0.00.001.272 I main: load the model and apply lora adapter, if any
0.00.021.481 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.491 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.501 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.506 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.509 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.513 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.514 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.515 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.515 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.516 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.517 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.520 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.520 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.522 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.522 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.523 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.209 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.886 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.759 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.765 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.766 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.766 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.767 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.768 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.768 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.771 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.771 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.772 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.773 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.774 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.778 I llama_model_loader: - type  f32:   37 tensors
0.00.131.779 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.782 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.080 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.553 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.070 I llm_load_vocab: special tokens cache size = 5
0.00.262.685 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.700 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.701 I llm_load_print_meta: arch             = gemma
0.00.262.701 I llm_load_print_meta: vocab type       = SPM
0.00.262.702 I llm_load_print_meta: n_vocab          = 256000
0.00.262.702 I llm_load_print_meta: n_merges         = 0
0.00.262.703 I llm_load_print_meta: vocab_only       = 0
0.00.262.703 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.703 I llm_load_print_meta: n_embd           = 2048
0.00.262.703 I llm_load_print_meta: n_layer          = 18
0.00.262.714 I llm_load_print_meta: n_head           = 8
0.00.262.715 I llm_load_print_meta: n_head_kv        = 1
0.00.262.716 I llm_load_print_meta: n_rot            = 256
0.00.262.716 I llm_load_print_meta: n_swa            = 0
0.00.262.716 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.716 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.717 I llm_load_print_meta: n_gqa            = 8
0.00.262.718 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.719 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.720 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.721 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.721 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.722 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.722 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.723 I llm_load_print_meta: n_ff             = 16384
0.00.262.723 I llm_load_print_meta: n_expert         = 0
0.00.262.724 I llm_load_print_meta: n_expert_used    = 0
0.00.262.724 I llm_load_print_meta: causal attn      = 1
0.00.262.724 I llm_load_print_meta: pooling type     = 0
0.00.262.725 I llm_load_print_meta: rope type        = 2
0.00.262.725 I llm_load_print_meta: rope scaling     = linear
0.00.262.726 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.727 I llm_load_print_meta: freq_scale_train = 1
0.00.262.727 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.727 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.728 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.728 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.728 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.728 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.729 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.729 I llm_load_print_meta: model type       = 2B
0.00.262.730 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.730 I llm_load_print_meta: model params     = 2.51 B
0.00.262.731 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.731 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.732 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.732 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.732 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.733 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.733 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.733 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.734 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.734 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.735 I llm_load_print_meta: max token length = 93
0.00.322.402 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.322.408 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.322.409 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.322.409 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.322.410 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.322.410 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.327.468 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.475 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.475 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.475 I llama_new_context_with_model: n_batch       = 2048
0.00.327.476 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.476 I llama_new_context_with_model: flash_attn    = 0
0.00.327.478 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.479 I llama_new_context_with_model: freq_scale    = 1
0.00.327.480 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.956 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.970 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.056 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.318 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.324 I llama_new_context_with_model: graph nodes  = 601
0.00.343.324 I llama_new_context_with_model: graph splits = 1
0.00.343.326 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.354 I main: llama threadpool init, n_threads = 4
0.00.418.370 I 
0.00.418.449 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.418.452 I 
0.00.418.502 I sampler seed: 2778999270
0.00.418.515 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.518 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.519 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.519 I 
 encompantly that I am unable to generate a response due to the following reasons:

- Insufficient data or context.
- Technical limitations of the system.


0.01.982.584 I llama_perf_sampler_print:    sampling time =       5.11 ms /    33 runs   (    0.15 ms per token,  6452.87 tokens per second)
0.01.982.587 I llama_perf_context_print:        load time =     417.06 ms
0.01.982.589 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.982.592 I llama_perf_context_print:        eval time =    1545.10 ms /    32 runs   (   48.28 ms per token,    20.71 tokens per second)
0.01.982.593 I llama_perf_context_print:       total time =    1564.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4161 (bd9f7b42)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40171.32 ms
main:    total time = 40171.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.584 I build: 4161 (bd9f7b42) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.268 I main: llama backend init
0.00.001.276 I main: load the model and apply lora adapter, if any
0.00.021.681 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.698 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.705 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.706 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.711 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.712 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.712 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.713 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.713 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.714 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.718 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.719 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.720 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.721 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.721 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.319 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.704 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.555 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.560 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.561 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.562 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.562 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.563 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.564 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.566 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.567 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.570 I llama_model_loader: - type  f32:   37 tensors
0.00.131.571 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.571 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.768 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.813 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.361 I llm_load_vocab: special tokens cache size = 5
0.00.268.196 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.213 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.214 I llm_load_print_meta: arch             = gemma
0.00.268.214 I llm_load_print_meta: vocab type       = SPM
0.00.268.216 I llm_load_print_meta: n_vocab          = 256000
0.00.268.217 I llm_load_print_meta: n_merges         = 0
0.00.268.217 I llm_load_print_meta: vocab_only       = 0
0.00.268.217 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.218 I llm_load_print_meta: n_embd           = 2048
0.00.268.218 I llm_load_print_meta: n_layer          = 18
0.00.268.231 I llm_load_print_meta: n_head           = 8
0.00.268.232 I llm_load_print_meta: n_head_kv        = 1
0.00.268.233 I llm_load_print_meta: n_rot            = 256
0.00.268.234 I llm_load_print_meta: n_swa            = 0
0.00.268.234 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.234 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.235 I llm_load_print_meta: n_gqa            = 8
0.00.268.236 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.237 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.238 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.240 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.240 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.241 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.241 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.242 I llm_load_print_meta: n_ff             = 16384
0.00.268.244 I llm_load_print_meta: n_expert         = 0
0.00.268.244 I llm_load_print_meta: n_expert_used    = 0
0.00.268.245 I llm_load_print_meta: causal attn      = 1
0.00.268.246 I llm_load_print_meta: pooling type     = 0
0.00.268.246 I llm_load_print_meta: rope type        = 2
0.00.268.246 I llm_load_print_meta: rope scaling     = linear
0.00.268.248 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.248 I llm_load_print_meta: freq_scale_train = 1
0.00.268.249 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.249 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.250 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.250 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.250 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.250 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.251 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.251 I llm_load_print_meta: model type       = 2B
0.00.268.252 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.253 I llm_load_print_meta: model params     = 2.51 B
0.00.268.253 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.254 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.258 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.258 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.258 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.259 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.259 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.259 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.260 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.260 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.261 I llm_load_print_meta: max token length = 93
0.00.323.426 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.328.521 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.526 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.526 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.527 I llama_new_context_with_model: n_batch       = 2048
0.00.328.527 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.528 I llama_new_context_with_model: flash_attn    = 0
0.00.328.530 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.531 I llama_new_context_with_model: freq_scale    = 1
0.00.328.532 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.343.061 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.076 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.171 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.407 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.413 I llama_new_context_with_model: graph nodes  = 601
0.00.344.414 I llama_new_context_with_model: graph splits = 1
0.00.344.416 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.578 I main: llama threadpool init, n_threads = 4
0.00.418.594 I 
0.00.418.667 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.418.670 I 
0.00.418.717 I sampler seed: 1928008370
0.00.418.728 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.740 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.744 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.744 I 
 seconded in the answer to my question. I am unable to determine why the response is irrelevant or misleading.

I am requesting clarification on why the response is

0.01.965.788 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6818.18 tokens per second)
0.01.965.791 I llama_perf_context_print:        load time =     417.29 ms
0.01.965.792 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.965.795 I llama_perf_context_print:        eval time =    1528.95 ms /    32 runs   (   47.78 ms per token,    20.93 tokens per second)
0.01.965.796 I llama_perf_context_print:       total time =    1547.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.049s
user	10m23.922s
sys	0m6.823s
